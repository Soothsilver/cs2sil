/*
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */

package viper.silicon.tests

import scala.reflect._
import scala.reflect.runtime.universe._
import org.scalatest.FunSuite

sealed trait T
case class T1(x: Int) extends T
case class T2(y: String) extends T

class TypeTagTest extends FunSuite {
  object typetags {
    def foobar[A <: T : TypeTag](b: Boolean): A = {
      val a: T =
        if (b) T1(1)
        else T2("zwei")

      typeTag[A].tpe match {
        case t if t =:= typeOf[T1] => println(s"$a should be a T1 but is a ${a.getClass.getSimpleName}")
        case t if t =:= typeOf[T1] => println(s"$a should be a T2 but is a ${a.getClass.getSimpleName}")
        case t => println(s"No match: t = $t")
      }

      null.asInstanceOf[A]
    }
  }

  object classtags {
    def foobar[A <: T : ClassTag](b: Boolean): A = {
      val a: T =
        if (b) T1(1)
        else T2("zwei")

      val destClass = classTag[A].runtimeClass

      val dest =
        if (a.getClass == destClass)
          a.asInstanceOf[A]
        else {
          destClass match {
            case c if c == classOf[T1] =>
              println(s"$a should be a T1 but is a ${a.getClass.getSimpleName}")
              T1(a.hashCode())
            case c if c == classOf[T2] =>
              println(s"$a should be a T2 but is a ${a.getClass.getSimpleName}")
              T2(a.getClass.getSimpleName)
            case c =>
              sys.error(s"No match: c = $c")
          }
        }

      dest.asInstanceOf[A]
    }
  }

  test("test") {
    import classtags.foobar

    foobar[T1](true)
    foobar[T1](false)
    foobar[T2](true)
    foobar[T2](false)
  }
}
