(get-info :version)
; (:version "4.4.0")
; Input file is D:\TEMP\tmp1098.tmp
; Started: 2017-05-24 18:47:00
; Silicon.buildVersion: 1.1-SNAPSHOT 0e750e485a3f default 2017/01/04 14:11:46
; ------------------------------------------------------------
; Preamble start
; 
; ; /z3config.smt2
(set-option :print-success true) ; Boogie: false
(set-option :global-decls true) ; Boogie: default
(set-option :auto_config false) ; Usually a good idea
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :smt.phase_selection 0)
(set-option :smt.restart_strategy 0)
(set-option :smt.restart_factor |1.5|)
(set-option :smt.arith.random_initial_value true)
(set-option :smt.case_split 3)
(set-option :smt.delay_units true)
(set-option :smt.delay_units_threshold 16)
(set-option :nnf.sk_hack true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.qi.cost "(+ weight generation)")
(set-option :type_check true)
(set-option :smt.bv.reflect true)
; 
; ; /preamble.smt2
(declare-datatypes () ((
    $Snap ($Snap.unit)
    ($Snap.combine ($Snap.first $Snap) ($Snap.second $Snap)))))
(declare-sort $Ref 0)
(declare-const $Ref.null $Ref)
(define-sort $Perm () Real)
(define-const $Perm.Write $Perm 1.0)
(define-const $Perm.No $Perm 0.0)
(define-fun $Perm.isValidVar ((p $Perm)) Bool
	(<= $Perm.No p))
(define-fun $Perm.isReadVar ((p $Perm) (ub $Perm)) Bool
    (and ($Perm.isValidVar p)
         (not (= p $Perm.No))
         (< p $Perm.Write)))
(define-fun $Perm.min ((p1 $Perm) (p2 $Perm)) Real
    (ite (<= p1 p2) p1 p2))
(define-fun $Math.min ((a Int) (b Int)) Int
    (ite (<= a b) a b))
(define-fun $Math.clip ((a Int)) Int
    (ite (< a 0) 0 a))
(declare-sort $Seq<Int>)
(declare-sort $FVF<$Ref>)
(declare-sort $Set<$Snap>)
(declare-sort $PSF<$Snap>)
; /dafny_axioms/sequences_declarations_dafny.smt2 [Int]
(declare-fun $Seq.length ($Seq<Int>) Int)
(declare-fun $Seq.empty<Int> () $Seq<Int>)
(declare-fun $Seq.singleton (Int) $Seq<Int>)
(declare-fun $Seq.build ($Seq<Int> Int) $Seq<Int>)
(declare-fun $Seq.index ($Seq<Int> Int) Int)
(declare-fun $Seq.append ($Seq<Int> $Seq<Int>) $Seq<Int>)
(declare-fun $Seq.update ($Seq<Int> Int Int) $Seq<Int>)
(declare-fun $Seq.contains ($Seq<Int> Int) Bool)
(declare-fun $Seq.take ($Seq<Int> Int) $Seq<Int>)
(declare-fun $Seq.drop ($Seq<Int> Int) $Seq<Int>)
(declare-fun $Seq.equal ($Seq<Int> $Seq<Int>) Bool)
(declare-fun $Seq.sameuntil ($Seq<Int> $Seq<Int> Int) Bool)
; /dafny_axioms/sequences_int_declarations_dafny.smt2
(declare-fun $Seq.range (Int Int) $Seq<Int>)
; /dafny_axioms/sets_declarations_dafny.smt2 [Snap
(declare-fun $Set.in ($Snap $Set<$Snap>) Bool)
(declare-fun $Set.card ($Set<$Snap>) Int)
(declare-fun $Set.empty<$Snap> () $Set<$Snap>)
(declare-fun $Set.singleton ($Snap) $Set<$Snap>)
(declare-fun $Set.unionone ($Set<$Snap> $Snap) $Set<$Snap>)
(declare-fun $Set.union ($Set<$Snap> $Set<$Snap>) $Set<$Snap>)
(declare-fun $Set.disjoint ($Set<$Snap> $Set<$Snap>) Bool)
(declare-fun $Set.difference ($Set<$Snap> $Set<$Snap>) $Set<$Snap>)
(declare-fun $Set.intersection ($Set<$Snap> $Set<$Snap>) $Set<$Snap>)
(declare-fun $Set.subset ($Set<$Snap> $Set<$Snap>) Bool)
(declare-fun $Set.equal ($Set<$Snap> $Set<$Snap>) Bool)
; Declaring program functions
(declare-fun arrayRead ($Snap $Ref Int) Int)
(declare-fun arrayRead%limited ($Snap $Ref Int) Int)
(declare-fun arrayRead%stateless ($Ref Int) Bool)
; Snapshot variable to be used during function verification
(declare-fun s@$ () $Snap)
; Declaring predicate trigger functions
; /dafny_axioms/sequences_axioms_dafny.smt2 [Int]
(assert (forall ((s $Seq<Int>) ) (! (<= 0 ($Seq.length s))
  :pattern ( ($Seq.length s))
  )))
(assert (= ($Seq.length $Seq.empty<Int>) 0))
(assert (forall ((s $Seq<Int>) ) (! (=> (= ($Seq.length s) 0) (= s $Seq.empty<Int>))
  :pattern ( ($Seq.length s))
  )))
(assert (forall ((t Int) ) (! (= ($Seq.length ($Seq.singleton t)) 1)
  :pattern ( ($Seq.length ($Seq.singleton t)))
  )))
(assert (forall ((s $Seq<Int>) (v Int) ) (! (= ($Seq.length ($Seq.build s v)) (+ 1 ($Seq.length s)))
  :pattern ( ($Seq.length ($Seq.build s v)))
  )))
(assert (forall ((s $Seq<Int>) (i Int) (v Int) ) (! (and
  (=> (= i ($Seq.length s)) (= ($Seq.index ($Seq.build s v) i) v))
  (=> (not (= i ($Seq.length s))) (= ($Seq.index ($Seq.build s v) i) ($Seq.index s i))))
  :pattern ( ($Seq.index ($Seq.build s v) i))
  )))
(assert (forall ((s0 $Seq<Int>) (s1 $Seq<Int>) ) (!
  (implies ; The implication was not in the Dafny version
    (and
      (not (= s0 $Seq.empty<Int>))
      (not (= s1 $Seq.empty<Int>)))
    (=
      ($Seq.length ($Seq.append s0 s1))
      (+ ($Seq.length s0) ($Seq.length s1))))
  :pattern ( ($Seq.length ($Seq.append s0 s1)))
  )))
(assert (forall ((t Int) ) (! (= ($Seq.index ($Seq.singleton t) 0) t)
  :pattern ( ($Seq.index ($Seq.singleton t) 0))
  )))
(assert (forall ((s $Seq<Int>)) (! ; The axiom was not in the Dafny version
  (= ($Seq.append s $Seq.empty<Int>) s)
  :pattern (($Seq.append s $Seq.empty<Int>))
  )))
(assert (forall ((s $Seq<Int>)) (! ; The axiom was not in the Dafny version
  (= ($Seq.append $Seq.empty<Int> s) s)
  :pattern (($Seq.append $Seq.empty<Int> s))
  )))
(assert (forall ((s0 $Seq<Int>) (s1 $Seq<Int>) (n Int) ) (!
  (implies ; The implication was not in the Dafny version
    (and
      (not (= s0 $Seq.empty<Int>))
      (not (= s1 $Seq.empty<Int>)))
    (and
      (=> (< n ($Seq.length s0)) (= ($Seq.index ($Seq.append s0 s1) n) ($Seq.index s0 n)))
      (=> (<= ($Seq.length s0) n) (= ($Seq.index ($Seq.append s0 s1) n) ($Seq.index s1 (- n ($Seq.length s0)))))))
  :pattern ( ($Seq.index ($Seq.append s0 s1) n))
  )))
(assert (forall ((s $Seq<Int>) (i Int) (v Int) ) (! (=> (and
  (<= 0 i)
  (< i ($Seq.length s))) (= ($Seq.length ($Seq.update s i v)) ($Seq.length s)))
  :pattern ( ($Seq.length ($Seq.update s i v)))
  )))
(assert (forall ((s $Seq<Int>) (i Int) (v Int) (n Int) ) (! (=> (and
  (<= 0 n)
  (< n ($Seq.length s))) (and
  (=> (= i n) (= ($Seq.index ($Seq.update s i v) n) v))
  (=> (not (= i n)) (= ($Seq.index ($Seq.update s i v) n) ($Seq.index s n)))))
  :pattern ( ($Seq.index ($Seq.update s i v) n))
  )))
(assert (forall ((s $Seq<Int>) (x Int) ) (!
  (and
    (=>
      ($Seq.contains s x)
      (exists ((i Int) ) (!
        (and
  (<= 0 i)
  (< i ($Seq.length s))
  (= ($Seq.index s i) x))
  :pattern ( ($Seq.index s i))
  )))
    (=>
      (exists ((i Int) ) (!
        (and
  (<= 0 i)
  (< i ($Seq.length s))
  (= ($Seq.index s i) x))
  :pattern ( ($Seq.index s i))
      ))
      ($Seq.contains s x)))
  :pattern ( ($Seq.contains s x))
  )))
(assert (forall ((x Int) ) (! (not ($Seq.contains $Seq.empty<Int> x))
  :pattern ( ($Seq.contains $Seq.empty<Int> x))
  )))
(assert (forall ((s0 $Seq<Int>) (s1 $Seq<Int>) (x Int) ) (! (and
  (=> ($Seq.contains ($Seq.append s0 s1) x) (or
  ($Seq.contains s0 x)
  ($Seq.contains s1 x)))
  (=> (or
  ($Seq.contains s0 x)
  ($Seq.contains s1 x)) ($Seq.contains ($Seq.append s0 s1) x)))
  :pattern ( ($Seq.contains ($Seq.append s0 s1) x))
  )))
(assert (forall ((s $Seq<Int>) (v Int) (x Int) ) (! (and
  (=> ($Seq.contains ($Seq.build s v) x) (or
  (= v x)
  ($Seq.contains s x)))
  (=> (or
  (= v x)
  ($Seq.contains s x)) ($Seq.contains ($Seq.build s v) x)))
  :pattern ( ($Seq.contains ($Seq.build s v) x))
  )))
(assert (forall ((s $Seq<Int>) (n Int) (x Int) ) (!
  (and
    (=>
      ($Seq.contains ($Seq.take s n) x)
      (exists ((i Int) ) (!
        (and
  (<= 0 i)
  (< i n)
  (< i ($Seq.length s))
  (= ($Seq.index s i) x))
  :pattern ( ($Seq.index s i))
  )))
    (=>
      (exists ((i Int) ) (!
        (and
  (<= 0 i)
  (< i n)
  (< i ($Seq.length s))
  (= ($Seq.index s i) x))
  :pattern ( ($Seq.index s i))
      ))
      ($Seq.contains ($Seq.take s n) x)))
  :pattern ( ($Seq.contains ($Seq.take s n) x))
  )))
(assert (forall ((s $Seq<Int>) (n Int) (x Int) ) (!
  (and
    (=>
      ($Seq.contains ($Seq.drop s n) x)
      (exists ((i Int) ) (!
        (and
  (<= 0 n)
  (<= n i)
  (< i ($Seq.length s))
  (= ($Seq.index s i) x))
  :pattern ( ($Seq.index s i))
  )))
    (=>
      (exists ((i Int) ) (!
        (and
  (<= 0 n)
  (<= n i)
  (< i ($Seq.length s))
  (= ($Seq.index s i) x))
  :pattern ( ($Seq.index s i))
      ))
      ($Seq.contains ($Seq.drop s n) x)))
  :pattern ( ($Seq.contains ($Seq.drop s n) x))
  )))
(assert (forall ((s0 $Seq<Int>) (s1 $Seq<Int>) ) (! (and
  (=> ($Seq.equal s0 s1) (and
  (= ($Seq.length s0) ($Seq.length s1))
  (forall ((j Int) ) (! (=> (and
  (<= 0 j)
  (< j ($Seq.length s0))) (= ($Seq.index s0 j) ($Seq.index s1 j)))
  :pattern ( ($Seq.index s0 j))
  :pattern ( ($Seq.index s1 j))
  ))))
  (=> (and
  (= ($Seq.length s0) ($Seq.length s1))
  (forall ((j Int) ) (! (=> (and
  (<= 0 j)
  (< j ($Seq.length s0))) (= ($Seq.index s0 j) ($Seq.index s1 j)))
  :pattern ( ($Seq.index s0 j))
  :pattern ( ($Seq.index s1 j))
  ))) ($Seq.equal s0 s1)))
  :pattern ( ($Seq.equal s0 s1))
  )))
(assert (forall ((a $Seq<Int>) (b $Seq<Int>) ) (! (=> ($Seq.equal a b) (= a b))
  :pattern ( ($Seq.equal a b))
  )))
(assert (forall ((s0 $Seq<Int>) (s1 $Seq<Int>) (n Int) ) (! (and
  (=> ($Seq.sameuntil s0 s1 n) (forall ((j Int) ) (! (=> (and
  (<= 0 j)
  (< j n)) (= ($Seq.index s0 j) ($Seq.index s1 j)))
  :pattern ( ($Seq.index s0 j))
  :pattern ( ($Seq.index s1 j))
  )))
  (=> (forall ((j Int) ) (! (=> (and
  (<= 0 j)
  (< j n)) (= ($Seq.index s0 j) ($Seq.index s1 j)))
  :pattern ( ($Seq.index s0 j))
  :pattern ( ($Seq.index s1 j))
  )) ($Seq.sameuntil s0 s1 n)))
  :pattern ( ($Seq.sameuntil s0 s1 n))
  )))
(assert (forall ((s $Seq<Int>) (n Int) ) (! (=> (<= 0 n) (and
  (=> (<= n ($Seq.length s)) (= ($Seq.length ($Seq.take s n)) n))
  (=> (< ($Seq.length s) n) (= ($Seq.length ($Seq.take s n)) ($Seq.length s)))))
  :pattern ( ($Seq.length ($Seq.take s n)))
  )))
(assert (forall ((s $Seq<Int>) (n Int) (j Int) ) (! (=> (and
  (<= 0 j)
  (< j n)
  (< j ($Seq.length s))) (= ($Seq.index ($Seq.take s n) j) ($Seq.index s j)))
  :pattern ( ($Seq.index ($Seq.take s n) j))
  :pattern (($Seq.index s j) ($Seq.take s n)) ; [XXX] Added 29-10-2015
  )))
(assert (forall ((s $Seq<Int>) (n Int) ) (! (=> (<= 0 n) (and
  (=> (<= n ($Seq.length s)) (= ($Seq.length ($Seq.drop s n)) (- ($Seq.length s) n)))
  (=> (< ($Seq.length s) n) (= ($Seq.length ($Seq.drop s n)) 0))))
  :pattern ( ($Seq.length ($Seq.drop s n)))
  )))
(assert (forall ((s $Seq<Int>) (n Int) (j Int) ) (! (=> (and
  (<= 0 n)
  (<= 0 j)
  (< j (- ($Seq.length s) n))) (= ($Seq.index ($Seq.drop s n) j) ($Seq.index s (+ j n))))
  :pattern ( ($Seq.index ($Seq.drop s n) j))
  )))
(assert (forall ((s $Seq<Int>) (n Int) (k Int) ) (! ; [XXX] Added 29-10-2015
  (=>
    (and
      (<= 0 n)
      (<= n k)
      (< k ($Seq.length s)))
    (=
      ($Seq.index ($Seq.drop s n) (- k n))
      ($Seq.index s k)))
  :pattern (($Seq.index s k) ($Seq.drop s n))
  )))
(assert (forall ((s $Seq<Int>) (i Int) (v Int) (n Int) ) (! (=> (and
  (<= 0 i)
  (< i n)
  (<= n ($Seq.length s))) (= ($Seq.take ($Seq.update s i v) n) ($Seq.update ($Seq.take s n) i v)))
  :pattern ( ($Seq.take ($Seq.update s i v) n))
  )))
(assert (forall ((s $Seq<Int>) (i Int) (v Int) (n Int) ) (! (=> (and
  (<= n i)
  (< i ($Seq.length s))) (= ($Seq.take ($Seq.update s i v) n) ($Seq.take s n)))
  :pattern ( ($Seq.take ($Seq.update s i v) n))
  )))
(assert (forall ((s $Seq<Int>) (i Int) (v Int) (n Int) ) (! (=> (and
  (<= 0 n)
  (<= n i)
  (< i ($Seq.length s))) (= ($Seq.drop ($Seq.update s i v) n) ($Seq.update ($Seq.drop s n) (- i n) v)))
  :pattern ( ($Seq.drop ($Seq.update s i v) n))
  )))
(assert (forall ((s $Seq<Int>) (i Int) (v Int) (n Int) ) (! (=> (and
  (<= 0 i)
  (< i n)
  (< n ($Seq.length s))) (= ($Seq.drop ($Seq.update s i v) n) ($Seq.drop s n)))
  :pattern ( ($Seq.drop ($Seq.update s i v) n))
  )))
(assert (forall ((s $Seq<Int>) (v Int) (n Int) ) (! (=> (and
  (<= 0 n)
  (<= n ($Seq.length s))) (= ($Seq.drop ($Seq.build s v) n) ($Seq.build ($Seq.drop s n) v)))
  :pattern ( ($Seq.drop ($Seq.build s v) n))
  )))
(assert (forall ((x Int) (y Int)) (!
  (iff
    ($Seq.contains ($Seq.singleton x) y)
    (= x y))
  :pattern (($Seq.contains ($Seq.singleton x) y))
  )))
; /dafny_axioms/sequences_int_axioms_dafny.smt2
(assert (forall ((min Int) (max Int) ) (! (and
  (=> (< min max) (= ($Seq.length ($Seq.range min max)) (- max min)))
  (=> (<= max min) (= ($Seq.length ($Seq.range min max)) 0)))
   :pattern ( ($Seq.length ($Seq.range min max)))
  )))
(assert (forall ((min Int) (max Int) (j Int) ) (! (=> (and
  (<= 0 j)
  (< j (- max min))) (= ($Seq.index ($Seq.range min max) j) (+ min j)))
   :pattern ( ($Seq.index ($Seq.range min max) j))
  )))
(assert (forall ((min Int) (max Int) (v Int) ) (! (and
  (=> ($Seq.contains ($Seq.range min max) v) (and
  (<= min v)
  (< v max)))
  (=> (and
  (<= min v)
  (< v max)) ($Seq.contains ($Seq.range min max) v)))
   :pattern ( ($Seq.contains ($Seq.range min max) v))
  )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.$PermTo$Snap ($Perm) $Snap)
(declare-fun $SortWrappers.$SnapTo$Perm ($Snap) $Perm)
(assert (forall ((x $Perm)) (!
    (= x ($SortWrappers.$SnapTo$Perm($SortWrappers.$PermTo$Snap x)))
    :pattern (($SortWrappers.$PermTo$Snap x))
    :qid |$Snap.$Perm|
    )))
(declare-fun $SortWrappers.$RefTo$Snap ($Ref) $Snap)
(declare-fun $SortWrappers.$SnapTo$Ref ($Snap) $Ref)
(assert (forall ((x $Ref)) (!
    (= x ($SortWrappers.$SnapTo$Ref($SortWrappers.$RefTo$Snap x)))
    :pattern (($SortWrappers.$RefTo$Snap x))
    :qid |$Snap.$Ref|
    )))
(declare-fun $SortWrappers.BoolTo$Snap (Bool) $Snap)
(declare-fun $SortWrappers.$SnapToBool ($Snap) Bool)
(assert (forall ((x Bool)) (!
    (= x ($SortWrappers.$SnapToBool($SortWrappers.BoolTo$Snap x)))
    :pattern (($SortWrappers.BoolTo$Snap x))
    :qid |$Snap.Bool|
    )))
(declare-fun $SortWrappers.IntTo$Snap (Int) $Snap)
(declare-fun $SortWrappers.$SnapToInt ($Snap) Int)
(assert (forall ((x Int)) (!
    (= x ($SortWrappers.$SnapToInt($SortWrappers.IntTo$Snap x)))
    :pattern (($SortWrappers.IntTo$Snap x))
    :qid |$Snap.Int|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.$Seq<Int>To$Snap ($Seq<Int>) $Snap)
(declare-fun $SortWrappers.$SnapTo$Seq<Int> ($Snap) $Seq<Int>)
(assert (forall ((x $Seq<Int>)) (!
    (= x ($SortWrappers.$SnapTo$Seq<Int>($SortWrappers.$Seq<Int>To$Snap x)))
    :pattern (($SortWrappers.$Seq<Int>To$Snap x))
    :qid |$Snap.$Seq<Int>|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.$FVF<$Ref>To$Snap ($FVF<$Ref>) $Snap)
(declare-fun $SortWrappers.$SnapTo$FVF<$Ref> ($Snap) $FVF<$Ref>)
(assert (forall ((x $FVF<$Ref>)) (!
    (= x ($SortWrappers.$SnapTo$FVF<$Ref>($SortWrappers.$FVF<$Ref>To$Snap x)))
    :pattern (($SortWrappers.$FVF<$Ref>To$Snap x))
    :qid |$Snap.$FVF<$Ref>|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.$PSF<$Snap>To$Snap ($PSF<$Snap>) $Snap)
(declare-fun $SortWrappers.$SnapTo$PSF<$Snap> ($Snap) $PSF<$Snap>)
(assert (forall ((x $PSF<$Snap>)) (!
    (= x ($SortWrappers.$SnapTo$PSF<$Snap>($SortWrappers.$PSF<$Snap>To$Snap x)))
    :pattern (($SortWrappers.$PSF<$Snap>To$Snap x))
    :qid |$Snap.$PSF<$Snap>|
    )))
; Preamble end
; ------------------------------------------------------------
; ---------- FUNCTION arrayRead----------
(declare-fun array@0 () $Ref)
(declare-fun index@1 () Int)
(declare-fun result@2 () Int)
; ----- Well-definedness of specifications -----
(push) ; 1
(declare-const $k@3 $Perm)
(assert ($Perm.isReadVar $k@3 $Perm.Write))
(assert (<= $Perm.No $k@3))
(assert (implies (< $Perm.No $k@3) (not (= array@0 $Ref.null))))
(assert (= ($Snap.second s@$) $Snap.unit))
; [eval] |array.arrayContents| > index
; [eval] |array.arrayContents|
(set-option :timeout 0)
(push) ; 2
(assert (not (not (= $k@3 $Perm.No))))
(check-sat)
; unsat
(pop) ; 2
; 0,00s
; (get-info :all-statistics)
(assert (not (= $k@3 $Perm.No)))
(assert (> ($Seq.length ($SortWrappers.$SnapTo$Seq<Int> ($Snap.first s@$))) index@1))
(pop) ; 1
(assert (forall ((s@$ $Snap) (array@0 $Ref) (index@1 Int)) (!
  (= (arrayRead%limited s@$ array@0 index@1) (arrayRead s@$ array@0 index@1))
  :pattern ((arrayRead s@$ array@0 index@1))
  )))
(assert (forall ((s@$ $Snap) (array@0 $Ref) (index@1 Int)) (!
  (arrayRead%stateless array@0 index@1)
  :pattern ((arrayRead%limited s@$ array@0 index@1))
  )))
; ---------- FUNCTION arrayRead (verify) ----------
(push) ; 1
(assert (> ($Seq.length ($SortWrappers.$SnapTo$Seq<Int> ($Snap.first s@$))) index@1))
(assert (not (= $k@3 $Perm.No)))
(assert (= ($Snap.second s@$) $Snap.unit))
(assert (implies (< $Perm.No $k@3) (not (= array@0 $Ref.null))))
(assert (<= $Perm.No $k@3))
(assert ($Perm.isReadVar $k@3 $Perm.Write))
; [eval] array.arrayContents[index]
(assert (=
  result@2
  ($Seq.index ($SortWrappers.$SnapTo$Seq<Int> ($Snap.first s@$)) index@1)))
(pop) ; 1
(assert (forall ((s@$ $Snap) (array@0 $Ref) (index@1 Int)) (!
  (let ((result@2 (arrayRead%limited s@$ array@0 index@1))) (implies
    (> ($Seq.length ($SortWrappers.$SnapTo$Seq<Int> ($Snap.first s@$))) index@1)
    (=
      (arrayRead s@$ array@0 index@1)
      ($Seq.index ($SortWrappers.$SnapTo$Seq<Int> ($Snap.first s@$)) index@1))))
  :pattern ((arrayRead s@$ array@0 index@1))
  )))
; ---------- VerifiedTuple_ctor ----------
(declare-const first@4 Int)
(declare-const second@5 Int)
(declare-const this@6 $Ref)
(push) ; 1
(push) ; 2
(declare-const $t@7 $Snap)
(declare-const $t@8 Int)
(declare-const $t@9 Int)
(assert (=
  $t@7
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@8) ($SortWrappers.IntTo$Snap $t@9))))
(assert (not (= this@6 $Ref.null)))
(pop) ; 2
(push) ; 2
; [exec]
; this := VerifiedTuple_init()
(declare-const this@10 $Ref)
(declare-const $t@11 $Snap)
(declare-const $t@12 Int)
(declare-const $t@13 Int)
(assert (=
  $t@11
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@12)
    ($SortWrappers.IntTo$Snap $t@13))))
(assert (not (= this@10 $Ref.null)))
; [exec]
; this.VerifiedTuple_First := first
; [exec]
; this.VerifiedTuple_Second := second
(pop) ; 2
(pop) ; 1
; ---------- VerifiedTuple_Swap ----------
(declare-const this@14 $Ref)
(declare-const temp@15 Int)
(push) ; 1
(declare-const $t@16 $Snap)
(declare-const $t@17 Int)
(declare-const $t@18 Int)
(assert (=
  $t@16
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@17)
    ($SortWrappers.IntTo$Snap $t@18))))
(assert (not (= this@14 $Ref.null)))
(push) ; 2
(declare-const $t@19 $Snap)
(declare-const $t@20 $Snap)
(assert (= $t@19 ($Snap.combine $t@20 $Snap.unit)))
(declare-const $t@21 Int)
(declare-const $t@22 Int)
(assert (=
  $t@20
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@21)
    ($SortWrappers.IntTo$Snap $t@22))))
; [eval] this.VerifiedTuple_First == old(this.VerifiedTuple_Second) && this.VerifiedTuple_Second == old(this.VerifiedTuple_First)
; [eval] this.VerifiedTuple_First == old(this.VerifiedTuple_Second)
; [eval] old(this.VerifiedTuple_Second)
; [eval] this.VerifiedTuple_First == old(this.VerifiedTuple_Second) ==> this.VerifiedTuple_Second == old(this.VerifiedTuple_First)
; [eval] this.VerifiedTuple_First == old(this.VerifiedTuple_Second)
; [eval] old(this.VerifiedTuple_Second)
(push) ; 3
(set-option :timeout 250)
(push) ; 4
(assert (not (not (= $t@21 $t@18))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(push) ; 4
(assert (not (= $t@21 $t@18)))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(push) ; 4
; [then-branch 0] $t@21 == $t@18
(assert (= $t@21 $t@18))
; [eval] this.VerifiedTuple_Second == old(this.VerifiedTuple_First)
; [eval] old(this.VerifiedTuple_First)
(pop) ; 4
(push) ; 4
; [else-branch 0] $t@21 != $t@18
(assert (not (= $t@21 $t@18)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (and (= $t@21 $t@18) (implies (= $t@21 $t@18) (= $t@22 $t@17))))
(pop) ; 2
(push) ; 2
; [exec]
; temp := this.VerifiedTuple_First
; [exec]
; this.VerifiedTuple_First := this.VerifiedTuple_Second
; [exec]
; this.VerifiedTuple_Second := temp
; [eval] this.VerifiedTuple_First == old(this.VerifiedTuple_Second) && this.VerifiedTuple_Second == old(this.VerifiedTuple_First)
; [eval] this.VerifiedTuple_First == old(this.VerifiedTuple_Second)
; [eval] old(this.VerifiedTuple_Second)
; [eval] this.VerifiedTuple_First == old(this.VerifiedTuple_Second) ==> this.VerifiedTuple_Second == old(this.VerifiedTuple_First)
; [eval] this.VerifiedTuple_First == old(this.VerifiedTuple_Second)
; [eval] old(this.VerifiedTuple_Second)
(push) ; 3
(push) ; 4
(assert (not false))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(push) ; 4
; [then-branch 1] True
; [eval] this.VerifiedTuple_Second == old(this.VerifiedTuple_First)
; [eval] old(this.VerifiedTuple_First)
(pop) ; 4
; [dead else-branch 1] False
(pop) ; 3
; Joined path conditions
(pop) ; 2
(pop) ; 1
; ---------- SeqUtils_ArrayToSeq ----------
(declare-const array@23 $Ref)
(declare-const res@24 $Seq<Int>)
(declare-const result2@25 $Seq<Int>)
(declare-const ind@26 Int)
(push) ; 1
(assert (not (= array@23 $Ref.null)))
(declare-const $t@27 $Seq<Int>)
(push) ; 2
(declare-const $t@28 $Snap)
(declare-const $t@29 $Seq<Int>)
(assert (= $t@28 ($Snap.combine ($SortWrappers.$Seq<Int>To$Snap $t@29) $Snap.unit)))
; [eval] |res| == |array.arrayContents|
; [eval] |res|
; [eval] |array.arrayContents|
(assert (= ($Seq.length res@24) ($Seq.length $t@29)))
; [eval] (forall i: Int :: 0 <= i && i < |array.arrayContents| ==> arrayRead(array, i) == res[i])
(declare-const i@30 Int)
(push) ; 3
; [eval] 0 <= i && i < |array.arrayContents| ==> arrayRead(array, i) == res[i]
; [eval] 0 <= i && i < |array.arrayContents|
; [eval] 0 <= i
; [eval] 0 <= i ==> i < |array.arrayContents|
; [eval] 0 <= i
(push) ; 4
(push) ; 5
(assert (not (not (<= 0 i@30))))
(check-sat)
; unknown
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(push) ; 5
(assert (not (<= 0 i@30)))
(check-sat)
; unknown
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(push) ; 5
; [then-branch 2] 0 <= i@30
(assert (<= 0 i@30))
; [eval] i < |array.arrayContents|
; [eval] |array.arrayContents|
(pop) ; 5
(push) ; 5
; [else-branch 2] !0 <= i@30
(assert (not (<= 0 i@30)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(push) ; 4
(push) ; 5
(assert (not (not (and (<= 0 i@30) (implies (<= 0 i@30) (< i@30 ($Seq.length $t@29)))))))
(check-sat)
; unknown
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(push) ; 5
(assert (not (and (<= 0 i@30) (implies (<= 0 i@30) (< i@30 ($Seq.length $t@29))))))
(check-sat)
; unknown
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(push) ; 5
; [then-branch 3] 0 <= i@30 && 0 <= i@30 ==> i@30 < |$t@29|
(assert (and (<= 0 i@30) (implies (<= 0 i@30) (< i@30 ($Seq.length $t@29)))))
; [eval] arrayRead(array, i) == res[i]
; [eval] arrayRead(array, i)
(push) ; 6
(declare-const $k@31 $Perm)
(assert ($Perm.isReadVar $k@31 $Perm.Write))
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@31 $Perm.No) true)))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(assert (< $k@31 $Perm.Write))
; [eval] |array.arrayContents| > i
; [eval] |array.arrayContents|
(push) ; 7
(assert (not (> ($Seq.length $t@29) i@30)))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(assert (> ($Seq.length $t@29) i@30))
(pop) ; 6
; Joined path conditions
(assert (and
  (> ($Seq.length $t@29) i@30)
  (< $k@31 $Perm.Write)
  ($Perm.isReadVar $k@31 $Perm.Write)))
; [eval] res[i]
(pop) ; 5
(push) ; 5
; [else-branch 3] !0 <= i@30 && 0 <= i@30 ==> i@30 < |$t@29|
(assert (not (and (<= 0 i@30) (implies (<= 0 i@30) (< i@30 ($Seq.length $t@29))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (implies
  (and (<= 0 i@30) (implies (<= 0 i@30) (< i@30 ($Seq.length $t@29))))
  (and
    (and
      (> ($Seq.length $t@29) i@30)
      (< $k@31 $Perm.Write)
      ($Perm.isReadVar $k@31 $Perm.Write))
    (and (<= 0 i@30) (implies (<= 0 i@30) (< i@30 ($Seq.length $t@29)))))))
; Joined path conditions
(declare-const s@32 $Snap)
(pop) ; 3
; Nested auxiliary terms
(assert (forall ((i@30 Int)) (!
  (implies
    (and (<= 0 i@30) (implies (<= 0 i@30) (< i@30 ($Seq.length $t@29))))
    (and
      (and
        (> ($Seq.length $t@29) i@30)
        (< $k@31 $Perm.Write)
        ($Perm.isReadVar $k@31 $Perm.Write))
      (and (<= 0 i@30) (implies (<= 0 i@30) (< i@30 ($Seq.length $t@29))))))
  :pattern (($Seq.index res@24 i@30))
  :qid |prog.l22-aux|)))
(assert (forall ((i@30 Int) (s@32 $Snap)) (!
  (implies
    (and (<= 0 i@30) (implies (<= 0 i@30) (< i@30 ($Seq.length $t@29))))
    (and
      (and
        (> ($Seq.length $t@29) i@30)
        (< $k@31 $Perm.Write)
        ($Perm.isReadVar $k@31 $Perm.Write))
      (and (<= 0 i@30) (implies (<= 0 i@30) (< i@30 ($Seq.length $t@29))))))
  :pattern ((arrayRead%limited s@32 array@23 i@30))
  :qid |prog.l22-aux|)))
(assert (and
  (forall ((i@30 Int)) (!
    (implies
      (and (<= 0 i@30) (implies (<= 0 i@30) (< i@30 ($Seq.length $t@29))))
      (=
        (arrayRead ($Snap.combine
          ($SortWrappers.$Seq<Int>To$Snap $t@29)
          $Snap.unit) array@23 i@30)
        ($Seq.index res@24 i@30)))
    :pattern ((arrayRead%limited ($Snap.combine
      ($SortWrappers.$Seq<Int>To$Snap $t@29)
      $Snap.unit) array@23 i@30))
    :qid |prog.l22|))
  (forall ((i@30 Int)) (!
    (implies
      (and (<= 0 i@30) (implies (<= 0 i@30) (< i@30 ($Seq.length $t@29))))
      (=
        (arrayRead ($Snap.combine
          ($SortWrappers.$Seq<Int>To$Snap $t@29)
          $Snap.unit) array@23 i@30)
        ($Seq.index res@24 i@30)))
    :pattern (($Seq.index res@24 i@30))
    :qid |prog.l22|))))
(pop) ; 2
(push) ; 2
; [eval] |array.arrayContents| == 0
; [eval] |array.arrayContents|
(set-option :timeout 250)
(push) ; 3
(assert (not (not (= ($Seq.length $t@27) 0))))
(check-sat)
; unknown
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(push) ; 3
(assert (not (= ($Seq.length $t@27) 0)))
(check-sat)
; unknown
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(push) ; 3
; [then-branch 4] |$t@27| == 0
(assert (= ($Seq.length $t@27) 0))
; [exec]
; res := Seq[Int]()
; [eval] Seq[Int]()
; [exec]
; label end
; [eval] |res| == |array.arrayContents|
; [eval] |res|
; [eval] |array.arrayContents|
(set-option :timeout 0)
(push) ; 4
(assert (not (= ($Seq.length $Seq.empty<Int>) ($Seq.length $t@27))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(assert (= ($Seq.length $Seq.empty<Int>) ($Seq.length $t@27)))
; [eval] (forall i: Int :: 0 <= i && i < |array.arrayContents| ==> arrayRead(array, i) == res[i])
(declare-const i@33 Int)
(push) ; 4
; [eval] 0 <= i && i < |array.arrayContents| ==> arrayRead(array, i) == res[i]
; [eval] 0 <= i && i < |array.arrayContents|
; [eval] 0 <= i
; [eval] 0 <= i ==> i < |array.arrayContents|
; [eval] 0 <= i
(push) ; 5
(set-option :timeout 250)
(push) ; 6
(assert (not (not (<= 0 i@33))))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(push) ; 6
(assert (not (<= 0 i@33)))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(push) ; 6
; [then-branch 5] 0 <= i@33
(assert (<= 0 i@33))
; [eval] i < |array.arrayContents|
; [eval] |array.arrayContents|
(pop) ; 6
(push) ; 6
; [else-branch 5] !0 <= i@33
(assert (not (<= 0 i@33)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(push) ; 5
(push) ; 6
(assert (not (not (and (<= 0 i@33) (implies (<= 0 i@33) (< i@33 ($Seq.length $t@27)))))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; [dead then-branch 6] 0 <= i@33 && 0 <= i@33 ==> i@33 < |$t@27|
(push) ; 6
; [else-branch 6] !0 <= i@33 && 0 <= i@33 ==> i@33 < |$t@27|
(assert (not (and (<= 0 i@33) (implies (<= 0 i@33) (< i@33 ($Seq.length $t@27))))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; [eval] arrayRead(array, i)
(push) ; 5
(declare-const $k@34 $Perm)
(assert ($Perm.isReadVar $k@34 $Perm.Write))
(set-option :timeout 0)
(push) ; 6
(assert (not (or (= $k@34 $Perm.No) true)))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(assert (< $k@34 $Perm.Write))
; [eval] |array.arrayContents| > i
; [eval] |array.arrayContents|
(push) ; 6
(assert (not (> ($Seq.length $t@27) i@33)))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; [eval] |array.arrayContents| > i
; [eval] |array.arrayContents|
(push) ; 6
(assert (not (> ($Seq.length $t@27) i@33)))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(pop) ; 5
; [eval] res[i]
(pop) ; 4
; Nested auxiliary terms
(pop) ; 3
(push) ; 3
; [else-branch 4] |$t@27| != 0
(assert (not (= ($Seq.length $t@27) 0)))
(pop) ; 3
; [eval] !(|array.arrayContents| == 0)
; [eval] |array.arrayContents| == 0
; [eval] |array.arrayContents|
(set-option :timeout 250)
(push) ; 3
(assert (not (= ($Seq.length $t@27) 0)))
(check-sat)
; unknown
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(push) ; 3
(assert (not (not (= ($Seq.length $t@27) 0))))
(check-sat)
; unknown
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(push) ; 3
; [then-branch 7] |$t@27| != 0
(assert (not (= ($Seq.length $t@27) 0)))
; [exec]
; result2 := Seq(arrayRead(array, 0))
; [eval] Seq(arrayRead(array, 0))
; [eval] arrayRead(array, 0)
(push) ; 4
(declare-const $k@35 $Perm)
(assert ($Perm.isReadVar $k@35 $Perm.Write))
(set-option :timeout 0)
(push) ; 5
(assert (not (or (= $k@35 $Perm.No) true)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(assert (< $k@35 $Perm.Write))
; [eval] |array.arrayContents| > 0
; [eval] |array.arrayContents|
(push) ; 5
(assert (not (> ($Seq.length $t@27) 0)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(assert (> ($Seq.length $t@27) 0))
(pop) ; 4
; Joined path conditions
(assert (and
  (> ($Seq.length $t@27) 0)
  (< $k@35 $Perm.Write)
  ($Perm.isReadVar $k@35 $Perm.Write)))
(assert (=
  ($Seq.length
    ($Seq.singleton (arrayRead ($Snap.combine
      ($SortWrappers.$Seq<Int>To$Snap $t@27)
      $Snap.unit) array@23 0)))
  1))
; [exec]
; ind := 1
; loop at tmp4AAD.tmp@32.2
(declare-const ind@36 Int)
(declare-const result2@37 $Seq<Int>)
(push) ; 4
; Loop: Check specs well-definedness
(declare-const $t@38 $Snap)
(declare-const $t@39 $Seq<Int>)
(assert (= $t@38 ($Snap.combine ($SortWrappers.$Seq<Int>To$Snap $t@39) $Snap.unit)))
; [eval] |result2| == ind
; [eval] |result2|
(assert (= ($Seq.length result2@37) ind@36))
; [eval] (forall i2: Int :: 0 <= i2 && i2 < ind ==> arrayRead(array, i2) == result2[i2])
(declare-const i2@40 Int)
(push) ; 5
; [eval] 0 <= i2 && i2 < ind ==> arrayRead(array, i2) == result2[i2]
; [eval] 0 <= i2 && i2 < ind
; [eval] 0 <= i2
; [eval] 0 <= i2 ==> i2 < ind
; [eval] 0 <= i2
(push) ; 6
(set-option :timeout 250)
(push) ; 7
(assert (not (not (<= 0 i2@40))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(push) ; 7
(assert (not (<= 0 i2@40)))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(push) ; 7
; [then-branch 8] 0 <= i2@40
(assert (<= 0 i2@40))
; [eval] i2 < ind
(pop) ; 7
(push) ; 7
; [else-branch 8] !0 <= i2@40
(assert (not (<= 0 i2@40)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
(push) ; 7
(assert (not (not (and (<= 0 i2@40) (implies (<= 0 i2@40) (< i2@40 ind@36))))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(push) ; 7
(assert (not (and (<= 0 i2@40) (implies (<= 0 i2@40) (< i2@40 ind@36)))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(push) ; 7
; [then-branch 9] 0 <= i2@40 && 0 <= i2@40 ==> i2@40 < ind@36
(assert (and (<= 0 i2@40) (implies (<= 0 i2@40) (< i2@40 ind@36))))
; [eval] arrayRead(array, i2) == result2[i2]
; [eval] arrayRead(array, i2)
(push) ; 8
(declare-const $k@41 $Perm)
(assert ($Perm.isReadVar $k@41 $Perm.Write))
(set-option :timeout 0)
(push) ; 9
(assert (not (or (= $k@41 $Perm.No) true)))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(assert (< $k@41 $Perm.Write))
; [eval] |array.arrayContents| > i2
; [eval] |array.arrayContents|
(push) ; 9
(assert (not (> ($Seq.length $t@39) i2@40)))
(check-sat)
; unknown
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
; [eval] |array.arrayContents| > i2
; [eval] |array.arrayContents|
(push) ; 9
(assert (not (> ($Seq.length $t@39) i2@40)))
(check-sat)
; unknown
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(pop) ; 8
(pop) ; 7
(pop) ; 6
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- CEx_ReadValue ----------
(declare-const d@42 $Ref)
(declare-const res@43 Int)
(push) ; 1
(declare-const $k@44 $Perm)
(assert ($Perm.isReadVar $k@44 $Perm.Write))
(assert (<= $Perm.No $k@44))
(assert (implies (< $Perm.No $k@44) (not (= d@42 $Ref.null))))
(declare-const $t@45 Int)
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; res := d.DataEx_Value
(push) ; 3
(assert (not (not (= $k@44 $Perm.No))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(assert (not (= $k@44 $Perm.No)))
(pop) ; 2
(pop) ; 1
; ---------- CEx_ReadValueError ----------
(declare-const d2@46 $Ref)
(declare-const res@47 Int)
(push) ; 1
(declare-const $k@48 $Perm)
(assert ($Perm.isReadVar $k@48 $Perm.Write))
(assert (<= $Perm.No $k@48))
(assert (implies (< $Perm.No $k@48) (not (= d2@46 $Ref.null))))
(declare-const $t@49 Int)
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; d2.DataEx_Value := 3
(push) ; 3
(assert (not (<= $Perm.Write $k@48)))
(check-sat)
; unknown
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(assert (<= $k@48 $Perm.Write))
(push) ; 3
(assert (not (<= $Perm.Write $k@48)))
(check-sat)
; unknown
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(pop) ; 2
(pop) ; 1
; ---------- StaticClass_Maximum ----------
(declare-const a@50 Int)
(declare-const b@51 Int)
(declare-const res@52 Int)
(push) ; 1
(push) ; 2
(declare-const $t@53 $Snap)
(assert (= $t@53 $Snap.unit))
; [eval] (a > b ? res == a : res == b)
; [eval] a > b
(push) ; 3
(set-option :timeout 250)
(push) ; 4
(assert (not (not (> a@50 b@51))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(push) ; 4
(assert (not (> a@50 b@51)))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(push) ; 4
; [then-branch 10] a@50 > b@51
(assert (> a@50 b@51))
; [eval] res == a
(pop) ; 4
(push) ; 4
; [else-branch 10] !a@50 > b@51
(assert (not (> a@50 b@51)))
; [eval] res == b
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (ite (> a@50 b@51) (= res@52 a@50) (= res@52 b@51)))
(pop) ; 2
(push) ; 2
; [eval] a >= b
(push) ; 3
(assert (not (not (>= a@50 b@51))))
(check-sat)
; unknown
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(push) ; 3
(assert (not (>= a@50 b@51)))
(check-sat)
; unknown
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(push) ; 3
; [then-branch 11] a@50 >= b@51
(assert (>= a@50 b@51))
; [exec]
; res := a
; [exec]
; label end
; [eval] (a > b ? res == a : res == b)
; [eval] a > b
(push) ; 4
(push) ; 5
(assert (not (not (> a@50 b@51))))
(check-sat)
; unknown
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(push) ; 5
(assert (not (> a@50 b@51)))
(check-sat)
; unknown
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(push) ; 5
; [then-branch 12] a@50 > b@51
(assert (> a@50 b@51))
; [eval] res == a
(pop) ; 5
(push) ; 5
; [else-branch 12] !a@50 > b@51
(assert (not (> a@50 b@51)))
; [eval] res == b
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(set-option :timeout 0)
(push) ; 4
(assert (not (ite (> a@50 b@51) true (= a@50 b@51))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(assert (ite (> a@50 b@51) true (= a@50 b@51)))
(pop) ; 3
(push) ; 3
; [else-branch 11] !a@50 >= b@51
(assert (not (>= a@50 b@51)))
(pop) ; 3
; [eval] !(a >= b)
; [eval] a >= b
(set-option :timeout 250)
(push) ; 3
(assert (not (>= a@50 b@51)))
(check-sat)
; unknown
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(push) ; 3
(assert (not (not (>= a@50 b@51))))
(check-sat)
; unknown
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(push) ; 3
; [then-branch 13] !a@50 >= b@51
(assert (not (>= a@50 b@51)))
; [exec]
; res := b
; [exec]
; label end
; [eval] (a > b ? res == a : res == b)
; [eval] a > b
(push) ; 4
(push) ; 5
(assert (not (not (> a@50 b@51))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; [dead then-branch 14] a@50 > b@51
(push) ; 5
; [else-branch 14] !a@50 > b@51
(assert (not (> a@50 b@51)))
; [eval] res == b
(pop) ; 5
(pop) ; 4
; Joined path conditions
(declare-const $deadThen@54 Bool)
(set-option :timeout 0)
(push) ; 4
(assert (not (ite (> a@50 b@51) $deadThen@54 true)))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(assert (ite (> a@50 b@51) $deadThen@54 true))
(pop) ; 3
(push) ; 3
; [else-branch 13] a@50 >= b@51
(assert (>= a@50 b@51))
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- StaticClass_MaximumFailing ----------
(declare-const a2@55 Int)
(declare-const b2@56 Int)
(declare-const res@57 Int)
(push) ; 1
(push) ; 2
(declare-const $t@58 $Snap)
(assert (= $t@58 $Snap.unit))
; [eval] (a2 > b2 ? res == a2 : res == b2)
; [eval] a2 > b2
(push) ; 3
(set-option :timeout 250)
(push) ; 4
(assert (not (not (> a2@55 b2@56))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(push) ; 4
(assert (not (> a2@55 b2@56)))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(push) ; 4
; [then-branch 15] a2@55 > b2@56
(assert (> a2@55 b2@56))
; [eval] res == a2
(pop) ; 4
(push) ; 4
; [else-branch 15] !a2@55 > b2@56
(assert (not (> a2@55 b2@56)))
; [eval] res == b2
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (ite (> a2@55 b2@56) (= res@57 a2@55) (= res@57 b2@56)))
(pop) ; 2
(push) ; 2
; [exec]
; res := a2
; [eval] (a2 > b2 ? res == a2 : res == b2)
; [eval] a2 > b2
(push) ; 3
(push) ; 4
(assert (not (not (> a2@55 b2@56))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(push) ; 4
(assert (not (> a2@55 b2@56)))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(push) ; 4
; [then-branch 16] a2@55 > b2@56
(assert (> a2@55 b2@56))
; [eval] res == a2
(pop) ; 4
(push) ; 4
; [else-branch 16] !a2@55 > b2@56
(assert (not (> a2@55 b2@56)))
; [eval] res == b2
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(set-option :timeout 0)
(push) ; 3
(assert (not (ite (> a2@55 b2@56) true (= a2@55 b2@56))))
(check-sat)
; unknown
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; [eval] (a2 > b2 ? res == a2 : res == b2)
; [eval] a2 > b2
(push) ; 3
(set-option :timeout 250)
(push) ; 4
(assert (not (not (> a2@55 b2@56))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(push) ; 4
(assert (not (> a2@55 b2@56)))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(push) ; 4
; [then-branch 17] a2@55 > b2@56
(assert (> a2@55 b2@56))
; [eval] res == a2
(pop) ; 4
(push) ; 4
; [else-branch 17] !a2@55 > b2@56
(assert (not (> a2@55 b2@56)))
; [eval] res == b2
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(set-option :timeout 0)
(push) ; 3
(assert (not (ite (> a2@55 b2@56) true (= a2@55 b2@56))))
(check-sat)
; unknown
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(pop) ; 2
(pop) ; 1
; ---------- StaticClass_BinarySearch ----------
(declare-const xs@59 $Seq<Int>)
(declare-const key@60 Int)
(declare-const res@61 Int)
(declare-const low@62 Int)
(declare-const high@63 Int)
(declare-const index@64 Int)
(push) ; 1
(declare-const $t@65 $Snap)
(assert (= $t@65 $Snap.unit))
; [eval] (forall i3: Int :: (forall j: Int :: 0 <= i3 && (j < |xs| && i3 < j) ==> xs[i3] < xs[j]))
(declare-const i3@66 Int)
(push) ; 2
; [eval] (forall j: Int :: 0 <= i3 && (j < |xs| && i3 < j) ==> xs[i3] < xs[j])
(declare-const j@67 Int)
(push) ; 3
; [eval] 0 <= i3 && (j < |xs| && i3 < j) ==> xs[i3] < xs[j]
; [eval] 0 <= i3 && (j < |xs| && i3 < j)
; [eval] 0 <= i3
; [eval] 0 <= i3 ==> j < |xs| && i3 < j
; [eval] 0 <= i3
(push) ; 4
(set-option :timeout 250)
(push) ; 5
(assert (not (not (<= 0 i3@66))))
(check-sat)
; unknown
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(push) ; 5
(assert (not (<= 0 i3@66)))
(check-sat)
; unknown
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(push) ; 5
; [then-branch 18] 0 <= i3@66
(assert (<= 0 i3@66))
; [eval] j < |xs| && i3 < j
; [eval] j < |xs|
; [eval] |xs|
; [eval] j < |xs| ==> i3 < j
; [eval] j < |xs|
; [eval] |xs|
(push) ; 6
(push) ; 7
(assert (not (not (< j@67 ($Seq.length xs@59)))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(push) ; 7
(assert (not (< j@67 ($Seq.length xs@59))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(push) ; 7
; [then-branch 19] j@67 < |xs@59|
(assert (< j@67 ($Seq.length xs@59)))
; [eval] i3 < j
(pop) ; 7
(push) ; 7
; [else-branch 19] !j@67 < |xs@59|
(assert (not (< j@67 ($Seq.length xs@59))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(pop) ; 5
(push) ; 5
; [else-branch 18] !0 <= i3@66
(assert (not (<= 0 i3@66)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(push) ; 4
(push) ; 5
(assert (not (not
  (and
    (<= 0 i3@66)
    (implies
      (<= 0 i3@66)
      (and
        (< j@67 ($Seq.length xs@59))
        (implies (< j@67 ($Seq.length xs@59)) (< i3@66 j@67))))))))
(check-sat)
; unknown
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(push) ; 5
(assert (not (and
  (<= 0 i3@66)
  (implies
    (<= 0 i3@66)
    (and
      (< j@67 ($Seq.length xs@59))
      (implies (< j@67 ($Seq.length xs@59)) (< i3@66 j@67)))))))
(check-sat)
; unknown
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(push) ; 5
; [then-branch 20] 0 <= i3@66 && 0 <= i3@66 ==> j@67 < |xs@59| && j@67 < |xs@59| ==> i3@66 < j@67
(assert (and
  (<= 0 i3@66)
  (implies
    (<= 0 i3@66)
    (and
      (< j@67 ($Seq.length xs@59))
      (implies (< j@67 ($Seq.length xs@59)) (< i3@66 j@67))))))
; [eval] xs[i3] < xs[j]
; [eval] xs[i3]
; [eval] xs[j]
(pop) ; 5
(push) ; 5
; [else-branch 20] !0 <= i3@66 && 0 <= i3@66 ==> j@67 < |xs@59| && j@67 < |xs@59| ==> i3@66 < j@67
(assert (not
  (and
    (<= 0 i3@66)
    (implies
      (<= 0 i3@66)
      (and
        (< j@67 ($Seq.length xs@59))
        (implies (< j@67 ($Seq.length xs@59)) (< i3@66 j@67)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(pop) ; 3
; Nested auxiliary terms
(pop) ; 2
; Nested auxiliary terms
(assert (forall ((i3@66 Int)) (!
  (forall ((j@67 Int)) (!
    (implies
      (and
        (<= 0 i3@66)
        (implies
          (<= 0 i3@66)
          (and
            (< j@67 ($Seq.length xs@59))
            (implies (< j@67 ($Seq.length xs@59)) (< i3@66 j@67)))))
      (< ($Seq.index xs@59 i3@66) ($Seq.index xs@59 j@67)))
    :pattern (($Seq.index xs@59 j@67))
    :qid |prog.l73|))
  :pattern (($Seq.index xs@59 i3@66))
  :qid |prog.l73|)))
(push) ; 2
(declare-const $t@68 $Snap)
(assert (= $t@68 ($Snap.combine $Snap.unit $Snap.unit)))
; [eval] -1 <= res && res < |xs|
; [eval] -1 <= res
; [eval] -1
; [eval] -1 <= res ==> res < |xs|
; [eval] -1 <= res
; [eval] -1
(push) ; 3
(push) ; 4
(assert (not (not (<= (- 0 1) res@61))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(push) ; 4
(assert (not (<= (- 0 1) res@61)))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(push) ; 4
; [then-branch 21] -1 <= res@61
(assert (<= (- 0 1) res@61))
; [eval] res < |xs|
; [eval] |xs|
(pop) ; 4
(push) ; 4
; [else-branch 21] !-1 <= res@61
(assert (not (<= (- 0 1) res@61)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (and
  (<= (- 0 1) res@61)
  (implies (<= (- 0 1) res@61) (< res@61 ($Seq.length xs@59)))))
; [eval] 0 <= res ==> xs[res] == key
; [eval] 0 <= res
(push) ; 3
(push) ; 4
(assert (not (not (<= 0 res@61))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(push) ; 4
(assert (not (<= 0 res@61)))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(push) ; 4
; [then-branch 22] 0 <= res@61
(assert (<= 0 res@61))
; [eval] xs[res] == key
; [eval] xs[res]
(pop) ; 4
(push) ; 4
; [else-branch 22] !0 <= res@61
(assert (not (<= 0 res@61)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (implies (<= 0 res@61) (= ($Seq.index xs@59 res@61) key@60)))
; [eval] -1 == res ==> (forall i4: Int :: 0 <= i4 && i4 < |xs| ==> xs[i4] != key)
; [eval] -1 == res
; [eval] -1
(push) ; 3
(push) ; 4
(assert (not (not (= (- 0 1) res@61))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(push) ; 4
(assert (not (= (- 0 1) res@61)))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(push) ; 4
; [then-branch 23] -1 == res@61
(assert (= (- 0 1) res@61))
; [eval] (forall i4: Int :: 0 <= i4 && i4 < |xs| ==> xs[i4] != key)
(declare-const i4@69 Int)
(push) ; 5
; [eval] 0 <= i4 && i4 < |xs| ==> xs[i4] != key
; [eval] 0 <= i4 && i4 < |xs|
; [eval] 0 <= i4
; [eval] 0 <= i4 ==> i4 < |xs|
; [eval] 0 <= i4
(push) ; 6
(push) ; 7
(assert (not (not (<= 0 i4@69))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(push) ; 7
(assert (not (<= 0 i4@69)))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(push) ; 7
; [then-branch 24] 0 <= i4@69
(assert (<= 0 i4@69))
; [eval] i4 < |xs|
; [eval] |xs|
(pop) ; 7
(push) ; 7
; [else-branch 24] !0 <= i4@69
(assert (not (<= 0 i4@69)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
(push) ; 7
(assert (not (not (and (<= 0 i4@69) (implies (<= 0 i4@69) (< i4@69 ($Seq.length xs@59)))))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(push) ; 7
(assert (not (and (<= 0 i4@69) (implies (<= 0 i4@69) (< i4@69 ($Seq.length xs@59))))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(push) ; 7
; [then-branch 25] 0 <= i4@69 && 0 <= i4@69 ==> i4@69 < |xs@59|
(assert (and (<= 0 i4@69) (implies (<= 0 i4@69) (< i4@69 ($Seq.length xs@59)))))
; [eval] xs[i4] != key
; [eval] xs[i4]
(pop) ; 7
(push) ; 7
; [else-branch 25] !0 <= i4@69 && 0 <= i4@69 ==> i4@69 < |xs@59|
(assert (not (and (<= 0 i4@69) (implies (<= 0 i4@69) (< i4@69 ($Seq.length xs@59))))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(pop) ; 5
; Nested auxiliary terms
(pop) ; 4
(push) ; 4
; [else-branch 23] -1 != res@61
(assert (not (= (- 0 1) res@61)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (implies
  (= (- 0 1) res@61)
  (forall ((i4@69 Int)) (!
    (implies
      (and (<= 0 i4@69) (implies (<= 0 i4@69) (< i4@69 ($Seq.length xs@59))))
      (not (= ($Seq.index xs@59 i4@69) key@60)))
    :pattern (($Seq.index xs@59 i4@69))
    :qid |prog.l76|))))
(pop) ; 2
(push) ; 2
; [exec]
; low := 0
; [exec]
; high := |xs|
; [eval] |xs|
; [exec]
; index := -1
; [eval] -1
; loop at tmp4AAD.tmp@84.2
(declare-const mid@70 Int)
(declare-const low@71 Int)
(declare-const high@72 Int)
(declare-const index@73 Int)
(push) ; 3
; Loop: Check specs well-definedness
(declare-const $t@74 $Snap)
(assert (= $t@74 ($Snap.combine $Snap.unit $Snap.unit)))
; [eval] 0 <= low && (low <= high && high <= |xs|)
; [eval] 0 <= low
; [eval] 0 <= low ==> low <= high && high <= |xs|
; [eval] 0 <= low
(push) ; 4
(push) ; 5
(assert (not (not (<= 0 low@71))))
(check-sat)
; unknown
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(push) ; 5
(assert (not (<= 0 low@71)))
(check-sat)
; unknown
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(push) ; 5
; [then-branch 26] 0 <= low@71
(assert (<= 0 low@71))
; [eval] low <= high && high <= |xs|
; [eval] low <= high
; [eval] low <= high ==> high <= |xs|
; [eval] low <= high
(push) ; 6
(push) ; 7
(assert (not (not (<= low@71 high@72))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(push) ; 7
(assert (not (<= low@71 high@72)))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(push) ; 7
; [then-branch 27] low@71 <= high@72
(assert (<= low@71 high@72))
; [eval] high <= |xs|
; [eval] |xs|
(pop) ; 7
(push) ; 7
; [else-branch 27] !low@71 <= high@72
(assert (not (<= low@71 high@72)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(pop) ; 5
(push) ; 5
; [else-branch 26] !0 <= low@71
(assert (not (<= 0 low@71)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (and
  (<= 0 low@71)
  (implies
    (<= 0 low@71)
    (and
      (<= low@71 high@72)
      (implies (<= low@71 high@72) (<= high@72 ($Seq.length xs@59)))))))
; [eval] index == -1 ==> (forall i5: Int :: 0 <= i5 && (i5 < |xs| && !(low <= i5 && i5 < high)) ==> xs[i5] != key)
; [eval] index == -1
; [eval] -1
(push) ; 4
(push) ; 5
(assert (not (not (= index@73 (- 0 1)))))
(check-sat)
; unknown
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(push) ; 5
(assert (not (= index@73 (- 0 1))))
(check-sat)
; unknown
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(push) ; 5
; [then-branch 28] index@73 == -1
(assert (= index@73 (- 0 1)))
; [eval] (forall i5: Int :: 0 <= i5 && (i5 < |xs| && !(low <= i5 && i5 < high)) ==> xs[i5] != key)
(declare-const i5@75 Int)
(push) ; 6
; [eval] 0 <= i5 && (i5 < |xs| && !(low <= i5 && i5 < high)) ==> xs[i5] != key
; [eval] 0 <= i5 && (i5 < |xs| && !(low <= i5 && i5 < high))
; [eval] 0 <= i5
; [eval] 0 <= i5 ==> i5 < |xs| && !(low <= i5 && i5 < high)
; [eval] 0 <= i5
(push) ; 7
(push) ; 8
(assert (not (not (<= 0 i5@75))))
(check-sat)
; unknown
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(push) ; 8
(assert (not (<= 0 i5@75)))
(check-sat)
; unknown
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(push) ; 8
; [then-branch 29] 0 <= i5@75
(assert (<= 0 i5@75))
; [eval] i5 < |xs| && !(low <= i5 && i5 < high)
; [eval] i5 < |xs|
; [eval] |xs|
; [eval] i5 < |xs| ==> !(low <= i5 && i5 < high)
; [eval] i5 < |xs|
; [eval] |xs|
(push) ; 9
(push) ; 10
(assert (not (not (< i5@75 ($Seq.length xs@59)))))
(check-sat)
; unknown
(pop) ; 10
; 0,00s
; (get-info :all-statistics)
(push) ; 10
(assert (not (< i5@75 ($Seq.length xs@59))))
(check-sat)
; unknown
(pop) ; 10
; 0,00s
; (get-info :all-statistics)
(push) ; 10
; [then-branch 30] i5@75 < |xs@59|
(assert (< i5@75 ($Seq.length xs@59)))
; [eval] !(low <= i5 && i5 < high)
; [eval] low <= i5 && i5 < high
; [eval] low <= i5
; [eval] low <= i5 ==> i5 < high
; [eval] low <= i5
(push) ; 11
(push) ; 12
(assert (not (not (<= low@71 i5@75))))
(check-sat)
; unknown
(pop) ; 12
; 0,00s
; (get-info :all-statistics)
(push) ; 12
(assert (not (<= low@71 i5@75)))
(check-sat)
; unknown
(pop) ; 12
; 0,00s
; (get-info :all-statistics)
(push) ; 12
; [then-branch 31] low@71 <= i5@75
(assert (<= low@71 i5@75))
; [eval] i5 < high
(pop) ; 12
(push) ; 12
; [else-branch 31] !low@71 <= i5@75
(assert (not (<= low@71 i5@75)))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(push) ; 10
; [else-branch 30] !i5@75 < |xs@59|
(assert (not (< i5@75 ($Seq.length xs@59))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(push) ; 8
; [else-branch 29] !0 <= i5@75
(assert (not (<= 0 i5@75)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
(push) ; 8
(assert (not (not
  (and
    (<= 0 i5@75)
    (implies
      (<= 0 i5@75)
      (and
        (< i5@75 ($Seq.length xs@59))
        (implies
          (< i5@75 ($Seq.length xs@59))
          (not
            (and (<= low@71 i5@75) (implies (<= low@71 i5@75) (< i5@75 high@72)))))))))))
(check-sat)
; unknown
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(push) ; 8
(assert (not (and
  (<= 0 i5@75)
  (implies
    (<= 0 i5@75)
    (and
      (< i5@75 ($Seq.length xs@59))
      (implies
        (< i5@75 ($Seq.length xs@59))
        (not
          (and (<= low@71 i5@75) (implies (<= low@71 i5@75) (< i5@75 high@72))))))))))
(check-sat)
; unknown
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(push) ; 8
; [then-branch 32] 0 <= i5@75 && 0 <= i5@75 ==> i5@75 < |xs@59| && i5@75 < |xs@59| ==> !low@71 <= i5@75 && low@71 <= i5@75 ==> i5@75 < high@72
(assert (and
  (<= 0 i5@75)
  (implies
    (<= 0 i5@75)
    (and
      (< i5@75 ($Seq.length xs@59))
      (implies
        (< i5@75 ($Seq.length xs@59))
        (not
          (and (<= low@71 i5@75) (implies (<= low@71 i5@75) (< i5@75 high@72)))))))))
; [eval] xs[i5] != key
; [eval] xs[i5]
(pop) ; 8
(push) ; 8
; [else-branch 32] !0 <= i5@75 && 0 <= i5@75 ==> i5@75 < |xs@59| && i5@75 < |xs@59| ==> !low@71 <= i5@75 && low@71 <= i5@75 ==> i5@75 < high@72
(assert (not
  (and
    (<= 0 i5@75)
    (implies
      (<= 0 i5@75)
      (and
        (< i5@75 ($Seq.length xs@59))
        (implies
          (< i5@75 ($Seq.length xs@59))
          (not
            (and (<= low@71 i5@75) (implies (<= low@71 i5@75) (< i5@75 high@72))))))))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
; Nested auxiliary terms
(pop) ; 5
(push) ; 5
; [else-branch 28] index@73 != -1
(assert (not (= index@73 (- 0 1))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (implies
  (= index@73 (- 0 1))
  (forall ((i5@75 Int)) (!
    (implies
      (and
        (<= 0 i5@75)
        (implies
          (<= 0 i5@75)
          (and
            (< i5@75 ($Seq.length xs@59))
            (implies
              (< i5@75 ($Seq.length xs@59))
              (not
                (and
                  (<= low@71 i5@75)
                  (implies (<= low@71 i5@75) (< i5@75 high@72))))))))
      (not (= ($Seq.index xs@59 i5@75) key@60)))
    :pattern (($Seq.index xs@59 i5@75))
    :qid |prog.l86|))))
; [eval] -1 <= index && index < |xs|
; [eval] -1 <= index
; [eval] -1
; [eval] -1 <= index ==> index < |xs|
; [eval] -1 <= index
; [eval] -1
(push) ; 4
(push) ; 5
(assert (not (not (<= (- 0 1) index@73))))
(check-sat)
; unknown
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(push) ; 5
(assert (not (<= (- 0 1) index@73)))
(check-sat)
; unknown
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(push) ; 5
; [then-branch 33] -1 <= index@73
(assert (<= (- 0 1) index@73))
; [eval] index < |xs|
; [eval] |xs|
(pop) ; 5
(push) ; 5
; [else-branch 33] !-1 <= index@73
(assert (not (<= (- 0 1) index@73)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (and
  (<= (- 0 1) index@73)
  (implies (<= (- 0 1) index@73) (< index@73 ($Seq.length xs@59)))))
; [eval] 0 <= index ==> xs[index] == key
; [eval] 0 <= index
(push) ; 4
(push) ; 5
(assert (not (not (<= 0 index@73))))
(check-sat)
; unknown
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(push) ; 5
(assert (not (<= 0 index@73)))
(check-sat)
; unknown
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(push) ; 5
; [then-branch 34] 0 <= index@73
(assert (<= 0 index@73))
; [eval] xs[index] == key
; [eval] xs[index]
(pop) ; 5
(push) ; 5
; [else-branch 34] !0 <= index@73
(assert (not (<= 0 index@73)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (implies (<= 0 index@73) (= ($Seq.index xs@59 index@73) key@60)))
(declare-const $t@76 $Snap)
(assert (= $t@76 $Snap.unit))
; [eval] low < high && index == -1
; [eval] low < high
; [eval] low < high ==> index == -1
; [eval] low < high
(push) ; 4
(push) ; 5
(assert (not (not (< low@71 high@72))))
(check-sat)
; unknown
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(push) ; 5
(assert (not (< low@71 high@72)))
(check-sat)
; unknown
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(push) ; 5
; [then-branch 35] low@71 < high@72
(assert (< low@71 high@72))
; [eval] index == -1
; [eval] -1
(pop) ; 5
(push) ; 5
; [else-branch 35] !low@71 < high@72
(assert (not (< low@71 high@72)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (and (< low@71 high@72) (implies (< low@71 high@72) (= index@73 (- 0 1)))))
(check-sat)
; unknown
(pop) ; 3
(push) ; 3
; Loop: Establish loop invariant
; [eval] 0 <= low && (low <= high && high <= |xs|)
; [eval] 0 <= low
; [eval] 0 <= low ==> low <= high && high <= |xs|
; [eval] 0 <= low
(push) ; 4
(push) ; 5
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(push) ; 5
; [then-branch 36] True
; [eval] low <= high && high <= |xs|
; [eval] low <= high
; [eval] low <= high ==> high <= |xs|
; [eval] low <= high
(push) ; 6
(push) ; 7
(assert (not (not (<= 0 ($Seq.length xs@59)))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(push) ; 7
(assert (not (<= 0 ($Seq.length xs@59))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(push) ; 7
; [then-branch 37] 0 <= |xs@59|
(assert (<= 0 ($Seq.length xs@59)))
; [eval] high <= |xs|
; [eval] |xs|
(pop) ; 7
; [dead else-branch 37] !0 <= |xs@59|
(pop) ; 6
; Joined path conditions
(pop) ; 5
; [dead else-branch 36] False
(pop) ; 4
; Joined path conditions
(set-option :timeout 0)
(push) ; 4
(assert (not (<= 0 ($Seq.length xs@59))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(assert (<= 0 ($Seq.length xs@59)))
; [eval] index == -1 ==> (forall i5: Int :: 0 <= i5 && (i5 < |xs| && !(low <= i5 && i5 < high)) ==> xs[i5] != key)
; [eval] index == -1
; [eval] -1
(push) ; 4
(set-option :timeout 250)
(push) ; 5
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(push) ; 5
; [then-branch 38] True
; [eval] (forall i5: Int :: 0 <= i5 && (i5 < |xs| && !(low <= i5 && i5 < high)) ==> xs[i5] != key)
(declare-const i5@77 Int)
(push) ; 6
; [eval] 0 <= i5 && (i5 < |xs| && !(low <= i5 && i5 < high)) ==> xs[i5] != key
; [eval] 0 <= i5 && (i5 < |xs| && !(low <= i5 && i5 < high))
; [eval] 0 <= i5
; [eval] 0 <= i5 ==> i5 < |xs| && !(low <= i5 && i5 < high)
; [eval] 0 <= i5
(push) ; 7
(push) ; 8
(assert (not (not (<= 0 i5@77))))
(check-sat)
; unknown
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(push) ; 8
(assert (not (<= 0 i5@77)))
(check-sat)
; unknown
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(push) ; 8
; [then-branch 39] 0 <= i5@77
(assert (<= 0 i5@77))
; [eval] i5 < |xs| && !(low <= i5 && i5 < high)
; [eval] i5 < |xs|
; [eval] |xs|
; [eval] i5 < |xs| ==> !(low <= i5 && i5 < high)
; [eval] i5 < |xs|
; [eval] |xs|
(push) ; 9
(push) ; 10
(assert (not (not (< i5@77 ($Seq.length xs@59)))))
(check-sat)
; unknown
(pop) ; 10
; 0,00s
; (get-info :all-statistics)
(push) ; 10
(assert (not (< i5@77 ($Seq.length xs@59))))
(check-sat)
; unknown
(pop) ; 10
; 0,00s
; (get-info :all-statistics)
(push) ; 10
; [then-branch 40] i5@77 < |xs@59|
(assert (< i5@77 ($Seq.length xs@59)))
; [eval] !(low <= i5 && i5 < high)
; [eval] low <= i5 && i5 < high
; [eval] low <= i5
; [eval] low <= i5 ==> i5 < high
; [eval] low <= i5
(push) ; 11
(push) ; 12
(assert (not (not (<= 0 i5@77))))
(check-sat)
; unknown
(pop) ; 12
; 0,00s
; (get-info :all-statistics)
(push) ; 12
; [then-branch 41] 0 <= i5@77
; [eval] i5 < high
(pop) ; 12
; [dead else-branch 41] !0 <= i5@77
(pop) ; 11
; Joined path conditions
(pop) ; 10
(push) ; 10
; [else-branch 40] !i5@77 < |xs@59|
(assert (not (< i5@77 ($Seq.length xs@59))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(push) ; 8
; [else-branch 39] !0 <= i5@77
(assert (not (<= 0 i5@77)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
(push) ; 8
(assert (not (not
  (and
    (<= 0 i5@77)
    (implies
      (<= 0 i5@77)
      (and
        (< i5@77 ($Seq.length xs@59))
        (implies
          (< i5@77 ($Seq.length xs@59))
          (not
            (and
              (<= 0 i5@77)
              (implies (<= 0 i5@77) (< i5@77 ($Seq.length xs@59))))))))))))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
; [dead then-branch 42] 0 <= i5@77 && 0 <= i5@77 ==> i5@77 < |xs@59| && i5@77 < |xs@59| ==> !0 <= i5@77 && 0 <= i5@77 ==> i5@77 < |xs@59|
(push) ; 8
; [else-branch 42] !0 <= i5@77 && 0 <= i5@77 ==> i5@77 < |xs@59| && i5@77 < |xs@59| ==> !0 <= i5@77 && 0 <= i5@77 ==> i5@77 < |xs@59|
(assert (not
  (and
    (<= 0 i5@77)
    (implies
      (<= 0 i5@77)
      (and
        (< i5@77 ($Seq.length xs@59))
        (implies
          (< i5@77 ($Seq.length xs@59))
          (not
            (and
              (<= 0 i5@77)
              (implies (<= 0 i5@77) (< i5@77 ($Seq.length xs@59)))))))))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; [eval] xs[i5]
(pop) ; 6
; Nested auxiliary terms
(pop) ; 5
; [dead else-branch 38] False
(pop) ; 4
; Joined path conditions
; [eval] -1 <= index && index < |xs|
; [eval] -1 <= index
; [eval] -1
; [eval] -1 <= index ==> index < |xs|
; [eval] -1 <= index
; [eval] -1
(push) ; 4
(push) ; 5
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(push) ; 5
; [then-branch 43] True
; [eval] index < |xs|
; [eval] |xs|
(pop) ; 5
; [dead else-branch 43] False
(pop) ; 4
; Joined path conditions
(set-option :timeout 0)
(push) ; 4
(assert (not (< (- 0 1) ($Seq.length xs@59))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(assert (< (- 0 1) ($Seq.length xs@59)))
; [eval] 0 <= index ==> xs[index] == key
; [eval] 0 <= index
(push) ; 4
; [dead then-branch 44] False
(push) ; 5
; [else-branch 44] True
(pop) ; 5
(pop) ; 4
; Joined path conditions
(pop) ; 3
; Loop: Verify loop body
(push) ; 3
(assert (and (< low@71 high@72) (implies (< low@71 high@72) (= index@73 (- 0 1)))))
(assert (= $t@76 $Snap.unit))
(assert (implies (<= 0 index@73) (= ($Seq.index xs@59 index@73) key@60)))
(assert (and
  (<= (- 0 1) index@73)
  (implies (<= (- 0 1) index@73) (< index@73 ($Seq.length xs@59)))))
(assert (implies
  (= index@73 (- 0 1))
  (forall ((i5@75 Int)) (!
    (implies
      (and
        (<= 0 i5@75)
        (implies
          (<= 0 i5@75)
          (and
            (< i5@75 ($Seq.length xs@59))
            (implies
              (< i5@75 ($Seq.length xs@59))
              (not
                (and
                  (<= low@71 i5@75)
                  (implies (<= low@71 i5@75) (< i5@75 high@72))))))))
      (not (= ($Seq.index xs@59 i5@75) key@60)))
    :pattern (($Seq.index xs@59 i5@75))
    :qid |prog.l86|))))
(assert (and
  (<= 0 low@71)
  (implies
    (<= 0 low@71)
    (and
      (<= low@71 high@72)
      (implies (<= low@71 high@72) (<= high@72 ($Seq.length xs@59)))))))
(assert (= $t@74 ($Snap.combine $Snap.unit $Snap.unit)))
; [exec]
; mid := (low + high) \ 2
; [eval] (low + high) \ 2
; [eval] low + high
(push) ; 4
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(declare-const mid@78 Int)
(assert (= mid@78 (div (+ low@71 high@72) 2)))
; [eval] xs[mid] < key
; [eval] xs[mid]
(set-option :timeout 250)
(push) ; 4
(assert (not (not (< ($Seq.index xs@59 mid@78) key@60))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(push) ; 4
(assert (not (< ($Seq.index xs@59 mid@78) key@60)))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(push) ; 4
; [then-branch 45] xs@59[mid@78] < key@60
(assert (< ($Seq.index xs@59 mid@78) key@60))
; [exec]
; low := mid + 1
; [eval] mid + 1
(declare-const low@79 Int)
(assert (= low@79 (+ mid@78 1)))
; [eval] 0 <= low && (low <= high && high <= |xs|)
; [eval] 0 <= low
; [eval] 0 <= low ==> low <= high && high <= |xs|
; [eval] 0 <= low
(push) ; 5
(push) ; 6
(assert (not (not (<= 0 low@79))))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(push) ; 6
(assert (not (<= 0 low@79)))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(push) ; 6
; [then-branch 46] 0 <= low@79
(assert (<= 0 low@79))
; [eval] low <= high && high <= |xs|
; [eval] low <= high
; [eval] low <= high ==> high <= |xs|
; [eval] low <= high
(push) ; 7
(push) ; 8
(assert (not (not (<= low@79 high@72))))
(check-sat)
; unknown
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(push) ; 8
(assert (not (<= low@79 high@72)))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(push) ; 8
; [then-branch 47] low@79 <= high@72
(assert (<= low@79 high@72))
; [eval] high <= |xs|
; [eval] |xs|
(pop) ; 8
; [dead else-branch 47] !low@79 <= high@72
(pop) ; 7
; Joined path conditions
(pop) ; 6
; [dead else-branch 46] !0 <= low@79
(pop) ; 5
; Joined path conditions
(set-option :timeout 0)
(push) ; 5
(assert (not (and
  (<= 0 low@79)
  (implies
    (<= 0 low@79)
    (and
      (<= low@79 high@72)
      (implies (<= low@79 high@72) (<= high@72 ($Seq.length xs@59))))))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(assert (and
  (<= 0 low@79)
  (implies
    (<= 0 low@79)
    (and
      (<= low@79 high@72)
      (implies (<= low@79 high@72) (<= high@72 ($Seq.length xs@59)))))))
; [eval] index == -1 ==> (forall i5: Int :: 0 <= i5 && (i5 < |xs| && !(low <= i5 && i5 < high)) ==> xs[i5] != key)
; [eval] index == -1
; [eval] -1
(push) ; 5
(set-option :timeout 250)
(push) ; 6
(assert (not (not (= index@73 (- 0 1)))))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(push) ; 6
(assert (not (= index@73 (- 0 1))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(push) ; 6
; [then-branch 48] index@73 == -1
(assert (= index@73 (- 0 1)))
; [eval] (forall i5: Int :: 0 <= i5 && (i5 < |xs| && !(low <= i5 && i5 < high)) ==> xs[i5] != key)
(declare-const i5@80 Int)
(push) ; 7
; [eval] 0 <= i5 && (i5 < |xs| && !(low <= i5 && i5 < high)) ==> xs[i5] != key
; [eval] 0 <= i5 && (i5 < |xs| && !(low <= i5 && i5 < high))
; [eval] 0 <= i5
; [eval] 0 <= i5 ==> i5 < |xs| && !(low <= i5 && i5 < high)
; [eval] 0 <= i5
(push) ; 8
(push) ; 9
(assert (not (not (<= 0 i5@80))))
(check-sat)
; unknown
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(push) ; 9
(assert (not (<= 0 i5@80)))
(check-sat)
; unknown
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(push) ; 9
; [then-branch 49] 0 <= i5@80
(assert (<= 0 i5@80))
; [eval] i5 < |xs| && !(low <= i5 && i5 < high)
; [eval] i5 < |xs|
; [eval] |xs|
; [eval] i5 < |xs| ==> !(low <= i5 && i5 < high)
; [eval] i5 < |xs|
; [eval] |xs|
(push) ; 10
(push) ; 11
(assert (not (not (< i5@80 ($Seq.length xs@59)))))
(check-sat)
; unknown
(pop) ; 11
; 0,00s
; (get-info :all-statistics)
(push) ; 11
(assert (not (< i5@80 ($Seq.length xs@59))))
(check-sat)
; unknown
(pop) ; 11
; 0,00s
; (get-info :all-statistics)
(push) ; 11
; [then-branch 50] i5@80 < |xs@59|
(assert (< i5@80 ($Seq.length xs@59)))
; [eval] !(low <= i5 && i5 < high)
; [eval] low <= i5 && i5 < high
; [eval] low <= i5
; [eval] low <= i5 ==> i5 < high
; [eval] low <= i5
(push) ; 12
(push) ; 13
(assert (not (not (<= low@79 i5@80))))
(check-sat)
; unknown
(pop) ; 13
; 0,00s
; (get-info :all-statistics)
(push) ; 13
(assert (not (<= low@79 i5@80)))
(check-sat)
; unknown
(pop) ; 13
; 0,00s
; (get-info :all-statistics)
(push) ; 13
; [then-branch 51] low@79 <= i5@80
(assert (<= low@79 i5@80))
; [eval] i5 < high
(pop) ; 13
(push) ; 13
; [else-branch 51] !low@79 <= i5@80
(assert (not (<= low@79 i5@80)))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(push) ; 11
; [else-branch 50] !i5@80 < |xs@59|
(assert (not (< i5@80 ($Seq.length xs@59))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(push) ; 9
; [else-branch 49] !0 <= i5@80
(assert (not (<= 0 i5@80)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(push) ; 9
(assert (not (not
  (and
    (<= 0 i5@80)
    (implies
      (<= 0 i5@80)
      (and
        (< i5@80 ($Seq.length xs@59))
        (implies
          (< i5@80 ($Seq.length xs@59))
          (not
            (and (<= low@79 i5@80) (implies (<= low@79 i5@80) (< i5@80 high@72)))))))))))
(check-sat)
; unknown
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(push) ; 9
(assert (not (and
  (<= 0 i5@80)
  (implies
    (<= 0 i5@80)
    (and
      (< i5@80 ($Seq.length xs@59))
      (implies
        (< i5@80 ($Seq.length xs@59))
        (not
          (and (<= low@79 i5@80) (implies (<= low@79 i5@80) (< i5@80 high@72))))))))))
(check-sat)
; unknown
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(push) ; 9
; [then-branch 52] 0 <= i5@80 && 0 <= i5@80 ==> i5@80 < |xs@59| && i5@80 < |xs@59| ==> !low@79 <= i5@80 && low@79 <= i5@80 ==> i5@80 < high@72
(assert (and
  (<= 0 i5@80)
  (implies
    (<= 0 i5@80)
    (and
      (< i5@80 ($Seq.length xs@59))
      (implies
        (< i5@80 ($Seq.length xs@59))
        (not
          (and (<= low@79 i5@80) (implies (<= low@79 i5@80) (< i5@80 high@72)))))))))
; [eval] xs[i5] != key
; [eval] xs[i5]
(pop) ; 9
(push) ; 9
; [else-branch 52] !0 <= i5@80 && 0 <= i5@80 ==> i5@80 < |xs@59| && i5@80 < |xs@59| ==> !low@79 <= i5@80 && low@79 <= i5@80 ==> i5@80 < high@72
(assert (not
  (and
    (<= 0 i5@80)
    (implies
      (<= 0 i5@80)
      (and
        (< i5@80 ($Seq.length xs@59))
        (implies
          (< i5@80 ($Seq.length xs@59))
          (not
            (and (<= low@79 i5@80) (implies (<= low@79 i5@80) (< i5@80 high@72))))))))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
; Nested auxiliary terms
(pop) ; 6
; [dead else-branch 48] index@73 != -1
(pop) ; 5
; Joined path conditions
(set-option :timeout 0)
(push) ; 5
(assert (not (implies
  (= index@73 (- 0 1))
  (forall ((i5@80 Int)) (!
    (implies
      (and
        (<= 0 i5@80)
        (implies
          (<= 0 i5@80)
          (and
            (< i5@80 ($Seq.length xs@59))
            (implies
              (< i5@80 ($Seq.length xs@59))
              (not
                (and
                  (<= low@79 i5@80)
                  (implies (<= low@79 i5@80) (< i5@80 high@72))))))))
      (not (= ($Seq.index xs@59 i5@80) key@60)))
    :pattern (($Seq.index xs@59 i5@80))
    :qid |prog.l86|)))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(assert (implies
  (= index@73 (- 0 1))
  (forall ((i5@80 Int)) (!
    (implies
      (and
        (<= 0 i5@80)
        (implies
          (<= 0 i5@80)
          (and
            (< i5@80 ($Seq.length xs@59))
            (implies
              (< i5@80 ($Seq.length xs@59))
              (not
                (and
                  (<= low@79 i5@80)
                  (implies (<= low@79 i5@80) (< i5@80 high@72))))))))
      (not (= ($Seq.index xs@59 i5@80) key@60)))
    :pattern (($Seq.index xs@59 i5@80))
    :qid |prog.l86|))))
; [eval] -1 <= index && index < |xs|
; [eval] -1 <= index
; [eval] -1
; [eval] -1 <= index ==> index < |xs|
; [eval] -1 <= index
; [eval] -1
(push) ; 5
(set-option :timeout 250)
(push) ; 6
(assert (not (not (<= (- 0 1) index@73))))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(push) ; 6
(assert (not (<= (- 0 1) index@73)))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(push) ; 6
; [then-branch 53] -1 <= index@73
(assert (<= (- 0 1) index@73))
; [eval] index < |xs|
; [eval] |xs|
(pop) ; 6
; [dead else-branch 53] !-1 <= index@73
(pop) ; 5
; Joined path conditions
; [eval] 0 <= index ==> xs[index] == key
; [eval] 0 <= index
(push) ; 5
(push) ; 6
(assert (not (not (<= 0 index@73))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; [dead then-branch 54] 0 <= index@73
(push) ; 6
; [else-branch 54] !0 <= index@73
(assert (not (<= 0 index@73)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(pop) ; 4
(push) ; 4
; [else-branch 45] !xs@59[mid@78] < key@60
(assert (not (< ($Seq.index xs@59 mid@78) key@60)))
(pop) ; 4
; [eval] !(xs[mid] < key)
; [eval] xs[mid] < key
; [eval] xs[mid]
(push) ; 4
(assert (not (< ($Seq.index xs@59 mid@78) key@60)))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(push) ; 4
(assert (not (not (< ($Seq.index xs@59 mid@78) key@60))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(push) ; 4
; [then-branch 55] !xs@59[mid@78] < key@60
(assert (not (< ($Seq.index xs@59 mid@78) key@60)))
; [eval] key < xs[mid]
; [eval] xs[mid]
(push) ; 5
(assert (not (not (< key@60 ($Seq.index xs@59 mid@78)))))
(check-sat)
; unknown
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(push) ; 5
(assert (not (< key@60 ($Seq.index xs@59 mid@78))))
(check-sat)
; unknown
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(push) ; 5
; [then-branch 56] key@60 < xs@59[mid@78]
(assert (< key@60 ($Seq.index xs@59 mid@78)))
; [exec]
; high := mid
; [eval] 0 <= low && (low <= high && high <= |xs|)
; [eval] 0 <= low
; [eval] 0 <= low ==> low <= high && high <= |xs|
; [eval] 0 <= low
(push) ; 6
(push) ; 7
(assert (not (not (<= 0 low@71))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(push) ; 7
(assert (not (<= 0 low@71)))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(push) ; 7
; [then-branch 57] 0 <= low@71
(assert (<= 0 low@71))
; [eval] low <= high && high <= |xs|
; [eval] low <= high
; [eval] low <= high ==> high <= |xs|
; [eval] low <= high
(push) ; 8
(push) ; 9
(assert (not (not (<= low@71 mid@78))))
(check-sat)
; unknown
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(push) ; 9
(assert (not (<= low@71 mid@78)))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(push) ; 9
; [then-branch 58] low@71 <= mid@78
(assert (<= low@71 mid@78))
; [eval] high <= |xs|
; [eval] |xs|
(pop) ; 9
; [dead else-branch 58] !low@71 <= mid@78
(pop) ; 8
; Joined path conditions
(pop) ; 7
; [dead else-branch 57] !0 <= low@71
(pop) ; 6
; Joined path conditions
(set-option :timeout 0)
(push) ; 6
(assert (not (and
  (<= 0 low@71)
  (implies
    (<= 0 low@71)
    (and
      (<= low@71 mid@78)
      (implies (<= low@71 mid@78) (<= mid@78 ($Seq.length xs@59))))))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(assert (and
  (<= 0 low@71)
  (implies
    (<= 0 low@71)
    (and
      (<= low@71 mid@78)
      (implies (<= low@71 mid@78) (<= mid@78 ($Seq.length xs@59)))))))
; [eval] index == -1 ==> (forall i5: Int :: 0 <= i5 && (i5 < |xs| && !(low <= i5 && i5 < high)) ==> xs[i5] != key)
; [eval] index == -1
; [eval] -1
(push) ; 6
(set-option :timeout 250)
(push) ; 7
(assert (not (not (= index@73 (- 0 1)))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(push) ; 7
(assert (not (= index@73 (- 0 1))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(push) ; 7
; [then-branch 59] index@73 == -1
(assert (= index@73 (- 0 1)))
; [eval] (forall i5: Int :: 0 <= i5 && (i5 < |xs| && !(low <= i5 && i5 < high)) ==> xs[i5] != key)
(declare-const i5@81 Int)
(push) ; 8
; [eval] 0 <= i5 && (i5 < |xs| && !(low <= i5 && i5 < high)) ==> xs[i5] != key
; [eval] 0 <= i5 && (i5 < |xs| && !(low <= i5 && i5 < high))
; [eval] 0 <= i5
; [eval] 0 <= i5 ==> i5 < |xs| && !(low <= i5 && i5 < high)
; [eval] 0 <= i5
(push) ; 9
(push) ; 10
(assert (not (not (<= 0 i5@81))))
(check-sat)
; unknown
(pop) ; 10
; 0,00s
; (get-info :all-statistics)
(push) ; 10
(assert (not (<= 0 i5@81)))
(check-sat)
; unknown
(pop) ; 10
; 0,00s
; (get-info :all-statistics)
(push) ; 10
; [then-branch 60] 0 <= i5@81
(assert (<= 0 i5@81))
; [eval] i5 < |xs| && !(low <= i5 && i5 < high)
; [eval] i5 < |xs|
; [eval] |xs|
; [eval] i5 < |xs| ==> !(low <= i5 && i5 < high)
; [eval] i5 < |xs|
; [eval] |xs|
(push) ; 11
(push) ; 12
(assert (not (not (< i5@81 ($Seq.length xs@59)))))
(check-sat)
; unknown
(pop) ; 12
; 0,00s
; (get-info :all-statistics)
(push) ; 12
(assert (not (< i5@81 ($Seq.length xs@59))))
(check-sat)
; unknown
(pop) ; 12
; 0,00s
; (get-info :all-statistics)
(push) ; 12
; [then-branch 61] i5@81 < |xs@59|
(assert (< i5@81 ($Seq.length xs@59)))
; [eval] !(low <= i5 && i5 < high)
; [eval] low <= i5 && i5 < high
; [eval] low <= i5
; [eval] low <= i5 ==> i5 < high
; [eval] low <= i5
(push) ; 13
(push) ; 14
(assert (not (not (<= low@71 i5@81))))
(check-sat)
; unknown
(pop) ; 14
; 0,00s
; (get-info :all-statistics)
(push) ; 14
(assert (not (<= low@71 i5@81)))
(check-sat)
; unknown
(pop) ; 14
; 0,00s
; (get-info :all-statistics)
(push) ; 14
; [then-branch 62] low@71 <= i5@81
(assert (<= low@71 i5@81))
; [eval] i5 < high
(pop) ; 14
(push) ; 14
; [else-branch 62] !low@71 <= i5@81
(assert (not (<= low@71 i5@81)))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
(push) ; 12
; [else-branch 61] !i5@81 < |xs@59|
(assert (not (< i5@81 ($Seq.length xs@59))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(push) ; 10
; [else-branch 60] !0 <= i5@81
(assert (not (<= 0 i5@81)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
(push) ; 10
(assert (not (not
  (and
    (<= 0 i5@81)
    (implies
      (<= 0 i5@81)
      (and
        (< i5@81 ($Seq.length xs@59))
        (implies
          (< i5@81 ($Seq.length xs@59))
          (not
            (and (<= low@71 i5@81) (implies (<= low@71 i5@81) (< i5@81 mid@78)))))))))))
(check-sat)
; unknown
(pop) ; 10
; 0,00s
; (get-info :all-statistics)
(push) ; 10
(assert (not (and
  (<= 0 i5@81)
  (implies
    (<= 0 i5@81)
    (and
      (< i5@81 ($Seq.length xs@59))
      (implies
        (< i5@81 ($Seq.length xs@59))
        (not
          (and (<= low@71 i5@81) (implies (<= low@71 i5@81) (< i5@81 mid@78))))))))))
(check-sat)
; unknown
(pop) ; 10
; 0,00s
; (get-info :all-statistics)
(push) ; 10
; [then-branch 63] 0 <= i5@81 && 0 <= i5@81 ==> i5@81 < |xs@59| && i5@81 < |xs@59| ==> !low@71 <= i5@81 && low@71 <= i5@81 ==> i5@81 < mid@78
(assert (and
  (<= 0 i5@81)
  (implies
    (<= 0 i5@81)
    (and
      (< i5@81 ($Seq.length xs@59))
      (implies
        (< i5@81 ($Seq.length xs@59))
        (not
          (and (<= low@71 i5@81) (implies (<= low@71 i5@81) (< i5@81 mid@78)))))))))
; [eval] xs[i5] != key
; [eval] xs[i5]
(pop) ; 10
(push) ; 10
; [else-branch 63] !0 <= i5@81 && 0 <= i5@81 ==> i5@81 < |xs@59| && i5@81 < |xs@59| ==> !low@71 <= i5@81 && low@71 <= i5@81 ==> i5@81 < mid@78
(assert (not
  (and
    (<= 0 i5@81)
    (implies
      (<= 0 i5@81)
      (and
        (< i5@81 ($Seq.length xs@59))
        (implies
          (< i5@81 ($Seq.length xs@59))
          (not
            (and (<= low@71 i5@81) (implies (<= low@71 i5@81) (< i5@81 mid@78))))))))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
; Nested auxiliary terms
(pop) ; 7
; [dead else-branch 59] index@73 != -1
(pop) ; 6
; Joined path conditions
(set-option :timeout 0)
(push) ; 6
(assert (not (implies
  (= index@73 (- 0 1))
  (forall ((i5@81 Int)) (!
    (implies
      (and
        (<= 0 i5@81)
        (implies
          (<= 0 i5@81)
          (and
            (< i5@81 ($Seq.length xs@59))
            (implies
              (< i5@81 ($Seq.length xs@59))
              (not
                (and
                  (<= low@71 i5@81)
                  (implies (<= low@71 i5@81) (< i5@81 mid@78))))))))
      (not (= ($Seq.index xs@59 i5@81) key@60)))
    :pattern (($Seq.index xs@59 i5@81))
    :qid |prog.l86|)))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(assert (implies
  (= index@73 (- 0 1))
  (forall ((i5@81 Int)) (!
    (implies
      (and
        (<= 0 i5@81)
        (implies
          (<= 0 i5@81)
          (and
            (< i5@81 ($Seq.length xs@59))
            (implies
              (< i5@81 ($Seq.length xs@59))
              (not
                (and
                  (<= low@71 i5@81)
                  (implies (<= low@71 i5@81) (< i5@81 mid@78))))))))
      (not (= ($Seq.index xs@59 i5@81) key@60)))
    :pattern (($Seq.index xs@59 i5@81))
    :qid |prog.l86|))))
; [eval] -1 <= index && index < |xs|
; [eval] -1 <= index
; [eval] -1
; [eval] -1 <= index ==> index < |xs|
; [eval] -1 <= index
; [eval] -1
(push) ; 6
(set-option :timeout 250)
(push) ; 7
(assert (not (not (<= (- 0 1) index@73))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(push) ; 7
(assert (not (<= (- 0 1) index@73)))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(push) ; 7
; [then-branch 64] -1 <= index@73
(assert (<= (- 0 1) index@73))
; [eval] index < |xs|
; [eval] |xs|
(pop) ; 7
; [dead else-branch 64] !-1 <= index@73
(pop) ; 6
; Joined path conditions
; [eval] 0 <= index ==> xs[index] == key
; [eval] 0 <= index
(push) ; 6
(push) ; 7
(assert (not (not (<= 0 index@73))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; [dead then-branch 65] 0 <= index@73
(push) ; 7
; [else-branch 65] !0 <= index@73
(assert (not (<= 0 index@73)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(pop) ; 5
(push) ; 5
; [else-branch 56] !key@60 < xs@59[mid@78]
(assert (not (< key@60 ($Seq.index xs@59 mid@78))))
(pop) ; 5
; [eval] !(key < xs[mid])
; [eval] key < xs[mid]
; [eval] xs[mid]
(push) ; 5
(assert (not (< key@60 ($Seq.index xs@59 mid@78))))
(check-sat)
; unknown
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(push) ; 5
(assert (not (not (< key@60 ($Seq.index xs@59 mid@78)))))
(check-sat)
; unknown
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(push) ; 5
; [then-branch 66] !key@60 < xs@59[mid@78]
(assert (not (< key@60 ($Seq.index xs@59 mid@78))))
; [exec]
; index := mid
; [exec]
; high := mid
; [eval] 0 <= low && (low <= high && high <= |xs|)
; [eval] 0 <= low
; [eval] 0 <= low ==> low <= high && high <= |xs|
; [eval] 0 <= low
(push) ; 6
(push) ; 7
(assert (not (not (<= 0 low@71))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(push) ; 7
(assert (not (<= 0 low@71)))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(push) ; 7
; [then-branch 67] 0 <= low@71
(assert (<= 0 low@71))
; [eval] low <= high && high <= |xs|
; [eval] low <= high
; [eval] low <= high ==> high <= |xs|
; [eval] low <= high
(push) ; 8
(push) ; 9
(assert (not (not (<= low@71 mid@78))))
(check-sat)
; unknown
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(push) ; 9
(assert (not (<= low@71 mid@78)))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(push) ; 9
; [then-branch 68] low@71 <= mid@78
(assert (<= low@71 mid@78))
; [eval] high <= |xs|
; [eval] |xs|
(pop) ; 9
; [dead else-branch 68] !low@71 <= mid@78
(pop) ; 8
; Joined path conditions
(pop) ; 7
; [dead else-branch 67] !0 <= low@71
(pop) ; 6
; Joined path conditions
(set-option :timeout 0)
(push) ; 6
(assert (not (and
  (<= 0 low@71)
  (implies
    (<= 0 low@71)
    (and
      (<= low@71 mid@78)
      (implies (<= low@71 mid@78) (<= mid@78 ($Seq.length xs@59))))))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(assert (and
  (<= 0 low@71)
  (implies
    (<= 0 low@71)
    (and
      (<= low@71 mid@78)
      (implies (<= low@71 mid@78) (<= mid@78 ($Seq.length xs@59)))))))
; [eval] index == -1 ==> (forall i5: Int :: 0 <= i5 && (i5 < |xs| && !(low <= i5 && i5 < high)) ==> xs[i5] != key)
; [eval] index == -1
; [eval] -1
(push) ; 6
(set-option :timeout 250)
(push) ; 7
(assert (not (not (= mid@78 (- 0 1)))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; [dead then-branch 69] mid@78 == -1
(push) ; 7
; [else-branch 69] mid@78 != -1
(assert (not (= mid@78 (- 0 1))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; [eval] -1 <= index && index < |xs|
; [eval] -1 <= index
; [eval] -1
; [eval] -1 <= index ==> index < |xs|
; [eval] -1 <= index
; [eval] -1
(push) ; 6
(push) ; 7
(assert (not (not (<= (- 0 1) mid@78))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(push) ; 7
(assert (not (<= (- 0 1) mid@78)))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(push) ; 7
; [then-branch 70] -1 <= mid@78
(assert (<= (- 0 1) mid@78))
; [eval] index < |xs|
; [eval] |xs|
(pop) ; 7
; [dead else-branch 70] !-1 <= mid@78
(pop) ; 6
; Joined path conditions
(set-option :timeout 0)
(push) ; 6
(assert (not (and
  (<= (- 0 1) mid@78)
  (implies (<= (- 0 1) mid@78) (< mid@78 ($Seq.length xs@59))))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(assert (and
  (<= (- 0 1) mid@78)
  (implies (<= (- 0 1) mid@78) (< mid@78 ($Seq.length xs@59)))))
; [eval] 0 <= index ==> xs[index] == key
; [eval] 0 <= index
(push) ; 6
(set-option :timeout 250)
(push) ; 7
(assert (not (not (<= 0 mid@78))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(push) ; 7
(assert (not (<= 0 mid@78)))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(push) ; 7
; [then-branch 71] 0 <= mid@78
(assert (<= 0 mid@78))
; [eval] xs[index] == key
; [eval] xs[index]
(pop) ; 7
; [dead else-branch 71] !0 <= mid@78
(pop) ; 6
; Joined path conditions
(set-option :timeout 0)
(push) ; 6
(assert (not (implies (<= 0 mid@78) (= ($Seq.index xs@59 mid@78) key@60))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(assert (implies (<= 0 mid@78) (= ($Seq.index xs@59 mid@78) key@60)))
(pop) ; 5
(push) ; 5
; [else-branch 66] key@60 < xs@59[mid@78]
(assert (< key@60 ($Seq.index xs@59 mid@78)))
(pop) ; 5
(pop) ; 4
(push) ; 4
; [else-branch 55] xs@59[mid@78] < key@60
(assert (< ($Seq.index xs@59 mid@78) key@60))
(pop) ; 4
(pop) ; 3
; Loop: Continue after loop
(push) ; 3
(assert (< (- 0 1) ($Seq.length xs@59)))
(assert (<= 0 ($Seq.length xs@59)))
(declare-const $t@82 $Snap)
(assert (= $t@82 ($Snap.combine $Snap.unit $Snap.unit)))
; [eval] 0 <= low && (low <= high && high <= |xs|)
; [eval] 0 <= low
; [eval] 0 <= low ==> low <= high && high <= |xs|
; [eval] 0 <= low
(push) ; 4
(set-option :timeout 250)
(push) ; 5
(assert (not (not (<= 0 low@71))))
(check-sat)
; unknown
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(push) ; 5
(assert (not (<= 0 low@71)))
(check-sat)
; unknown
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(push) ; 5
; [then-branch 72] 0 <= low@71
(assert (<= 0 low@71))
; [eval] low <= high && high <= |xs|
; [eval] low <= high
; [eval] low <= high ==> high <= |xs|
; [eval] low <= high
(push) ; 6
(push) ; 7
(assert (not (not (<= low@71 high@72))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(push) ; 7
(assert (not (<= low@71 high@72)))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(push) ; 7
; [then-branch 73] low@71 <= high@72
(assert (<= low@71 high@72))
; [eval] high <= |xs|
; [eval] |xs|
(pop) ; 7
(push) ; 7
; [else-branch 73] !low@71 <= high@72
(assert (not (<= low@71 high@72)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(pop) ; 5
(push) ; 5
; [else-branch 72] !0 <= low@71
(assert (not (<= 0 low@71)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (and
  (<= 0 low@71)
  (implies
    (<= 0 low@71)
    (and
      (<= low@71 high@72)
      (implies (<= low@71 high@72) (<= high@72 ($Seq.length xs@59)))))))
; [eval] index == -1 ==> (forall i5: Int :: 0 <= i5 && (i5 < |xs| && !(low <= i5 && i5 < high)) ==> xs[i5] != key)
; [eval] index == -1
; [eval] -1
(push) ; 4
(push) ; 5
(assert (not (not (= index@73 (- 0 1)))))
(check-sat)
; unknown
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(push) ; 5
(assert (not (= index@73 (- 0 1))))
(check-sat)
; unknown
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(push) ; 5
; [then-branch 74] index@73 == -1
(assert (= index@73 (- 0 1)))
; [eval] (forall i5: Int :: 0 <= i5 && (i5 < |xs| && !(low <= i5 && i5 < high)) ==> xs[i5] != key)
(declare-const i5@83 Int)
(push) ; 6
; [eval] 0 <= i5 && (i5 < |xs| && !(low <= i5 && i5 < high)) ==> xs[i5] != key
; [eval] 0 <= i5 && (i5 < |xs| && !(low <= i5 && i5 < high))
; [eval] 0 <= i5
; [eval] 0 <= i5 ==> i5 < |xs| && !(low <= i5 && i5 < high)
; [eval] 0 <= i5
(push) ; 7
(push) ; 8
(assert (not (not (<= 0 i5@83))))
(check-sat)
; unknown
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(push) ; 8
(assert (not (<= 0 i5@83)))
(check-sat)
; unknown
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(push) ; 8
; [then-branch 75] 0 <= i5@83
(assert (<= 0 i5@83))
; [eval] i5 < |xs| && !(low <= i5 && i5 < high)
; [eval] i5 < |xs|
; [eval] |xs|
; [eval] i5 < |xs| ==> !(low <= i5 && i5 < high)
; [eval] i5 < |xs|
; [eval] |xs|
(push) ; 9
(push) ; 10
(assert (not (not (< i5@83 ($Seq.length xs@59)))))
(check-sat)
; unknown
(pop) ; 10
; 0,00s
; (get-info :all-statistics)
(push) ; 10
(assert (not (< i5@83 ($Seq.length xs@59))))
(check-sat)
; unknown
(pop) ; 10
; 0,00s
; (get-info :all-statistics)
(push) ; 10
; [then-branch 76] i5@83 < |xs@59|
(assert (< i5@83 ($Seq.length xs@59)))
; [eval] !(low <= i5 && i5 < high)
; [eval] low <= i5 && i5 < high
; [eval] low <= i5
; [eval] low <= i5 ==> i5 < high
; [eval] low <= i5
(push) ; 11
(push) ; 12
(assert (not (not (<= low@71 i5@83))))
(check-sat)
; unknown
(pop) ; 12
; 0,00s
; (get-info :all-statistics)
(push) ; 12
(assert (not (<= low@71 i5@83)))
(check-sat)
; unknown
(pop) ; 12
; 0,00s
; (get-info :all-statistics)
(push) ; 12
; [then-branch 77] low@71 <= i5@83
(assert (<= low@71 i5@83))
; [eval] i5 < high
(pop) ; 12
(push) ; 12
; [else-branch 77] !low@71 <= i5@83
(assert (not (<= low@71 i5@83)))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(push) ; 10
; [else-branch 76] !i5@83 < |xs@59|
(assert (not (< i5@83 ($Seq.length xs@59))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(push) ; 8
; [else-branch 75] !0 <= i5@83
(assert (not (<= 0 i5@83)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
(push) ; 8
(assert (not (not
  (and
    (<= 0 i5@83)
    (implies
      (<= 0 i5@83)
      (and
        (< i5@83 ($Seq.length xs@59))
        (implies
          (< i5@83 ($Seq.length xs@59))
          (not
            (and (<= low@71 i5@83) (implies (<= low@71 i5@83) (< i5@83 high@72)))))))))))
(check-sat)
; unknown
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(push) ; 8
(assert (not (and
  (<= 0 i5@83)
  (implies
    (<= 0 i5@83)
    (and
      (< i5@83 ($Seq.length xs@59))
      (implies
        (< i5@83 ($Seq.length xs@59))
        (not
          (and (<= low@71 i5@83) (implies (<= low@71 i5@83) (< i5@83 high@72))))))))))
(check-sat)
; unknown
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(push) ; 8
; [then-branch 78] 0 <= i5@83 && 0 <= i5@83 ==> i5@83 < |xs@59| && i5@83 < |xs@59| ==> !low@71 <= i5@83 && low@71 <= i5@83 ==> i5@83 < high@72
(assert (and
  (<= 0 i5@83)
  (implies
    (<= 0 i5@83)
    (and
      (< i5@83 ($Seq.length xs@59))
      (implies
        (< i5@83 ($Seq.length xs@59))
        (not
          (and (<= low@71 i5@83) (implies (<= low@71 i5@83) (< i5@83 high@72)))))))))
; [eval] xs[i5] != key
; [eval] xs[i5]
(pop) ; 8
(push) ; 8
; [else-branch 78] !0 <= i5@83 && 0 <= i5@83 ==> i5@83 < |xs@59| && i5@83 < |xs@59| ==> !low@71 <= i5@83 && low@71 <= i5@83 ==> i5@83 < high@72
(assert (not
  (and
    (<= 0 i5@83)
    (implies
      (<= 0 i5@83)
      (and
        (< i5@83 ($Seq.length xs@59))
        (implies
          (< i5@83 ($Seq.length xs@59))
          (not
            (and (<= low@71 i5@83) (implies (<= low@71 i5@83) (< i5@83 high@72))))))))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
; Nested auxiliary terms
(pop) ; 5
(push) ; 5
; [else-branch 74] index@73 != -1
(assert (not (= index@73 (- 0 1))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (implies
  (= index@73 (- 0 1))
  (forall ((i5@83 Int)) (!
    (implies
      (and
        (<= 0 i5@83)
        (implies
          (<= 0 i5@83)
          (and
            (< i5@83 ($Seq.length xs@59))
            (implies
              (< i5@83 ($Seq.length xs@59))
              (not
                (and
                  (<= low@71 i5@83)
                  (implies (<= low@71 i5@83) (< i5@83 high@72))))))))
      (not (= ($Seq.index xs@59 i5@83) key@60)))
    :pattern (($Seq.index xs@59 i5@83))
    :qid |prog.l86|))))
; [eval] -1 <= index && index < |xs|
; [eval] -1 <= index
; [eval] -1
; [eval] -1 <= index ==> index < |xs|
; [eval] -1 <= index
; [eval] -1
(push) ; 4
(push) ; 5
(assert (not (not (<= (- 0 1) index@73))))
(check-sat)
; unknown
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(push) ; 5
(assert (not (<= (- 0 1) index@73)))
(check-sat)
; unknown
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(push) ; 5
; [then-branch 79] -1 <= index@73
(assert (<= (- 0 1) index@73))
; [eval] index < |xs|
; [eval] |xs|
(pop) ; 5
(push) ; 5
; [else-branch 79] !-1 <= index@73
(assert (not (<= (- 0 1) index@73)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (and
  (<= (- 0 1) index@73)
  (implies (<= (- 0 1) index@73) (< index@73 ($Seq.length xs@59)))))
; [eval] 0 <= index ==> xs[index] == key
; [eval] 0 <= index
(push) ; 4
(push) ; 5
(assert (not (not (<= 0 index@73))))
(check-sat)
; unknown
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(push) ; 5
(assert (not (<= 0 index@73)))
(check-sat)
; unknown
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(push) ; 5
; [then-branch 80] 0 <= index@73
(assert (<= 0 index@73))
; [eval] xs[index] == key
; [eval] xs[index]
(pop) ; 5
(push) ; 5
; [else-branch 80] !0 <= index@73
(assert (not (<= 0 index@73)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (implies (<= 0 index@73) (= ($Seq.index xs@59 index@73) key@60)))
; [eval] !(low < high && index == -1)
; [eval] low < high && index == -1
; [eval] low < high
; [eval] low < high ==> index == -1
; [eval] low < high
(push) ; 4
(push) ; 5
(assert (not (not (< low@71 high@72))))
(check-sat)
; unknown
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(push) ; 5
(assert (not (< low@71 high@72)))
(check-sat)
; unknown
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(push) ; 5
; [then-branch 81] low@71 < high@72
(assert (< low@71 high@72))
; [eval] index == -1
; [eval] -1
(pop) ; 5
(push) ; 5
; [else-branch 81] !low@71 < high@72
(assert (not (< low@71 high@72)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (not (and (< low@71 high@72) (implies (< low@71 high@72) (= index@73 (- 0 1))))))
(check-sat)
; unknown
; [exec]
; res := index
; [eval] -1 <= res && res < |xs|
; [eval] -1 <= res
; [eval] -1
; [eval] -1 <= res ==> res < |xs|
; [eval] -1 <= res
; [eval] -1
(push) ; 4
(push) ; 5
(assert (not (not (<= (- 0 1) index@73))))
(check-sat)
; unknown
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(push) ; 5
(assert (not (<= (- 0 1) index@73)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(push) ; 5
; [then-branch 82] -1 <= index@73
(assert (<= (- 0 1) index@73))
; [eval] res < |xs|
; [eval] |xs|
(pop) ; 5
; [dead else-branch 82] !-1 <= index@73
(pop) ; 4
; Joined path conditions
; [eval] 0 <= res ==> xs[res] == key
; [eval] 0 <= res
(push) ; 4
(push) ; 5
(assert (not (not (<= 0 index@73))))
(check-sat)
; unknown
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(push) ; 5
(assert (not (<= 0 index@73)))
(check-sat)
; unknown
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(push) ; 5
; [then-branch 83] 0 <= index@73
(assert (<= 0 index@73))
; [eval] xs[res] == key
; [eval] xs[res]
(pop) ; 5
(push) ; 5
; [else-branch 83] !0 <= index@73
(assert (not (<= 0 index@73)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
; [eval] -1 == res ==> (forall i4: Int :: 0 <= i4 && i4 < |xs| ==> xs[i4] != key)
; [eval] -1 == res
; [eval] -1
(push) ; 4
(push) ; 5
(assert (not (not (= (- 0 1) index@73))))
(check-sat)
; unknown
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(push) ; 5
(assert (not (= (- 0 1) index@73)))
(check-sat)
; unknown
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(push) ; 5
; [then-branch 84] -1 == index@73
(assert (= (- 0 1) index@73))
; [eval] (forall i4: Int :: 0 <= i4 && i4 < |xs| ==> xs[i4] != key)
(declare-const i4@84 Int)
(push) ; 6
; [eval] 0 <= i4 && i4 < |xs| ==> xs[i4] != key
; [eval] 0 <= i4 && i4 < |xs|
; [eval] 0 <= i4
; [eval] 0 <= i4 ==> i4 < |xs|
; [eval] 0 <= i4
(push) ; 7
(push) ; 8
(assert (not (not (<= 0 i4@84))))
(check-sat)
; unknown
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(push) ; 8
(assert (not (<= 0 i4@84)))
(check-sat)
; unknown
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(push) ; 8
; [then-branch 85] 0 <= i4@84
(assert (<= 0 i4@84))
; [eval] i4 < |xs|
; [eval] |xs|
(pop) ; 8
(push) ; 8
; [else-branch 85] !0 <= i4@84
(assert (not (<= 0 i4@84)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
(push) ; 8
(assert (not (not (and (<= 0 i4@84) (implies (<= 0 i4@84) (< i4@84 ($Seq.length xs@59)))))))
(check-sat)
; unknown
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(push) ; 8
(assert (not (and (<= 0 i4@84) (implies (<= 0 i4@84) (< i4@84 ($Seq.length xs@59))))))
(check-sat)
; unknown
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(push) ; 8
; [then-branch 86] 0 <= i4@84 && 0 <= i4@84 ==> i4@84 < |xs@59|
(assert (and (<= 0 i4@84) (implies (<= 0 i4@84) (< i4@84 ($Seq.length xs@59)))))
; [eval] xs[i4] != key
; [eval] xs[i4]
(pop) ; 8
(push) ; 8
; [else-branch 86] !0 <= i4@84 && 0 <= i4@84 ==> i4@84 < |xs@59|
(assert (not (and (<= 0 i4@84) (implies (<= 0 i4@84) (< i4@84 ($Seq.length xs@59))))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
; Nested auxiliary terms
(pop) ; 5
(push) ; 5
; [else-branch 84] -1 != index@73
(assert (not (= (- 0 1) index@73)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(set-option :timeout 0)
(push) ; 4
(assert (not (implies
  (= (- 0 1) index@73)
  (forall ((i4@84 Int)) (!
    (implies
      (and (<= 0 i4@84) (implies (<= 0 i4@84) (< i4@84 ($Seq.length xs@59))))
      (not (= ($Seq.index xs@59 i4@84) key@60)))
    :pattern (($Seq.index xs@59 i4@84))
    :qid |prog.l76|)))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(assert (implies
  (= (- 0 1) index@73)
  (forall ((i4@84 Int)) (!
    (implies
      (and (<= 0 i4@84) (implies (<= 0 i4@84) (< i4@84 ($Seq.length xs@59))))
      (not (= ($Seq.index xs@59 i4@84) key@60)))
    :pattern (($Seq.index xs@59 i4@84))
    :qid |prog.l76|))))
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- Sorting_InsertSort ----------
(declare-const input@85 $Seq<Int>)
(declare-const res@86 $Seq<Int>)
(declare-const list@87 $Ref)
(declare-const _tmp1@88 $Ref)
(declare-const index2@89 Int)
(push) ; 1
(declare-const $t@90 $Snap)
(assert (= $t@90 $Snap.unit))
; [eval] |input| >= 1
; [eval] |input|
(assert (>= ($Seq.length input@85) 1))
(push) ; 2
(declare-const $t@91 $Snap)
(assert (= $t@91 ($Snap.combine $Snap.unit $Snap.unit)))
; [eval] (forall i6: Int :: (forall j2: Int :: 0 <= i6 && (i6 < j2 && j2 < |res|) ==> res[i6] <= res[j2]))
(declare-const i6@92 Int)
(push) ; 3
; [eval] (forall j2: Int :: 0 <= i6 && (i6 < j2 && j2 < |res|) ==> res[i6] <= res[j2])
(declare-const j2@93 Int)
(push) ; 4
; [eval] 0 <= i6 && (i6 < j2 && j2 < |res|) ==> res[i6] <= res[j2]
; [eval] 0 <= i6 && (i6 < j2 && j2 < |res|)
; [eval] 0 <= i6
; [eval] 0 <= i6 ==> i6 < j2 && j2 < |res|
; [eval] 0 <= i6
(push) ; 5
(set-option :timeout 250)
(push) ; 6
(assert (not (not (<= 0 i6@92))))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(push) ; 6
(assert (not (<= 0 i6@92)))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(push) ; 6
; [then-branch 87] 0 <= i6@92
(assert (<= 0 i6@92))
; [eval] i6 < j2 && j2 < |res|
; [eval] i6 < j2
; [eval] i6 < j2 ==> j2 < |res|
; [eval] i6 < j2
(push) ; 7
(push) ; 8
(assert (not (not (< i6@92 j2@93))))
(check-sat)
; unknown
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(push) ; 8
(assert (not (< i6@92 j2@93)))
(check-sat)
; unknown
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(push) ; 8
; [then-branch 88] i6@92 < j2@93
(assert (< i6@92 j2@93))
; [eval] j2 < |res|
; [eval] |res|
(pop) ; 8
(push) ; 8
; [else-branch 88] !i6@92 < j2@93
(assert (not (< i6@92 j2@93)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(push) ; 6
; [else-branch 87] !0 <= i6@92
(assert (not (<= 0 i6@92)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(push) ; 5
(push) ; 6
(assert (not (not
  (and
    (<= 0 i6@92)
    (implies
      (<= 0 i6@92)
      (and
        (< i6@92 j2@93)
        (implies (< i6@92 j2@93) (< j2@93 ($Seq.length res@86)))))))))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(push) ; 6
(assert (not (and
  (<= 0 i6@92)
  (implies
    (<= 0 i6@92)
    (and
      (< i6@92 j2@93)
      (implies (< i6@92 j2@93) (< j2@93 ($Seq.length res@86))))))))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(push) ; 6
; [then-branch 89] 0 <= i6@92 && 0 <= i6@92 ==> i6@92 < j2@93 && i6@92 < j2@93 ==> j2@93 < |res@86|
(assert (and
  (<= 0 i6@92)
  (implies
    (<= 0 i6@92)
    (and
      (< i6@92 j2@93)
      (implies (< i6@92 j2@93) (< j2@93 ($Seq.length res@86)))))))
; [eval] res[i6] <= res[j2]
; [eval] res[i6]
; [eval] res[j2]
(pop) ; 6
(push) ; 6
; [else-branch 89] !0 <= i6@92 && 0 <= i6@92 ==> i6@92 < j2@93 && i6@92 < j2@93 ==> j2@93 < |res@86|
(assert (not
  (and
    (<= 0 i6@92)
    (implies
      (<= 0 i6@92)
      (and
        (< i6@92 j2@93)
        (implies (< i6@92 j2@93) (< j2@93 ($Seq.length res@86))))))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
; Nested auxiliary terms
(pop) ; 3
; Nested auxiliary terms
(assert (forall ((i6@92 Int)) (!
  (forall ((j2@93 Int)) (!
    (implies
      (and
        (<= 0 i6@92)
        (implies
          (<= 0 i6@92)
          (and
            (< i6@92 j2@93)
            (implies (< i6@92 j2@93) (< j2@93 ($Seq.length res@86))))))
      (<= ($Seq.index res@86 i6@92) ($Seq.index res@86 j2@93)))
    :pattern (($Seq.index res@86 j2@93))
    :qid |prog.l109|))
  :pattern (($Seq.index res@86 i6@92))
  :qid |prog.l109|)))
; [eval] (forall i7: Int :: 0 <= i7 && i7 < |input| ==> (input[i7] in res))
(declare-const i7@94 Int)
(push) ; 3
; [eval] 0 <= i7 && i7 < |input| ==> (input[i7] in res)
; [eval] 0 <= i7 && i7 < |input|
; [eval] 0 <= i7
; [eval] 0 <= i7 ==> i7 < |input|
; [eval] 0 <= i7
(push) ; 4
(push) ; 5
(assert (not (not (<= 0 i7@94))))
(check-sat)
; unknown
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(push) ; 5
(assert (not (<= 0 i7@94)))
(check-sat)
; unknown
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(push) ; 5
; [then-branch 90] 0 <= i7@94
(assert (<= 0 i7@94))
; [eval] i7 < |input|
; [eval] |input|
(pop) ; 5
(push) ; 5
; [else-branch 90] !0 <= i7@94
(assert (not (<= 0 i7@94)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(push) ; 4
(push) ; 5
(assert (not (not (and (<= 0 i7@94) (implies (<= 0 i7@94) (< i7@94 ($Seq.length input@85)))))))
(check-sat)
; unknown
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(push) ; 5
(assert (not (and (<= 0 i7@94) (implies (<= 0 i7@94) (< i7@94 ($Seq.length input@85))))))
(check-sat)
; unknown
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(push) ; 5
; [then-branch 91] 0 <= i7@94 && 0 <= i7@94 ==> i7@94 < |input@85|
(assert (and (<= 0 i7@94) (implies (<= 0 i7@94) (< i7@94 ($Seq.length input@85)))))
; [eval] (input[i7] in res)
; [eval] input[i7]
(pop) ; 5
(push) ; 5
; [else-branch 91] !0 <= i7@94 && 0 <= i7@94 ==> i7@94 < |input@85|
(assert (not (and (<= 0 i7@94) (implies (<= 0 i7@94) (< i7@94 ($Seq.length input@85))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(pop) ; 3
; Nested auxiliary terms
(assert (forall ((i7@94 Int)) (!
  (implies
    (and (<= 0 i7@94) (implies (<= 0 i7@94) (< i7@94 ($Seq.length input@85))))
    ($Seq.contains res@86 ($Seq.index input@85 i7@94)))
  :pattern (($Seq.contains res@86 ($Seq.index input@85 i7@94)))
  :qid |prog.l110|)))
(pop) ; 2
(push) ; 2
; [exec]
; _tmp1 := SortedList_ctor()
(declare-const this@95 $Ref)
(declare-const $t@96 $Snap)
(declare-const $t@97 $Seq<Int>)
(assert (= $t@96 ($Snap.combine ($SortWrappers.$Seq<Int>To$Snap $t@97) $Snap.unit)))
(assert (not (= this@95 $Ref.null)))
; [eval] |this.SortedList_Elements| == 0
; [eval] |this.SortedList_Elements|
(assert (= ($Seq.length $t@97) 0))
; [exec]
; list := _tmp1
; [exec]
; index2 := 0
; loop at tmp4AAD.tmp@118.2
(declare-const _tmp2@98 Int)
(declare-const index2@99 Int)
(push) ; 3
; Loop: Check specs well-definedness
(declare-const $t@100 $Snap)
(declare-const $t@101 $Snap)
(assert (= $t@100 ($Snap.combine $Snap.unit $t@101)))
; [eval] index2 >= 0
(assert (>= index2@99 0))
(declare-const $t@102 $Seq<Int>)
(assert (= $t@101 ($Snap.combine ($SortWrappers.$Seq<Int>To$Snap $t@102) $Snap.unit)))
; [eval] (forall i8: Int :: (forall j3: Int :: 0 <= i8 && (i8 < j3 && j3 < |list.SortedList_Elements|) ==> list.SortedList_Elements[i8] <= list.SortedList_Elements[j3]))
(declare-const i8@103 Int)
(push) ; 4
; [eval] (forall j3: Int :: 0 <= i8 && (i8 < j3 && j3 < |list.SortedList_Elements|) ==> list.SortedList_Elements[i8] <= list.SortedList_Elements[j3])
(declare-const j3@104 Int)
(push) ; 5
; [eval] 0 <= i8 && (i8 < j3 && j3 < |list.SortedList_Elements|) ==> list.SortedList_Elements[i8] <= list.SortedList_Elements[j3]
; [eval] 0 <= i8 && (i8 < j3 && j3 < |list.SortedList_Elements|)
; [eval] 0 <= i8
; [eval] 0 <= i8 ==> i8 < j3 && j3 < |list.SortedList_Elements|
; [eval] 0 <= i8
(push) ; 6
(push) ; 7
(assert (not (not (<= 0 i8@103))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(push) ; 7
(assert (not (<= 0 i8@103)))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(push) ; 7
; [then-branch 92] 0 <= i8@103
(assert (<= 0 i8@103))
; [eval] i8 < j3 && j3 < |list.SortedList_Elements|
; [eval] i8 < j3
; [eval] i8 < j3 ==> j3 < |list.SortedList_Elements|
; [eval] i8 < j3
(push) ; 8
(push) ; 9
(assert (not (not (< i8@103 j3@104))))
(check-sat)
; unknown
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(push) ; 9
(assert (not (< i8@103 j3@104)))
(check-sat)
; unknown
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(push) ; 9
; [then-branch 93] i8@103 < j3@104
(assert (< i8@103 j3@104))
; [eval] j3 < |list.SortedList_Elements|
; [eval] |list.SortedList_Elements|
(pop) ; 9
(push) ; 9
; [else-branch 93] !i8@103 < j3@104
(assert (not (< i8@103 j3@104)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
(push) ; 7
; [else-branch 92] !0 <= i8@103
(assert (not (<= 0 i8@103)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
(push) ; 7
(assert (not (not
  (and
    (<= 0 i8@103)
    (implies
      (<= 0 i8@103)
      (and
        (< i8@103 j3@104)
        (implies (< i8@103 j3@104) (< j3@104 ($Seq.length $t@102)))))))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(push) ; 7
(assert (not (and
  (<= 0 i8@103)
  (implies
    (<= 0 i8@103)
    (and
      (< i8@103 j3@104)
      (implies (< i8@103 j3@104) (< j3@104 ($Seq.length $t@102))))))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(push) ; 7
; [then-branch 94] 0 <= i8@103 && 0 <= i8@103 ==> i8@103 < j3@104 && i8@103 < j3@104 ==> j3@104 < |$t@102|
(assert (and
  (<= 0 i8@103)
  (implies
    (<= 0 i8@103)
    (and
      (< i8@103 j3@104)
      (implies (< i8@103 j3@104) (< j3@104 ($Seq.length $t@102)))))))
; [eval] list.SortedList_Elements[i8] <= list.SortedList_Elements[j3]
; [eval] list.SortedList_Elements[i8]
; [eval] list.SortedList_Elements[j3]
(pop) ; 7
(push) ; 7
; [else-branch 94] !0 <= i8@103 && 0 <= i8@103 ==> i8@103 < j3@104 && i8@103 < j3@104 ==> j3@104 < |$t@102|
(assert (not
  (and
    (<= 0 i8@103)
    (implies
      (<= 0 i8@103)
      (and
        (< i8@103 j3@104)
        (implies (< i8@103 j3@104) (< j3@104 ($Seq.length $t@102))))))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(pop) ; 5
; Nested auxiliary terms
(pop) ; 4
; Nested auxiliary terms
(assert (forall ((i8@103 Int)) (!
  (forall ((j3@104 Int)) (!
    (implies
      (and
        (<= 0 i8@103)
        (implies
          (<= 0 i8@103)
          (and
            (< i8@103 j3@104)
            (implies (< i8@103 j3@104) (< j3@104 ($Seq.length $t@102))))))
      (<= ($Seq.index $t@102 i8@103) ($Seq.index $t@102 j3@104)))
    :pattern (($Seq.index $t@102 j3@104))
    :qid |prog.l121|))
  :pattern (($Seq.index $t@102 i8@103))
  :qid |prog.l121|)))
; [eval] (forall i9: Int :: 0 <= i9 && i9 < index2 ==> (input[i9] in list.SortedList_Elements))
(declare-const i9@105 Int)
(push) ; 4
; [eval] 0 <= i9 && i9 < index2 ==> (input[i9] in list.SortedList_Elements)
; [eval] 0 <= i9 && i9 < index2
; [eval] 0 <= i9
; [eval] 0 <= i9 ==> i9 < index2
; [eval] 0 <= i9
(push) ; 5
(push) ; 6
(assert (not (not (<= 0 i9@105))))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(push) ; 6
(assert (not (<= 0 i9@105)))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(push) ; 6
; [then-branch 95] 0 <= i9@105
(assert (<= 0 i9@105))
; [eval] i9 < index2
(pop) ; 6
(push) ; 6
; [else-branch 95] !0 <= i9@105
(assert (not (<= 0 i9@105)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(push) ; 5
(push) ; 6
(assert (not (not (and (<= 0 i9@105) (implies (<= 0 i9@105) (< i9@105 index2@99))))))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(push) ; 6
(assert (not (and (<= 0 i9@105) (implies (<= 0 i9@105) (< i9@105 index2@99)))))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(push) ; 6
; [then-branch 96] 0 <= i9@105 && 0 <= i9@105 ==> i9@105 < index2@99
(assert (and (<= 0 i9@105) (implies (<= 0 i9@105) (< i9@105 index2@99))))
; [eval] (input[i9] in list.SortedList_Elements)
; [eval] input[i9]
(pop) ; 6
(push) ; 6
; [else-branch 96] !0 <= i9@105 && 0 <= i9@105 ==> i9@105 < index2@99
(assert (not (and (<= 0 i9@105) (implies (<= 0 i9@105) (< i9@105 index2@99)))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
; Nested auxiliary terms
(assert (forall ((i9@105 Int)) (!
  (implies
    (and (<= 0 i9@105) (implies (<= 0 i9@105) (< i9@105 index2@99)))
    ($Seq.contains $t@102 ($Seq.index input@85 i9@105)))
  :pattern (($Seq.contains $t@102 ($Seq.index input@85 i9@105)))
  :qid |prog.l122|)))
(declare-const $t@106 $Snap)
(assert (= $t@106 $Snap.unit))
; [eval] index2 < |input|
; [eval] |input|
(assert (< index2@99 ($Seq.length input@85)))
(check-sat)
; unknown
(pop) ; 3
(push) ; 3
; Loop: Establish loop invariant
; [eval] index2 >= 0
; [eval] (forall i8: Int :: (forall j3: Int :: 0 <= i8 && (i8 < j3 && j3 < |list.SortedList_Elements|) ==> list.SortedList_Elements[i8] <= list.SortedList_Elements[j3]))
(declare-const i8@107 Int)
(push) ; 4
; [eval] (forall j3: Int :: 0 <= i8 && (i8 < j3 && j3 < |list.SortedList_Elements|) ==> list.SortedList_Elements[i8] <= list.SortedList_Elements[j3])
(declare-const j3@108 Int)
(push) ; 5
; [eval] 0 <= i8 && (i8 < j3 && j3 < |list.SortedList_Elements|) ==> list.SortedList_Elements[i8] <= list.SortedList_Elements[j3]
; [eval] 0 <= i8 && (i8 < j3 && j3 < |list.SortedList_Elements|)
; [eval] 0 <= i8
; [eval] 0 <= i8 ==> i8 < j3 && j3 < |list.SortedList_Elements|
; [eval] 0 <= i8
(push) ; 6
(push) ; 7
(assert (not (not (<= 0 i8@107))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(push) ; 7
(assert (not (<= 0 i8@107)))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(push) ; 7
; [then-branch 97] 0 <= i8@107
(assert (<= 0 i8@107))
; [eval] i8 < j3 && j3 < |list.SortedList_Elements|
; [eval] i8 < j3
; [eval] i8 < j3 ==> j3 < |list.SortedList_Elements|
; [eval] i8 < j3
(push) ; 8
(push) ; 9
(assert (not (not (< i8@107 j3@108))))
(check-sat)
; unknown
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(push) ; 9
(assert (not (< i8@107 j3@108)))
(check-sat)
; unknown
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(push) ; 9
; [then-branch 98] i8@107 < j3@108
(assert (< i8@107 j3@108))
; [eval] j3 < |list.SortedList_Elements|
; [eval] |list.SortedList_Elements|
(pop) ; 9
(push) ; 9
; [else-branch 98] !i8@107 < j3@108
(assert (not (< i8@107 j3@108)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
(push) ; 7
; [else-branch 97] !0 <= i8@107
(assert (not (<= 0 i8@107)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
(push) ; 7
(assert (not (not
  (and
    (<= 0 i8@107)
    (implies
      (<= 0 i8@107)
      (and
        (< i8@107 j3@108)
        (implies (< i8@107 j3@108) (< j3@108 ($Seq.length $t@97)))))))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; [dead then-branch 99] 0 <= i8@107 && 0 <= i8@107 ==> i8@107 < j3@108 && i8@107 < j3@108 ==> j3@108 < |$t@97|
(push) ; 7
; [else-branch 99] !0 <= i8@107 && 0 <= i8@107 ==> i8@107 < j3@108 && i8@107 < j3@108 ==> j3@108 < |$t@97|
(assert (not
  (and
    (<= 0 i8@107)
    (implies
      (<= 0 i8@107)
      (and
        (< i8@107 j3@108)
        (implies (< i8@107 j3@108) (< j3@108 ($Seq.length $t@97))))))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; [eval] list.SortedList_Elements[j3]
(pop) ; 5
; Nested auxiliary terms
; [eval] list.SortedList_Elements[i8]
(pop) ; 4
; Nested auxiliary terms
(set-option :timeout 0)
(push) ; 4
(assert (not (forall ((i8@107 Int)) (!
  (forall ((j3@108 Int)) (!
    true
    :pattern (($Seq.index $t@97 j3@108))
    :qid |prog.l121|))
  :pattern (($Seq.index $t@97 i8@107))
  :qid |prog.l121|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(assert (forall ((i8@107 Int)) (!
  (forall ((j3@108 Int)) (!
    true
    :pattern (($Seq.index $t@97 j3@108))
    :qid |prog.l121|))
  :pattern (($Seq.index $t@97 i8@107))
  :qid |prog.l121|)))
; [eval] (forall i9: Int :: 0 <= i9 && i9 < index2 ==> (input[i9] in list.SortedList_Elements))
(declare-const i9@109 Int)
(push) ; 4
; [eval] 0 <= i9 && i9 < index2 ==> (input[i9] in list.SortedList_Elements)
; [eval] 0 <= i9 && i9 < index2
; [eval] 0 <= i9
; [eval] 0 <= i9 ==> i9 < index2
; [eval] 0 <= i9
(push) ; 5
(set-option :timeout 250)
(push) ; 6
(assert (not (not (<= 0 i9@109))))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(push) ; 6
(assert (not (<= 0 i9@109)))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(push) ; 6
; [then-branch 100] 0 <= i9@109
(assert (<= 0 i9@109))
; [eval] i9 < index2
(pop) ; 6
(push) ; 6
; [else-branch 100] !0 <= i9@109
(assert (not (<= 0 i9@109)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(push) ; 5
(push) ; 6
(assert (not (not (and (<= 0 i9@109) (implies (<= 0 i9@109) (< i9@109 0))))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; [dead then-branch 101] 0 <= i9@109 && 0 <= i9@109 ==> i9@109 < 0
(push) ; 6
; [else-branch 101] !0 <= i9@109 && 0 <= i9@109 ==> i9@109 < 0
(assert (not (and (<= 0 i9@109) (implies (<= 0 i9@109) (< i9@109 0)))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; [eval] (input[i9] in list.SortedList_Elements)
; [eval] input[i9]
(pop) ; 4
; Nested auxiliary terms
(pop) ; 3
; Loop: Verify loop body
(push) ; 3
(assert (< index2@99 ($Seq.length input@85)))
(assert (= $t@106 $Snap.unit))
(assert (forall ((i9@105 Int)) (!
  (implies
    (and (<= 0 i9@105) (implies (<= 0 i9@105) (< i9@105 index2@99)))
    ($Seq.contains $t@102 ($Seq.index input@85 i9@105)))
  :pattern (($Seq.contains $t@102 ($Seq.index input@85 i9@105)))
  :qid |prog.l122|)))
(assert (forall ((i8@103 Int)) (!
  (forall ((j3@104 Int)) (!
    (implies
      (and
        (<= 0 i8@103)
        (implies
          (<= 0 i8@103)
          (and
            (< i8@103 j3@104)
            (implies (< i8@103 j3@104) (< j3@104 ($Seq.length $t@102))))))
      (<= ($Seq.index $t@102 i8@103) ($Seq.index $t@102 j3@104)))
    :pattern (($Seq.index $t@102 j3@104))
    :qid |prog.l121|))
  :pattern (($Seq.index $t@102 i8@103))
  :qid |prog.l121|)))
(assert (= $t@101 ($Snap.combine ($SortWrappers.$Seq<Int>To$Snap $t@102) $Snap.unit)))
(assert (>= index2@99 0))
(assert (= $t@100 ($Snap.combine $Snap.unit $t@101)))
; [exec]
; _tmp2 := SortedList_Insert(list, input[index2])
; [eval] input[index2]
; [eval] (forall i10: Int :: (forall j4: Int :: 0 <= i10 && (i10 < j4 && j4 < |this.SortedList_Elements|) ==> this.SortedList_Elements[i10] <= this.SortedList_Elements[j4]))
(declare-const i10@110 Int)
(push) ; 4
; [eval] (forall j4: Int :: 0 <= i10 && (i10 < j4 && j4 < |this.SortedList_Elements|) ==> this.SortedList_Elements[i10] <= this.SortedList_Elements[j4])
(declare-const j4@111 Int)
(push) ; 5
; [eval] 0 <= i10 && (i10 < j4 && j4 < |this.SortedList_Elements|) ==> this.SortedList_Elements[i10] <= this.SortedList_Elements[j4]
; [eval] 0 <= i10 && (i10 < j4 && j4 < |this.SortedList_Elements|)
; [eval] 0 <= i10
; [eval] 0 <= i10 ==> i10 < j4 && j4 < |this.SortedList_Elements|
; [eval] 0 <= i10
(push) ; 6
(push) ; 7
(assert (not (not (<= 0 i10@110))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(push) ; 7
(assert (not (<= 0 i10@110)))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(push) ; 7
; [then-branch 102] 0 <= i10@110
(assert (<= 0 i10@110))
; [eval] i10 < j4 && j4 < |this.SortedList_Elements|
; [eval] i10 < j4
; [eval] i10 < j4 ==> j4 < |this.SortedList_Elements|
; [eval] i10 < j4
(push) ; 8
(push) ; 9
(assert (not (not (< i10@110 j4@111))))
(check-sat)
; unknown
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(push) ; 9
(assert (not (< i10@110 j4@111)))
(check-sat)
; unknown
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(push) ; 9
; [then-branch 103] i10@110 < j4@111
(assert (< i10@110 j4@111))
; [eval] j4 < |this.SortedList_Elements|
; [eval] |this.SortedList_Elements|
(pop) ; 9
(push) ; 9
; [else-branch 103] !i10@110 < j4@111
(assert (not (< i10@110 j4@111)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
(push) ; 7
; [else-branch 102] !0 <= i10@110
(assert (not (<= 0 i10@110)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
(push) ; 7
(assert (not (not
  (and
    (<= 0 i10@110)
    (implies
      (<= 0 i10@110)
      (and
        (< i10@110 j4@111)
        (implies (< i10@110 j4@111) (< j4@111 ($Seq.length $t@102)))))))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(push) ; 7
(assert (not (and
  (<= 0 i10@110)
  (implies
    (<= 0 i10@110)
    (and
      (< i10@110 j4@111)
      (implies (< i10@110 j4@111) (< j4@111 ($Seq.length $t@102))))))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(push) ; 7
; [then-branch 104] 0 <= i10@110 && 0 <= i10@110 ==> i10@110 < j4@111 && i10@110 < j4@111 ==> j4@111 < |$t@102|
(assert (and
  (<= 0 i10@110)
  (implies
    (<= 0 i10@110)
    (and
      (< i10@110 j4@111)
      (implies (< i10@110 j4@111) (< j4@111 ($Seq.length $t@102)))))))
; [eval] this.SortedList_Elements[i10] <= this.SortedList_Elements[j4]
; [eval] this.SortedList_Elements[i10]
; [eval] this.SortedList_Elements[j4]
(pop) ; 7
(push) ; 7
; [else-branch 104] !0 <= i10@110 && 0 <= i10@110 ==> i10@110 < j4@111 && i10@110 < j4@111 ==> j4@111 < |$t@102|
(assert (not
  (and
    (<= 0 i10@110)
    (implies
      (<= 0 i10@110)
      (and
        (< i10@110 j4@111)
        (implies (< i10@110 j4@111) (< j4@111 ($Seq.length $t@102))))))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(pop) ; 5
; Nested auxiliary terms
(pop) ; 4
; Nested auxiliary terms
(set-option :timeout 0)
(push) ; 4
(assert (not (forall ((i10@110 Int)) (!
  (forall ((j4@111 Int)) (!
    (implies
      (and
        (<= 0 i10@110)
        (implies
          (<= 0 i10@110)
          (and
            (< i10@110 j4@111)
            (implies (< i10@110 j4@111) (< j4@111 ($Seq.length $t@102))))))
      (<= ($Seq.index $t@102 i10@110) ($Seq.index $t@102 j4@111)))
    :pattern (($Seq.index $t@102 j4@111))
    :qid |prog.l138|))
  :pattern (($Seq.index $t@102 i10@110))
  :qid |prog.l138|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(assert (forall ((i10@110 Int)) (!
  (forall ((j4@111 Int)) (!
    (implies
      (and
        (<= 0 i10@110)
        (implies
          (<= 0 i10@110)
          (and
            (< i10@110 j4@111)
            (implies (< i10@110 j4@111) (< j4@111 ($Seq.length $t@102))))))
      (<= ($Seq.index $t@102 i10@110) ($Seq.index $t@102 j4@111)))
    :pattern (($Seq.index $t@102 j4@111))
    :qid |prog.l138|))
  :pattern (($Seq.index $t@102 i10@110))
  :qid |prog.l138|)))
(declare-const res@112 Int)
(declare-const $t@113 $Snap)
(declare-const $t@114 $Snap)
(assert (= $t@113 ($Snap.combine $t@114 $Snap.unit)))
(declare-const $t@115 $Seq<Int>)
(assert (= $t@114 ($Snap.combine ($SortWrappers.$Seq<Int>To$Snap $t@115) $Snap.unit)))
; [eval] (forall i11: Int :: (forall j5: Int :: 0 <= i11 && (i11 < j5 && j5 < |this.SortedList_Elements|) ==> this.SortedList_Elements[i11] <= this.SortedList_Elements[j5]))
(declare-const i11@116 Int)
(push) ; 4
; [eval] (forall j5: Int :: 0 <= i11 && (i11 < j5 && j5 < |this.SortedList_Elements|) ==> this.SortedList_Elements[i11] <= this.SortedList_Elements[j5])
(declare-const j5@117 Int)
(push) ; 5
; [eval] 0 <= i11 && (i11 < j5 && j5 < |this.SortedList_Elements|) ==> this.SortedList_Elements[i11] <= this.SortedList_Elements[j5]
; [eval] 0 <= i11 && (i11 < j5 && j5 < |this.SortedList_Elements|)
; [eval] 0 <= i11
; [eval] 0 <= i11 ==> i11 < j5 && j5 < |this.SortedList_Elements|
; [eval] 0 <= i11
(push) ; 6
(set-option :timeout 250)
(push) ; 7
(assert (not (not (<= 0 i11@116))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(push) ; 7
(assert (not (<= 0 i11@116)))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(push) ; 7
; [then-branch 105] 0 <= i11@116
(assert (<= 0 i11@116))
; [eval] i11 < j5 && j5 < |this.SortedList_Elements|
; [eval] i11 < j5
; [eval] i11 < j5 ==> j5 < |this.SortedList_Elements|
; [eval] i11 < j5
(push) ; 8
(push) ; 9
(assert (not (not (< i11@116 j5@117))))
(check-sat)
; unknown
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(push) ; 9
(assert (not (< i11@116 j5@117)))
(check-sat)
; unknown
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(push) ; 9
; [then-branch 106] i11@116 < j5@117
(assert (< i11@116 j5@117))
; [eval] j5 < |this.SortedList_Elements|
; [eval] |this.SortedList_Elements|
(pop) ; 9
(push) ; 9
; [else-branch 106] !i11@116 < j5@117
(assert (not (< i11@116 j5@117)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
(push) ; 7
; [else-branch 105] !0 <= i11@116
(assert (not (<= 0 i11@116)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
(push) ; 7
(assert (not (not
  (and
    (<= 0 i11@116)
    (implies
      (<= 0 i11@116)
      (and
        (< i11@116 j5@117)
        (implies (< i11@116 j5@117) (< j5@117 ($Seq.length $t@115)))))))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(push) ; 7
(assert (not (and
  (<= 0 i11@116)
  (implies
    (<= 0 i11@116)
    (and
      (< i11@116 j5@117)
      (implies (< i11@116 j5@117) (< j5@117 ($Seq.length $t@115))))))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(push) ; 7
; [then-branch 107] 0 <= i11@116 && 0 <= i11@116 ==> i11@116 < j5@117 && i11@116 < j5@117 ==> j5@117 < |$t@115|
(assert (and
  (<= 0 i11@116)
  (implies
    (<= 0 i11@116)
    (and
      (< i11@116 j5@117)
      (implies (< i11@116 j5@117) (< j5@117 ($Seq.length $t@115)))))))
; [eval] this.SortedList_Elements[i11] <= this.SortedList_Elements[j5]
; [eval] this.SortedList_Elements[i11]
; [eval] this.SortedList_Elements[j5]
(pop) ; 7
(push) ; 7
; [else-branch 107] !0 <= i11@116 && 0 <= i11@116 ==> i11@116 < j5@117 && i11@116 < j5@117 ==> j5@117 < |$t@115|
(assert (not
  (and
    (<= 0 i11@116)
    (implies
      (<= 0 i11@116)
      (and
        (< i11@116 j5@117)
        (implies (< i11@116 j5@117) (< j5@117 ($Seq.length $t@115))))))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(pop) ; 5
; Nested auxiliary terms
(pop) ; 4
; Nested auxiliary terms
(assert (forall ((i11@116 Int)) (!
  (forall ((j5@117 Int)) (!
    (implies
      (and
        (<= 0 i11@116)
        (implies
          (<= 0 i11@116)
          (and
            (< i11@116 j5@117)
            (implies (< i11@116 j5@117) (< j5@117 ($Seq.length $t@115))))))
      (<= ($Seq.index $t@115 i11@116) ($Seq.index $t@115 j5@117)))
    :pattern (($Seq.index $t@115 j5@117))
    :qid |prog.l139|))
  :pattern (($Seq.index $t@115 i11@116))
  :qid |prog.l139|)))
; [eval] 0 <= res && res <= old(|this.SortedList_Elements|)
; [eval] 0 <= res
; [eval] 0 <= res ==> res <= old(|this.SortedList_Elements|)
; [eval] 0 <= res
(push) ; 4
(push) ; 5
(assert (not (not (<= 0 res@112))))
(check-sat)
; unknown
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(push) ; 5
(assert (not (<= 0 res@112)))
(check-sat)
; unknown
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(push) ; 5
; [then-branch 108] 0 <= res@112
(assert (<= 0 res@112))
; [eval] res <= old(|this.SortedList_Elements|)
; [eval] old(|this.SortedList_Elements|)
; [eval] |this.SortedList_Elements|
(pop) ; 5
(push) ; 5
; [else-branch 108] !0 <= res@112
(assert (not (<= 0 res@112)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (and (<= 0 res@112) (implies (<= 0 res@112) (<= res@112 ($Seq.length $t@102)))))
; [eval] this.SortedList_Elements == old(this.SortedList_Elements)[..res] ++ Seq(element) ++ old(this.SortedList_Elements)[res..]
; [eval] old(this.SortedList_Elements)[..res] ++ Seq(element) ++ old(this.SortedList_Elements)[res..]
; [eval] old(this.SortedList_Elements)[..res] ++ Seq(element)
; [eval] old(this.SortedList_Elements)[..res]
; [eval] old(this.SortedList_Elements)
; [eval] Seq(element)
(assert (= ($Seq.length ($Seq.singleton ($Seq.index input@85 index2@99))) 1))
; [eval] old(this.SortedList_Elements)[res..]
; [eval] old(this.SortedList_Elements)
(assert ($Seq.equal
  $t@115
  ($Seq.append
    ($Seq.append
      ($Seq.take $t@102 res@112)
      ($Seq.singleton ($Seq.index input@85 index2@99)))
    ($Seq.drop $t@102 res@112))))
; [eval] (element in this.SortedList_Elements)
(assert ($Seq.contains $t@115 ($Seq.index input@85 index2@99)))
; [eval] (forall i12: Int :: (i12 in old(this.SortedList_Elements)) ==> (i12 in this.SortedList_Elements))
(declare-const i12@118 Int)
(push) ; 4
; [eval] (i12 in old(this.SortedList_Elements)) ==> (i12 in this.SortedList_Elements)
; [eval] (i12 in old(this.SortedList_Elements))
; [eval] old(this.SortedList_Elements)
(push) ; 5
(push) ; 6
(assert (not (not ($Seq.contains $t@102 i12@118))))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(push) ; 6
(assert (not ($Seq.contains $t@102 i12@118)))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(push) ; 6
; [then-branch 109] i12@118 in $t@102
(assert ($Seq.contains $t@102 i12@118))
; [eval] (i12 in this.SortedList_Elements)
(pop) ; 6
(push) ; 6
; [else-branch 109] !i12@118 in $t@102
(assert (not ($Seq.contains $t@102 i12@118)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
; Nested auxiliary terms
(assert (and
  (forall ((i12@118 Int)) (!
    (implies ($Seq.contains $t@102 i12@118) ($Seq.contains $t@115 i12@118))
    :pattern (($Seq.contains $t@102 i12@118))
    :qid |prog.l143|))
  (forall ((i12@118 Int)) (!
    (implies ($Seq.contains $t@102 i12@118) ($Seq.contains $t@115 i12@118))
    :pattern (($Seq.contains $t@115 i12@118))
    :qid |prog.l143|))))
; [exec]
; index2 := index2 + 1
; [eval] index2 + 1
(declare-const index2@119 Int)
(assert (= index2@119 (+ index2@99 1)))
; [eval] index2 >= 0
(set-option :timeout 0)
(push) ; 4
(assert (not (>= index2@119 0)))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(assert (>= index2@119 0))
; [eval] (forall i8: Int :: (forall j3: Int :: 0 <= i8 && (i8 < j3 && j3 < |list.SortedList_Elements|) ==> list.SortedList_Elements[i8] <= list.SortedList_Elements[j3]))
(declare-const i8@120 Int)
(push) ; 4
; [eval] (forall j3: Int :: 0 <= i8 && (i8 < j3 && j3 < |list.SortedList_Elements|) ==> list.SortedList_Elements[i8] <= list.SortedList_Elements[j3])
(declare-const j3@121 Int)
(push) ; 5
; [eval] 0 <= i8 && (i8 < j3 && j3 < |list.SortedList_Elements|) ==> list.SortedList_Elements[i8] <= list.SortedList_Elements[j3]
; [eval] 0 <= i8 && (i8 < j3 && j3 < |list.SortedList_Elements|)
; [eval] 0 <= i8
; [eval] 0 <= i8 ==> i8 < j3 && j3 < |list.SortedList_Elements|
; [eval] 0 <= i8
(push) ; 6
(set-option :timeout 250)
(push) ; 7
(assert (not (not (<= 0 i8@120))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(push) ; 7
(assert (not (<= 0 i8@120)))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(push) ; 7
; [then-branch 110] 0 <= i8@120
(assert (<= 0 i8@120))
; [eval] i8 < j3 && j3 < |list.SortedList_Elements|
; [eval] i8 < j3
; [eval] i8 < j3 ==> j3 < |list.SortedList_Elements|
; [eval] i8 < j3
(push) ; 8
(push) ; 9
(assert (not (not (< i8@120 j3@121))))
(check-sat)
; unknown
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(push) ; 9
(assert (not (< i8@120 j3@121)))
(check-sat)
; unknown
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(push) ; 9
; [then-branch 111] i8@120 < j3@121
(assert (< i8@120 j3@121))
; [eval] j3 < |list.SortedList_Elements|
; [eval] |list.SortedList_Elements|
(pop) ; 9
(push) ; 9
; [else-branch 111] !i8@120 < j3@121
(assert (not (< i8@120 j3@121)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
(push) ; 7
; [else-branch 110] !0 <= i8@120
(assert (not (<= 0 i8@120)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
(push) ; 7
(assert (not (not
  (and
    (<= 0 i8@120)
    (implies
      (<= 0 i8@120)
      (and
        (< i8@120 j3@121)
        (implies (< i8@120 j3@121) (< j3@121 ($Seq.length $t@115)))))))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(push) ; 7
(assert (not (and
  (<= 0 i8@120)
  (implies
    (<= 0 i8@120)
    (and
      (< i8@120 j3@121)
      (implies (< i8@120 j3@121) (< j3@121 ($Seq.length $t@115))))))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(push) ; 7
; [then-branch 112] 0 <= i8@120 && 0 <= i8@120 ==> i8@120 < j3@121 && i8@120 < j3@121 ==> j3@121 < |$t@115|
(assert (and
  (<= 0 i8@120)
  (implies
    (<= 0 i8@120)
    (and
      (< i8@120 j3@121)
      (implies (< i8@120 j3@121) (< j3@121 ($Seq.length $t@115)))))))
; [eval] list.SortedList_Elements[i8] <= list.SortedList_Elements[j3]
; [eval] list.SortedList_Elements[i8]
; [eval] list.SortedList_Elements[j3]
(pop) ; 7
(push) ; 7
; [else-branch 112] !0 <= i8@120 && 0 <= i8@120 ==> i8@120 < j3@121 && i8@120 < j3@121 ==> j3@121 < |$t@115|
(assert (not
  (and
    (<= 0 i8@120)
    (implies
      (<= 0 i8@120)
      (and
        (< i8@120 j3@121)
        (implies (< i8@120 j3@121) (< j3@121 ($Seq.length $t@115))))))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(pop) ; 5
; Nested auxiliary terms
(pop) ; 4
; Nested auxiliary terms
(set-option :timeout 0)
(push) ; 4
(assert (not (forall ((i8@120 Int)) (!
  (forall ((j3@121 Int)) (!
    (implies
      (and
        (<= 0 i8@120)
        (implies
          (<= 0 i8@120)
          (and
            (< i8@120 j3@121)
            (implies (< i8@120 j3@121) (< j3@121 ($Seq.length $t@115))))))
      (<= ($Seq.index $t@115 i8@120) ($Seq.index $t@115 j3@121)))
    :pattern (($Seq.index $t@115 j3@121))
    :qid |prog.l121|))
  :pattern (($Seq.index $t@115 i8@120))
  :qid |prog.l121|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(assert (forall ((i8@120 Int)) (!
  (forall ((j3@121 Int)) (!
    (implies
      (and
        (<= 0 i8@120)
        (implies
          (<= 0 i8@120)
          (and
            (< i8@120 j3@121)
            (implies (< i8@120 j3@121) (< j3@121 ($Seq.length $t@115))))))
      (<= ($Seq.index $t@115 i8@120) ($Seq.index $t@115 j3@121)))
    :pattern (($Seq.index $t@115 j3@121))
    :qid |prog.l121|))
  :pattern (($Seq.index $t@115 i8@120))
  :qid |prog.l121|)))
; [eval] (forall i9: Int :: 0 <= i9 && i9 < index2 ==> (input[i9] in list.SortedList_Elements))
(declare-const i9@122 Int)
(push) ; 4
; [eval] 0 <= i9 && i9 < index2 ==> (input[i9] in list.SortedList_Elements)
; [eval] 0 <= i9 && i9 < index2
; [eval] 0 <= i9
; [eval] 0 <= i9 ==> i9 < index2
; [eval] 0 <= i9
(push) ; 5
(set-option :timeout 250)
(push) ; 6
(assert (not (not (<= 0 i9@122))))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(push) ; 6
(assert (not (<= 0 i9@122)))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(push) ; 6
; [then-branch 113] 0 <= i9@122
(assert (<= 0 i9@122))
; [eval] i9 < index2
(pop) ; 6
(push) ; 6
; [else-branch 113] !0 <= i9@122
(assert (not (<= 0 i9@122)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(push) ; 5
(push) ; 6
(assert (not (not (and (<= 0 i9@122) (implies (<= 0 i9@122) (< i9@122 index2@119))))))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(push) ; 6
(assert (not (and (<= 0 i9@122) (implies (<= 0 i9@122) (< i9@122 index2@119)))))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(push) ; 6
; [then-branch 114] 0 <= i9@122 && 0 <= i9@122 ==> i9@122 < index2@119
(assert (and (<= 0 i9@122) (implies (<= 0 i9@122) (< i9@122 index2@119))))
; [eval] (input[i9] in list.SortedList_Elements)
; [eval] input[i9]
(pop) ; 6
(push) ; 6
; [else-branch 114] !0 <= i9@122 && 0 <= i9@122 ==> i9@122 < index2@119
(assert (not (and (<= 0 i9@122) (implies (<= 0 i9@122) (< i9@122 index2@119)))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
; Nested auxiliary terms
(set-option :timeout 0)
(push) ; 4
(assert (not (forall ((i9@122 Int)) (!
  (implies
    (and (<= 0 i9@122) (implies (<= 0 i9@122) (< i9@122 index2@119)))
    ($Seq.contains $t@115 ($Seq.index input@85 i9@122)))
  :pattern (($Seq.contains $t@115 ($Seq.index input@85 i9@122)))
  :qid |prog.l122|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(assert (forall ((i9@122 Int)) (!
  (implies
    (and (<= 0 i9@122) (implies (<= 0 i9@122) (< i9@122 index2@119)))
    ($Seq.contains $t@115 ($Seq.index input@85 i9@122)))
  :pattern (($Seq.contains $t@115 ($Seq.index input@85 i9@122)))
  :qid |prog.l122|)))
(pop) ; 3
; Loop: Continue after loop
(push) ; 3
(assert (forall ((i8@107 Int)) (!
  (forall ((j3@108 Int)) (!
    true
    :pattern (($Seq.index $t@97 j3@108))
    :qid |prog.l121|))
  :pattern (($Seq.index $t@97 i8@107))
  :qid |prog.l121|)))
(declare-const $t@123 $Snap)
(declare-const $t@124 $Snap)
(assert (= $t@123 ($Snap.combine $Snap.unit $t@124)))
; [eval] index2 >= 0
(assert (>= index2@99 0))
(declare-const $t@125 $Seq<Int>)
(assert (= $t@124 ($Snap.combine ($SortWrappers.$Seq<Int>To$Snap $t@125) $Snap.unit)))
; [eval] (forall i8: Int :: (forall j3: Int :: 0 <= i8 && (i8 < j3 && j3 < |list.SortedList_Elements|) ==> list.SortedList_Elements[i8] <= list.SortedList_Elements[j3]))
(declare-const i8@126 Int)
(push) ; 4
; [eval] (forall j3: Int :: 0 <= i8 && (i8 < j3 && j3 < |list.SortedList_Elements|) ==> list.SortedList_Elements[i8] <= list.SortedList_Elements[j3])
(declare-const j3@127 Int)
(push) ; 5
; [eval] 0 <= i8 && (i8 < j3 && j3 < |list.SortedList_Elements|) ==> list.SortedList_Elements[i8] <= list.SortedList_Elements[j3]
; [eval] 0 <= i8 && (i8 < j3 && j3 < |list.SortedList_Elements|)
; [eval] 0 <= i8
; [eval] 0 <= i8 ==> i8 < j3 && j3 < |list.SortedList_Elements|
; [eval] 0 <= i8
(push) ; 6
(set-option :timeout 250)
(push) ; 7
(assert (not (not (<= 0 i8@126))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(push) ; 7
(assert (not (<= 0 i8@126)))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(push) ; 7
; [then-branch 115] 0 <= i8@126
(assert (<= 0 i8@126))
; [eval] i8 < j3 && j3 < |list.SortedList_Elements|
; [eval] i8 < j3
; [eval] i8 < j3 ==> j3 < |list.SortedList_Elements|
; [eval] i8 < j3
(push) ; 8
(push) ; 9
(assert (not (not (< i8@126 j3@127))))
(check-sat)
; unknown
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(push) ; 9
(assert (not (< i8@126 j3@127)))
(check-sat)
; unknown
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(push) ; 9
; [then-branch 116] i8@126 < j3@127
(assert (< i8@126 j3@127))
; [eval] j3 < |list.SortedList_Elements|
; [eval] |list.SortedList_Elements|
(pop) ; 9
(push) ; 9
; [else-branch 116] !i8@126 < j3@127
(assert (not (< i8@126 j3@127)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
(push) ; 7
; [else-branch 115] !0 <= i8@126
(assert (not (<= 0 i8@126)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
(push) ; 7
(assert (not (not
  (and
    (<= 0 i8@126)
    (implies
      (<= 0 i8@126)
      (and
        (< i8@126 j3@127)
        (implies (< i8@126 j3@127) (< j3@127 ($Seq.length $t@125)))))))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(push) ; 7
(assert (not (and
  (<= 0 i8@126)
  (implies
    (<= 0 i8@126)
    (and
      (< i8@126 j3@127)
      (implies (< i8@126 j3@127) (< j3@127 ($Seq.length $t@125))))))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(push) ; 7
; [then-branch 117] 0 <= i8@126 && 0 <= i8@126 ==> i8@126 < j3@127 && i8@126 < j3@127 ==> j3@127 < |$t@125|
(assert (and
  (<= 0 i8@126)
  (implies
    (<= 0 i8@126)
    (and
      (< i8@126 j3@127)
      (implies (< i8@126 j3@127) (< j3@127 ($Seq.length $t@125)))))))
; [eval] list.SortedList_Elements[i8] <= list.SortedList_Elements[j3]
; [eval] list.SortedList_Elements[i8]
; [eval] list.SortedList_Elements[j3]
(pop) ; 7
(push) ; 7
; [else-branch 117] !0 <= i8@126 && 0 <= i8@126 ==> i8@126 < j3@127 && i8@126 < j3@127 ==> j3@127 < |$t@125|
(assert (not
  (and
    (<= 0 i8@126)
    (implies
      (<= 0 i8@126)
      (and
        (< i8@126 j3@127)
        (implies (< i8@126 j3@127) (< j3@127 ($Seq.length $t@125))))))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(pop) ; 5
; Nested auxiliary terms
(pop) ; 4
; Nested auxiliary terms
(assert (forall ((i8@126 Int)) (!
  (forall ((j3@127 Int)) (!
    (implies
      (and
        (<= 0 i8@126)
        (implies
          (<= 0 i8@126)
          (and
            (< i8@126 j3@127)
            (implies (< i8@126 j3@127) (< j3@127 ($Seq.length $t@125))))))
      (<= ($Seq.index $t@125 i8@126) ($Seq.index $t@125 j3@127)))
    :pattern (($Seq.index $t@125 j3@127))
    :qid |prog.l121|))
  :pattern (($Seq.index $t@125 i8@126))
  :qid |prog.l121|)))
; [eval] (forall i9: Int :: 0 <= i9 && i9 < index2 ==> (input[i9] in list.SortedList_Elements))
(declare-const i9@128 Int)
(push) ; 4
; [eval] 0 <= i9 && i9 < index2 ==> (input[i9] in list.SortedList_Elements)
; [eval] 0 <= i9 && i9 < index2
; [eval] 0 <= i9
; [eval] 0 <= i9 ==> i9 < index2
; [eval] 0 <= i9
(push) ; 5
(push) ; 6
(assert (not (not (<= 0 i9@128))))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(push) ; 6
(assert (not (<= 0 i9@128)))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(push) ; 6
; [then-branch 118] 0 <= i9@128
(assert (<= 0 i9@128))
; [eval] i9 < index2
(pop) ; 6
(push) ; 6
; [else-branch 118] !0 <= i9@128
(assert (not (<= 0 i9@128)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(push) ; 5
(push) ; 6
(assert (not (not (and (<= 0 i9@128) (implies (<= 0 i9@128) (< i9@128 index2@99))))))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(push) ; 6
(assert (not (and (<= 0 i9@128) (implies (<= 0 i9@128) (< i9@128 index2@99)))))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(push) ; 6
; [then-branch 119] 0 <= i9@128 && 0 <= i9@128 ==> i9@128 < index2@99
(assert (and (<= 0 i9@128) (implies (<= 0 i9@128) (< i9@128 index2@99))))
; [eval] (input[i9] in list.SortedList_Elements)
; [eval] input[i9]
(pop) ; 6
(push) ; 6
; [else-branch 119] !0 <= i9@128 && 0 <= i9@128 ==> i9@128 < index2@99
(assert (not (and (<= 0 i9@128) (implies (<= 0 i9@128) (< i9@128 index2@99)))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
; Nested auxiliary terms
(assert (forall ((i9@128 Int)) (!
  (implies
    (and (<= 0 i9@128) (implies (<= 0 i9@128) (< i9@128 index2@99)))
    ($Seq.contains $t@125 ($Seq.index input@85 i9@128)))
  :pattern (($Seq.contains $t@125 ($Seq.index input@85 i9@128)))
  :qid |prog.l122|)))
; [eval] !(index2 < |input|)
; [eval] index2 < |input|
; [eval] |input|
(assert (not (< index2@99 ($Seq.length input@85))))
(check-sat)
; unknown
; [exec]
; res := list.SortedList_Elements
; [eval] (forall i6: Int :: (forall j2: Int :: 0 <= i6 && (i6 < j2 && j2 < |res|) ==> res[i6] <= res[j2]))
(declare-const i6@129 Int)
(push) ; 4
; [eval] (forall j2: Int :: 0 <= i6 && (i6 < j2 && j2 < |res|) ==> res[i6] <= res[j2])
(declare-const j2@130 Int)
(push) ; 5
; [eval] 0 <= i6 && (i6 < j2 && j2 < |res|) ==> res[i6] <= res[j2]
; [eval] 0 <= i6 && (i6 < j2 && j2 < |res|)
; [eval] 0 <= i6
; [eval] 0 <= i6 ==> i6 < j2 && j2 < |res|
; [eval] 0 <= i6
(push) ; 6
(push) ; 7
(assert (not (not (<= 0 i6@129))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(push) ; 7
(assert (not (<= 0 i6@129)))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(push) ; 7
; [then-branch 120] 0 <= i6@129
(assert (<= 0 i6@129))
; [eval] i6 < j2 && j2 < |res|
; [eval] i6 < j2
; [eval] i6 < j2 ==> j2 < |res|
; [eval] i6 < j2
(push) ; 8
(push) ; 9
(assert (not (not (< i6@129 j2@130))))
(check-sat)
; unknown
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(push) ; 9
(assert (not (< i6@129 j2@130)))
(check-sat)
; unknown
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(push) ; 9
; [then-branch 121] i6@129 < j2@130
(assert (< i6@129 j2@130))
; [eval] j2 < |res|
; [eval] |res|
(pop) ; 9
(push) ; 9
; [else-branch 121] !i6@129 < j2@130
(assert (not (< i6@129 j2@130)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
(push) ; 7
; [else-branch 120] !0 <= i6@129
(assert (not (<= 0 i6@129)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
(push) ; 7
(assert (not (not
  (and
    (<= 0 i6@129)
    (implies
      (<= 0 i6@129)
      (and
        (< i6@129 j2@130)
        (implies (< i6@129 j2@130) (< j2@130 ($Seq.length $t@125)))))))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(push) ; 7
(assert (not (and
  (<= 0 i6@129)
  (implies
    (<= 0 i6@129)
    (and
      (< i6@129 j2@130)
      (implies (< i6@129 j2@130) (< j2@130 ($Seq.length $t@125))))))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(push) ; 7
; [then-branch 122] 0 <= i6@129 && 0 <= i6@129 ==> i6@129 < j2@130 && i6@129 < j2@130 ==> j2@130 < |$t@125|
(assert (and
  (<= 0 i6@129)
  (implies
    (<= 0 i6@129)
    (and
      (< i6@129 j2@130)
      (implies (< i6@129 j2@130) (< j2@130 ($Seq.length $t@125)))))))
; [eval] res[i6] <= res[j2]
; [eval] res[i6]
; [eval] res[j2]
(pop) ; 7
(push) ; 7
; [else-branch 122] !0 <= i6@129 && 0 <= i6@129 ==> i6@129 < j2@130 && i6@129 < j2@130 ==> j2@130 < |$t@125|
(assert (not
  (and
    (<= 0 i6@129)
    (implies
      (<= 0 i6@129)
      (and
        (< i6@129 j2@130)
        (implies (< i6@129 j2@130) (< j2@130 ($Seq.length $t@125))))))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(pop) ; 5
; Nested auxiliary terms
(pop) ; 4
; Nested auxiliary terms
(set-option :timeout 0)
(push) ; 4
(assert (not (forall ((i6@129 Int)) (!
  (forall ((j2@130 Int)) (!
    (implies
      (and
        (<= 0 i6@129)
        (implies
          (<= 0 i6@129)
          (and
            (< i6@129 j2@130)
            (implies (< i6@129 j2@130) (< j2@130 ($Seq.length $t@125))))))
      (<= ($Seq.index $t@125 i6@129) ($Seq.index $t@125 j2@130)))
    :pattern (($Seq.index $t@125 j2@130))
    :qid |prog.l109|))
  :pattern (($Seq.index $t@125 i6@129))
  :qid |prog.l109|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(assert (forall ((i6@129 Int)) (!
  (forall ((j2@130 Int)) (!
    (implies
      (and
        (<= 0 i6@129)
        (implies
          (<= 0 i6@129)
          (and
            (< i6@129 j2@130)
            (implies (< i6@129 j2@130) (< j2@130 ($Seq.length $t@125))))))
      (<= ($Seq.index $t@125 i6@129) ($Seq.index $t@125 j2@130)))
    :pattern (($Seq.index $t@125 j2@130))
    :qid |prog.l109|))
  :pattern (($Seq.index $t@125 i6@129))
  :qid |prog.l109|)))
; [eval] (forall i7: Int :: 0 <= i7 && i7 < |input| ==> (input[i7] in res))
(declare-const i7@131 Int)
(push) ; 4
; [eval] 0 <= i7 && i7 < |input| ==> (input[i7] in res)
; [eval] 0 <= i7 && i7 < |input|
; [eval] 0 <= i7
; [eval] 0 <= i7 ==> i7 < |input|
; [eval] 0 <= i7
(push) ; 5
(set-option :timeout 250)
(push) ; 6
(assert (not (not (<= 0 i7@131))))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(push) ; 6
(assert (not (<= 0 i7@131)))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(push) ; 6
; [then-branch 123] 0 <= i7@131
(assert (<= 0 i7@131))
; [eval] i7 < |input|
; [eval] |input|
(pop) ; 6
(push) ; 6
; [else-branch 123] !0 <= i7@131
(assert (not (<= 0 i7@131)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(push) ; 5
(push) ; 6
(assert (not (not
  (and (<= 0 i7@131) (implies (<= 0 i7@131) (< i7@131 ($Seq.length input@85)))))))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(push) ; 6
(assert (not (and (<= 0 i7@131) (implies (<= 0 i7@131) (< i7@131 ($Seq.length input@85))))))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(push) ; 6
; [then-branch 124] 0 <= i7@131 && 0 <= i7@131 ==> i7@131 < |input@85|
(assert (and (<= 0 i7@131) (implies (<= 0 i7@131) (< i7@131 ($Seq.length input@85)))))
; [eval] (input[i7] in res)
; [eval] input[i7]
(pop) ; 6
(push) ; 6
; [else-branch 124] !0 <= i7@131 && 0 <= i7@131 ==> i7@131 < |input@85|
(assert (not
  (and (<= 0 i7@131) (implies (<= 0 i7@131) (< i7@131 ($Seq.length input@85))))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
; Nested auxiliary terms
(set-option :timeout 0)
(push) ; 4
(assert (not (forall ((i7@131 Int)) (!
  (implies
    (and (<= 0 i7@131) (implies (<= 0 i7@131) (< i7@131 ($Seq.length input@85))))
    ($Seq.contains $t@125 ($Seq.index input@85 i7@131)))
  :pattern (($Seq.contains $t@125 ($Seq.index input@85 i7@131)))
  :qid |prog.l110|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(assert (forall ((i7@131 Int)) (!
  (implies
    (and (<= 0 i7@131) (implies (<= 0 i7@131) (< i7@131 ($Seq.length input@85))))
    ($Seq.contains $t@125 ($Seq.index input@85 i7@131)))
  :pattern (($Seq.contains $t@125 ($Seq.index input@85 i7@131)))
  :qid |prog.l110|)))
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- SortedList_ctor ----------
(declare-const this@132 $Ref)
(push) ; 1
(push) ; 2
(declare-const $t@133 $Snap)
(declare-const $t@134 $Seq<Int>)
(assert (= $t@133 ($Snap.combine ($SortWrappers.$Seq<Int>To$Snap $t@134) $Snap.unit)))
(assert (not (= this@132 $Ref.null)))
; [eval] |this.SortedList_Elements| == 0
; [eval] |this.SortedList_Elements|
(assert (= ($Seq.length $t@134) 0))
(pop) ; 2
(push) ; 2
; [exec]
; this := SortedList_init()
(declare-const this@135 $Ref)
(assert (not (= this@135 $Ref.null)))
(declare-const $t@136 $Seq<Int>)
; [exec]
; this.SortedList_Elements := Seq[Int]()
; [eval] Seq[Int]()
; [eval] |this.SortedList_Elements| == 0
; [eval] |this.SortedList_Elements|
(push) ; 3
(assert (not (= ($Seq.length $Seq.empty<Int>) 0)))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(assert (= ($Seq.length $Seq.empty<Int>) 0))
(pop) ; 2
(pop) ; 1
; ---------- SortedList_Insert ----------
(declare-const this@137 $Ref)
(declare-const element@138 Int)
(declare-const res@139 Int)
(declare-const index3@140 Int)
(push) ; 1
(declare-const $t@141 $Snap)
(declare-const $t@142 $Seq<Int>)
(assert (= $t@141 ($Snap.combine ($SortWrappers.$Seq<Int>To$Snap $t@142) $Snap.unit)))
(assert (not (= this@137 $Ref.null)))
; [eval] (forall i10: Int :: (forall j4: Int :: 0 <= i10 && (i10 < j4 && j4 < |this.SortedList_Elements|) ==> this.SortedList_Elements[i10] <= this.SortedList_Elements[j4]))
(declare-const i10@143 Int)
(push) ; 2
; [eval] (forall j4: Int :: 0 <= i10 && (i10 < j4 && j4 < |this.SortedList_Elements|) ==> this.SortedList_Elements[i10] <= this.SortedList_Elements[j4])
(declare-const j4@144 Int)
(push) ; 3
; [eval] 0 <= i10 && (i10 < j4 && j4 < |this.SortedList_Elements|) ==> this.SortedList_Elements[i10] <= this.SortedList_Elements[j4]
; [eval] 0 <= i10 && (i10 < j4 && j4 < |this.SortedList_Elements|)
; [eval] 0 <= i10
; [eval] 0 <= i10 ==> i10 < j4 && j4 < |this.SortedList_Elements|
; [eval] 0 <= i10
(push) ; 4
(set-option :timeout 250)
(push) ; 5
(assert (not (not (<= 0 i10@143))))
(check-sat)
; unknown
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(push) ; 5
(assert (not (<= 0 i10@143)))
(check-sat)
; unknown
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(push) ; 5
; [then-branch 125] 0 <= i10@143
(assert (<= 0 i10@143))
; [eval] i10 < j4 && j4 < |this.SortedList_Elements|
; [eval] i10 < j4
; [eval] i10 < j4 ==> j4 < |this.SortedList_Elements|
; [eval] i10 < j4
(push) ; 6
(push) ; 7
(assert (not (not (< i10@143 j4@144))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(push) ; 7
(assert (not (< i10@143 j4@144)))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(push) ; 7
; [then-branch 126] i10@143 < j4@144
(assert (< i10@143 j4@144))
; [eval] j4 < |this.SortedList_Elements|
; [eval] |this.SortedList_Elements|
(pop) ; 7
(push) ; 7
; [else-branch 126] !i10@143 < j4@144
(assert (not (< i10@143 j4@144)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(pop) ; 5
(push) ; 5
; [else-branch 125] !0 <= i10@143
(assert (not (<= 0 i10@143)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(push) ; 4
(push) ; 5
(assert (not (not
  (and
    (<= 0 i10@143)
    (implies
      (<= 0 i10@143)
      (and
        (< i10@143 j4@144)
        (implies (< i10@143 j4@144) (< j4@144 ($Seq.length $t@142)))))))))
(check-sat)
; unknown
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(push) ; 5
(assert (not (and
  (<= 0 i10@143)
  (implies
    (<= 0 i10@143)
    (and
      (< i10@143 j4@144)
      (implies (< i10@143 j4@144) (< j4@144 ($Seq.length $t@142))))))))
(check-sat)
; unknown
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(push) ; 5
; [then-branch 127] 0 <= i10@143 && 0 <= i10@143 ==> i10@143 < j4@144 && i10@143 < j4@144 ==> j4@144 < |$t@142|
(assert (and
  (<= 0 i10@143)
  (implies
    (<= 0 i10@143)
    (and
      (< i10@143 j4@144)
      (implies (< i10@143 j4@144) (< j4@144 ($Seq.length $t@142)))))))
; [eval] this.SortedList_Elements[i10] <= this.SortedList_Elements[j4]
; [eval] this.SortedList_Elements[i10]
; [eval] this.SortedList_Elements[j4]
(pop) ; 5
(push) ; 5
; [else-branch 127] !0 <= i10@143 && 0 <= i10@143 ==> i10@143 < j4@144 && i10@143 < j4@144 ==> j4@144 < |$t@142|
(assert (not
  (and
    (<= 0 i10@143)
    (implies
      (<= 0 i10@143)
      (and
        (< i10@143 j4@144)
        (implies (< i10@143 j4@144) (< j4@144 ($Seq.length $t@142))))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(pop) ; 3
; Nested auxiliary terms
(pop) ; 2
; Nested auxiliary terms
(assert (forall ((i10@143 Int)) (!
  (forall ((j4@144 Int)) (!
    (implies
      (and
        (<= 0 i10@143)
        (implies
          (<= 0 i10@143)
          (and
            (< i10@143 j4@144)
            (implies (< i10@143 j4@144) (< j4@144 ($Seq.length $t@142))))))
      (<= ($Seq.index $t@142 i10@143) ($Seq.index $t@142 j4@144)))
    :pattern (($Seq.index $t@142 j4@144))
    :qid |prog.l138|))
  :pattern (($Seq.index $t@142 i10@143))
  :qid |prog.l138|)))
(push) ; 2
(declare-const $t@145 $Snap)
(declare-const $t@146 $Snap)
(assert (= $t@145 ($Snap.combine $t@146 $Snap.unit)))
(declare-const $t@147 $Seq<Int>)
(assert (= $t@146 ($Snap.combine ($SortWrappers.$Seq<Int>To$Snap $t@147) $Snap.unit)))
; [eval] (forall i11: Int :: (forall j5: Int :: 0 <= i11 && (i11 < j5 && j5 < |this.SortedList_Elements|) ==> this.SortedList_Elements[i11] <= this.SortedList_Elements[j5]))
(declare-const i11@148 Int)
(push) ; 3
; [eval] (forall j5: Int :: 0 <= i11 && (i11 < j5 && j5 < |this.SortedList_Elements|) ==> this.SortedList_Elements[i11] <= this.SortedList_Elements[j5])
(declare-const j5@149 Int)
(push) ; 4
; [eval] 0 <= i11 && (i11 < j5 && j5 < |this.SortedList_Elements|) ==> this.SortedList_Elements[i11] <= this.SortedList_Elements[j5]
; [eval] 0 <= i11 && (i11 < j5 && j5 < |this.SortedList_Elements|)
; [eval] 0 <= i11
; [eval] 0 <= i11 ==> i11 < j5 && j5 < |this.SortedList_Elements|
; [eval] 0 <= i11
(push) ; 5
(push) ; 6
(assert (not (not (<= 0 i11@148))))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(push) ; 6
(assert (not (<= 0 i11@148)))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(push) ; 6
; [then-branch 128] 0 <= i11@148
(assert (<= 0 i11@148))
; [eval] i11 < j5 && j5 < |this.SortedList_Elements|
; [eval] i11 < j5
; [eval] i11 < j5 ==> j5 < |this.SortedList_Elements|
; [eval] i11 < j5
(push) ; 7
(push) ; 8
(assert (not (not (< i11@148 j5@149))))
(check-sat)
; unknown
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(push) ; 8
(assert (not (< i11@148 j5@149)))
(check-sat)
; unknown
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(push) ; 8
; [then-branch 129] i11@148 < j5@149
(assert (< i11@148 j5@149))
; [eval] j5 < |this.SortedList_Elements|
; [eval] |this.SortedList_Elements|
(pop) ; 8
(push) ; 8
; [else-branch 129] !i11@148 < j5@149
(assert (not (< i11@148 j5@149)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(push) ; 6
; [else-branch 128] !0 <= i11@148
(assert (not (<= 0 i11@148)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(push) ; 5
(push) ; 6
(assert (not (not
  (and
    (<= 0 i11@148)
    (implies
      (<= 0 i11@148)
      (and
        (< i11@148 j5@149)
        (implies (< i11@148 j5@149) (< j5@149 ($Seq.length $t@147)))))))))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(push) ; 6
(assert (not (and
  (<= 0 i11@148)
  (implies
    (<= 0 i11@148)
    (and
      (< i11@148 j5@149)
      (implies (< i11@148 j5@149) (< j5@149 ($Seq.length $t@147))))))))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(push) ; 6
; [then-branch 130] 0 <= i11@148 && 0 <= i11@148 ==> i11@148 < j5@149 && i11@148 < j5@149 ==> j5@149 < |$t@147|
(assert (and
  (<= 0 i11@148)
  (implies
    (<= 0 i11@148)
    (and
      (< i11@148 j5@149)
      (implies (< i11@148 j5@149) (< j5@149 ($Seq.length $t@147)))))))
; [eval] this.SortedList_Elements[i11] <= this.SortedList_Elements[j5]
; [eval] this.SortedList_Elements[i11]
; [eval] this.SortedList_Elements[j5]
(pop) ; 6
(push) ; 6
; [else-branch 130] !0 <= i11@148 && 0 <= i11@148 ==> i11@148 < j5@149 && i11@148 < j5@149 ==> j5@149 < |$t@147|
(assert (not
  (and
    (<= 0 i11@148)
    (implies
      (<= 0 i11@148)
      (and
        (< i11@148 j5@149)
        (implies (< i11@148 j5@149) (< j5@149 ($Seq.length $t@147))))))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
; Nested auxiliary terms
(pop) ; 3
; Nested auxiliary terms
(assert (forall ((i11@148 Int)) (!
  (forall ((j5@149 Int)) (!
    (implies
      (and
        (<= 0 i11@148)
        (implies
          (<= 0 i11@148)
          (and
            (< i11@148 j5@149)
            (implies (< i11@148 j5@149) (< j5@149 ($Seq.length $t@147))))))
      (<= ($Seq.index $t@147 i11@148) ($Seq.index $t@147 j5@149)))
    :pattern (($Seq.index $t@147 j5@149))
    :qid |prog.l139|))
  :pattern (($Seq.index $t@147 i11@148))
  :qid |prog.l139|)))
; [eval] 0 <= res && res <= old(|this.SortedList_Elements|)
; [eval] 0 <= res
; [eval] 0 <= res ==> res <= old(|this.SortedList_Elements|)
; [eval] 0 <= res
(push) ; 3
(push) ; 4
(assert (not (not (<= 0 res@139))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(push) ; 4
(assert (not (<= 0 res@139)))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(push) ; 4
; [then-branch 131] 0 <= res@139
(assert (<= 0 res@139))
; [eval] res <= old(|this.SortedList_Elements|)
; [eval] old(|this.SortedList_Elements|)
; [eval] |this.SortedList_Elements|
(pop) ; 4
(push) ; 4
; [else-branch 131] !0 <= res@139
(assert (not (<= 0 res@139)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (and (<= 0 res@139) (implies (<= 0 res@139) (<= res@139 ($Seq.length $t@142)))))
; [eval] this.SortedList_Elements == old(this.SortedList_Elements)[..res] ++ Seq(element) ++ old(this.SortedList_Elements)[res..]
; [eval] old(this.SortedList_Elements)[..res] ++ Seq(element) ++ old(this.SortedList_Elements)[res..]
; [eval] old(this.SortedList_Elements)[..res] ++ Seq(element)
; [eval] old(this.SortedList_Elements)[..res]
; [eval] old(this.SortedList_Elements)
; [eval] Seq(element)
(assert (= ($Seq.length ($Seq.singleton element@138)) 1))
; [eval] old(this.SortedList_Elements)[res..]
; [eval] old(this.SortedList_Elements)
(assert ($Seq.equal
  $t@147
  ($Seq.append
    ($Seq.append ($Seq.take $t@142 res@139) ($Seq.singleton element@138))
    ($Seq.drop $t@142 res@139))))
; [eval] (element in this.SortedList_Elements)
(assert ($Seq.contains $t@147 element@138))
; [eval] (forall i12: Int :: (i12 in old(this.SortedList_Elements)) ==> (i12 in this.SortedList_Elements))
(declare-const i12@150 Int)
(push) ; 3
; [eval] (i12 in old(this.SortedList_Elements)) ==> (i12 in this.SortedList_Elements)
; [eval] (i12 in old(this.SortedList_Elements))
; [eval] old(this.SortedList_Elements)
(push) ; 4
(push) ; 5
(assert (not (not ($Seq.contains $t@142 i12@150))))
(check-sat)
; unknown
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(push) ; 5
(assert (not ($Seq.contains $t@142 i12@150)))
(check-sat)
; unknown
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(push) ; 5
; [then-branch 132] i12@150 in $t@142
(assert ($Seq.contains $t@142 i12@150))
; [eval] (i12 in this.SortedList_Elements)
(pop) ; 5
(push) ; 5
; [else-branch 132] !i12@150 in $t@142
(assert (not ($Seq.contains $t@142 i12@150)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(pop) ; 3
; Nested auxiliary terms
(assert (and
  (forall ((i12@150 Int)) (!
    (implies ($Seq.contains $t@142 i12@150) ($Seq.contains $t@147 i12@150))
    :pattern (($Seq.contains $t@142 i12@150))
    :qid |prog.l143|))
  (forall ((i12@150 Int)) (!
    (implies ($Seq.contains $t@142 i12@150) ($Seq.contains $t@147 i12@150))
    :pattern (($Seq.contains $t@147 i12@150))
    :qid |prog.l143|))))
(pop) ; 2
(push) ; 2
; [exec]
; index3 := 0
; loop at tmp4AAD.tmp@147.2
(declare-const index3@151 Int)
(push) ; 3
; Loop: Check specs well-definedness
(declare-const $t@152 $Snap)
(declare-const $t@153 $Seq<Int>)
(assert (= $t@152 ($Snap.combine ($SortWrappers.$Seq<Int>To$Snap $t@153) $Snap.unit)))
(set-option :timeout 0)
(push) ; 4
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(assert (implies (< $Perm.No (/ (to_real 1) (to_real 2))) (not (= this@137 $Ref.null))))
; [eval] 0 <= index3 && index3 <= |this.SortedList_Elements|
; [eval] 0 <= index3
; [eval] 0 <= index3 ==> index3 <= |this.SortedList_Elements|
; [eval] 0 <= index3
(push) ; 4
(set-option :timeout 250)
(push) ; 5
(assert (not (not (<= 0 index3@151))))
(check-sat)
; unknown
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(push) ; 5
(assert (not (<= 0 index3@151)))
(check-sat)
; unknown
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(push) ; 5
; [then-branch 133] 0 <= index3@151
(assert (<= 0 index3@151))
; [eval] index3 <= |this.SortedList_Elements|
; [eval] |this.SortedList_Elements|
(pop) ; 5
(push) ; 5
; [else-branch 133] !0 <= index3@151
(assert (not (<= 0 index3@151)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (and
  (<= 0 index3@151)
  (implies (<= 0 index3@151) (<= index3@151 ($Seq.length $t@153)))))
; [eval] (forall i13: Int :: 0 <= i13 && i13 < index3 ==> this.SortedList_Elements[i13] < element)
(declare-const i13@154 Int)
(push) ; 4
; [eval] 0 <= i13 && i13 < index3 ==> this.SortedList_Elements[i13] < element
; [eval] 0 <= i13 && i13 < index3
; [eval] 0 <= i13
; [eval] 0 <= i13 ==> i13 < index3
; [eval] 0 <= i13
(push) ; 5
(push) ; 6
(assert (not (not (<= 0 i13@154))))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(push) ; 6
(assert (not (<= 0 i13@154)))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(push) ; 6
; [then-branch 134] 0 <= i13@154
(assert (<= 0 i13@154))
; [eval] i13 < index3
(pop) ; 6
(push) ; 6
; [else-branch 134] !0 <= i13@154
(assert (not (<= 0 i13@154)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(push) ; 5
(push) ; 6
(assert (not (not (and (<= 0 i13@154) (implies (<= 0 i13@154) (< i13@154 index3@151))))))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(push) ; 6
(assert (not (and (<= 0 i13@154) (implies (<= 0 i13@154) (< i13@154 index3@151)))))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(push) ; 6
; [then-branch 135] 0 <= i13@154 && 0 <= i13@154 ==> i13@154 < index3@151
(assert (and (<= 0 i13@154) (implies (<= 0 i13@154) (< i13@154 index3@151))))
; [eval] this.SortedList_Elements[i13] < element
; [eval] this.SortedList_Elements[i13]
(pop) ; 6
(push) ; 6
; [else-branch 135] !0 <= i13@154 && 0 <= i13@154 ==> i13@154 < index3@151
(assert (not (and (<= 0 i13@154) (implies (<= 0 i13@154) (< i13@154 index3@151)))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
; Nested auxiliary terms
(assert (forall ((i13@154 Int)) (!
  (implies
    (and (<= 0 i13@154) (implies (<= 0 i13@154) (< i13@154 index3@151)))
    (< ($Seq.index $t@153 i13@154) element@138))
  :pattern (($Seq.index $t@153 i13@154))
  :qid |prog.l150|)))
(declare-const $t@155 $Snap)
(assert (= $t@155 $Snap.unit))
; [eval] index3 < |this.SortedList_Elements| && this.SortedList_Elements[index3] < element
; [eval] index3 < |this.SortedList_Elements|
; [eval] |this.SortedList_Elements|
; [eval] index3 < |this.SortedList_Elements| ==> this.SortedList_Elements[index3] < element
; [eval] index3 < |this.SortedList_Elements|
; [eval] |this.SortedList_Elements|
(push) ; 4
(push) ; 5
(assert (not (not (< index3@151 ($Seq.length $t@153)))))
(check-sat)
; unknown
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(push) ; 5
(assert (not (< index3@151 ($Seq.length $t@153))))
(check-sat)
; unknown
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(push) ; 5
; [then-branch 136] index3@151 < |$t@153|
(assert (< index3@151 ($Seq.length $t@153)))
; [eval] this.SortedList_Elements[index3] < element
; [eval] this.SortedList_Elements[index3]
(pop) ; 5
(push) ; 5
; [else-branch 136] !index3@151 < |$t@153|
(assert (not (< index3@151 ($Seq.length $t@153))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (and
  (< index3@151 ($Seq.length $t@153))
  (implies
    (< index3@151 ($Seq.length $t@153))
    (< ($Seq.index $t@153 index3@151) element@138))))
(check-sat)
; unknown
(pop) ; 3
(push) ; 3
; Loop: Establish loop invariant
(set-option :timeout 0)
(push) ; 4
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(push) ; 4
(assert (not (<= (/ (to_real 1) (to_real 2)) $Perm.Write)))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(assert (<= (/ (to_real 1) (to_real 2)) $Perm.Write))
(set-option :timeout 250)
(push) ; 4
(assert (not (or
  (= (- $Perm.Write (/ (to_real 1) (to_real 2))) $Perm.No)
  (< (- $Perm.Write (/ (to_real 1) (to_real 2))) $Perm.No))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; [eval] 0 <= index3 && index3 <= |this.SortedList_Elements|
; [eval] 0 <= index3
; [eval] 0 <= index3 ==> index3 <= |this.SortedList_Elements|
; [eval] 0 <= index3
(push) ; 4
(push) ; 5
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(push) ; 5
; [then-branch 137] True
; [eval] index3 <= |this.SortedList_Elements|
; [eval] |this.SortedList_Elements|
(pop) ; 5
; [dead else-branch 137] False
(pop) ; 4
; Joined path conditions
(set-option :timeout 0)
(push) ; 4
(assert (not (<= 0 ($Seq.length $t@142))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(assert (<= 0 ($Seq.length $t@142)))
; [eval] (forall i13: Int :: 0 <= i13 && i13 < index3 ==> this.SortedList_Elements[i13] < element)
(declare-const i13@156 Int)
(push) ; 4
; [eval] 0 <= i13 && i13 < index3 ==> this.SortedList_Elements[i13] < element
; [eval] 0 <= i13 && i13 < index3
; [eval] 0 <= i13
; [eval] 0 <= i13 ==> i13 < index3
; [eval] 0 <= i13
(push) ; 5
(set-option :timeout 250)
(push) ; 6
(assert (not (not (<= 0 i13@156))))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(push) ; 6
(assert (not (<= 0 i13@156)))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(push) ; 6
; [then-branch 138] 0 <= i13@156
(assert (<= 0 i13@156))
; [eval] i13 < index3
(pop) ; 6
(push) ; 6
; [else-branch 138] !0 <= i13@156
(assert (not (<= 0 i13@156)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(push) ; 5
(push) ; 6
(assert (not (not (and (<= 0 i13@156) (implies (<= 0 i13@156) (< i13@156 0))))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; [dead then-branch 139] 0 <= i13@156 && 0 <= i13@156 ==> i13@156 < 0
(push) ; 6
; [else-branch 139] !0 <= i13@156 && 0 <= i13@156 ==> i13@156 < 0
(assert (not (and (<= 0 i13@156) (implies (<= 0 i13@156) (< i13@156 0)))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; [eval] this.SortedList_Elements[i13]
(pop) ; 4
; Nested auxiliary terms
(pop) ; 3
; Loop: Verify loop body
(push) ; 3
(assert (and
  (< index3@151 ($Seq.length $t@153))
  (implies
    (< index3@151 ($Seq.length $t@153))
    (< ($Seq.index $t@153 index3@151) element@138))))
(assert (= $t@155 $Snap.unit))
(assert (forall ((i13@154 Int)) (!
  (implies
    (and (<= 0 i13@154) (implies (<= 0 i13@154) (< i13@154 index3@151)))
    (< ($Seq.index $t@153 i13@154) element@138))
  :pattern (($Seq.index $t@153 i13@154))
  :qid |prog.l150|)))
(assert (and
  (<= 0 index3@151)
  (implies (<= 0 index3@151) (<= index3@151 ($Seq.length $t@153)))))
(assert (implies (< $Perm.No (/ (to_real 1) (to_real 2))) (not (= this@137 $Ref.null))))
(assert (= $t@152 ($Snap.combine ($SortWrappers.$Seq<Int>To$Snap $t@153) $Snap.unit)))
; [exec]
; index3 := index3 + 1
; [eval] index3 + 1
(declare-const index3@157 Int)
(assert (= index3@157 (+ index3@151 1)))
(set-option :timeout 0)
(push) ; 4
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; [eval] 0 <= index3 && index3 <= |this.SortedList_Elements|
; [eval] 0 <= index3
; [eval] 0 <= index3 ==> index3 <= |this.SortedList_Elements|
; [eval] 0 <= index3
(push) ; 4
(set-option :timeout 250)
(push) ; 5
(assert (not (not (<= 0 index3@157))))
(check-sat)
; unknown
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(push) ; 5
(assert (not (<= 0 index3@157)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(push) ; 5
; [then-branch 140] 0 <= index3@157
(assert (<= 0 index3@157))
; [eval] index3 <= |this.SortedList_Elements|
; [eval] |this.SortedList_Elements|
(pop) ; 5
; [dead else-branch 140] !0 <= index3@157
(pop) ; 4
; Joined path conditions
(set-option :timeout 0)
(push) ; 4
(assert (not (and
  (<= 0 index3@157)
  (implies (<= 0 index3@157) (<= index3@157 ($Seq.length $t@153))))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(assert (and
  (<= 0 index3@157)
  (implies (<= 0 index3@157) (<= index3@157 ($Seq.length $t@153)))))
; [eval] (forall i13: Int :: 0 <= i13 && i13 < index3 ==> this.SortedList_Elements[i13] < element)
(declare-const i13@158 Int)
(push) ; 4
; [eval] 0 <= i13 && i13 < index3 ==> this.SortedList_Elements[i13] < element
; [eval] 0 <= i13 && i13 < index3
; [eval] 0 <= i13
; [eval] 0 <= i13 ==> i13 < index3
; [eval] 0 <= i13
(push) ; 5
(set-option :timeout 250)
(push) ; 6
(assert (not (not (<= 0 i13@158))))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(push) ; 6
(assert (not (<= 0 i13@158)))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(push) ; 6
; [then-branch 141] 0 <= i13@158
(assert (<= 0 i13@158))
; [eval] i13 < index3
(pop) ; 6
(push) ; 6
; [else-branch 141] !0 <= i13@158
(assert (not (<= 0 i13@158)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(push) ; 5
(push) ; 6
(assert (not (not (and (<= 0 i13@158) (implies (<= 0 i13@158) (< i13@158 index3@157))))))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(push) ; 6
(assert (not (and (<= 0 i13@158) (implies (<= 0 i13@158) (< i13@158 index3@157)))))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(push) ; 6
; [then-branch 142] 0 <= i13@158 && 0 <= i13@158 ==> i13@158 < index3@157
(assert (and (<= 0 i13@158) (implies (<= 0 i13@158) (< i13@158 index3@157))))
; [eval] this.SortedList_Elements[i13] < element
; [eval] this.SortedList_Elements[i13]
(pop) ; 6
(push) ; 6
; [else-branch 142] !0 <= i13@158 && 0 <= i13@158 ==> i13@158 < index3@157
(assert (not (and (<= 0 i13@158) (implies (<= 0 i13@158) (< i13@158 index3@157)))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
; Nested auxiliary terms
(set-option :timeout 0)
(push) ; 4
(assert (not (forall ((i13@158 Int)) (!
  (implies
    (and (<= 0 i13@158) (implies (<= 0 i13@158) (< i13@158 index3@157)))
    (< ($Seq.index $t@153 i13@158) element@138))
  :pattern (($Seq.index $t@153 i13@158))
  :qid |prog.l150|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(assert (forall ((i13@158 Int)) (!
  (implies
    (and (<= 0 i13@158) (implies (<= 0 i13@158) (< i13@158 index3@157)))
    (< ($Seq.index $t@153 i13@158) element@138))
  :pattern (($Seq.index $t@153 i13@158))
  :qid |prog.l150|)))
(pop) ; 3
; Loop: Continue after loop
(push) ; 3
(assert (<= 0 ($Seq.length $t@142)))
(assert (<= (/ (to_real 1) (to_real 2)) $Perm.Write))
(declare-const $t@159 $Snap)
(declare-const $t@160 $Seq<Int>)
(assert (= $t@159 ($Snap.combine ($SortWrappers.$Seq<Int>To$Snap $t@160) $Snap.unit)))
(push) ; 4
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(assert (implies (< $Perm.No (/ (to_real 1) (to_real 2))) (not (= this@137 $Ref.null))))
(assert (implies
  (< $Perm.No (- $Perm.Write (/ (to_real 1) (to_real 2))))
  ($Seq.equal $t@160 $t@142)))
; [eval] 0 <= index3 && index3 <= |this.SortedList_Elements|
; [eval] 0 <= index3
; [eval] 0 <= index3 ==> index3 <= |this.SortedList_Elements|
; [eval] 0 <= index3
(push) ; 4
(set-option :timeout 250)
(push) ; 5
(assert (not (not (<= 0 index3@151))))
(check-sat)
; unknown
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(push) ; 5
(assert (not (<= 0 index3@151)))
(check-sat)
; unknown
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(push) ; 5
; [then-branch 143] 0 <= index3@151
(assert (<= 0 index3@151))
; [eval] index3 <= |this.SortedList_Elements|
; [eval] |this.SortedList_Elements|
(pop) ; 5
(push) ; 5
; [else-branch 143] !0 <= index3@151
(assert (not (<= 0 index3@151)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (and
  (<= 0 index3@151)
  (implies (<= 0 index3@151) (<= index3@151 ($Seq.length $t@160)))))
; [eval] (forall i13: Int :: 0 <= i13 && i13 < index3 ==> this.SortedList_Elements[i13] < element)
(declare-const i13@161 Int)
(push) ; 4
; [eval] 0 <= i13 && i13 < index3 ==> this.SortedList_Elements[i13] < element
; [eval] 0 <= i13 && i13 < index3
; [eval] 0 <= i13
; [eval] 0 <= i13 ==> i13 < index3
; [eval] 0 <= i13
(push) ; 5
(push) ; 6
(assert (not (not (<= 0 i13@161))))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(push) ; 6
(assert (not (<= 0 i13@161)))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(push) ; 6
; [then-branch 144] 0 <= i13@161
(assert (<= 0 i13@161))
; [eval] i13 < index3
(pop) ; 6
(push) ; 6
; [else-branch 144] !0 <= i13@161
(assert (not (<= 0 i13@161)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(push) ; 5
(push) ; 6
(assert (not (not (and (<= 0 i13@161) (implies (<= 0 i13@161) (< i13@161 index3@151))))))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(push) ; 6
(assert (not (and (<= 0 i13@161) (implies (<= 0 i13@161) (< i13@161 index3@151)))))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(push) ; 6
; [then-branch 145] 0 <= i13@161 && 0 <= i13@161 ==> i13@161 < index3@151
(assert (and (<= 0 i13@161) (implies (<= 0 i13@161) (< i13@161 index3@151))))
; [eval] this.SortedList_Elements[i13] < element
; [eval] this.SortedList_Elements[i13]
(pop) ; 6
(push) ; 6
; [else-branch 145] !0 <= i13@161 && 0 <= i13@161 ==> i13@161 < index3@151
(assert (not (and (<= 0 i13@161) (implies (<= 0 i13@161) (< i13@161 index3@151)))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
; Nested auxiliary terms
(assert (forall ((i13@161 Int)) (!
  (implies
    (and (<= 0 i13@161) (implies (<= 0 i13@161) (< i13@161 index3@151)))
    (< ($Seq.index $t@160 i13@161) element@138))
  :pattern (($Seq.index $t@160 i13@161))
  :qid |prog.l150|)))
; [eval] !(index3 < |this.SortedList_Elements| && this.SortedList_Elements[index3] < element)
; [eval] index3 < |this.SortedList_Elements| && this.SortedList_Elements[index3] < element
; [eval] index3 < |this.SortedList_Elements|
; [eval] |this.SortedList_Elements|
; [eval] index3 < |this.SortedList_Elements| ==> this.SortedList_Elements[index3] < element
; [eval] index3 < |this.SortedList_Elements|
; [eval] |this.SortedList_Elements|
(push) ; 4
(push) ; 5
(assert (not (not (< index3@151 ($Seq.length $t@160)))))
(check-sat)
; unknown
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(push) ; 5
(assert (not (< index3@151 ($Seq.length $t@160))))
(check-sat)
; unknown
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(push) ; 5
; [then-branch 146] index3@151 < |$t@160|
(assert (< index3@151 ($Seq.length $t@160)))
; [eval] this.SortedList_Elements[index3] < element
; [eval] this.SortedList_Elements[index3]
(pop) ; 5
(push) ; 5
; [else-branch 146] !index3@151 < |$t@160|
(assert (not (< index3@151 ($Seq.length $t@160))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (not
  (and
    (< index3@151 ($Seq.length $t@160))
    (implies
      (< index3@151 ($Seq.length $t@160))
      (< ($Seq.index $t@160 index3@151) element@138)))))
(check-sat)
; unknown
; [exec]
; this.SortedList_Elements := this.SortedList_Elements[..index3] ++ Seq(element) ++ this.SortedList_Elements[index3..]
; [eval] this.SortedList_Elements[..index3] ++ Seq(element) ++ this.SortedList_Elements[index3..]
; [eval] this.SortedList_Elements[..index3] ++ Seq(element)
; [eval] this.SortedList_Elements[..index3]
; [eval] Seq(element)
(assert (= ($Seq.length ($Seq.singleton element@138)) 1))
; [eval] this.SortedList_Elements[index3..]
; [exec]
; res := index3
; [eval] (forall i11: Int :: (forall j5: Int :: 0 <= i11 && (i11 < j5 && j5 < |this.SortedList_Elements|) ==> this.SortedList_Elements[i11] <= this.SortedList_Elements[j5]))
(declare-const i11@162 Int)
(push) ; 4
; [eval] (forall j5: Int :: 0 <= i11 && (i11 < j5 && j5 < |this.SortedList_Elements|) ==> this.SortedList_Elements[i11] <= this.SortedList_Elements[j5])
(declare-const j5@163 Int)
(push) ; 5
; [eval] 0 <= i11 && (i11 < j5 && j5 < |this.SortedList_Elements|) ==> this.SortedList_Elements[i11] <= this.SortedList_Elements[j5]
; [eval] 0 <= i11 && (i11 < j5 && j5 < |this.SortedList_Elements|)
; [eval] 0 <= i11
; [eval] 0 <= i11 ==> i11 < j5 && j5 < |this.SortedList_Elements|
; [eval] 0 <= i11
(push) ; 6
(push) ; 7
(assert (not (not (<= 0 i11@162))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(push) ; 7
(assert (not (<= 0 i11@162)))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(push) ; 7
; [then-branch 147] 0 <= i11@162
(assert (<= 0 i11@162))
; [eval] i11 < j5 && j5 < |this.SortedList_Elements|
; [eval] i11 < j5
; [eval] i11 < j5 ==> j5 < |this.SortedList_Elements|
; [eval] i11 < j5
(push) ; 8
(push) ; 9
(assert (not (not (< i11@162 j5@163))))
(check-sat)
; unknown
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(push) ; 9
(assert (not (< i11@162 j5@163)))
(check-sat)
; unknown
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(push) ; 9
; [then-branch 148] i11@162 < j5@163
(assert (< i11@162 j5@163))
; [eval] j5 < |this.SortedList_Elements|
; [eval] |this.SortedList_Elements|
(pop) ; 9
(push) ; 9
; [else-branch 148] !i11@162 < j5@163
(assert (not (< i11@162 j5@163)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
(push) ; 7
; [else-branch 147] !0 <= i11@162
(assert (not (<= 0 i11@162)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
(push) ; 7
(assert (not (not
  (and
    (<= 0 i11@162)
    (implies
      (<= 0 i11@162)
      (and
        (< i11@162 j5@163)
        (implies
          (< i11@162 j5@163)
          (<
            j5@163
            ($Seq.length
              ($Seq.append
                ($Seq.append
                  ($Seq.take $t@160 index3@151)
                  ($Seq.singleton element@138))
                ($Seq.drop $t@160 index3@151)))))))))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(push) ; 7
(assert (not (and
  (<= 0 i11@162)
  (implies
    (<= 0 i11@162)
    (and
      (< i11@162 j5@163)
      (implies
        (< i11@162 j5@163)
        (<
          j5@163
          ($Seq.length
            ($Seq.append
              ($Seq.append
                ($Seq.take $t@160 index3@151)
                ($Seq.singleton element@138))
              ($Seq.drop $t@160 index3@151))))))))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(push) ; 7
; [then-branch 149] 0 <= i11@162 && 0 <= i11@162 ==> i11@162 < j5@163 && i11@162 < j5@163 ==> j5@163 < |$t@160[:index3@151] ++ [element@138] ++ $t@160[index3@151:]|
(assert (and
  (<= 0 i11@162)
  (implies
    (<= 0 i11@162)
    (and
      (< i11@162 j5@163)
      (implies
        (< i11@162 j5@163)
        (<
          j5@163
          ($Seq.length
            ($Seq.append
              ($Seq.append
                ($Seq.take $t@160 index3@151)
                ($Seq.singleton element@138))
              ($Seq.drop $t@160 index3@151)))))))))
; [eval] this.SortedList_Elements[i11] <= this.SortedList_Elements[j5]
; [eval] this.SortedList_Elements[i11]
; [eval] this.SortedList_Elements[j5]
(pop) ; 7
(push) ; 7
; [else-branch 149] !0 <= i11@162 && 0 <= i11@162 ==> i11@162 < j5@163 && i11@162 < j5@163 ==> j5@163 < |$t@160[:index3@151] ++ [element@138] ++ $t@160[index3@151:]|
(assert (not
  (and
    (<= 0 i11@162)
    (implies
      (<= 0 i11@162)
      (and
        (< i11@162 j5@163)
        (implies
          (< i11@162 j5@163)
          (<
            j5@163
            ($Seq.length
              ($Seq.append
                ($Seq.append
                  ($Seq.take $t@160 index3@151)
                  ($Seq.singleton element@138))
                ($Seq.drop $t@160 index3@151))))))))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(pop) ; 5
; Nested auxiliary terms
(pop) ; 4
; Nested auxiliary terms
(set-option :timeout 0)
(push) ; 4
(assert (not (forall ((i11@162 Int)) (!
  (forall ((j5@163 Int)) (!
    (implies
      (and
        (<= 0 i11@162)
        (implies
          (<= 0 i11@162)
          (and
            (< i11@162 j5@163)
            (implies
              (< i11@162 j5@163)
              (<
                j5@163
                ($Seq.length
                  ($Seq.append
                    ($Seq.append
                      ($Seq.take $t@160 index3@151)
                      ($Seq.singleton element@138))
                    ($Seq.drop $t@160 index3@151))))))))
      (<=
        ($Seq.index
          ($Seq.append
            ($Seq.append
              ($Seq.take $t@160 index3@151)
              ($Seq.singleton element@138))
            ($Seq.drop $t@160 index3@151))
          i11@162)
        ($Seq.index
          ($Seq.append
            ($Seq.append
              ($Seq.take $t@160 index3@151)
              ($Seq.singleton element@138))
            ($Seq.drop $t@160 index3@151))
          j5@163)))
    :pattern (($Seq.index
      ($Seq.append
        ($Seq.append ($Seq.take $t@160 index3@151) ($Seq.singleton element@138))
        ($Seq.drop $t@160 index3@151))
      j5@163))
    :qid |prog.l139|))
  :pattern (($Seq.index
    ($Seq.append
      ($Seq.append ($Seq.take $t@160 index3@151) ($Seq.singleton element@138))
      ($Seq.drop $t@160 index3@151))
    i11@162))
  :qid |prog.l139|))))
(check-sat)
; unsat
(pop) ; 4
; 0,01s
; (get-info :all-statistics)
(assert (forall ((i11@162 Int)) (!
  (forall ((j5@163 Int)) (!
    (implies
      (and
        (<= 0 i11@162)
        (implies
          (<= 0 i11@162)
          (and
            (< i11@162 j5@163)
            (implies
              (< i11@162 j5@163)
              (<
                j5@163
                ($Seq.length
                  ($Seq.append
                    ($Seq.append
                      ($Seq.take $t@160 index3@151)
                      ($Seq.singleton element@138))
                    ($Seq.drop $t@160 index3@151))))))))
      (<=
        ($Seq.index
          ($Seq.append
            ($Seq.append
              ($Seq.take $t@160 index3@151)
              ($Seq.singleton element@138))
            ($Seq.drop $t@160 index3@151))
          i11@162)
        ($Seq.index
          ($Seq.append
            ($Seq.append
              ($Seq.take $t@160 index3@151)
              ($Seq.singleton element@138))
            ($Seq.drop $t@160 index3@151))
          j5@163)))
    :pattern (($Seq.index
      ($Seq.append
        ($Seq.append ($Seq.take $t@160 index3@151) ($Seq.singleton element@138))
        ($Seq.drop $t@160 index3@151))
      j5@163))
    :qid |prog.l139|))
  :pattern (($Seq.index
    ($Seq.append
      ($Seq.append ($Seq.take $t@160 index3@151) ($Seq.singleton element@138))
      ($Seq.drop $t@160 index3@151))
    i11@162))
  :qid |prog.l139|)))
; [eval] 0 <= res && res <= old(|this.SortedList_Elements|)
; [eval] 0 <= res
; [eval] 0 <= res ==> res <= old(|this.SortedList_Elements|)
; [eval] 0 <= res
(push) ; 4
(set-option :timeout 250)
(push) ; 5
(assert (not (not (<= 0 index3@151))))
(check-sat)
; unknown
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(push) ; 5
(assert (not (<= 0 index3@151)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(push) ; 5
; [then-branch 150] 0 <= index3@151
(assert (<= 0 index3@151))
; [eval] res <= old(|this.SortedList_Elements|)
; [eval] old(|this.SortedList_Elements|)
; [eval] |this.SortedList_Elements|
(pop) ; 5
; [dead else-branch 150] !0 <= index3@151
(pop) ; 4
; Joined path conditions
(set-option :timeout 0)
(push) ; 4
(assert (not (and
  (<= 0 index3@151)
  (implies (<= 0 index3@151) (<= index3@151 ($Seq.length $t@142))))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(assert (and
  (<= 0 index3@151)
  (implies (<= 0 index3@151) (<= index3@151 ($Seq.length $t@142)))))
; [eval] this.SortedList_Elements == old(this.SortedList_Elements)[..res] ++ Seq(element) ++ old(this.SortedList_Elements)[res..]
; [eval] old(this.SortedList_Elements)[..res] ++ Seq(element) ++ old(this.SortedList_Elements)[res..]
; [eval] old(this.SortedList_Elements)[..res] ++ Seq(element)
; [eval] old(this.SortedList_Elements)[..res]
; [eval] old(this.SortedList_Elements)
; [eval] Seq(element)
; [eval] old(this.SortedList_Elements)[res..]
; [eval] old(this.SortedList_Elements)
(push) ; 4
(assert (not ($Seq.equal
  ($Seq.append
    ($Seq.append ($Seq.take $t@160 index3@151) ($Seq.singleton element@138))
    ($Seq.drop $t@160 index3@151))
  ($Seq.append
    ($Seq.append ($Seq.take $t@142 index3@151) ($Seq.singleton element@138))
    ($Seq.drop $t@142 index3@151)))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(assert ($Seq.equal
  ($Seq.append
    ($Seq.append ($Seq.take $t@160 index3@151) ($Seq.singleton element@138))
    ($Seq.drop $t@160 index3@151))
  ($Seq.append
    ($Seq.append ($Seq.take $t@142 index3@151) ($Seq.singleton element@138))
    ($Seq.drop $t@142 index3@151))))
; [eval] (element in this.SortedList_Elements)
(push) ; 4
(assert (not ($Seq.contains
  ($Seq.append
    ($Seq.append ($Seq.take $t@160 index3@151) ($Seq.singleton element@138))
    ($Seq.drop $t@160 index3@151))
  element@138)))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(assert ($Seq.contains
  ($Seq.append
    ($Seq.append ($Seq.take $t@160 index3@151) ($Seq.singleton element@138))
    ($Seq.drop $t@160 index3@151))
  element@138))
; [eval] (forall i12: Int :: (i12 in old(this.SortedList_Elements)) ==> (i12 in this.SortedList_Elements))
(declare-const i12@164 Int)
(push) ; 4
; [eval] (i12 in old(this.SortedList_Elements)) ==> (i12 in this.SortedList_Elements)
; [eval] (i12 in old(this.SortedList_Elements))
; [eval] old(this.SortedList_Elements)
(push) ; 5
(set-option :timeout 250)
(push) ; 6
(assert (not (not ($Seq.contains $t@142 i12@164))))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(push) ; 6
(assert (not ($Seq.contains $t@142 i12@164)))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(push) ; 6
; [then-branch 151] i12@164 in $t@142
(assert ($Seq.contains $t@142 i12@164))
; [eval] (i12 in this.SortedList_Elements)
(pop) ; 6
(push) ; 6
; [else-branch 151] !i12@164 in $t@142
(assert (not ($Seq.contains $t@142 i12@164)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
; Nested auxiliary terms
(set-option :timeout 0)
(push) ; 4
(assert (not (and
  (forall ((i12@164 Int)) (!
    (implies
      ($Seq.contains $t@142 i12@164)
      ($Seq.contains
        ($Seq.append
          ($Seq.append
            ($Seq.take $t@160 index3@151)
            ($Seq.singleton element@138))
          ($Seq.drop $t@160 index3@151))
        i12@164))
    :pattern (($Seq.contains $t@142 i12@164))
    :qid |prog.l143|))
  (forall ((i12@164 Int)) (!
    (implies
      ($Seq.contains $t@142 i12@164)
      ($Seq.contains
        ($Seq.append
          ($Seq.append
            ($Seq.take $t@160 index3@151)
            ($Seq.singleton element@138))
          ($Seq.drop $t@160 index3@151))
        i12@164))
    :pattern (($Seq.contains
      ($Seq.append
        ($Seq.append ($Seq.take $t@160 index3@151) ($Seq.singleton element@138))
        ($Seq.drop $t@160 index3@151))
      i12@164))
    :qid |prog.l143|)))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(assert (and
  (forall ((i12@164 Int)) (!
    (implies
      ($Seq.contains $t@142 i12@164)
      ($Seq.contains
        ($Seq.append
          ($Seq.append
            ($Seq.take $t@160 index3@151)
            ($Seq.singleton element@138))
          ($Seq.drop $t@160 index3@151))
        i12@164))
    :pattern (($Seq.contains $t@142 i12@164))
    :qid |prog.l143|))
  (forall ((i12@164 Int)) (!
    (implies
      ($Seq.contains $t@142 i12@164)
      ($Seq.contains
        ($Seq.append
          ($Seq.append
            ($Seq.take $t@160 index3@151)
            ($Seq.singleton element@138))
          ($Seq.drop $t@160 index3@151))
        i12@164))
    :pattern (($Seq.contains
      ($Seq.append
        ($Seq.append ($Seq.take $t@160 index3@151) ($Seq.singleton element@138))
        ($Seq.drop $t@160 index3@151))
      i12@164))
    :qid |prog.l143|))))
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- InvalidArrayWriteRead_ArrayRead ----------
(declare-const array2@165 $Ref)
(declare-const invalidRead@166 Int)
(push) ; 1
(declare-const $t@167 $Snap)
(declare-const $t@168 $Seq<Int>)
(assert (= $t@167 ($Snap.combine ($SortWrappers.$Seq<Int>To$Snap $t@168) $Snap.unit)))
(assert (not (= array2@165 $Ref.null)))
; [eval] |array2.arrayContents| == 2
; [eval] |array2.arrayContents|
(assert (= ($Seq.length $t@168) 2))
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; invalidRead := arrayRead(array2, 8)
; [eval] arrayRead(array2, 8)
(push) ; 3
(declare-const $k@169 $Perm)
(assert ($Perm.isReadVar $k@169 $Perm.Write))
(push) ; 4
(assert (not (or (= $k@169 $Perm.No) true)))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(assert (< $k@169 $Perm.Write))
; [eval] |array2.arrayContents| > 8
; [eval] |array2.arrayContents|
(push) ; 4
(assert (not (> ($Seq.length $t@168) 8)))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; [eval] |array2.arrayContents| > 8
; [eval] |array2.arrayContents|
(push) ; 4
(assert (not (> ($Seq.length $t@168) 8)))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- InvalidArrayWriteRead_ArrayWrote ----------
(declare-const array3@170 $Ref)
(push) ; 1
(declare-const $t@171 $Snap)
(declare-const $t@172 $Seq<Int>)
(assert (= $t@171 ($Snap.combine ($SortWrappers.$Seq<Int>To$Snap $t@172) $Snap.unit)))
(assert (not (= array3@170 $Ref.null)))
; [eval] |array3.arrayContents| == 2
; [eval] |array3.arrayContents|
(assert (= ($Seq.length $t@172) 2))
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; assert 16 >= 0
; [eval] 16 >= 0
; [exec]
; assert 16 < |array3.arrayContents|
; [eval] 16 < |array3.arrayContents|
; [eval] |array3.arrayContents|
(push) ; 3
(assert (not (< 16 ($Seq.length $t@172))))
(check-sat)
; unknown
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; [eval] 16 < |array3.arrayContents|
; [eval] |array3.arrayContents|
(push) ; 3
(assert (not (< 16 ($Seq.length $t@172))))
(check-sat)
; unknown
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(pop) ; 2
(pop) ; 1
; ---------- CustomGoto_main ----------
(declare-const a3@173 Int)
(push) ; 1
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
(set-option :timeout 250)
(push) ; 3
(assert (not (not (= 4 2))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; [dead then-branch 152] 4 == 2
(push) ; 3
; [else-branch 152] 4 != 2
(assert (not (= 4 2)))
(pop) ; 3
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(push) ; 3
(assert (not (not (= 4 2))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(push) ; 3
; [then-branch 153] 4 != 2
(assert (not (= 4 2)))
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 154] 4 == 2
(push) ; 4
; [else-branch 154] 4 != 2
(pop) ; 4
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(push) ; 4
; [then-branch 155] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 156] 4 == 2
(push) ; 5
; [else-branch 156] 4 != 2
(pop) ; 5
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(push) ; 5
; [then-branch 157] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 158] 4 == 2
(push) ; 6
; [else-branch 158] 4 != 2
(pop) ; 6
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 6
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(push) ; 6
; [then-branch 159] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 160] 4 == 2
(push) ; 7
; [else-branch 160] 4 != 2
(pop) ; 7
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 7
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(push) ; 7
; [then-branch 161] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 162] 4 == 2
(push) ; 8
; [else-branch 162] 4 != 2
(pop) ; 8
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 8
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(push) ; 8
; [then-branch 163] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 164] 4 == 2
(push) ; 9
; [else-branch 164] 4 != 2
(pop) ; 9
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 9
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(push) ; 9
; [then-branch 165] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 166] 4 == 2
(push) ; 10
; [else-branch 166] 4 != 2
(pop) ; 10
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 10
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 10
; 0,00s
; (get-info :all-statistics)
(push) ; 10
; [then-branch 167] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 168] 4 == 2
(push) ; 11
; [else-branch 168] 4 != 2
(pop) ; 11
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 11
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 11
; 0,00s
; (get-info :all-statistics)
(push) ; 11
; [then-branch 169] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 170] 4 == 2
(push) ; 12
; [else-branch 170] 4 != 2
(pop) ; 12
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 12
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 12
; 0,00s
; (get-info :all-statistics)
(push) ; 12
; [then-branch 171] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 172] 4 == 2
(push) ; 13
; [else-branch 172] 4 != 2
(pop) ; 13
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 13
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 13
; 0,00s
; (get-info :all-statistics)
(push) ; 13
; [then-branch 173] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 174] 4 == 2
(push) ; 14
; [else-branch 174] 4 != 2
(pop) ; 14
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 14
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 14
; 0,00s
; (get-info :all-statistics)
(push) ; 14
; [then-branch 175] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 176] 4 == 2
(push) ; 15
; [else-branch 176] 4 != 2
(pop) ; 15
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 15
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 15
; 0,00s
; (get-info :all-statistics)
(push) ; 15
; [then-branch 177] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 178] 4 == 2
(push) ; 16
; [else-branch 178] 4 != 2
(pop) ; 16
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 16
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 16
; 0,00s
; (get-info :all-statistics)
(push) ; 16
; [then-branch 179] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 180] 4 == 2
(push) ; 17
; [else-branch 180] 4 != 2
(pop) ; 17
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 17
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 17
; 0,00s
; (get-info :all-statistics)
(push) ; 17
; [then-branch 181] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 182] 4 == 2
(push) ; 18
; [else-branch 182] 4 != 2
(pop) ; 18
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 18
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 18
; 0,00s
; (get-info :all-statistics)
(push) ; 18
; [then-branch 183] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 184] 4 == 2
(push) ; 19
; [else-branch 184] 4 != 2
(pop) ; 19
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 19
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 19
; 0,00s
; (get-info :all-statistics)
(push) ; 19
; [then-branch 185] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 186] 4 == 2
(push) ; 20
; [else-branch 186] 4 != 2
(pop) ; 20
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 20
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 20
; 0,00s
; (get-info :all-statistics)
(push) ; 20
; [then-branch 187] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 188] 4 == 2
(push) ; 21
; [else-branch 188] 4 != 2
(pop) ; 21
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 21
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 21
; 0,00s
; (get-info :all-statistics)
(push) ; 21
; [then-branch 189] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 190] 4 == 2
(push) ; 22
; [else-branch 190] 4 != 2
(pop) ; 22
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 22
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 22
; 0,00s
; (get-info :all-statistics)
(push) ; 22
; [then-branch 191] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 192] 4 == 2
(push) ; 23
; [else-branch 192] 4 != 2
(pop) ; 23
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 23
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 23
; 0,00s
; (get-info :all-statistics)
(push) ; 23
; [then-branch 193] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 194] 4 == 2
(push) ; 24
; [else-branch 194] 4 != 2
(pop) ; 24
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 24
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 24
; 0,00s
; (get-info :all-statistics)
(push) ; 24
; [then-branch 195] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 196] 4 == 2
(push) ; 25
; [else-branch 196] 4 != 2
(pop) ; 25
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 25
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 25
; 0,00s
; (get-info :all-statistics)
(push) ; 25
; [then-branch 197] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 198] 4 == 2
(push) ; 26
; [else-branch 198] 4 != 2
(pop) ; 26
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 26
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 26
; 0,00s
; (get-info :all-statistics)
(push) ; 26
; [then-branch 199] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 200] 4 == 2
(push) ; 27
; [else-branch 200] 4 != 2
(pop) ; 27
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 27
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 27
; 0,00s
; (get-info :all-statistics)
(push) ; 27
; [then-branch 201] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 202] 4 == 2
(push) ; 28
; [else-branch 202] 4 != 2
(pop) ; 28
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 28
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 28
; 0,00s
; (get-info :all-statistics)
(push) ; 28
; [then-branch 203] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 204] 4 == 2
(push) ; 29
; [else-branch 204] 4 != 2
(pop) ; 29
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 29
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 29
; 0,00s
; (get-info :all-statistics)
(push) ; 29
; [then-branch 205] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 206] 4 == 2
(push) ; 30
; [else-branch 206] 4 != 2
(pop) ; 30
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 30
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 30
; 0,00s
; (get-info :all-statistics)
(push) ; 30
; [then-branch 207] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 208] 4 == 2
(push) ; 31
; [else-branch 208] 4 != 2
(pop) ; 31
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 31
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 31
; 0,00s
; (get-info :all-statistics)
(push) ; 31
; [then-branch 209] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 210] 4 == 2
(push) ; 32
; [else-branch 210] 4 != 2
(pop) ; 32
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 32
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 32
; 0,00s
; (get-info :all-statistics)
(push) ; 32
; [then-branch 211] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 212] 4 == 2
(push) ; 33
; [else-branch 212] 4 != 2
(pop) ; 33
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 33
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 33
; 0,00s
; (get-info :all-statistics)
(push) ; 33
; [then-branch 213] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 214] 4 == 2
(push) ; 34
; [else-branch 214] 4 != 2
(pop) ; 34
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 34
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 34
; 0,00s
; (get-info :all-statistics)
(push) ; 34
; [then-branch 215] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 216] 4 == 2
(push) ; 35
; [else-branch 216] 4 != 2
(pop) ; 35
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 35
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 35
; 0,00s
; (get-info :all-statistics)
(push) ; 35
; [then-branch 217] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 218] 4 == 2
(push) ; 36
; [else-branch 218] 4 != 2
(pop) ; 36
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 36
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 36
; 0,00s
; (get-info :all-statistics)
(push) ; 36
; [then-branch 219] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 220] 4 == 2
(push) ; 37
; [else-branch 220] 4 != 2
(pop) ; 37
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 37
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 37
; 0,00s
; (get-info :all-statistics)
(push) ; 37
; [then-branch 221] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 222] 4 == 2
(push) ; 38
; [else-branch 222] 4 != 2
(pop) ; 38
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 38
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 38
; 0,00s
; (get-info :all-statistics)
(push) ; 38
; [then-branch 223] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 224] 4 == 2
(push) ; 39
; [else-branch 224] 4 != 2
(pop) ; 39
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 39
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 39
; 0,00s
; (get-info :all-statistics)
(push) ; 39
; [then-branch 225] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 226] 4 == 2
(push) ; 40
; [else-branch 226] 4 != 2
(pop) ; 40
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 40
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 40
; 0,00s
; (get-info :all-statistics)
(push) ; 40
; [then-branch 227] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 228] 4 == 2
(push) ; 41
; [else-branch 228] 4 != 2
(pop) ; 41
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 41
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 41
; 0,00s
; (get-info :all-statistics)
(push) ; 41
; [then-branch 229] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 230] 4 == 2
(push) ; 42
; [else-branch 230] 4 != 2
(pop) ; 42
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 42
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 42
; 0,00s
; (get-info :all-statistics)
(push) ; 42
; [then-branch 231] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 232] 4 == 2
(push) ; 43
; [else-branch 232] 4 != 2
(pop) ; 43
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 43
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 43
; 0,00s
; (get-info :all-statistics)
(push) ; 43
; [then-branch 233] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 234] 4 == 2
(push) ; 44
; [else-branch 234] 4 != 2
(pop) ; 44
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 44
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 44
; 0,00s
; (get-info :all-statistics)
(push) ; 44
; [then-branch 235] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 236] 4 == 2
(push) ; 45
; [else-branch 236] 4 != 2
(pop) ; 45
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 45
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 45
; 0,00s
; (get-info :all-statistics)
(push) ; 45
; [then-branch 237] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 238] 4 == 2
(push) ; 46
; [else-branch 238] 4 != 2
(pop) ; 46
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 46
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 46
; 0,00s
; (get-info :all-statistics)
(push) ; 46
; [then-branch 239] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 240] 4 == 2
(push) ; 47
; [else-branch 240] 4 != 2
(pop) ; 47
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 47
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 47
; 0,00s
; (get-info :all-statistics)
(push) ; 47
; [then-branch 241] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 242] 4 == 2
(push) ; 48
; [else-branch 242] 4 != 2
(pop) ; 48
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 48
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 48
; 0,00s
; (get-info :all-statistics)
(push) ; 48
; [then-branch 243] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 244] 4 == 2
(push) ; 49
; [else-branch 244] 4 != 2
(pop) ; 49
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 49
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 49
; 0,00s
; (get-info :all-statistics)
(push) ; 49
; [then-branch 245] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 246] 4 == 2
(push) ; 50
; [else-branch 246] 4 != 2
(pop) ; 50
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 50
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 50
; 0,00s
; (get-info :all-statistics)
(push) ; 50
; [then-branch 247] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 248] 4 == 2
(push) ; 51
; [else-branch 248] 4 != 2
(pop) ; 51
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 51
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 51
; 0,00s
; (get-info :all-statistics)
(push) ; 51
; [then-branch 249] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 250] 4 == 2
(push) ; 52
; [else-branch 250] 4 != 2
(pop) ; 52
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 52
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 52
; 0,00s
; (get-info :all-statistics)
(push) ; 52
; [then-branch 251] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 252] 4 == 2
(push) ; 53
; [else-branch 252] 4 != 2
(pop) ; 53
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 53
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 53
; 0,00s
; (get-info :all-statistics)
(push) ; 53
; [then-branch 253] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 254] 4 == 2
(push) ; 54
; [else-branch 254] 4 != 2
(pop) ; 54
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 54
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 54
; 0,00s
; (get-info :all-statistics)
(push) ; 54
; [then-branch 255] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 256] 4 == 2
(push) ; 55
; [else-branch 256] 4 != 2
(pop) ; 55
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 55
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 55
; 0,00s
; (get-info :all-statistics)
(push) ; 55
; [then-branch 257] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 258] 4 == 2
(push) ; 56
; [else-branch 258] 4 != 2
(pop) ; 56
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 56
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 56
; 0,00s
; (get-info :all-statistics)
(push) ; 56
; [then-branch 259] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 260] 4 == 2
(push) ; 57
; [else-branch 260] 4 != 2
(pop) ; 57
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 57
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 57
; 0,00s
; (get-info :all-statistics)
(push) ; 57
; [then-branch 261] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 262] 4 == 2
(push) ; 58
; [else-branch 262] 4 != 2
(pop) ; 58
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 58
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 58
; 0,00s
; (get-info :all-statistics)
(push) ; 58
; [then-branch 263] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 264] 4 == 2
(push) ; 59
; [else-branch 264] 4 != 2
(pop) ; 59
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 59
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 59
; 0,00s
; (get-info :all-statistics)
(push) ; 59
; [then-branch 265] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 266] 4 == 2
(push) ; 60
; [else-branch 266] 4 != 2
(pop) ; 60
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 60
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 60
; 0,00s
; (get-info :all-statistics)
(push) ; 60
; [then-branch 267] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 268] 4 == 2
(push) ; 61
; [else-branch 268] 4 != 2
(pop) ; 61
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 61
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 61
; 0,00s
; (get-info :all-statistics)
(push) ; 61
; [then-branch 269] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 270] 4 == 2
(push) ; 62
; [else-branch 270] 4 != 2
(pop) ; 62
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 62
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 62
; 0,00s
; (get-info :all-statistics)
(push) ; 62
; [then-branch 271] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 272] 4 == 2
(push) ; 63
; [else-branch 272] 4 != 2
(pop) ; 63
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 63
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 63
; 0,00s
; (get-info :all-statistics)
(push) ; 63
; [then-branch 273] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 274] 4 == 2
(push) ; 64
; [else-branch 274] 4 != 2
(pop) ; 64
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 64
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 64
; 0,00s
; (get-info :all-statistics)
(push) ; 64
; [then-branch 275] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 276] 4 == 2
(push) ; 65
; [else-branch 276] 4 != 2
(pop) ; 65
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 65
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 65
; 0,00s
; (get-info :all-statistics)
(push) ; 65
; [then-branch 277] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 278] 4 == 2
(push) ; 66
; [else-branch 278] 4 != 2
(pop) ; 66
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 66
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 66
; 0,00s
; (get-info :all-statistics)
(push) ; 66
; [then-branch 279] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 280] 4 == 2
(push) ; 67
; [else-branch 280] 4 != 2
(pop) ; 67
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 67
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 67
; 0,00s
; (get-info :all-statistics)
(push) ; 67
; [then-branch 281] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 282] 4 == 2
(push) ; 68
; [else-branch 282] 4 != 2
(pop) ; 68
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 68
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 68
; 0,00s
; (get-info :all-statistics)
(push) ; 68
; [then-branch 283] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 284] 4 == 2
(push) ; 69
; [else-branch 284] 4 != 2
(pop) ; 69
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 69
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 69
; 0,00s
; (get-info :all-statistics)
(push) ; 69
; [then-branch 285] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 286] 4 == 2
(push) ; 70
; [else-branch 286] 4 != 2
(pop) ; 70
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 70
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 70
; 0,00s
; (get-info :all-statistics)
(push) ; 70
; [then-branch 287] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 288] 4 == 2
(push) ; 71
; [else-branch 288] 4 != 2
(pop) ; 71
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 71
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 71
; 0,00s
; (get-info :all-statistics)
(push) ; 71
; [then-branch 289] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 290] 4 == 2
(push) ; 72
; [else-branch 290] 4 != 2
(pop) ; 72
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 72
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 72
; 0,00s
; (get-info :all-statistics)
(push) ; 72
; [then-branch 291] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 292] 4 == 2
(push) ; 73
; [else-branch 292] 4 != 2
(pop) ; 73
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 73
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 73
; 0,00s
; (get-info :all-statistics)
(push) ; 73
; [then-branch 293] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 294] 4 == 2
(push) ; 74
; [else-branch 294] 4 != 2
(pop) ; 74
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 74
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 74
; 0,00s
; (get-info :all-statistics)
(push) ; 74
; [then-branch 295] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 296] 4 == 2
(push) ; 75
; [else-branch 296] 4 != 2
(pop) ; 75
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 75
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 75
; 0,00s
; (get-info :all-statistics)
(push) ; 75
; [then-branch 297] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 298] 4 == 2
(push) ; 76
; [else-branch 298] 4 != 2
(pop) ; 76
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 76
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 76
; 0,00s
; (get-info :all-statistics)
(push) ; 76
; [then-branch 299] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 300] 4 == 2
(push) ; 77
; [else-branch 300] 4 != 2
(pop) ; 77
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 77
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 77
; 0,00s
; (get-info :all-statistics)
(push) ; 77
; [then-branch 301] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 302] 4 == 2
(push) ; 78
; [else-branch 302] 4 != 2
(pop) ; 78
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 78
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 78
; 0,00s
; (get-info :all-statistics)
(push) ; 78
; [then-branch 303] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 304] 4 == 2
(push) ; 79
; [else-branch 304] 4 != 2
(pop) ; 79
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 79
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 79
; 0,00s
; (get-info :all-statistics)
(push) ; 79
; [then-branch 305] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 306] 4 == 2
(push) ; 80
; [else-branch 306] 4 != 2
(pop) ; 80
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 80
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 80
; 0,00s
; (get-info :all-statistics)
(push) ; 80
; [then-branch 307] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 308] 4 == 2
(push) ; 81
; [else-branch 308] 4 != 2
(pop) ; 81
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 81
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 81
; 0,00s
; (get-info :all-statistics)
(push) ; 81
; [then-branch 309] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 310] 4 == 2
(push) ; 82
; [else-branch 310] 4 != 2
(pop) ; 82
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 82
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 82
; 0,00s
; (get-info :all-statistics)
(push) ; 82
; [then-branch 311] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 312] 4 == 2
(push) ; 83
; [else-branch 312] 4 != 2
(pop) ; 83
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 83
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 83
; 0,00s
; (get-info :all-statistics)
(push) ; 83
; [then-branch 313] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 314] 4 == 2
(push) ; 84
; [else-branch 314] 4 != 2
(pop) ; 84
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 84
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 84
; 0,00s
; (get-info :all-statistics)
(push) ; 84
; [then-branch 315] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 316] 4 == 2
(push) ; 85
; [else-branch 316] 4 != 2
(pop) ; 85
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 85
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 85
; 0,00s
; (get-info :all-statistics)
(push) ; 85
; [then-branch 317] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 318] 4 == 2
(push) ; 86
; [else-branch 318] 4 != 2
(pop) ; 86
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 86
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 86
; 0,00s
; (get-info :all-statistics)
(push) ; 86
; [then-branch 319] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 320] 4 == 2
(push) ; 87
; [else-branch 320] 4 != 2
(pop) ; 87
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 87
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 87
; 0,00s
; (get-info :all-statistics)
(push) ; 87
; [then-branch 321] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 322] 4 == 2
(push) ; 88
; [else-branch 322] 4 != 2
(pop) ; 88
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 88
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 88
; 0,00s
; (get-info :all-statistics)
(push) ; 88
; [then-branch 323] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 324] 4 == 2
(push) ; 89
; [else-branch 324] 4 != 2
(pop) ; 89
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 89
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 89
; 0,00s
; (get-info :all-statistics)
(push) ; 89
; [then-branch 325] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 326] 4 == 2
(push) ; 90
; [else-branch 326] 4 != 2
(pop) ; 90
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 90
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 90
; 0,00s
; (get-info :all-statistics)
(push) ; 90
; [then-branch 327] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 328] 4 == 2
(push) ; 91
; [else-branch 328] 4 != 2
(pop) ; 91
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 91
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 91
; 0,00s
; (get-info :all-statistics)
(push) ; 91
; [then-branch 329] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 330] 4 == 2
(push) ; 92
; [else-branch 330] 4 != 2
(pop) ; 92
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 92
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 92
; 0,00s
; (get-info :all-statistics)
(push) ; 92
; [then-branch 331] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 332] 4 == 2
(push) ; 93
; [else-branch 332] 4 != 2
(pop) ; 93
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 93
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 93
; 0,00s
; (get-info :all-statistics)
(push) ; 93
; [then-branch 333] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 334] 4 == 2
(push) ; 94
; [else-branch 334] 4 != 2
(pop) ; 94
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 94
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 94
; 0,00s
; (get-info :all-statistics)
(push) ; 94
; [then-branch 335] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 336] 4 == 2
(push) ; 95
; [else-branch 336] 4 != 2
(pop) ; 95
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 95
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 95
; 0,00s
; (get-info :all-statistics)
(push) ; 95
; [then-branch 337] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 338] 4 == 2
(push) ; 96
; [else-branch 338] 4 != 2
(pop) ; 96
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 96
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 96
; 0,00s
; (get-info :all-statistics)
(push) ; 96
; [then-branch 339] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 340] 4 == 2
(push) ; 97
; [else-branch 340] 4 != 2
(pop) ; 97
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 97
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 97
; 0,00s
; (get-info :all-statistics)
(push) ; 97
; [then-branch 341] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 342] 4 == 2
(push) ; 98
; [else-branch 342] 4 != 2
(pop) ; 98
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 98
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 98
; 0,00s
; (get-info :all-statistics)
(push) ; 98
; [then-branch 343] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 344] 4 == 2
(push) ; 99
; [else-branch 344] 4 != 2
(pop) ; 99
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 99
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 99
; 0,00s
; (get-info :all-statistics)
(push) ; 99
; [then-branch 345] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 346] 4 == 2
(push) ; 100
; [else-branch 346] 4 != 2
(pop) ; 100
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 100
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 100
; 0,00s
; (get-info :all-statistics)
(push) ; 100
; [then-branch 347] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 348] 4 == 2
(push) ; 101
; [else-branch 348] 4 != 2
(pop) ; 101
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 101
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 101
; 0,00s
; (get-info :all-statistics)
(push) ; 101
; [then-branch 349] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 350] 4 == 2
(push) ; 102
; [else-branch 350] 4 != 2
(pop) ; 102
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 102
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 102
; 0,00s
; (get-info :all-statistics)
(push) ; 102
; [then-branch 351] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 352] 4 == 2
(push) ; 103
; [else-branch 352] 4 != 2
(pop) ; 103
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 103
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 103
; 0,00s
; (get-info :all-statistics)
(push) ; 103
; [then-branch 353] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 354] 4 == 2
(push) ; 104
; [else-branch 354] 4 != 2
(pop) ; 104
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 104
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 104
; 0,00s
; (get-info :all-statistics)
(push) ; 104
; [then-branch 355] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 356] 4 == 2
(push) ; 105
; [else-branch 356] 4 != 2
(pop) ; 105
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 105
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 105
; 0,00s
; (get-info :all-statistics)
(push) ; 105
; [then-branch 357] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 358] 4 == 2
(push) ; 106
; [else-branch 358] 4 != 2
(pop) ; 106
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 106
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 106
; 0,00s
; (get-info :all-statistics)
(push) ; 106
; [then-branch 359] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 360] 4 == 2
(push) ; 107
; [else-branch 360] 4 != 2
(pop) ; 107
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 107
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 107
; 0,00s
; (get-info :all-statistics)
(push) ; 107
; [then-branch 361] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 362] 4 == 2
(push) ; 108
; [else-branch 362] 4 != 2
(pop) ; 108
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 108
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 108
; 0,00s
; (get-info :all-statistics)
(push) ; 108
; [then-branch 363] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 364] 4 == 2
(push) ; 109
; [else-branch 364] 4 != 2
(pop) ; 109
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 109
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 109
; 0,00s
; (get-info :all-statistics)
(push) ; 109
; [then-branch 365] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 366] 4 == 2
(push) ; 110
; [else-branch 366] 4 != 2
(pop) ; 110
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 110
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 110
; 0,00s
; (get-info :all-statistics)
(push) ; 110
; [then-branch 367] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 368] 4 == 2
(push) ; 111
; [else-branch 368] 4 != 2
(pop) ; 111
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 111
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 111
; 0,00s
; (get-info :all-statistics)
(push) ; 111
; [then-branch 369] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 370] 4 == 2
(push) ; 112
; [else-branch 370] 4 != 2
(pop) ; 112
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 112
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 112
; 0,00s
; (get-info :all-statistics)
(push) ; 112
; [then-branch 371] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 372] 4 == 2
(push) ; 113
; [else-branch 372] 4 != 2
(pop) ; 113
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 113
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 113
; 0,00s
; (get-info :all-statistics)
(push) ; 113
; [then-branch 373] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 374] 4 == 2
(push) ; 114
; [else-branch 374] 4 != 2
(pop) ; 114
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 114
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 114
; 0,00s
; (get-info :all-statistics)
(push) ; 114
; [then-branch 375] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 376] 4 == 2
(push) ; 115
; [else-branch 376] 4 != 2
(pop) ; 115
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 115
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 115
; 0,00s
; (get-info :all-statistics)
(push) ; 115
; [then-branch 377] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 378] 4 == 2
(push) ; 116
; [else-branch 378] 4 != 2
(pop) ; 116
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 116
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 116
; 0,00s
; (get-info :all-statistics)
(push) ; 116
; [then-branch 379] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 380] 4 == 2
(push) ; 117
; [else-branch 380] 4 != 2
(pop) ; 117
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 117
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 117
; 0,00s
; (get-info :all-statistics)
(push) ; 117
; [then-branch 381] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 382] 4 == 2
(push) ; 118
; [else-branch 382] 4 != 2
(pop) ; 118
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 118
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 118
; 0,00s
; (get-info :all-statistics)
(push) ; 118
; [then-branch 383] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 384] 4 == 2
(push) ; 119
; [else-branch 384] 4 != 2
(pop) ; 119
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 119
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 119
; 0,00s
; (get-info :all-statistics)
(push) ; 119
; [then-branch 385] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 386] 4 == 2
(push) ; 120
; [else-branch 386] 4 != 2
(pop) ; 120
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 120
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 120
; 0,00s
; (get-info :all-statistics)
(push) ; 120
; [then-branch 387] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 388] 4 == 2
(push) ; 121
; [else-branch 388] 4 != 2
(pop) ; 121
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 121
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 121
; 0,00s
; (get-info :all-statistics)
(push) ; 121
; [then-branch 389] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 390] 4 == 2
(push) ; 122
; [else-branch 390] 4 != 2
(pop) ; 122
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 122
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 122
; 0,00s
; (get-info :all-statistics)
(push) ; 122
; [then-branch 391] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 392] 4 == 2
(push) ; 123
; [else-branch 392] 4 != 2
(pop) ; 123
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 123
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 123
; 0,00s
; (get-info :all-statistics)
(push) ; 123
; [then-branch 393] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 394] 4 == 2
(push) ; 124
; [else-branch 394] 4 != 2
(pop) ; 124
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 124
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 124
; 0,00s
; (get-info :all-statistics)
(push) ; 124
; [then-branch 395] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 396] 4 == 2
(push) ; 125
; [else-branch 396] 4 != 2
(pop) ; 125
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 125
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 125
; 0,00s
; (get-info :all-statistics)
(push) ; 125
; [then-branch 397] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 398] 4 == 2
(push) ; 126
; [else-branch 398] 4 != 2
(pop) ; 126
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 126
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 126
; 0,00s
; (get-info :all-statistics)
(push) ; 126
; [then-branch 399] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 400] 4 == 2
(push) ; 127
; [else-branch 400] 4 != 2
(pop) ; 127
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 127
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 127
; 0,00s
; (get-info :all-statistics)
(push) ; 127
; [then-branch 401] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 402] 4 == 2
(push) ; 128
; [else-branch 402] 4 != 2
(pop) ; 128
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 128
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 128
; 0,00s
; (get-info :all-statistics)
(push) ; 128
; [then-branch 403] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 404] 4 == 2
(push) ; 129
; [else-branch 404] 4 != 2
(pop) ; 129
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 129
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 129
; 0,00s
; (get-info :all-statistics)
(push) ; 129
; [then-branch 405] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 406] 4 == 2
(push) ; 130
; [else-branch 406] 4 != 2
(pop) ; 130
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 130
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 130
; 0,00s
; (get-info :all-statistics)
(push) ; 130
; [then-branch 407] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 408] 4 == 2
(push) ; 131
; [else-branch 408] 4 != 2
(pop) ; 131
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 131
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 131
; 0,00s
; (get-info :all-statistics)
(push) ; 131
; [then-branch 409] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 410] 4 == 2
(push) ; 132
; [else-branch 410] 4 != 2
(pop) ; 132
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 132
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 132
; 0,00s
; (get-info :all-statistics)
(push) ; 132
; [then-branch 411] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 412] 4 == 2
(push) ; 133
; [else-branch 412] 4 != 2
(pop) ; 133
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 133
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 133
; 0,00s
; (get-info :all-statistics)
(push) ; 133
; [then-branch 413] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 414] 4 == 2
(push) ; 134
; [else-branch 414] 4 != 2
(pop) ; 134
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 134
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 134
; 0,00s
; (get-info :all-statistics)
(push) ; 134
; [then-branch 415] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 416] 4 == 2
(push) ; 135
; [else-branch 416] 4 != 2
(pop) ; 135
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 135
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 135
; 0,00s
; (get-info :all-statistics)
(push) ; 135
; [then-branch 417] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 418] 4 == 2
(push) ; 136
; [else-branch 418] 4 != 2
(pop) ; 136
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 136
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 136
; 0,00s
; (get-info :all-statistics)
(push) ; 136
; [then-branch 419] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 420] 4 == 2
(push) ; 137
; [else-branch 420] 4 != 2
(pop) ; 137
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 137
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 137
; 0,00s
; (get-info :all-statistics)
(push) ; 137
; [then-branch 421] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 422] 4 == 2
(push) ; 138
; [else-branch 422] 4 != 2
(pop) ; 138
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 138
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 138
; 0,00s
; (get-info :all-statistics)
(push) ; 138
; [then-branch 423] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 424] 4 == 2
(push) ; 139
; [else-branch 424] 4 != 2
(pop) ; 139
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 139
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 139
; 0,00s
; (get-info :all-statistics)
(push) ; 139
; [then-branch 425] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 426] 4 == 2
(push) ; 140
; [else-branch 426] 4 != 2
(pop) ; 140
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 140
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 140
; 0,00s
; (get-info :all-statistics)
(push) ; 140
; [then-branch 427] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 428] 4 == 2
(push) ; 141
; [else-branch 428] 4 != 2
(pop) ; 141
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 141
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 141
; 0,00s
; (get-info :all-statistics)
(push) ; 141
; [then-branch 429] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 430] 4 == 2
(push) ; 142
; [else-branch 430] 4 != 2
(pop) ; 142
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 142
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 142
; 0,00s
; (get-info :all-statistics)
(push) ; 142
; [then-branch 431] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 432] 4 == 2
(push) ; 143
; [else-branch 432] 4 != 2
(pop) ; 143
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 143
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 143
; 0,00s
; (get-info :all-statistics)
(push) ; 143
; [then-branch 433] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 434] 4 == 2
(push) ; 144
; [else-branch 434] 4 != 2
(pop) ; 144
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 144
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 144
; 0,00s
; (get-info :all-statistics)
(push) ; 144
; [then-branch 435] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 436] 4 == 2
(push) ; 145
; [else-branch 436] 4 != 2
(pop) ; 145
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 145
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 145
; 0,00s
; (get-info :all-statistics)
(push) ; 145
; [then-branch 437] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 438] 4 == 2
(push) ; 146
; [else-branch 438] 4 != 2
(pop) ; 146
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 146
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 146
; 0,00s
; (get-info :all-statistics)
(push) ; 146
; [then-branch 439] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 440] 4 == 2
(push) ; 147
; [else-branch 440] 4 != 2
(pop) ; 147
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 147
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 147
; 0,00s
; (get-info :all-statistics)
(push) ; 147
; [then-branch 441] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 442] 4 == 2
(push) ; 148
; [else-branch 442] 4 != 2
(pop) ; 148
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 148
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 148
; 0,00s
; (get-info :all-statistics)
(push) ; 148
; [then-branch 443] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 444] 4 == 2
(push) ; 149
; [else-branch 444] 4 != 2
(pop) ; 149
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 149
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 149
; 0,00s
; (get-info :all-statistics)
(push) ; 149
; [then-branch 445] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 446] 4 == 2
(push) ; 150
; [else-branch 446] 4 != 2
(pop) ; 150
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 150
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 150
; 0,00s
; (get-info :all-statistics)
(push) ; 150
; [then-branch 447] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 448] 4 == 2
(push) ; 151
; [else-branch 448] 4 != 2
(pop) ; 151
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 151
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 151
; 0,00s
; (get-info :all-statistics)
(push) ; 151
; [then-branch 449] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 450] 4 == 2
(push) ; 152
; [else-branch 450] 4 != 2
(pop) ; 152
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 152
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 152
; 0,00s
; (get-info :all-statistics)
(push) ; 152
; [then-branch 451] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 452] 4 == 2
(push) ; 153
; [else-branch 452] 4 != 2
(pop) ; 153
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 153
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 153
; 0,00s
; (get-info :all-statistics)
(push) ; 153
; [then-branch 453] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 454] 4 == 2
(push) ; 154
; [else-branch 454] 4 != 2
(pop) ; 154
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 154
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 154
; 0,00s
; (get-info :all-statistics)
(push) ; 154
; [then-branch 455] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 456] 4 == 2
(push) ; 155
; [else-branch 456] 4 != 2
(pop) ; 155
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 155
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 155
; 0,00s
; (get-info :all-statistics)
(push) ; 155
; [then-branch 457] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 458] 4 == 2
(push) ; 156
; [else-branch 458] 4 != 2
(pop) ; 156
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 156
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 156
; 0,00s
; (get-info :all-statistics)
(push) ; 156
; [then-branch 459] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 460] 4 == 2
(push) ; 157
; [else-branch 460] 4 != 2
(pop) ; 157
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 157
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 157
; 0,00s
; (get-info :all-statistics)
(push) ; 157
; [then-branch 461] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 462] 4 == 2
(push) ; 158
; [else-branch 462] 4 != 2
(pop) ; 158
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 158
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 158
; 0,00s
; (get-info :all-statistics)
(push) ; 158
; [then-branch 463] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 464] 4 == 2
(push) ; 159
; [else-branch 464] 4 != 2
(pop) ; 159
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 159
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 159
; 0,00s
; (get-info :all-statistics)
(push) ; 159
; [then-branch 465] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 466] 4 == 2
(push) ; 160
; [else-branch 466] 4 != 2
(pop) ; 160
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 160
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 160
; 0,00s
; (get-info :all-statistics)
(push) ; 160
; [then-branch 467] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 468] 4 == 2
(push) ; 161
; [else-branch 468] 4 != 2
(pop) ; 161
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 161
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 161
; 0,00s
; (get-info :all-statistics)
(push) ; 161
; [then-branch 469] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 470] 4 == 2
(push) ; 162
; [else-branch 470] 4 != 2
(pop) ; 162
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 162
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 162
; 0,00s
; (get-info :all-statistics)
(push) ; 162
; [then-branch 471] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 472] 4 == 2
(push) ; 163
; [else-branch 472] 4 != 2
(pop) ; 163
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 163
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 163
; 0,00s
; (get-info :all-statistics)
(push) ; 163
; [then-branch 473] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 474] 4 == 2
(push) ; 164
; [else-branch 474] 4 != 2
(pop) ; 164
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 164
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 164
; 0,00s
; (get-info :all-statistics)
(push) ; 164
; [then-branch 475] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 476] 4 == 2
(push) ; 165
; [else-branch 476] 4 != 2
(pop) ; 165
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 165
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 165
; 0,00s
; (get-info :all-statistics)
(push) ; 165
; [then-branch 477] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 478] 4 == 2
(push) ; 166
; [else-branch 478] 4 != 2
(pop) ; 166
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 166
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 166
; 0,00s
; (get-info :all-statistics)
(push) ; 166
; [then-branch 479] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 480] 4 == 2
(push) ; 167
; [else-branch 480] 4 != 2
(pop) ; 167
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 167
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 167
; 0,00s
; (get-info :all-statistics)
(push) ; 167
; [then-branch 481] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 482] 4 == 2
(push) ; 168
; [else-branch 482] 4 != 2
(pop) ; 168
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 168
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 168
; 0,00s
; (get-info :all-statistics)
(push) ; 168
; [then-branch 483] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 484] 4 == 2
(push) ; 169
; [else-branch 484] 4 != 2
(pop) ; 169
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 169
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 169
; 0,00s
; (get-info :all-statistics)
(push) ; 169
; [then-branch 485] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 486] 4 == 2
(push) ; 170
; [else-branch 486] 4 != 2
(pop) ; 170
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 170
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 170
; 0,00s
; (get-info :all-statistics)
(push) ; 170
; [then-branch 487] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 488] 4 == 2
(push) ; 171
; [else-branch 488] 4 != 2
(pop) ; 171
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 171
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 171
; 0,00s
; (get-info :all-statistics)
(push) ; 171
; [then-branch 489] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 490] 4 == 2
(push) ; 172
; [else-branch 490] 4 != 2
(pop) ; 172
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 172
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 172
; 0,00s
; (get-info :all-statistics)
(push) ; 172
; [then-branch 491] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 492] 4 == 2
(push) ; 173
; [else-branch 492] 4 != 2
(pop) ; 173
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 173
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 173
; 0,00s
; (get-info :all-statistics)
(push) ; 173
; [then-branch 493] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 494] 4 == 2
(push) ; 174
; [else-branch 494] 4 != 2
(pop) ; 174
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 174
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 174
; 0,00s
; (get-info :all-statistics)
(push) ; 174
; [then-branch 495] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 496] 4 == 2
(push) ; 175
; [else-branch 496] 4 != 2
(pop) ; 175
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 175
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 175
; 0,00s
; (get-info :all-statistics)
(push) ; 175
; [then-branch 497] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 498] 4 == 2
(push) ; 176
; [else-branch 498] 4 != 2
(pop) ; 176
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 176
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 176
; 0,00s
; (get-info :all-statistics)
(push) ; 176
; [then-branch 499] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 500] 4 == 2
(push) ; 177
; [else-branch 500] 4 != 2
(pop) ; 177
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 177
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 177
; 0,00s
; (get-info :all-statistics)
(push) ; 177
; [then-branch 501] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 502] 4 == 2
(push) ; 178
; [else-branch 502] 4 != 2
(pop) ; 178
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 178
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 178
; 0,00s
; (get-info :all-statistics)
(push) ; 178
; [then-branch 503] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 504] 4 == 2
(push) ; 179
; [else-branch 504] 4 != 2
(pop) ; 179
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 179
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 179
; 0,00s
; (get-info :all-statistics)
(push) ; 179
; [then-branch 505] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 506] 4 == 2
(push) ; 180
; [else-branch 506] 4 != 2
(pop) ; 180
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 180
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 180
; 0,00s
; (get-info :all-statistics)
(push) ; 180
; [then-branch 507] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 508] 4 == 2
(push) ; 181
; [else-branch 508] 4 != 2
(pop) ; 181
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 181
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 181
; 0,00s
; (get-info :all-statistics)
(push) ; 181
; [then-branch 509] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 510] 4 == 2
(push) ; 182
; [else-branch 510] 4 != 2
(pop) ; 182
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 182
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 182
; 0,00s
; (get-info :all-statistics)
(push) ; 182
; [then-branch 511] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 512] 4 == 2
(push) ; 183
; [else-branch 512] 4 != 2
(pop) ; 183
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 183
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 183
; 0,00s
; (get-info :all-statistics)
(push) ; 183
; [then-branch 513] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 514] 4 == 2
(push) ; 184
; [else-branch 514] 4 != 2
(pop) ; 184
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 184
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 184
; 0,00s
; (get-info :all-statistics)
(push) ; 184
; [then-branch 515] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 516] 4 == 2
(push) ; 185
; [else-branch 516] 4 != 2
(pop) ; 185
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 185
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 185
; 0,00s
; (get-info :all-statistics)
(push) ; 185
; [then-branch 517] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 518] 4 == 2
(push) ; 186
; [else-branch 518] 4 != 2
(pop) ; 186
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 186
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 186
; 0,00s
; (get-info :all-statistics)
(push) ; 186
; [then-branch 519] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 520] 4 == 2
(push) ; 187
; [else-branch 520] 4 != 2
(pop) ; 187
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 187
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 187
; 0,00s
; (get-info :all-statistics)
(push) ; 187
; [then-branch 521] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 522] 4 == 2
(push) ; 188
; [else-branch 522] 4 != 2
(pop) ; 188
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 188
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 188
; 0,00s
; (get-info :all-statistics)
(push) ; 188
; [then-branch 523] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 524] 4 == 2
(push) ; 189
; [else-branch 524] 4 != 2
(pop) ; 189
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 189
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 189
; 0,00s
; (get-info :all-statistics)
(push) ; 189
; [then-branch 525] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 526] 4 == 2
(push) ; 190
; [else-branch 526] 4 != 2
(pop) ; 190
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 190
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 190
; 0,00s
; (get-info :all-statistics)
(push) ; 190
; [then-branch 527] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 528] 4 == 2
(push) ; 191
; [else-branch 528] 4 != 2
(pop) ; 191
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 191
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 191
; 0,00s
; (get-info :all-statistics)
(push) ; 191
; [then-branch 529] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 530] 4 == 2
(push) ; 192
; [else-branch 530] 4 != 2
(pop) ; 192
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 192
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 192
; 0,00s
; (get-info :all-statistics)
(push) ; 192
; [then-branch 531] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 532] 4 == 2
(push) ; 193
; [else-branch 532] 4 != 2
(pop) ; 193
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 193
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 193
; 0,00s
; (get-info :all-statistics)
(push) ; 193
; [then-branch 533] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 534] 4 == 2
(push) ; 194
; [else-branch 534] 4 != 2
(pop) ; 194
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 194
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 194
; 0,00s
; (get-info :all-statistics)
(push) ; 194
; [then-branch 535] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 536] 4 == 2
(push) ; 195
; [else-branch 536] 4 != 2
(pop) ; 195
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 195
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 195
; 0,00s
; (get-info :all-statistics)
(push) ; 195
; [then-branch 537] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 538] 4 == 2
(push) ; 196
; [else-branch 538] 4 != 2
(pop) ; 196
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 196
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 196
; 0,00s
; (get-info :all-statistics)
(push) ; 196
; [then-branch 539] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 540] 4 == 2
(push) ; 197
; [else-branch 540] 4 != 2
(pop) ; 197
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 197
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 197
; 0,00s
; (get-info :all-statistics)
(push) ; 197
; [then-branch 541] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 542] 4 == 2
(push) ; 198
; [else-branch 542] 4 != 2
(pop) ; 198
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 198
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 198
; 0,00s
; (get-info :all-statistics)
(push) ; 198
; [then-branch 543] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 544] 4 == 2
(push) ; 199
; [else-branch 544] 4 != 2
(pop) ; 199
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 199
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 199
; 0,00s
; (get-info :all-statistics)
(push) ; 199
; [then-branch 545] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 546] 4 == 2
(push) ; 200
; [else-branch 546] 4 != 2
(pop) ; 200
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 200
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 200
; 0,00s
; (get-info :all-statistics)
(push) ; 200
; [then-branch 547] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 548] 4 == 2
(push) ; 201
; [else-branch 548] 4 != 2
(pop) ; 201
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 201
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 201
; 0,00s
; (get-info :all-statistics)
(push) ; 201
; [then-branch 549] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 550] 4 == 2
(push) ; 202
; [else-branch 550] 4 != 2
(pop) ; 202
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 202
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 202
; 0,00s
; (get-info :all-statistics)
(push) ; 202
; [then-branch 551] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 552] 4 == 2
(push) ; 203
; [else-branch 552] 4 != 2
(pop) ; 203
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 203
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 203
; 0,00s
; (get-info :all-statistics)
(push) ; 203
; [then-branch 553] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 554] 4 == 2
(push) ; 204
; [else-branch 554] 4 != 2
(pop) ; 204
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 204
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 204
; 0,00s
; (get-info :all-statistics)
(push) ; 204
; [then-branch 555] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 556] 4 == 2
(push) ; 205
; [else-branch 556] 4 != 2
(pop) ; 205
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 205
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 205
; 0,00s
; (get-info :all-statistics)
(push) ; 205
; [then-branch 557] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 558] 4 == 2
(push) ; 206
; [else-branch 558] 4 != 2
(pop) ; 206
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 206
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 206
; 0,00s
; (get-info :all-statistics)
(push) ; 206
; [then-branch 559] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 560] 4 == 2
(push) ; 207
; [else-branch 560] 4 != 2
(pop) ; 207
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 207
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 207
; 0,00s
; (get-info :all-statistics)
(push) ; 207
; [then-branch 561] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 562] 4 == 2
(push) ; 208
; [else-branch 562] 4 != 2
(pop) ; 208
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 208
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 208
; 0,00s
; (get-info :all-statistics)
(push) ; 208
; [then-branch 563] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 564] 4 == 2
(push) ; 209
; [else-branch 564] 4 != 2
(pop) ; 209
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 209
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 209
; 0,00s
; (get-info :all-statistics)
(push) ; 209
; [then-branch 565] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 566] 4 == 2
(push) ; 210
; [else-branch 566] 4 != 2
(pop) ; 210
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 210
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 210
; 0,00s
; (get-info :all-statistics)
(push) ; 210
; [then-branch 567] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 568] 4 == 2
(push) ; 211
; [else-branch 568] 4 != 2
(pop) ; 211
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 211
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 211
; 0,00s
; (get-info :all-statistics)
(push) ; 211
; [then-branch 569] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 570] 4 == 2
(push) ; 212
; [else-branch 570] 4 != 2
(pop) ; 212
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 212
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 212
; 0,00s
; (get-info :all-statistics)
(push) ; 212
; [then-branch 571] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 572] 4 == 2
(push) ; 213
; [else-branch 572] 4 != 2
(pop) ; 213
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 213
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 213
; 0,00s
; (get-info :all-statistics)
(push) ; 213
; [then-branch 573] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 574] 4 == 2
(push) ; 214
; [else-branch 574] 4 != 2
(pop) ; 214
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 214
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 214
; 0,00s
; (get-info :all-statistics)
(push) ; 214
; [then-branch 575] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 576] 4 == 2
(push) ; 215
; [else-branch 576] 4 != 2
(pop) ; 215
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 215
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 215
; 0,00s
; (get-info :all-statistics)
(push) ; 215
; [then-branch 577] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 578] 4 == 2
(push) ; 216
; [else-branch 578] 4 != 2
(pop) ; 216
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 216
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 216
; 0,00s
; (get-info :all-statistics)
(push) ; 216
; [then-branch 579] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 580] 4 == 2
(push) ; 217
; [else-branch 580] 4 != 2
(pop) ; 217
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 217
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 217
; 0,00s
; (get-info :all-statistics)
(push) ; 217
; [then-branch 581] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 582] 4 == 2
(push) ; 218
; [else-branch 582] 4 != 2
(pop) ; 218
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 218
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 218
; 0,00s
; (get-info :all-statistics)
(push) ; 218
; [then-branch 583] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 584] 4 == 2
(push) ; 219
; [else-branch 584] 4 != 2
(pop) ; 219
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 219
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 219
; 0,00s
; (get-info :all-statistics)
(push) ; 219
; [then-branch 585] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 586] 4 == 2
(push) ; 220
; [else-branch 586] 4 != 2
(pop) ; 220
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 220
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 220
; 0,00s
; (get-info :all-statistics)
(push) ; 220
; [then-branch 587] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 588] 4 == 2
(push) ; 221
; [else-branch 588] 4 != 2
(pop) ; 221
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 221
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 221
; 0,00s
; (get-info :all-statistics)
(push) ; 221
; [then-branch 589] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 590] 4 == 2
(push) ; 222
; [else-branch 590] 4 != 2
(pop) ; 222
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 222
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 222
; 0,00s
; (get-info :all-statistics)
(push) ; 222
; [then-branch 591] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 592] 4 == 2
(push) ; 223
; [else-branch 592] 4 != 2
(pop) ; 223
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 223
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 223
; 0,00s
; (get-info :all-statistics)
(push) ; 223
; [then-branch 593] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 594] 4 == 2
(push) ; 224
; [else-branch 594] 4 != 2
(pop) ; 224
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 224
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 224
; 0,00s
; (get-info :all-statistics)
(push) ; 224
; [then-branch 595] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 596] 4 == 2
(push) ; 225
; [else-branch 596] 4 != 2
(pop) ; 225
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 225
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 225
; 0,00s
; (get-info :all-statistics)
(push) ; 225
; [then-branch 597] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 598] 4 == 2
(push) ; 226
; [else-branch 598] 4 != 2
(pop) ; 226
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 226
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 226
; 0,00s
; (get-info :all-statistics)
(push) ; 226
; [then-branch 599] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 600] 4 == 2
(push) ; 227
; [else-branch 600] 4 != 2
(pop) ; 227
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 227
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 227
; 0,00s
; (get-info :all-statistics)
(push) ; 227
; [then-branch 601] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 602] 4 == 2
(push) ; 228
; [else-branch 602] 4 != 2
(pop) ; 228
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 228
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 228
; 0,00s
; (get-info :all-statistics)
(push) ; 228
; [then-branch 603] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 604] 4 == 2
(push) ; 229
; [else-branch 604] 4 != 2
(pop) ; 229
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 229
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 229
; 0,00s
; (get-info :all-statistics)
(push) ; 229
; [then-branch 605] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 606] 4 == 2
(push) ; 230
; [else-branch 606] 4 != 2
(pop) ; 230
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 230
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 230
; 0,00s
; (get-info :all-statistics)
(push) ; 230
; [then-branch 607] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 608] 4 == 2
(push) ; 231
; [else-branch 608] 4 != 2
(pop) ; 231
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 231
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 231
; 0,00s
; (get-info :all-statistics)
(push) ; 231
; [then-branch 609] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 610] 4 == 2
(push) ; 232
; [else-branch 610] 4 != 2
(pop) ; 232
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 232
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 232
; 0,00s
; (get-info :all-statistics)
(push) ; 232
; [then-branch 611] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 612] 4 == 2
(push) ; 233
; [else-branch 612] 4 != 2
(pop) ; 233
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 233
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 233
; 0,00s
; (get-info :all-statistics)
(push) ; 233
; [then-branch 613] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 614] 4 == 2
(push) ; 234
; [else-branch 614] 4 != 2
(pop) ; 234
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 234
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 234
; 0,00s
; (get-info :all-statistics)
(push) ; 234
; [then-branch 615] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 616] 4 == 2
(push) ; 235
; [else-branch 616] 4 != 2
(pop) ; 235
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 235
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 235
; 0,00s
; (get-info :all-statistics)
(push) ; 235
; [then-branch 617] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 618] 4 == 2
(push) ; 236
; [else-branch 618] 4 != 2
(pop) ; 236
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 236
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 236
; 0,00s
; (get-info :all-statistics)
(push) ; 236
; [then-branch 619] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 620] 4 == 2
(push) ; 237
; [else-branch 620] 4 != 2
(pop) ; 237
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 237
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 237
; 0,00s
; (get-info :all-statistics)
(push) ; 237
; [then-branch 621] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 622] 4 == 2
(push) ; 238
; [else-branch 622] 4 != 2
(pop) ; 238
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 238
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 238
; 0,00s
; (get-info :all-statistics)
(push) ; 238
; [then-branch 623] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 624] 4 == 2
(push) ; 239
; [else-branch 624] 4 != 2
(pop) ; 239
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 239
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 239
; 0,00s
; (get-info :all-statistics)
(push) ; 239
; [then-branch 625] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 626] 4 == 2
(push) ; 240
; [else-branch 626] 4 != 2
(pop) ; 240
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 240
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 240
; 0,00s
; (get-info :all-statistics)
(push) ; 240
; [then-branch 627] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 628] 4 == 2
(push) ; 241
; [else-branch 628] 4 != 2
(pop) ; 241
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 241
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 241
; 0,00s
; (get-info :all-statistics)
(push) ; 241
; [then-branch 629] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 630] 4 == 2
(push) ; 242
; [else-branch 630] 4 != 2
(pop) ; 242
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 242
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 242
; 0,00s
; (get-info :all-statistics)
(push) ; 242
; [then-branch 631] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 632] 4 == 2
(push) ; 243
; [else-branch 632] 4 != 2
(pop) ; 243
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 243
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 243
; 0,00s
; (get-info :all-statistics)
(push) ; 243
; [then-branch 633] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 634] 4 == 2
(push) ; 244
; [else-branch 634] 4 != 2
(pop) ; 244
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 244
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 244
; 0,00s
; (get-info :all-statistics)
(push) ; 244
; [then-branch 635] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 636] 4 == 2
(push) ; 245
; [else-branch 636] 4 != 2
(pop) ; 245
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 245
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 245
; 0,00s
; (get-info :all-statistics)
(push) ; 245
; [then-branch 637] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 638] 4 == 2
(push) ; 246
; [else-branch 638] 4 != 2
(pop) ; 246
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 246
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 246
; 0,00s
; (get-info :all-statistics)
(push) ; 246
; [then-branch 639] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 640] 4 == 2
(push) ; 247
; [else-branch 640] 4 != 2
(pop) ; 247
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 247
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 247
; 0,00s
; (get-info :all-statistics)
(push) ; 247
; [then-branch 641] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 642] 4 == 2
(push) ; 248
; [else-branch 642] 4 != 2
(pop) ; 248
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 248
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 248
; 0,00s
; (get-info :all-statistics)
(push) ; 248
; [then-branch 643] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 644] 4 == 2
(push) ; 249
; [else-branch 644] 4 != 2
(pop) ; 249
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 249
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 249
; 0,00s
; (get-info :all-statistics)
(push) ; 249
; [then-branch 645] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 646] 4 == 2
(push) ; 250
; [else-branch 646] 4 != 2
(pop) ; 250
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 250
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 250
; 0,00s
; (get-info :all-statistics)
(push) ; 250
; [then-branch 647] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 648] 4 == 2
(push) ; 251
; [else-branch 648] 4 != 2
(pop) ; 251
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 251
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 251
; 0,00s
; (get-info :all-statistics)
(push) ; 251
; [then-branch 649] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 650] 4 == 2
(push) ; 252
; [else-branch 650] 4 != 2
(pop) ; 252
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 252
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 252
; 0,00s
; (get-info :all-statistics)
(push) ; 252
; [then-branch 651] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 652] 4 == 2
(push) ; 253
; [else-branch 652] 4 != 2
(pop) ; 253
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 253
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 253
; 0,00s
; (get-info :all-statistics)
(push) ; 253
; [then-branch 653] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 654] 4 == 2
(push) ; 254
; [else-branch 654] 4 != 2
(pop) ; 254
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 254
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 254
; 0,00s
; (get-info :all-statistics)
(push) ; 254
; [then-branch 655] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 656] 4 == 2
(push) ; 255
; [else-branch 656] 4 != 2
(pop) ; 255
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 255
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 255
; 0,00s
; (get-info :all-statistics)
(push) ; 255
; [then-branch 657] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 658] 4 == 2
(push) ; 256
; [else-branch 658] 4 != 2
(pop) ; 256
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 256
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 256
; 0,00s
; (get-info :all-statistics)
(push) ; 256
; [then-branch 659] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 660] 4 == 2
(push) ; 257
; [else-branch 660] 4 != 2
(pop) ; 257
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 257
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 257
; 0,00s
; (get-info :all-statistics)
(push) ; 257
; [then-branch 661] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 662] 4 == 2
(push) ; 258
; [else-branch 662] 4 != 2
(pop) ; 258
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 258
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 258
; 0,00s
; (get-info :all-statistics)
(push) ; 258
; [then-branch 663] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 664] 4 == 2
(push) ; 259
; [else-branch 664] 4 != 2
(pop) ; 259
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 259
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 259
; 0,00s
; (get-info :all-statistics)
(push) ; 259
; [then-branch 665] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 666] 4 == 2
(push) ; 260
; [else-branch 666] 4 != 2
(pop) ; 260
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 260
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 260
; 0,00s
; (get-info :all-statistics)
(push) ; 260
; [then-branch 667] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 668] 4 == 2
(push) ; 261
; [else-branch 668] 4 != 2
(pop) ; 261
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 261
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 261
; 0,00s
; (get-info :all-statistics)
(push) ; 261
; [then-branch 669] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 670] 4 == 2
(push) ; 262
; [else-branch 670] 4 != 2
(pop) ; 262
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 262
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 262
; 0,00s
; (get-info :all-statistics)
(push) ; 262
; [then-branch 671] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 672] 4 == 2
(push) ; 263
; [else-branch 672] 4 != 2
(pop) ; 263
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 263
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 263
; 0,00s
; (get-info :all-statistics)
(push) ; 263
; [then-branch 673] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 674] 4 == 2
(push) ; 264
; [else-branch 674] 4 != 2
(pop) ; 264
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 264
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 264
; 0,00s
; (get-info :all-statistics)
(push) ; 264
; [then-branch 675] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 676] 4 == 2
(push) ; 265
; [else-branch 676] 4 != 2
(pop) ; 265
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 265
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 265
; 0,00s
; (get-info :all-statistics)
(push) ; 265
; [then-branch 677] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 678] 4 == 2
(push) ; 266
; [else-branch 678] 4 != 2
(pop) ; 266
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 266
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 266
; 0,00s
; (get-info :all-statistics)
(push) ; 266
; [then-branch 679] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 680] 4 == 2
(push) ; 267
; [else-branch 680] 4 != 2
(pop) ; 267
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 267
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 267
; 0,00s
; (get-info :all-statistics)
(push) ; 267
; [then-branch 681] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 682] 4 == 2
(push) ; 268
; [else-branch 682] 4 != 2
(pop) ; 268
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 268
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 268
; 0,00s
; (get-info :all-statistics)
(push) ; 268
; [then-branch 683] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 684] 4 == 2
(push) ; 269
; [else-branch 684] 4 != 2
(pop) ; 269
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 269
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 269
; 0,00s
; (get-info :all-statistics)
(push) ; 269
; [then-branch 685] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 686] 4 == 2
(push) ; 270
; [else-branch 686] 4 != 2
(pop) ; 270
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 270
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 270
; 0,00s
; (get-info :all-statistics)
(push) ; 270
; [then-branch 687] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 688] 4 == 2
(push) ; 271
; [else-branch 688] 4 != 2
(pop) ; 271
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 271
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 271
; 0,00s
; (get-info :all-statistics)
(push) ; 271
; [then-branch 689] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 690] 4 == 2
(push) ; 272
; [else-branch 690] 4 != 2
(pop) ; 272
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 272
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 272
; 0,00s
; (get-info :all-statistics)
(push) ; 272
; [then-branch 691] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 692] 4 == 2
(push) ; 273
; [else-branch 692] 4 != 2
(pop) ; 273
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 273
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 273
; 0,00s
; (get-info :all-statistics)
(push) ; 273
; [then-branch 693] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 694] 4 == 2
(push) ; 274
; [else-branch 694] 4 != 2
(pop) ; 274
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 274
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 274
; 0,00s
; (get-info :all-statistics)
(push) ; 274
; [then-branch 695] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 696] 4 == 2
(push) ; 275
; [else-branch 696] 4 != 2
(pop) ; 275
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 275
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 275
; 0,00s
; (get-info :all-statistics)
(push) ; 275
; [then-branch 697] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 698] 4 == 2
(push) ; 276
; [else-branch 698] 4 != 2
(pop) ; 276
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 276
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 276
; 0,00s
; (get-info :all-statistics)
(push) ; 276
; [then-branch 699] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 700] 4 == 2
(push) ; 277
; [else-branch 700] 4 != 2
(pop) ; 277
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 277
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 277
; 0,00s
; (get-info :all-statistics)
(push) ; 277
; [then-branch 701] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 702] 4 == 2
(push) ; 278
; [else-branch 702] 4 != 2
(pop) ; 278
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 278
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 278
; 0,00s
; (get-info :all-statistics)
(push) ; 278
; [then-branch 703] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 704] 4 == 2
(push) ; 279
; [else-branch 704] 4 != 2
(pop) ; 279
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 279
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 279
; 0,00s
; (get-info :all-statistics)
(push) ; 279
; [then-branch 705] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 706] 4 == 2
(push) ; 280
; [else-branch 706] 4 != 2
(pop) ; 280
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 280
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 280
; 0,00s
; (get-info :all-statistics)
(push) ; 280
; [then-branch 707] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 708] 4 == 2
(push) ; 281
; [else-branch 708] 4 != 2
(pop) ; 281
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 281
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 281
; 0,00s
; (get-info :all-statistics)
(push) ; 281
; [then-branch 709] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 710] 4 == 2
(push) ; 282
; [else-branch 710] 4 != 2
(pop) ; 282
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 282
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 282
; 0,00s
; (get-info :all-statistics)
(push) ; 282
; [then-branch 711] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 712] 4 == 2
(push) ; 283
; [else-branch 712] 4 != 2
(pop) ; 283
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 283
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 283
; 0,00s
; (get-info :all-statistics)
(push) ; 283
; [then-branch 713] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 714] 4 == 2
(push) ; 284
; [else-branch 714] 4 != 2
(pop) ; 284
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 284
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 284
; 0,00s
; (get-info :all-statistics)
(push) ; 284
; [then-branch 715] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 716] 4 == 2
(push) ; 285
; [else-branch 716] 4 != 2
(pop) ; 285
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 285
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 285
; 0,00s
; (get-info :all-statistics)
(push) ; 285
; [then-branch 717] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 718] 4 == 2
(push) ; 286
; [else-branch 718] 4 != 2
(pop) ; 286
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 286
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 286
; 0,00s
; (get-info :all-statistics)
(push) ; 286
; [then-branch 719] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 720] 4 == 2
(push) ; 287
; [else-branch 720] 4 != 2
(pop) ; 287
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 287
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 287
; 0,00s
; (get-info :all-statistics)
(push) ; 287
; [then-branch 721] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 722] 4 == 2
(push) ; 288
; [else-branch 722] 4 != 2
(pop) ; 288
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 288
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 288
; 0,00s
; (get-info :all-statistics)
(push) ; 288
; [then-branch 723] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 724] 4 == 2
(push) ; 289
; [else-branch 724] 4 != 2
(pop) ; 289
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 289
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 289
; 0,00s
; (get-info :all-statistics)
(push) ; 289
; [then-branch 725] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 726] 4 == 2
(push) ; 290
; [else-branch 726] 4 != 2
(pop) ; 290
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 290
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 290
; 0,00s
; (get-info :all-statistics)
(push) ; 290
; [then-branch 727] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 728] 4 == 2
(push) ; 291
; [else-branch 728] 4 != 2
(pop) ; 291
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 291
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 291
; 0,00s
; (get-info :all-statistics)
(push) ; 291
; [then-branch 729] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 730] 4 == 2
(push) ; 292
; [else-branch 730] 4 != 2
(pop) ; 292
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 292
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 292
; 0,00s
; (get-info :all-statistics)
(push) ; 292
; [then-branch 731] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 732] 4 == 2
(push) ; 293
; [else-branch 732] 4 != 2
(pop) ; 293
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 293
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 293
; 0,00s
; (get-info :all-statistics)
(push) ; 293
; [then-branch 733] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 734] 4 == 2
(push) ; 294
; [else-branch 734] 4 != 2
(pop) ; 294
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 294
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 294
; 0,00s
; (get-info :all-statistics)
(push) ; 294
; [then-branch 735] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 736] 4 == 2
(push) ; 295
; [else-branch 736] 4 != 2
(pop) ; 295
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 295
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 295
; 0,00s
; (get-info :all-statistics)
(push) ; 295
; [then-branch 737] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 738] 4 == 2
(push) ; 296
; [else-branch 738] 4 != 2
(pop) ; 296
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 296
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 296
; 0,00s
; (get-info :all-statistics)
(push) ; 296
; [then-branch 739] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 740] 4 == 2
(push) ; 297
; [else-branch 740] 4 != 2
(pop) ; 297
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 297
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 297
; 0,00s
; (get-info :all-statistics)
(push) ; 297
; [then-branch 741] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 742] 4 == 2
(push) ; 298
; [else-branch 742] 4 != 2
(pop) ; 298
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 298
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 298
; 0,00s
; (get-info :all-statistics)
(push) ; 298
; [then-branch 743] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 744] 4 == 2
(push) ; 299
; [else-branch 744] 4 != 2
(pop) ; 299
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 299
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 299
; 0,00s
; (get-info :all-statistics)
(push) ; 299
; [then-branch 745] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 746] 4 == 2
(push) ; 300
; [else-branch 746] 4 != 2
(pop) ; 300
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 300
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 300
; 0,00s
; (get-info :all-statistics)
(push) ; 300
; [then-branch 747] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 748] 4 == 2
(push) ; 301
; [else-branch 748] 4 != 2
(pop) ; 301
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 301
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 301
; 0,00s
; (get-info :all-statistics)
(push) ; 301
; [then-branch 749] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 750] 4 == 2
(push) ; 302
; [else-branch 750] 4 != 2
(pop) ; 302
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 302
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 302
; 0,00s
; (get-info :all-statistics)
(push) ; 302
; [then-branch 751] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 752] 4 == 2
(push) ; 303
; [else-branch 752] 4 != 2
(pop) ; 303
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 303
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 303
; 0,00s
; (get-info :all-statistics)
(push) ; 303
; [then-branch 753] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 754] 4 == 2
(push) ; 304
; [else-branch 754] 4 != 2
(pop) ; 304
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 304
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 304
; 0,00s
; (get-info :all-statistics)
(push) ; 304
; [then-branch 755] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 756] 4 == 2
(push) ; 305
; [else-branch 756] 4 != 2
(pop) ; 305
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 305
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 305
; 0,00s
; (get-info :all-statistics)
(push) ; 305
; [then-branch 757] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 758] 4 == 2
(push) ; 306
; [else-branch 758] 4 != 2
(pop) ; 306
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 306
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 306
; 0,00s
; (get-info :all-statistics)
(push) ; 306
; [then-branch 759] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 760] 4 == 2
(push) ; 307
; [else-branch 760] 4 != 2
(pop) ; 307
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 307
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 307
; 0,00s
; (get-info :all-statistics)
(push) ; 307
; [then-branch 761] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 762] 4 == 2
(push) ; 308
; [else-branch 762] 4 != 2
(pop) ; 308
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 308
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 308
; 0,00s
; (get-info :all-statistics)
(push) ; 308
; [then-branch 763] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 764] 4 == 2
(push) ; 309
; [else-branch 764] 4 != 2
(pop) ; 309
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 309
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 309
; 0,00s
; (get-info :all-statistics)
(push) ; 309
; [then-branch 765] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 766] 4 == 2
(push) ; 310
; [else-branch 766] 4 != 2
(pop) ; 310
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 310
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 310
; 0,00s
; (get-info :all-statistics)
(push) ; 310
; [then-branch 767] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 768] 4 == 2
(push) ; 311
; [else-branch 768] 4 != 2
(pop) ; 311
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 311
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 311
; 0,00s
; (get-info :all-statistics)
(push) ; 311
; [then-branch 769] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 770] 4 == 2
(push) ; 312
; [else-branch 770] 4 != 2
(pop) ; 312
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 312
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 312
; 0,00s
; (get-info :all-statistics)
(push) ; 312
; [then-branch 771] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 772] 4 == 2
(push) ; 313
; [else-branch 772] 4 != 2
(pop) ; 313
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 313
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 313
; 0,00s
; (get-info :all-statistics)
(push) ; 313
; [then-branch 773] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 774] 4 == 2
(push) ; 314
; [else-branch 774] 4 != 2
(pop) ; 314
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 314
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 314
; 0,00s
; (get-info :all-statistics)
(push) ; 314
; [then-branch 775] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 776] 4 == 2
(push) ; 315
; [else-branch 776] 4 != 2
(pop) ; 315
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 315
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 315
; 0,00s
; (get-info :all-statistics)
(push) ; 315
; [then-branch 777] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 778] 4 == 2
(push) ; 316
; [else-branch 778] 4 != 2
(pop) ; 316
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 316
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 316
; 0,00s
; (get-info :all-statistics)
(push) ; 316
; [then-branch 779] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 780] 4 == 2
(push) ; 317
; [else-branch 780] 4 != 2
(pop) ; 317
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 317
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 317
; 0,00s
; (get-info :all-statistics)
(push) ; 317
; [then-branch 781] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 782] 4 == 2
(push) ; 318
; [else-branch 782] 4 != 2
(pop) ; 318
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 318
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 318
; 0,00s
; (get-info :all-statistics)
(push) ; 318
; [then-branch 783] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 784] 4 == 2
(push) ; 319
; [else-branch 784] 4 != 2
(pop) ; 319
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 319
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 319
; 0,00s
; (get-info :all-statistics)
(push) ; 319
; [then-branch 785] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 786] 4 == 2
(push) ; 320
; [else-branch 786] 4 != 2
(pop) ; 320
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 320
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 320
; 0,00s
; (get-info :all-statistics)
(push) ; 320
; [then-branch 787] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 788] 4 == 2
(push) ; 321
; [else-branch 788] 4 != 2
(pop) ; 321
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 321
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 321
; 0,00s
; (get-info :all-statistics)
(push) ; 321
; [then-branch 789] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 790] 4 == 2
(push) ; 322
; [else-branch 790] 4 != 2
(pop) ; 322
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 322
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 322
; 0,00s
; (get-info :all-statistics)
(push) ; 322
; [then-branch 791] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 792] 4 == 2
(push) ; 323
; [else-branch 792] 4 != 2
(pop) ; 323
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 323
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 323
; 0,00s
; (get-info :all-statistics)
(push) ; 323
; [then-branch 793] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 794] 4 == 2
(push) ; 324
; [else-branch 794] 4 != 2
(pop) ; 324
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 324
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 324
; 0,00s
; (get-info :all-statistics)
(push) ; 324
; [then-branch 795] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 796] 4 == 2
(push) ; 325
; [else-branch 796] 4 != 2
(pop) ; 325
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 325
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 325
; 0,00s
; (get-info :all-statistics)
(push) ; 325
; [then-branch 797] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 798] 4 == 2
(push) ; 326
; [else-branch 798] 4 != 2
(pop) ; 326
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 326
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 326
; 0,00s
; (get-info :all-statistics)
(push) ; 326
; [then-branch 799] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 800] 4 == 2
(push) ; 327
; [else-branch 800] 4 != 2
(pop) ; 327
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 327
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 327
; 0,00s
; (get-info :all-statistics)
(push) ; 327
; [then-branch 801] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 802] 4 == 2
(push) ; 328
; [else-branch 802] 4 != 2
(pop) ; 328
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 328
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 328
; 0,00s
; (get-info :all-statistics)
(push) ; 328
; [then-branch 803] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 804] 4 == 2
(push) ; 329
; [else-branch 804] 4 != 2
(pop) ; 329
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 329
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 329
; 0,00s
; (get-info :all-statistics)
(push) ; 329
; [then-branch 805] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 806] 4 == 2
(push) ; 330
; [else-branch 806] 4 != 2
(pop) ; 330
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 330
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 330
; 0,00s
; (get-info :all-statistics)
(push) ; 330
; [then-branch 807] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 808] 4 == 2
(push) ; 331
; [else-branch 808] 4 != 2
(pop) ; 331
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 331
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 331
; 0,00s
; (get-info :all-statistics)
(push) ; 331
; [then-branch 809] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 810] 4 == 2
(push) ; 332
; [else-branch 810] 4 != 2
(pop) ; 332
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 332
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 332
; 0,00s
; (get-info :all-statistics)
(push) ; 332
; [then-branch 811] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 812] 4 == 2
(push) ; 333
; [else-branch 812] 4 != 2
(pop) ; 333
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 333
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 333
; 0,00s
; (get-info :all-statistics)
(push) ; 333
; [then-branch 813] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 814] 4 == 2
(push) ; 334
; [else-branch 814] 4 != 2
(pop) ; 334
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 334
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 334
; 0,00s
; (get-info :all-statistics)
(push) ; 334
; [then-branch 815] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 816] 4 == 2
(push) ; 335
; [else-branch 816] 4 != 2
(pop) ; 335
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 335
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 335
; 0,00s
; (get-info :all-statistics)
(push) ; 335
; [then-branch 817] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 818] 4 == 2
(push) ; 336
; [else-branch 818] 4 != 2
(pop) ; 336
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 336
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 336
; 0,00s
; (get-info :all-statistics)
(push) ; 336
; [then-branch 819] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 820] 4 == 2
(push) ; 337
; [else-branch 820] 4 != 2
(pop) ; 337
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 337
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 337
; 0,00s
; (get-info :all-statistics)
(push) ; 337
; [then-branch 821] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 822] 4 == 2
(push) ; 338
; [else-branch 822] 4 != 2
(pop) ; 338
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 338
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 338
; 0,00s
; (get-info :all-statistics)
(push) ; 338
; [then-branch 823] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 824] 4 == 2
(push) ; 339
; [else-branch 824] 4 != 2
(pop) ; 339
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 339
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 339
; 0,00s
; (get-info :all-statistics)
(push) ; 339
; [then-branch 825] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 826] 4 == 2
(push) ; 340
; [else-branch 826] 4 != 2
(pop) ; 340
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 340
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 340
; 0,00s
; (get-info :all-statistics)
(push) ; 340
; [then-branch 827] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 828] 4 == 2
(push) ; 341
; [else-branch 828] 4 != 2
(pop) ; 341
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 341
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 341
; 0,00s
; (get-info :all-statistics)
(push) ; 341
; [then-branch 829] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 830] 4 == 2
(push) ; 342
; [else-branch 830] 4 != 2
(pop) ; 342
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 342
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 342
; 0,00s
; (get-info :all-statistics)
(push) ; 342
; [then-branch 831] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 832] 4 == 2
(push) ; 343
; [else-branch 832] 4 != 2
(pop) ; 343
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 343
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 343
; 0,00s
; (get-info :all-statistics)
(push) ; 343
; [then-branch 833] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 834] 4 == 2
(push) ; 344
; [else-branch 834] 4 != 2
(pop) ; 344
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 344
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 344
; 0,00s
; (get-info :all-statistics)
(push) ; 344
; [then-branch 835] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 836] 4 == 2
(push) ; 345
; [else-branch 836] 4 != 2
(pop) ; 345
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 345
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 345
; 0,00s
; (get-info :all-statistics)
(push) ; 345
; [then-branch 837] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 838] 4 == 2
(push) ; 346
; [else-branch 838] 4 != 2
(pop) ; 346
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 346
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 346
; 0,00s
; (get-info :all-statistics)
(push) ; 346
; [then-branch 839] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 840] 4 == 2
(push) ; 347
; [else-branch 840] 4 != 2
(pop) ; 347
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 347
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 347
; 0,00s
; (get-info :all-statistics)
(push) ; 347
; [then-branch 841] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 842] 4 == 2
(push) ; 348
; [else-branch 842] 4 != 2
(pop) ; 348
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 348
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 348
; 0,00s
; (get-info :all-statistics)
(push) ; 348
; [then-branch 843] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 844] 4 == 2
(push) ; 349
; [else-branch 844] 4 != 2
(pop) ; 349
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 349
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 349
; 0,00s
; (get-info :all-statistics)
(push) ; 349
; [then-branch 845] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 846] 4 == 2
(push) ; 350
; [else-branch 846] 4 != 2
(pop) ; 350
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 350
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 350
; 0,00s
; (get-info :all-statistics)
(push) ; 350
; [then-branch 847] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 848] 4 == 2
(push) ; 351
; [else-branch 848] 4 != 2
(pop) ; 351
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 351
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 351
; 0,00s
; (get-info :all-statistics)
(push) ; 351
; [then-branch 849] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 850] 4 == 2
(push) ; 352
; [else-branch 850] 4 != 2
(pop) ; 352
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 352
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 352
; 0,00s
; (get-info :all-statistics)
(push) ; 352
; [then-branch 851] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 852] 4 == 2
(push) ; 353
; [else-branch 852] 4 != 2
(pop) ; 353
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 353
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 353
; 0,00s
; (get-info :all-statistics)
(push) ; 353
; [then-branch 853] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 854] 4 == 2
(push) ; 354
; [else-branch 854] 4 != 2
(pop) ; 354
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 354
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 354
; 0,00s
; (get-info :all-statistics)
(push) ; 354
; [then-branch 855] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 856] 4 == 2
(push) ; 355
; [else-branch 856] 4 != 2
(pop) ; 355
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 355
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 355
; 0,00s
; (get-info :all-statistics)
(push) ; 355
; [then-branch 857] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 858] 4 == 2
(push) ; 356
; [else-branch 858] 4 != 2
(pop) ; 356
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 356
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 356
; 0,00s
; (get-info :all-statistics)
(push) ; 356
; [then-branch 859] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 860] 4 == 2
(push) ; 357
; [else-branch 860] 4 != 2
(pop) ; 357
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 357
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 357
; 0,00s
; (get-info :all-statistics)
(push) ; 357
; [then-branch 861] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 862] 4 == 2
(push) ; 358
; [else-branch 862] 4 != 2
(pop) ; 358
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 358
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 358
; 0,00s
; (get-info :all-statistics)
(push) ; 358
; [then-branch 863] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 864] 4 == 2
(push) ; 359
; [else-branch 864] 4 != 2
(pop) ; 359
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 359
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 359
; 0,00s
; (get-info :all-statistics)
(push) ; 359
; [then-branch 865] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 866] 4 == 2
(push) ; 360
; [else-branch 866] 4 != 2
(pop) ; 360
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 360
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 360
; 0,00s
; (get-info :all-statistics)
(push) ; 360
; [then-branch 867] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 868] 4 == 2
(push) ; 361
; [else-branch 868] 4 != 2
(pop) ; 361
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 361
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 361
; 0,00s
; (get-info :all-statistics)
(push) ; 361
; [then-branch 869] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 870] 4 == 2
(push) ; 362
; [else-branch 870] 4 != 2
(pop) ; 362
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 362
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 362
; 0,00s
; (get-info :all-statistics)
(push) ; 362
; [then-branch 871] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 872] 4 == 2
(push) ; 363
; [else-branch 872] 4 != 2
(pop) ; 363
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 363
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 363
; 0,00s
; (get-info :all-statistics)
(push) ; 363
; [then-branch 873] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 874] 4 == 2
(push) ; 364
; [else-branch 874] 4 != 2
(pop) ; 364
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 364
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 364
; 0,00s
; (get-info :all-statistics)
(push) ; 364
; [then-branch 875] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 876] 4 == 2
(push) ; 365
; [else-branch 876] 4 != 2
(pop) ; 365
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 365
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 365
; 0,00s
; (get-info :all-statistics)
(push) ; 365
; [then-branch 877] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 878] 4 == 2
(push) ; 366
; [else-branch 878] 4 != 2
(pop) ; 366
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 366
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 366
; 0,00s
; (get-info :all-statistics)
(push) ; 366
; [then-branch 879] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 880] 4 == 2
(push) ; 367
; [else-branch 880] 4 != 2
(pop) ; 367
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 367
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 367
; 0,00s
; (get-info :all-statistics)
(push) ; 367
; [then-branch 881] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 882] 4 == 2
(push) ; 368
; [else-branch 882] 4 != 2
(pop) ; 368
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 368
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 368
; 0,00s
; (get-info :all-statistics)
(push) ; 368
; [then-branch 883] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 884] 4 == 2
(push) ; 369
; [else-branch 884] 4 != 2
(pop) ; 369
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 369
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 369
; 0,00s
; (get-info :all-statistics)
(push) ; 369
; [then-branch 885] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 886] 4 == 2
(push) ; 370
; [else-branch 886] 4 != 2
(pop) ; 370
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 370
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 370
; 0,00s
; (get-info :all-statistics)
(push) ; 370
; [then-branch 887] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 888] 4 == 2
(push) ; 371
; [else-branch 888] 4 != 2
(pop) ; 371
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 371
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 371
; 0,00s
; (get-info :all-statistics)
(push) ; 371
; [then-branch 889] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 890] 4 == 2
(push) ; 372
; [else-branch 890] 4 != 2
(pop) ; 372
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 372
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 372
; 0,00s
; (get-info :all-statistics)
(push) ; 372
; [then-branch 891] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 892] 4 == 2
(push) ; 373
; [else-branch 892] 4 != 2
(pop) ; 373
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 373
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 373
; 0,00s
; (get-info :all-statistics)
(push) ; 373
; [then-branch 893] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 894] 4 == 2
(push) ; 374
; [else-branch 894] 4 != 2
(pop) ; 374
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 374
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 374
; 0,00s
; (get-info :all-statistics)
(push) ; 374
; [then-branch 895] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 896] 4 == 2
(push) ; 375
; [else-branch 896] 4 != 2
(pop) ; 375
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 375
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 375
; 0,00s
; (get-info :all-statistics)
(push) ; 375
; [then-branch 897] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 898] 4 == 2
(push) ; 376
; [else-branch 898] 4 != 2
(pop) ; 376
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 376
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 376
; 0,00s
; (get-info :all-statistics)
(push) ; 376
; [then-branch 899] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 900] 4 == 2
(push) ; 377
; [else-branch 900] 4 != 2
(pop) ; 377
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 377
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 377
; 0,00s
; (get-info :all-statistics)
(push) ; 377
; [then-branch 901] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 902] 4 == 2
(push) ; 378
; [else-branch 902] 4 != 2
(pop) ; 378
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 378
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 378
; 0,00s
; (get-info :all-statistics)
(push) ; 378
; [then-branch 903] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 904] 4 == 2
(push) ; 379
; [else-branch 904] 4 != 2
(pop) ; 379
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 379
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 379
; 0,00s
; (get-info :all-statistics)
(push) ; 379
; [then-branch 905] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 906] 4 == 2
(push) ; 380
; [else-branch 906] 4 != 2
(pop) ; 380
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 380
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 380
; 0,00s
; (get-info :all-statistics)
(push) ; 380
; [then-branch 907] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 908] 4 == 2
(push) ; 381
; [else-branch 908] 4 != 2
(pop) ; 381
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 381
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 381
; 0,00s
; (get-info :all-statistics)
(push) ; 381
; [then-branch 909] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 910] 4 == 2
(push) ; 382
; [else-branch 910] 4 != 2
(pop) ; 382
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 382
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 382
; 0,00s
; (get-info :all-statistics)
(push) ; 382
; [then-branch 911] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 912] 4 == 2
(push) ; 383
; [else-branch 912] 4 != 2
(pop) ; 383
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 383
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 383
; 0,00s
; (get-info :all-statistics)
(push) ; 383
; [then-branch 913] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 914] 4 == 2
(push) ; 384
; [else-branch 914] 4 != 2
(pop) ; 384
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 384
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 384
; 0,00s
; (get-info :all-statistics)
(push) ; 384
; [then-branch 915] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 916] 4 == 2
(push) ; 385
; [else-branch 916] 4 != 2
(pop) ; 385
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 385
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 385
; 0,00s
; (get-info :all-statistics)
(push) ; 385
; [then-branch 917] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 918] 4 == 2
(push) ; 386
; [else-branch 918] 4 != 2
(pop) ; 386
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 386
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 386
; 0,00s
; (get-info :all-statistics)
(push) ; 386
; [then-branch 919] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 920] 4 == 2
(push) ; 387
; [else-branch 920] 4 != 2
(pop) ; 387
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 387
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 387
; 0,00s
; (get-info :all-statistics)
(push) ; 387
; [then-branch 921] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 922] 4 == 2
(push) ; 388
; [else-branch 922] 4 != 2
(pop) ; 388
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 388
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 388
; 0,00s
; (get-info :all-statistics)
(push) ; 388
; [then-branch 923] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 924] 4 == 2
(push) ; 389
; [else-branch 924] 4 != 2
(pop) ; 389
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 389
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 389
; 0,00s
; (get-info :all-statistics)
(push) ; 389
; [then-branch 925] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 926] 4 == 2
(push) ; 390
; [else-branch 926] 4 != 2
(pop) ; 390
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 390
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 390
; 0,00s
; (get-info :all-statistics)
(push) ; 390
; [then-branch 927] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 928] 4 == 2
(push) ; 391
; [else-branch 928] 4 != 2
(pop) ; 391
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 391
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 391
; 0,00s
; (get-info :all-statistics)
(push) ; 391
; [then-branch 929] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 930] 4 == 2
(push) ; 392
; [else-branch 930] 4 != 2
(pop) ; 392
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 392
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 392
; 0,00s
; (get-info :all-statistics)
(push) ; 392
; [then-branch 931] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 932] 4 == 2
(push) ; 393
; [else-branch 932] 4 != 2
(pop) ; 393
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 393
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 393
; 0,00s
; (get-info :all-statistics)
(push) ; 393
; [then-branch 933] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 934] 4 == 2
(push) ; 394
; [else-branch 934] 4 != 2
(pop) ; 394
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 394
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 394
; 0,00s
; (get-info :all-statistics)
(push) ; 394
; [then-branch 935] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 936] 4 == 2
(push) ; 395
; [else-branch 936] 4 != 2
(pop) ; 395
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 395
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 395
; 0,00s
; (get-info :all-statistics)
(push) ; 395
; [then-branch 937] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 938] 4 == 2
(push) ; 396
; [else-branch 938] 4 != 2
(pop) ; 396
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 396
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 396
; 0,00s
; (get-info :all-statistics)
(push) ; 396
; [then-branch 939] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 940] 4 == 2
(push) ; 397
; [else-branch 940] 4 != 2
(pop) ; 397
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 397
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 397
; 0,00s
; (get-info :all-statistics)
(push) ; 397
; [then-branch 941] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 942] 4 == 2
(push) ; 398
; [else-branch 942] 4 != 2
(pop) ; 398
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 398
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 398
; 0,00s
; (get-info :all-statistics)
(push) ; 398
; [then-branch 943] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 944] 4 == 2
(push) ; 399
; [else-branch 944] 4 != 2
(pop) ; 399
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 399
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 399
; 0,00s
; (get-info :all-statistics)
(push) ; 399
; [then-branch 945] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 946] 4 == 2
(push) ; 400
; [else-branch 946] 4 != 2
(pop) ; 400
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 400
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 400
; 0,00s
; (get-info :all-statistics)
(push) ; 400
; [then-branch 947] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 948] 4 == 2
(push) ; 401
; [else-branch 948] 4 != 2
(pop) ; 401
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 401
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 401
; 0,00s
; (get-info :all-statistics)
(push) ; 401
; [then-branch 949] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 950] 4 == 2
(push) ; 402
; [else-branch 950] 4 != 2
(pop) ; 402
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 402
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 402
; 0,00s
; (get-info :all-statistics)
(push) ; 402
; [then-branch 951] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 952] 4 == 2
(push) ; 403
; [else-branch 952] 4 != 2
(pop) ; 403
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 403
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 403
; 0,00s
; (get-info :all-statistics)
(push) ; 403
; [then-branch 953] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 954] 4 == 2
(push) ; 404
; [else-branch 954] 4 != 2
(pop) ; 404
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 404
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 404
; 0,00s
; (get-info :all-statistics)
(push) ; 404
; [then-branch 955] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 956] 4 == 2
(push) ; 405
; [else-branch 956] 4 != 2
(pop) ; 405
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 405
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 405
; 0,00s
; (get-info :all-statistics)
(push) ; 405
; [then-branch 957] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 958] 4 == 2
(push) ; 406
; [else-branch 958] 4 != 2
(pop) ; 406
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 406
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 406
; 0,00s
; (get-info :all-statistics)
(push) ; 406
; [then-branch 959] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 960] 4 == 2
(push) ; 407
; [else-branch 960] 4 != 2
(pop) ; 407
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 407
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 407
; 0,00s
; (get-info :all-statistics)
(push) ; 407
; [then-branch 961] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 962] 4 == 2
(push) ; 408
; [else-branch 962] 4 != 2
(pop) ; 408
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 408
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 408
; 0,00s
; (get-info :all-statistics)
(push) ; 408
; [then-branch 963] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 964] 4 == 2
(push) ; 409
; [else-branch 964] 4 != 2
(pop) ; 409
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 409
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 409
; 0,00s
; (get-info :all-statistics)
(push) ; 409
; [then-branch 965] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 966] 4 == 2
(push) ; 410
; [else-branch 966] 4 != 2
(pop) ; 410
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 410
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 410
; 0,00s
; (get-info :all-statistics)
(push) ; 410
; [then-branch 967] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 968] 4 == 2
(push) ; 411
; [else-branch 968] 4 != 2
(pop) ; 411
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 411
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 411
; 0,00s
; (get-info :all-statistics)
(push) ; 411
; [then-branch 969] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 970] 4 == 2
(push) ; 412
; [else-branch 970] 4 != 2
(pop) ; 412
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 412
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 412
; 0,00s
; (get-info :all-statistics)
(push) ; 412
; [then-branch 971] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 972] 4 == 2
(push) ; 413
; [else-branch 972] 4 != 2
(pop) ; 413
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 413
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 413
; 0,00s
; (get-info :all-statistics)
(push) ; 413
; [then-branch 973] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 974] 4 == 2
(push) ; 414
; [else-branch 974] 4 != 2
(pop) ; 414
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 414
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 414
; 0,00s
; (get-info :all-statistics)
(push) ; 414
; [then-branch 975] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 976] 4 == 2
(push) ; 415
; [else-branch 976] 4 != 2
(pop) ; 415
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 415
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 415
; 0,00s
; (get-info :all-statistics)
(push) ; 415
; [then-branch 977] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 978] 4 == 2
(push) ; 416
; [else-branch 978] 4 != 2
(pop) ; 416
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 416
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 416
; 0,00s
; (get-info :all-statistics)
(push) ; 416
; [then-branch 979] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 980] 4 == 2
(push) ; 417
; [else-branch 980] 4 != 2
(pop) ; 417
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 417
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 417
; 0,00s
; (get-info :all-statistics)
(push) ; 417
; [then-branch 981] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 982] 4 == 2
(push) ; 418
; [else-branch 982] 4 != 2
(pop) ; 418
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 418
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 418
; 0,00s
; (get-info :all-statistics)
(push) ; 418
; [then-branch 983] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 984] 4 == 2
(push) ; 419
; [else-branch 984] 4 != 2
(pop) ; 419
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 419
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 419
; 0,00s
; (get-info :all-statistics)
(push) ; 419
; [then-branch 985] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 986] 4 == 2
(push) ; 420
; [else-branch 986] 4 != 2
(pop) ; 420
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 420
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 420
; 0,00s
; (get-info :all-statistics)
(push) ; 420
; [then-branch 987] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 988] 4 == 2
(push) ; 421
; [else-branch 988] 4 != 2
(pop) ; 421
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 421
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 421
; 0,00s
; (get-info :all-statistics)
(push) ; 421
; [then-branch 989] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 990] 4 == 2
(push) ; 422
; [else-branch 990] 4 != 2
(pop) ; 422
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 422
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 422
; 0,00s
; (get-info :all-statistics)
(push) ; 422
; [then-branch 991] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 992] 4 == 2
(push) ; 423
; [else-branch 992] 4 != 2
(pop) ; 423
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 423
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 423
; 0,00s
; (get-info :all-statistics)
(push) ; 423
; [then-branch 993] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 994] 4 == 2
(push) ; 424
; [else-branch 994] 4 != 2
(pop) ; 424
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 424
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 424
; 0,00s
; (get-info :all-statistics)
(push) ; 424
; [then-branch 995] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 996] 4 == 2
(push) ; 425
; [else-branch 996] 4 != 2
(pop) ; 425
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 425
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 425
; 0,00s
; (get-info :all-statistics)
(push) ; 425
; [then-branch 997] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 998] 4 == 2
(push) ; 426
; [else-branch 998] 4 != 2
(pop) ; 426
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 426
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 426
; 0,00s
; (get-info :all-statistics)
(push) ; 426
; [then-branch 999] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1000] 4 == 2
(push) ; 427
; [else-branch 1000] 4 != 2
(pop) ; 427
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 427
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 427
; 0,00s
; (get-info :all-statistics)
(push) ; 427
; [then-branch 1001] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1002] 4 == 2
(push) ; 428
; [else-branch 1002] 4 != 2
(pop) ; 428
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 428
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 428
; 0,00s
; (get-info :all-statistics)
(push) ; 428
; [then-branch 1003] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1004] 4 == 2
(push) ; 429
; [else-branch 1004] 4 != 2
(pop) ; 429
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 429
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 429
; 0,00s
; (get-info :all-statistics)
(push) ; 429
; [then-branch 1005] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1006] 4 == 2
(push) ; 430
; [else-branch 1006] 4 != 2
(pop) ; 430
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 430
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 430
; 0,00s
; (get-info :all-statistics)
(push) ; 430
; [then-branch 1007] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1008] 4 == 2
(push) ; 431
; [else-branch 1008] 4 != 2
(pop) ; 431
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 431
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 431
; 0,00s
; (get-info :all-statistics)
(push) ; 431
; [then-branch 1009] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1010] 4 == 2
(push) ; 432
; [else-branch 1010] 4 != 2
(pop) ; 432
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 432
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 432
; 0,00s
; (get-info :all-statistics)
(push) ; 432
; [then-branch 1011] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1012] 4 == 2
(push) ; 433
; [else-branch 1012] 4 != 2
(pop) ; 433
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 433
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 433
; 0,00s
; (get-info :all-statistics)
(push) ; 433
; [then-branch 1013] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1014] 4 == 2
(push) ; 434
; [else-branch 1014] 4 != 2
(pop) ; 434
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 434
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 434
; 0,00s
; (get-info :all-statistics)
(push) ; 434
; [then-branch 1015] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1016] 4 == 2
(push) ; 435
; [else-branch 1016] 4 != 2
(pop) ; 435
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 435
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 435
; 0,00s
; (get-info :all-statistics)
(push) ; 435
; [then-branch 1017] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1018] 4 == 2
(push) ; 436
; [else-branch 1018] 4 != 2
(pop) ; 436
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 436
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 436
; 0,00s
; (get-info :all-statistics)
(push) ; 436
; [then-branch 1019] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1020] 4 == 2
(push) ; 437
; [else-branch 1020] 4 != 2
(pop) ; 437
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 437
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 437
; 0,00s
; (get-info :all-statistics)
(push) ; 437
; [then-branch 1021] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1022] 4 == 2
(push) ; 438
; [else-branch 1022] 4 != 2
(pop) ; 438
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 438
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 438
; 0,00s
; (get-info :all-statistics)
(push) ; 438
; [then-branch 1023] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1024] 4 == 2
(push) ; 439
; [else-branch 1024] 4 != 2
(pop) ; 439
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 439
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 439
; 0,00s
; (get-info :all-statistics)
(push) ; 439
; [then-branch 1025] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1026] 4 == 2
(push) ; 440
; [else-branch 1026] 4 != 2
(pop) ; 440
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 440
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 440
; 0,00s
; (get-info :all-statistics)
(push) ; 440
; [then-branch 1027] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1028] 4 == 2
(push) ; 441
; [else-branch 1028] 4 != 2
(pop) ; 441
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 441
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 441
; 0,00s
; (get-info :all-statistics)
(push) ; 441
; [then-branch 1029] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1030] 4 == 2
(push) ; 442
; [else-branch 1030] 4 != 2
(pop) ; 442
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 442
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 442
; 0,00s
; (get-info :all-statistics)
(push) ; 442
; [then-branch 1031] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1032] 4 == 2
(push) ; 443
; [else-branch 1032] 4 != 2
(pop) ; 443
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 443
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 443
; 0,00s
; (get-info :all-statistics)
(push) ; 443
; [then-branch 1033] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1034] 4 == 2
(push) ; 444
; [else-branch 1034] 4 != 2
(pop) ; 444
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 444
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 444
; 0,00s
; (get-info :all-statistics)
(push) ; 444
; [then-branch 1035] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1036] 4 == 2
(push) ; 445
; [else-branch 1036] 4 != 2
(pop) ; 445
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 445
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 445
; 0,00s
; (get-info :all-statistics)
(push) ; 445
; [then-branch 1037] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1038] 4 == 2
(push) ; 446
; [else-branch 1038] 4 != 2
(pop) ; 446
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 446
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 446
; 0,00s
; (get-info :all-statistics)
(push) ; 446
; [then-branch 1039] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1040] 4 == 2
(push) ; 447
; [else-branch 1040] 4 != 2
(pop) ; 447
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 447
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 447
; 0,00s
; (get-info :all-statistics)
(push) ; 447
; [then-branch 1041] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1042] 4 == 2
(push) ; 448
; [else-branch 1042] 4 != 2
(pop) ; 448
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 448
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 448
; 0,00s
; (get-info :all-statistics)
(push) ; 448
; [then-branch 1043] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1044] 4 == 2
(push) ; 449
; [else-branch 1044] 4 != 2
(pop) ; 449
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 449
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 449
; 0,00s
; (get-info :all-statistics)
(push) ; 449
; [then-branch 1045] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1046] 4 == 2
(push) ; 450
; [else-branch 1046] 4 != 2
(pop) ; 450
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 450
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 450
; 0,00s
; (get-info :all-statistics)
(push) ; 450
; [then-branch 1047] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1048] 4 == 2
(push) ; 451
; [else-branch 1048] 4 != 2
(pop) ; 451
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 451
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 451
; 0,00s
; (get-info :all-statistics)
(push) ; 451
; [then-branch 1049] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1050] 4 == 2
(push) ; 452
; [else-branch 1050] 4 != 2
(pop) ; 452
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 452
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 452
; 0,00s
; (get-info :all-statistics)
(push) ; 452
; [then-branch 1051] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1052] 4 == 2
(push) ; 453
; [else-branch 1052] 4 != 2
(pop) ; 453
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 453
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 453
; 0,00s
; (get-info :all-statistics)
(push) ; 453
; [then-branch 1053] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1054] 4 == 2
(push) ; 454
; [else-branch 1054] 4 != 2
(pop) ; 454
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 454
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 454
; 0,00s
; (get-info :all-statistics)
(push) ; 454
; [then-branch 1055] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1056] 4 == 2
(push) ; 455
; [else-branch 1056] 4 != 2
(pop) ; 455
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 455
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 455
; 0,00s
; (get-info :all-statistics)
(push) ; 455
; [then-branch 1057] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1058] 4 == 2
(push) ; 456
; [else-branch 1058] 4 != 2
(pop) ; 456
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 456
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 456
; 0,00s
; (get-info :all-statistics)
(push) ; 456
; [then-branch 1059] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1060] 4 == 2
(push) ; 457
; [else-branch 1060] 4 != 2
(pop) ; 457
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 457
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 457
; 0,00s
; (get-info :all-statistics)
(push) ; 457
; [then-branch 1061] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1062] 4 == 2
(push) ; 458
; [else-branch 1062] 4 != 2
(pop) ; 458
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 458
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 458
; 0,00s
; (get-info :all-statistics)
(push) ; 458
; [then-branch 1063] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1064] 4 == 2
(push) ; 459
; [else-branch 1064] 4 != 2
(pop) ; 459
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 459
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 459
; 0,00s
; (get-info :all-statistics)
(push) ; 459
; [then-branch 1065] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1066] 4 == 2
(push) ; 460
; [else-branch 1066] 4 != 2
(pop) ; 460
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 460
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 460
; 0,00s
; (get-info :all-statistics)
(push) ; 460
; [then-branch 1067] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1068] 4 == 2
(push) ; 461
; [else-branch 1068] 4 != 2
(pop) ; 461
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 461
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 461
; 0,00s
; (get-info :all-statistics)
(push) ; 461
; [then-branch 1069] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1070] 4 == 2
(push) ; 462
; [else-branch 1070] 4 != 2
(pop) ; 462
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 462
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 462
; 0,00s
; (get-info :all-statistics)
(push) ; 462
; [then-branch 1071] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1072] 4 == 2
(push) ; 463
; [else-branch 1072] 4 != 2
(pop) ; 463
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 463
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 463
; 0,00s
; (get-info :all-statistics)
(push) ; 463
; [then-branch 1073] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1074] 4 == 2
(push) ; 464
; [else-branch 1074] 4 != 2
(pop) ; 464
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 464
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 464
; 0,00s
; (get-info :all-statistics)
(push) ; 464
; [then-branch 1075] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1076] 4 == 2
(push) ; 465
; [else-branch 1076] 4 != 2
(pop) ; 465
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 465
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 465
; 0,00s
; (get-info :all-statistics)
(push) ; 465
; [then-branch 1077] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1078] 4 == 2
(push) ; 466
; [else-branch 1078] 4 != 2
(pop) ; 466
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 466
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 466
; 0,00s
; (get-info :all-statistics)
(push) ; 466
; [then-branch 1079] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1080] 4 == 2
(push) ; 467
; [else-branch 1080] 4 != 2
(pop) ; 467
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 467
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 467
; 0,00s
; (get-info :all-statistics)
(push) ; 467
; [then-branch 1081] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1082] 4 == 2
(push) ; 468
; [else-branch 1082] 4 != 2
(pop) ; 468
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 468
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 468
; 0,00s
; (get-info :all-statistics)
(push) ; 468
; [then-branch 1083] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1084] 4 == 2
(push) ; 469
; [else-branch 1084] 4 != 2
(pop) ; 469
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 469
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 469
; 0,00s
; (get-info :all-statistics)
(push) ; 469
; [then-branch 1085] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1086] 4 == 2
(push) ; 470
; [else-branch 1086] 4 != 2
(pop) ; 470
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 470
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 470
; 0,00s
; (get-info :all-statistics)
(push) ; 470
; [then-branch 1087] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1088] 4 == 2
(push) ; 471
; [else-branch 1088] 4 != 2
(pop) ; 471
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 471
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 471
; 0,00s
; (get-info :all-statistics)
(push) ; 471
; [then-branch 1089] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1090] 4 == 2
(push) ; 472
; [else-branch 1090] 4 != 2
(pop) ; 472
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 472
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 472
; 0,00s
; (get-info :all-statistics)
(push) ; 472
; [then-branch 1091] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1092] 4 == 2
(push) ; 473
; [else-branch 1092] 4 != 2
(pop) ; 473
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 473
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 473
; 0,00s
; (get-info :all-statistics)
(push) ; 473
; [then-branch 1093] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1094] 4 == 2
(push) ; 474
; [else-branch 1094] 4 != 2
(pop) ; 474
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 474
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 474
; 0,00s
; (get-info :all-statistics)
(push) ; 474
; [then-branch 1095] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1096] 4 == 2
(push) ; 475
; [else-branch 1096] 4 != 2
(pop) ; 475
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 475
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 475
; 0,00s
; (get-info :all-statistics)
(push) ; 475
; [then-branch 1097] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1098] 4 == 2
(push) ; 476
; [else-branch 1098] 4 != 2
(pop) ; 476
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 476
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 476
; 0,00s
; (get-info :all-statistics)
(push) ; 476
; [then-branch 1099] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1100] 4 == 2
(push) ; 477
; [else-branch 1100] 4 != 2
(pop) ; 477
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 477
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 477
; 0,00s
; (get-info :all-statistics)
(push) ; 477
; [then-branch 1101] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1102] 4 == 2
(push) ; 478
; [else-branch 1102] 4 != 2
(pop) ; 478
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 478
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 478
; 0,00s
; (get-info :all-statistics)
(push) ; 478
; [then-branch 1103] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1104] 4 == 2
(push) ; 479
; [else-branch 1104] 4 != 2
(pop) ; 479
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 479
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 479
; 0,00s
; (get-info :all-statistics)
(push) ; 479
; [then-branch 1105] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1106] 4 == 2
(push) ; 480
; [else-branch 1106] 4 != 2
(pop) ; 480
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 480
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 480
; 0,00s
; (get-info :all-statistics)
(push) ; 480
; [then-branch 1107] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1108] 4 == 2
(push) ; 481
; [else-branch 1108] 4 != 2
(pop) ; 481
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 481
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 481
; 0,00s
; (get-info :all-statistics)
(push) ; 481
; [then-branch 1109] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1110] 4 == 2
(push) ; 482
; [else-branch 1110] 4 != 2
(pop) ; 482
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 482
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 482
; 0,00s
; (get-info :all-statistics)
(push) ; 482
; [then-branch 1111] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1112] 4 == 2
(push) ; 483
; [else-branch 1112] 4 != 2
(pop) ; 483
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 483
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 483
; 0,00s
; (get-info :all-statistics)
(push) ; 483
; [then-branch 1113] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1114] 4 == 2
(push) ; 484
; [else-branch 1114] 4 != 2
(pop) ; 484
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 484
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 484
; 0,00s
; (get-info :all-statistics)
(push) ; 484
; [then-branch 1115] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1116] 4 == 2
(push) ; 485
; [else-branch 1116] 4 != 2
(pop) ; 485
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 485
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 485
; 0,00s
; (get-info :all-statistics)
(push) ; 485
; [then-branch 1117] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1118] 4 == 2
(push) ; 486
; [else-branch 1118] 4 != 2
(pop) ; 486
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 486
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 486
; 0,00s
; (get-info :all-statistics)
(push) ; 486
; [then-branch 1119] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1120] 4 == 2
(push) ; 487
; [else-branch 1120] 4 != 2
(pop) ; 487
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 487
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 487
; 0,00s
; (get-info :all-statistics)
(push) ; 487
; [then-branch 1121] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1122] 4 == 2
(push) ; 488
; [else-branch 1122] 4 != 2
(pop) ; 488
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 488
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 488
; 0,00s
; (get-info :all-statistics)
(push) ; 488
; [then-branch 1123] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1124] 4 == 2
(push) ; 489
; [else-branch 1124] 4 != 2
(pop) ; 489
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 489
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 489
; 0,00s
; (get-info :all-statistics)
(push) ; 489
; [then-branch 1125] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1126] 4 == 2
(push) ; 490
; [else-branch 1126] 4 != 2
(pop) ; 490
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 490
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 490
; 0,00s
; (get-info :all-statistics)
(push) ; 490
; [then-branch 1127] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1128] 4 == 2
(push) ; 491
; [else-branch 1128] 4 != 2
(pop) ; 491
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 491
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 491
; 0,00s
; (get-info :all-statistics)
(push) ; 491
; [then-branch 1129] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1130] 4 == 2
(push) ; 492
; [else-branch 1130] 4 != 2
(pop) ; 492
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 492
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 492
; 0,00s
; (get-info :all-statistics)
(push) ; 492
; [then-branch 1131] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1132] 4 == 2
(push) ; 493
; [else-branch 1132] 4 != 2
(pop) ; 493
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 493
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 493
; 0,00s
; (get-info :all-statistics)
(push) ; 493
; [then-branch 1133] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1134] 4 == 2
(push) ; 494
; [else-branch 1134] 4 != 2
(pop) ; 494
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 494
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 494
; 0,00s
; (get-info :all-statistics)
(push) ; 494
; [then-branch 1135] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1136] 4 == 2
(push) ; 495
; [else-branch 1136] 4 != 2
(pop) ; 495
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 495
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 495
; 0,00s
; (get-info :all-statistics)
(push) ; 495
; [then-branch 1137] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1138] 4 == 2
(push) ; 496
; [else-branch 1138] 4 != 2
(pop) ; 496
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 496
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 496
; 0,00s
; (get-info :all-statistics)
(push) ; 496
; [then-branch 1139] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1140] 4 == 2
(push) ; 497
; [else-branch 1140] 4 != 2
(pop) ; 497
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 497
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 497
; 0,00s
; (get-info :all-statistics)
(push) ; 497
; [then-branch 1141] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1142] 4 == 2
(push) ; 498
; [else-branch 1142] 4 != 2
(pop) ; 498
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 498
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 498
; 0,00s
; (get-info :all-statistics)
(push) ; 498
; [then-branch 1143] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1144] 4 == 2
(push) ; 499
; [else-branch 1144] 4 != 2
(pop) ; 499
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 499
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 499
; 0,00s
; (get-info :all-statistics)
(push) ; 499
; [then-branch 1145] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1146] 4 == 2
(push) ; 500
; [else-branch 1146] 4 != 2
(pop) ; 500
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 500
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 500
; 0,00s
; (get-info :all-statistics)
(push) ; 500
; [then-branch 1147] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1148] 4 == 2
(push) ; 501
; [else-branch 1148] 4 != 2
(pop) ; 501
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 501
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 501
; 0,00s
; (get-info :all-statistics)
(push) ; 501
; [then-branch 1149] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1150] 4 == 2
(push) ; 502
; [else-branch 1150] 4 != 2
(pop) ; 502
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 502
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 502
; 0,00s
; (get-info :all-statistics)
(push) ; 502
; [then-branch 1151] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1152] 4 == 2
(push) ; 503
; [else-branch 1152] 4 != 2
(pop) ; 503
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 503
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 503
; 0,00s
; (get-info :all-statistics)
(push) ; 503
; [then-branch 1153] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1154] 4 == 2
(push) ; 504
; [else-branch 1154] 4 != 2
(pop) ; 504
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 504
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 504
; 0,00s
; (get-info :all-statistics)
(push) ; 504
; [then-branch 1155] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1156] 4 == 2
(push) ; 505
; [else-branch 1156] 4 != 2
(pop) ; 505
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 505
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 505
; 0,00s
; (get-info :all-statistics)
(push) ; 505
; [then-branch 1157] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1158] 4 == 2
(push) ; 506
; [else-branch 1158] 4 != 2
(pop) ; 506
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 506
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 506
; 0,00s
; (get-info :all-statistics)
(push) ; 506
; [then-branch 1159] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1160] 4 == 2
(push) ; 507
; [else-branch 1160] 4 != 2
(pop) ; 507
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 507
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 507
; 0,00s
; (get-info :all-statistics)
(push) ; 507
; [then-branch 1161] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1162] 4 == 2
(push) ; 508
; [else-branch 1162] 4 != 2
(pop) ; 508
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 508
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 508
; 0,00s
; (get-info :all-statistics)
(push) ; 508
; [then-branch 1163] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1164] 4 == 2
(push) ; 509
; [else-branch 1164] 4 != 2
(pop) ; 509
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 509
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 509
; 0,00s
; (get-info :all-statistics)
(push) ; 509
; [then-branch 1165] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1166] 4 == 2
(push) ; 510
; [else-branch 1166] 4 != 2
(pop) ; 510
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 510
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 510
; 0,00s
; (get-info :all-statistics)
(push) ; 510
; [then-branch 1167] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1168] 4 == 2
(push) ; 511
; [else-branch 1168] 4 != 2
(pop) ; 511
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 511
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 511
; 0,00s
; (get-info :all-statistics)
(push) ; 511
; [then-branch 1169] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1170] 4 == 2
(push) ; 512
; [else-branch 1170] 4 != 2
(pop) ; 512
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 512
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 512
; 0,00s
; (get-info :all-statistics)
(push) ; 512
; [then-branch 1171] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1172] 4 == 2
(push) ; 513
; [else-branch 1172] 4 != 2
(pop) ; 513
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 513
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 513
; 0,00s
; (get-info :all-statistics)
(push) ; 513
; [then-branch 1173] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1174] 4 == 2
(push) ; 514
; [else-branch 1174] 4 != 2
(pop) ; 514
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 514
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 514
; 0,00s
; (get-info :all-statistics)
(push) ; 514
; [then-branch 1175] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1176] 4 == 2
(push) ; 515
; [else-branch 1176] 4 != 2
(pop) ; 515
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 515
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 515
; 0,00s
; (get-info :all-statistics)
(push) ; 515
; [then-branch 1177] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1178] 4 == 2
(push) ; 516
; [else-branch 1178] 4 != 2
(pop) ; 516
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 516
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 516
; 0,00s
; (get-info :all-statistics)
(push) ; 516
; [then-branch 1179] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1180] 4 == 2
(push) ; 517
; [else-branch 1180] 4 != 2
(pop) ; 517
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 517
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 517
; 0,00s
; (get-info :all-statistics)
(push) ; 517
; [then-branch 1181] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1182] 4 == 2
(push) ; 518
; [else-branch 1182] 4 != 2
(pop) ; 518
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 518
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 518
; 0,00s
; (get-info :all-statistics)
(push) ; 518
; [then-branch 1183] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1184] 4 == 2
(push) ; 519
; [else-branch 1184] 4 != 2
(pop) ; 519
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 519
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 519
; 0,00s
; (get-info :all-statistics)
(push) ; 519
; [then-branch 1185] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1186] 4 == 2
(push) ; 520
; [else-branch 1186] 4 != 2
(pop) ; 520
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 520
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 520
; 0,00s
; (get-info :all-statistics)
(push) ; 520
; [then-branch 1187] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1188] 4 == 2
(push) ; 521
; [else-branch 1188] 4 != 2
(pop) ; 521
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 521
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 521
; 0,00s
; (get-info :all-statistics)
(push) ; 521
; [then-branch 1189] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1190] 4 == 2
(push) ; 522
; [else-branch 1190] 4 != 2
(pop) ; 522
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 522
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 522
; 0,00s
; (get-info :all-statistics)
(push) ; 522
; [then-branch 1191] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1192] 4 == 2
(push) ; 523
; [else-branch 1192] 4 != 2
(pop) ; 523
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 523
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 523
; 0,00s
; (get-info :all-statistics)
(push) ; 523
; [then-branch 1193] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1194] 4 == 2
(push) ; 524
; [else-branch 1194] 4 != 2
(pop) ; 524
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 524
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 524
; 0,00s
; (get-info :all-statistics)
(push) ; 524
; [then-branch 1195] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1196] 4 == 2
(push) ; 525
; [else-branch 1196] 4 != 2
(pop) ; 525
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 525
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 525
; 0,00s
; (get-info :all-statistics)
(push) ; 525
; [then-branch 1197] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1198] 4 == 2
(push) ; 526
; [else-branch 1198] 4 != 2
(pop) ; 526
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 526
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 526
; 0,00s
; (get-info :all-statistics)
(push) ; 526
; [then-branch 1199] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1200] 4 == 2
(push) ; 527
; [else-branch 1200] 4 != 2
(pop) ; 527
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 527
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 527
; 0,00s
; (get-info :all-statistics)
(push) ; 527
; [then-branch 1201] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1202] 4 == 2
(push) ; 528
; [else-branch 1202] 4 != 2
(pop) ; 528
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 528
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 528
; 0,00s
; (get-info :all-statistics)
(push) ; 528
; [then-branch 1203] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1204] 4 == 2
(push) ; 529
; [else-branch 1204] 4 != 2
(pop) ; 529
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 529
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 529
; 0,00s
; (get-info :all-statistics)
(push) ; 529
; [then-branch 1205] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1206] 4 == 2
(push) ; 530
; [else-branch 1206] 4 != 2
(pop) ; 530
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 530
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 530
; 0,00s
; (get-info :all-statistics)
(push) ; 530
; [then-branch 1207] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1208] 4 == 2
(push) ; 531
; [else-branch 1208] 4 != 2
(pop) ; 531
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 531
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 531
; 0,00s
; (get-info :all-statistics)
(push) ; 531
; [then-branch 1209] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1210] 4 == 2
(push) ; 532
; [else-branch 1210] 4 != 2
(pop) ; 532
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 532
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 532
; 0,00s
; (get-info :all-statistics)
(push) ; 532
; [then-branch 1211] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1212] 4 == 2
(push) ; 533
; [else-branch 1212] 4 != 2
(pop) ; 533
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 533
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 533
; 0,00s
; (get-info :all-statistics)
(push) ; 533
; [then-branch 1213] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1214] 4 == 2
(push) ; 534
; [else-branch 1214] 4 != 2
(pop) ; 534
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 534
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 534
; 0,00s
; (get-info :all-statistics)
(push) ; 534
; [then-branch 1215] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1216] 4 == 2
(push) ; 535
; [else-branch 1216] 4 != 2
(pop) ; 535
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 535
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 535
; 0,00s
; (get-info :all-statistics)
(push) ; 535
; [then-branch 1217] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1218] 4 == 2
(push) ; 536
; [else-branch 1218] 4 != 2
(pop) ; 536
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 536
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 536
; 0,00s
; (get-info :all-statistics)
(push) ; 536
; [then-branch 1219] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1220] 4 == 2
(push) ; 537
; [else-branch 1220] 4 != 2
(pop) ; 537
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 537
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 537
; 0,00s
; (get-info :all-statistics)
(push) ; 537
; [then-branch 1221] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1222] 4 == 2
(push) ; 538
; [else-branch 1222] 4 != 2
(pop) ; 538
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 538
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 538
; 0,00s
; (get-info :all-statistics)
(push) ; 538
; [then-branch 1223] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1224] 4 == 2
(push) ; 539
; [else-branch 1224] 4 != 2
(pop) ; 539
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 539
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 539
; 0,00s
; (get-info :all-statistics)
(push) ; 539
; [then-branch 1225] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1226] 4 == 2
(push) ; 540
; [else-branch 1226] 4 != 2
(pop) ; 540
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 540
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 540
; 0,00s
; (get-info :all-statistics)
(push) ; 540
; [then-branch 1227] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1228] 4 == 2
(push) ; 541
; [else-branch 1228] 4 != 2
(pop) ; 541
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 541
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 541
; 0,00s
; (get-info :all-statistics)
(push) ; 541
; [then-branch 1229] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1230] 4 == 2
(push) ; 542
; [else-branch 1230] 4 != 2
(pop) ; 542
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 542
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 542
; 0,00s
; (get-info :all-statistics)
(push) ; 542
; [then-branch 1231] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1232] 4 == 2
(push) ; 543
; [else-branch 1232] 4 != 2
(pop) ; 543
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 543
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 543
; 0,00s
; (get-info :all-statistics)
(push) ; 543
; [then-branch 1233] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1234] 4 == 2
(push) ; 544
; [else-branch 1234] 4 != 2
(pop) ; 544
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 544
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 544
; 0,00s
; (get-info :all-statistics)
(push) ; 544
; [then-branch 1235] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1236] 4 == 2
(push) ; 545
; [else-branch 1236] 4 != 2
(pop) ; 545
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 545
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 545
; 0,00s
; (get-info :all-statistics)
(push) ; 545
; [then-branch 1237] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1238] 4 == 2
(push) ; 546
; [else-branch 1238] 4 != 2
(pop) ; 546
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 546
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 546
; 0,00s
; (get-info :all-statistics)
(push) ; 546
; [then-branch 1239] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1240] 4 == 2
(push) ; 547
; [else-branch 1240] 4 != 2
(pop) ; 547
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 547
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 547
; 0,00s
; (get-info :all-statistics)
(push) ; 547
; [then-branch 1241] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1242] 4 == 2
(push) ; 548
; [else-branch 1242] 4 != 2
(pop) ; 548
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 548
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 548
; 0,00s
; (get-info :all-statistics)
(push) ; 548
; [then-branch 1243] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1244] 4 == 2
(push) ; 549
; [else-branch 1244] 4 != 2
(pop) ; 549
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 549
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 549
; 0,00s
; (get-info :all-statistics)
(push) ; 549
; [then-branch 1245] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1246] 4 == 2
(push) ; 550
; [else-branch 1246] 4 != 2
(pop) ; 550
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 550
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 550
; 0,00s
; (get-info :all-statistics)
(push) ; 550
; [then-branch 1247] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1248] 4 == 2
(push) ; 551
; [else-branch 1248] 4 != 2
(pop) ; 551
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 551
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 551
; 0,00s
; (get-info :all-statistics)
(push) ; 551
; [then-branch 1249] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1250] 4 == 2
(push) ; 552
; [else-branch 1250] 4 != 2
(pop) ; 552
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 552
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 552
; 0,00s
; (get-info :all-statistics)
(push) ; 552
; [then-branch 1251] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1252] 4 == 2
(push) ; 553
; [else-branch 1252] 4 != 2
(pop) ; 553
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 553
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 553
; 0,00s
; (get-info :all-statistics)
(push) ; 553
; [then-branch 1253] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1254] 4 == 2
(push) ; 554
; [else-branch 1254] 4 != 2
(pop) ; 554
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 554
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 554
; 0,00s
; (get-info :all-statistics)
(push) ; 554
; [then-branch 1255] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1256] 4 == 2
(push) ; 555
; [else-branch 1256] 4 != 2
(pop) ; 555
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 555
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 555
; 0,00s
; (get-info :all-statistics)
(push) ; 555
; [then-branch 1257] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1258] 4 == 2
(push) ; 556
; [else-branch 1258] 4 != 2
(pop) ; 556
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 556
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 556
; 0,00s
; (get-info :all-statistics)
(push) ; 556
; [then-branch 1259] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1260] 4 == 2
(push) ; 557
; [else-branch 1260] 4 != 2
(pop) ; 557
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 557
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 557
; 0,00s
; (get-info :all-statistics)
(push) ; 557
; [then-branch 1261] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1262] 4 == 2
(push) ; 558
; [else-branch 1262] 4 != 2
(pop) ; 558
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 558
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 558
; 0,00s
; (get-info :all-statistics)
(push) ; 558
; [then-branch 1263] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1264] 4 == 2
(push) ; 559
; [else-branch 1264] 4 != 2
(pop) ; 559
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 559
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 559
; 0,00s
; (get-info :all-statistics)
(push) ; 559
; [then-branch 1265] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1266] 4 == 2
(push) ; 560
; [else-branch 1266] 4 != 2
(pop) ; 560
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 560
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 560
; 0,00s
; (get-info :all-statistics)
(push) ; 560
; [then-branch 1267] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1268] 4 == 2
(push) ; 561
; [else-branch 1268] 4 != 2
(pop) ; 561
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 561
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 561
; 0,00s
; (get-info :all-statistics)
(push) ; 561
; [then-branch 1269] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1270] 4 == 2
(push) ; 562
; [else-branch 1270] 4 != 2
(pop) ; 562
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 562
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 562
; 0,00s
; (get-info :all-statistics)
(push) ; 562
; [then-branch 1271] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1272] 4 == 2
(push) ; 563
; [else-branch 1272] 4 != 2
(pop) ; 563
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 563
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 563
; 0,00s
; (get-info :all-statistics)
(push) ; 563
; [then-branch 1273] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1274] 4 == 2
(push) ; 564
; [else-branch 1274] 4 != 2
(pop) ; 564
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 564
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 564
; 0,00s
; (get-info :all-statistics)
(push) ; 564
; [then-branch 1275] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1276] 4 == 2
(push) ; 565
; [else-branch 1276] 4 != 2
(pop) ; 565
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 565
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 565
; 0,00s
; (get-info :all-statistics)
(push) ; 565
; [then-branch 1277] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1278] 4 == 2
(push) ; 566
; [else-branch 1278] 4 != 2
(pop) ; 566
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 566
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 566
; 0,00s
; (get-info :all-statistics)
(push) ; 566
; [then-branch 1279] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1280] 4 == 2
(push) ; 567
; [else-branch 1280] 4 != 2
(pop) ; 567
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 567
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 567
; 0,00s
; (get-info :all-statistics)
(push) ; 567
; [then-branch 1281] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1282] 4 == 2
(push) ; 568
; [else-branch 1282] 4 != 2
(pop) ; 568
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 568
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 568
; 0,00s
; (get-info :all-statistics)
(push) ; 568
; [then-branch 1283] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1284] 4 == 2
(push) ; 569
; [else-branch 1284] 4 != 2
(pop) ; 569
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 569
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 569
; 0,00s
; (get-info :all-statistics)
(push) ; 569
; [then-branch 1285] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1286] 4 == 2
(push) ; 570
; [else-branch 1286] 4 != 2
(pop) ; 570
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 570
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 570
; 0,00s
; (get-info :all-statistics)
(push) ; 570
; [then-branch 1287] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1288] 4 == 2
(push) ; 571
; [else-branch 1288] 4 != 2
(pop) ; 571
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 571
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 571
; 0,00s
; (get-info :all-statistics)
(push) ; 571
; [then-branch 1289] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1290] 4 == 2
(push) ; 572
; [else-branch 1290] 4 != 2
(pop) ; 572
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 572
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 572
; 0,00s
; (get-info :all-statistics)
(push) ; 572
; [then-branch 1291] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1292] 4 == 2
(push) ; 573
; [else-branch 1292] 4 != 2
(pop) ; 573
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 573
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 573
; 0,00s
; (get-info :all-statistics)
(push) ; 573
; [then-branch 1293] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1294] 4 == 2
(push) ; 574
; [else-branch 1294] 4 != 2
(pop) ; 574
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 574
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 574
; 0,00s
; (get-info :all-statistics)
(push) ; 574
; [then-branch 1295] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1296] 4 == 2
(push) ; 575
; [else-branch 1296] 4 != 2
(pop) ; 575
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 575
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 575
; 0,00s
; (get-info :all-statistics)
(push) ; 575
; [then-branch 1297] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1298] 4 == 2
(push) ; 576
; [else-branch 1298] 4 != 2
(pop) ; 576
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 576
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 576
; 0,00s
; (get-info :all-statistics)
(push) ; 576
; [then-branch 1299] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1300] 4 == 2
(push) ; 577
; [else-branch 1300] 4 != 2
(pop) ; 577
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 577
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 577
; 0,00s
; (get-info :all-statistics)
(push) ; 577
; [then-branch 1301] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1302] 4 == 2
(push) ; 578
; [else-branch 1302] 4 != 2
(pop) ; 578
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 578
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 578
; 0,00s
; (get-info :all-statistics)
(push) ; 578
; [then-branch 1303] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1304] 4 == 2
(push) ; 579
; [else-branch 1304] 4 != 2
(pop) ; 579
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 579
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 579
; 0,00s
; (get-info :all-statistics)
(push) ; 579
; [then-branch 1305] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1306] 4 == 2
(push) ; 580
; [else-branch 1306] 4 != 2
(pop) ; 580
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 580
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 580
; 0,00s
; (get-info :all-statistics)
(push) ; 580
; [then-branch 1307] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1308] 4 == 2
(push) ; 581
; [else-branch 1308] 4 != 2
(pop) ; 581
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 581
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 581
; 0,00s
; (get-info :all-statistics)
(push) ; 581
; [then-branch 1309] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1310] 4 == 2
(push) ; 582
; [else-branch 1310] 4 != 2
(pop) ; 582
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 582
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 582
; 0,00s
; (get-info :all-statistics)
(push) ; 582
; [then-branch 1311] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1312] 4 == 2
(push) ; 583
; [else-branch 1312] 4 != 2
(pop) ; 583
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 583
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 583
; 0,00s
; (get-info :all-statistics)
(push) ; 583
; [then-branch 1313] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1314] 4 == 2
(push) ; 584
; [else-branch 1314] 4 != 2
(pop) ; 584
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 584
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 584
; 0,00s
; (get-info :all-statistics)
(push) ; 584
; [then-branch 1315] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1316] 4 == 2
(push) ; 585
; [else-branch 1316] 4 != 2
(pop) ; 585
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 585
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 585
; 0,00s
; (get-info :all-statistics)
(push) ; 585
; [then-branch 1317] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1318] 4 == 2
(push) ; 586
; [else-branch 1318] 4 != 2
(pop) ; 586
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 586
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 586
; 0,00s
; (get-info :all-statistics)
(push) ; 586
; [then-branch 1319] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1320] 4 == 2
(push) ; 587
; [else-branch 1320] 4 != 2
(pop) ; 587
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 587
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 587
; 0,00s
; (get-info :all-statistics)
(push) ; 587
; [then-branch 1321] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1322] 4 == 2
(push) ; 588
; [else-branch 1322] 4 != 2
(pop) ; 588
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 588
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 588
; 0,00s
; (get-info :all-statistics)
(push) ; 588
; [then-branch 1323] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1324] 4 == 2
(push) ; 589
; [else-branch 1324] 4 != 2
(pop) ; 589
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 589
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 589
; 0,00s
; (get-info :all-statistics)
(push) ; 589
; [then-branch 1325] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1326] 4 == 2
(push) ; 590
; [else-branch 1326] 4 != 2
(pop) ; 590
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 590
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 590
; 0,00s
; (get-info :all-statistics)
(push) ; 590
; [then-branch 1327] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1328] 4 == 2
(push) ; 591
; [else-branch 1328] 4 != 2
(pop) ; 591
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 591
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 591
; 0,00s
; (get-info :all-statistics)
(push) ; 591
; [then-branch 1329] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1330] 4 == 2
(push) ; 592
; [else-branch 1330] 4 != 2
(pop) ; 592
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 592
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 592
; 0,00s
; (get-info :all-statistics)
(push) ; 592
; [then-branch 1331] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1332] 4 == 2
(push) ; 593
; [else-branch 1332] 4 != 2
(pop) ; 593
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 593
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 593
; 0,00s
; (get-info :all-statistics)
(push) ; 593
; [then-branch 1333] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1334] 4 == 2
(push) ; 594
; [else-branch 1334] 4 != 2
(pop) ; 594
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 594
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 594
; 0,00s
; (get-info :all-statistics)
(push) ; 594
; [then-branch 1335] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1336] 4 == 2
(push) ; 595
; [else-branch 1336] 4 != 2
(pop) ; 595
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 595
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 595
; 0,00s
; (get-info :all-statistics)
(push) ; 595
; [then-branch 1337] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1338] 4 == 2
(push) ; 596
; [else-branch 1338] 4 != 2
(pop) ; 596
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 596
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 596
; 0,00s
; (get-info :all-statistics)
(push) ; 596
; [then-branch 1339] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1340] 4 == 2
(push) ; 597
; [else-branch 1340] 4 != 2
(pop) ; 597
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 597
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 597
; 0,00s
; (get-info :all-statistics)
(push) ; 597
; [then-branch 1341] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1342] 4 == 2
(push) ; 598
; [else-branch 1342] 4 != 2
(pop) ; 598
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 598
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 598
; 0,00s
; (get-info :all-statistics)
(push) ; 598
; [then-branch 1343] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1344] 4 == 2
(push) ; 599
; [else-branch 1344] 4 != 2
(pop) ; 599
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 599
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 599
; 0,00s
; (get-info :all-statistics)
(push) ; 599
; [then-branch 1345] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1346] 4 == 2
(push) ; 600
; [else-branch 1346] 4 != 2
(pop) ; 600
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 600
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 600
; 0,00s
; (get-info :all-statistics)
(push) ; 600
; [then-branch 1347] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1348] 4 == 2
(push) ; 601
; [else-branch 1348] 4 != 2
(pop) ; 601
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 601
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 601
; 0,00s
; (get-info :all-statistics)
(push) ; 601
; [then-branch 1349] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1350] 4 == 2
(push) ; 602
; [else-branch 1350] 4 != 2
(pop) ; 602
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 602
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 602
; 0,00s
; (get-info :all-statistics)
(push) ; 602
; [then-branch 1351] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1352] 4 == 2
(push) ; 603
; [else-branch 1352] 4 != 2
(pop) ; 603
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 603
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 603
; 0,00s
; (get-info :all-statistics)
(push) ; 603
; [then-branch 1353] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1354] 4 == 2
(push) ; 604
; [else-branch 1354] 4 != 2
(pop) ; 604
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 604
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 604
; 0,00s
; (get-info :all-statistics)
(push) ; 604
; [then-branch 1355] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1356] 4 == 2
(push) ; 605
; [else-branch 1356] 4 != 2
(pop) ; 605
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 605
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 605
; 0,00s
; (get-info :all-statistics)
(push) ; 605
; [then-branch 1357] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1358] 4 == 2
(push) ; 606
; [else-branch 1358] 4 != 2
(pop) ; 606
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 606
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 606
; 0,00s
; (get-info :all-statistics)
(push) ; 606
; [then-branch 1359] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1360] 4 == 2
(push) ; 607
; [else-branch 1360] 4 != 2
(pop) ; 607
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 607
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 607
; 0,00s
; (get-info :all-statistics)
(push) ; 607
; [then-branch 1361] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1362] 4 == 2
(push) ; 608
; [else-branch 1362] 4 != 2
(pop) ; 608
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 608
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 608
; 0,00s
; (get-info :all-statistics)
(push) ; 608
; [then-branch 1363] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1364] 4 == 2
(push) ; 609
; [else-branch 1364] 4 != 2
(pop) ; 609
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 609
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 609
; 0,00s
; (get-info :all-statistics)
(push) ; 609
; [then-branch 1365] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1366] 4 == 2
(push) ; 610
; [else-branch 1366] 4 != 2
(pop) ; 610
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 610
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 610
; 0,00s
; (get-info :all-statistics)
(push) ; 610
; [then-branch 1367] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1368] 4 == 2
(push) ; 611
; [else-branch 1368] 4 != 2
(pop) ; 611
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 611
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 611
; 0,00s
; (get-info :all-statistics)
(push) ; 611
; [then-branch 1369] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1370] 4 == 2
(push) ; 612
; [else-branch 1370] 4 != 2
(pop) ; 612
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 612
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 612
; 0,00s
; (get-info :all-statistics)
(push) ; 612
; [then-branch 1371] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1372] 4 == 2
(push) ; 613
; [else-branch 1372] 4 != 2
(pop) ; 613
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 613
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 613
; 0,00s
; (get-info :all-statistics)
(push) ; 613
; [then-branch 1373] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1374] 4 == 2
(push) ; 614
; [else-branch 1374] 4 != 2
(pop) ; 614
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 614
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 614
; 0,00s
; (get-info :all-statistics)
(push) ; 614
; [then-branch 1375] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1376] 4 == 2
(push) ; 615
; [else-branch 1376] 4 != 2
(pop) ; 615
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 615
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 615
; 0,00s
; (get-info :all-statistics)
(push) ; 615
; [then-branch 1377] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1378] 4 == 2
(push) ; 616
; [else-branch 1378] 4 != 2
(pop) ; 616
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 616
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 616
; 0,00s
; (get-info :all-statistics)
(push) ; 616
; [then-branch 1379] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1380] 4 == 2
(push) ; 617
; [else-branch 1380] 4 != 2
(pop) ; 617
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 617
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 617
; 0,00s
; (get-info :all-statistics)
(push) ; 617
; [then-branch 1381] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1382] 4 == 2
(push) ; 618
; [else-branch 1382] 4 != 2
(pop) ; 618
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 618
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 618
; 0,00s
; (get-info :all-statistics)
(push) ; 618
; [then-branch 1383] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1384] 4 == 2
(push) ; 619
; [else-branch 1384] 4 != 2
(pop) ; 619
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 619
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 619
; 0,00s
; (get-info :all-statistics)
(push) ; 619
; [then-branch 1385] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1386] 4 == 2
(push) ; 620
; [else-branch 1386] 4 != 2
(pop) ; 620
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 620
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 620
; 0,00s
; (get-info :all-statistics)
(push) ; 620
; [then-branch 1387] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1388] 4 == 2
(push) ; 621
; [else-branch 1388] 4 != 2
(pop) ; 621
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 621
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 621
; 0,00s
; (get-info :all-statistics)
(push) ; 621
; [then-branch 1389] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1390] 4 == 2
(push) ; 622
; [else-branch 1390] 4 != 2
(pop) ; 622
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 622
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 622
; 0,00s
; (get-info :all-statistics)
(push) ; 622
; [then-branch 1391] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1392] 4 == 2
(push) ; 623
; [else-branch 1392] 4 != 2
(pop) ; 623
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 623
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 623
; 0,00s
; (get-info :all-statistics)
(push) ; 623
; [then-branch 1393] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1394] 4 == 2
(push) ; 624
; [else-branch 1394] 4 != 2
(pop) ; 624
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 624
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 624
; 0,00s
; (get-info :all-statistics)
(push) ; 624
; [then-branch 1395] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1396] 4 == 2
(push) ; 625
; [else-branch 1396] 4 != 2
(pop) ; 625
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 625
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 625
; 0,00s
; (get-info :all-statistics)
(push) ; 625
; [then-branch 1397] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1398] 4 == 2
(push) ; 626
; [else-branch 1398] 4 != 2
(pop) ; 626
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 626
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 626
; 0,00s
; (get-info :all-statistics)
(push) ; 626
; [then-branch 1399] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1400] 4 == 2
(push) ; 627
; [else-branch 1400] 4 != 2
(pop) ; 627
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 627
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 627
; 0,00s
; (get-info :all-statistics)
(push) ; 627
; [then-branch 1401] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1402] 4 == 2
(push) ; 628
; [else-branch 1402] 4 != 2
(pop) ; 628
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 628
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 628
; 0,00s
; (get-info :all-statistics)
(push) ; 628
; [then-branch 1403] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1404] 4 == 2
(push) ; 629
; [else-branch 1404] 4 != 2
(pop) ; 629
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 629
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 629
; 0,00s
; (get-info :all-statistics)
(push) ; 629
; [then-branch 1405] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1406] 4 == 2
(push) ; 630
; [else-branch 1406] 4 != 2
(pop) ; 630
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 630
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 630
; 0,00s
; (get-info :all-statistics)
(push) ; 630
; [then-branch 1407] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1408] 4 == 2
(push) ; 631
; [else-branch 1408] 4 != 2
(pop) ; 631
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 631
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 631
; 0,00s
; (get-info :all-statistics)
(push) ; 631
; [then-branch 1409] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1410] 4 == 2
(push) ; 632
; [else-branch 1410] 4 != 2
(pop) ; 632
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 632
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 632
; 0,00s
; (get-info :all-statistics)
(push) ; 632
; [then-branch 1411] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1412] 4 == 2
(push) ; 633
; [else-branch 1412] 4 != 2
(pop) ; 633
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 633
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 633
; 0,00s
; (get-info :all-statistics)
(push) ; 633
; [then-branch 1413] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1414] 4 == 2
(push) ; 634
; [else-branch 1414] 4 != 2
(pop) ; 634
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 634
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 634
; 0,00s
; (get-info :all-statistics)
(push) ; 634
; [then-branch 1415] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1416] 4 == 2
(push) ; 635
; [else-branch 1416] 4 != 2
(pop) ; 635
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 635
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 635
; 0,00s
; (get-info :all-statistics)
(push) ; 635
; [then-branch 1417] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1418] 4 == 2
(push) ; 636
; [else-branch 1418] 4 != 2
(pop) ; 636
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 636
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 636
; 0,00s
; (get-info :all-statistics)
(push) ; 636
; [then-branch 1419] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1420] 4 == 2
(push) ; 637
; [else-branch 1420] 4 != 2
(pop) ; 637
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 637
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 637
; 0,00s
; (get-info :all-statistics)
(push) ; 637
; [then-branch 1421] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1422] 4 == 2
(push) ; 638
; [else-branch 1422] 4 != 2
(pop) ; 638
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 638
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 638
; 0,00s
; (get-info :all-statistics)
(push) ; 638
; [then-branch 1423] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1424] 4 == 2
(push) ; 639
; [else-branch 1424] 4 != 2
(pop) ; 639
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 639
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 639
; 0,00s
; (get-info :all-statistics)
(push) ; 639
; [then-branch 1425] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1426] 4 == 2
(push) ; 640
; [else-branch 1426] 4 != 2
(pop) ; 640
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 640
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 640
; 0,00s
; (get-info :all-statistics)
(push) ; 640
; [then-branch 1427] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1428] 4 == 2
(push) ; 641
; [else-branch 1428] 4 != 2
(pop) ; 641
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 641
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 641
; 0,00s
; (get-info :all-statistics)
(push) ; 641
; [then-branch 1429] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1430] 4 == 2
(push) ; 642
; [else-branch 1430] 4 != 2
(pop) ; 642
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 642
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 642
; 0,00s
; (get-info :all-statistics)
(push) ; 642
; [then-branch 1431] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1432] 4 == 2
(push) ; 643
; [else-branch 1432] 4 != 2
(pop) ; 643
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 643
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 643
; 0,00s
; (get-info :all-statistics)
(push) ; 643
; [then-branch 1433] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1434] 4 == 2
(push) ; 644
; [else-branch 1434] 4 != 2
(pop) ; 644
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 644
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 644
; 0,00s
; (get-info :all-statistics)
(push) ; 644
; [then-branch 1435] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1436] 4 == 2
(push) ; 645
; [else-branch 1436] 4 != 2
(pop) ; 645
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 645
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 645
; 0,00s
; (get-info :all-statistics)
(push) ; 645
; [then-branch 1437] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1438] 4 == 2
(push) ; 646
; [else-branch 1438] 4 != 2
(pop) ; 646
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 646
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 646
; 0,00s
; (get-info :all-statistics)
(push) ; 646
; [then-branch 1439] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1440] 4 == 2
(push) ; 647
; [else-branch 1440] 4 != 2
(pop) ; 647
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 647
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 647
; 0,00s
; (get-info :all-statistics)
(push) ; 647
; [then-branch 1441] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1442] 4 == 2
(push) ; 648
; [else-branch 1442] 4 != 2
(pop) ; 648
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 648
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 648
; 0,00s
; (get-info :all-statistics)
(push) ; 648
; [then-branch 1443] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1444] 4 == 2
(push) ; 649
; [else-branch 1444] 4 != 2
(pop) ; 649
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 649
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 649
; 0,00s
; (get-info :all-statistics)
(push) ; 649
; [then-branch 1445] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1446] 4 == 2
(push) ; 650
; [else-branch 1446] 4 != 2
(pop) ; 650
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 650
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 650
; 0,00s
; (get-info :all-statistics)
(push) ; 650
; [then-branch 1447] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1448] 4 == 2
(push) ; 651
; [else-branch 1448] 4 != 2
(pop) ; 651
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 651
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 651
; 0,00s
; (get-info :all-statistics)
(push) ; 651
; [then-branch 1449] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1450] 4 == 2
(push) ; 652
; [else-branch 1450] 4 != 2
(pop) ; 652
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 652
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 652
; 0,00s
; (get-info :all-statistics)
(push) ; 652
; [then-branch 1451] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1452] 4 == 2
(push) ; 653
; [else-branch 1452] 4 != 2
(pop) ; 653
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 653
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 653
; 0,00s
; (get-info :all-statistics)
(push) ; 653
; [then-branch 1453] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1454] 4 == 2
(push) ; 654
; [else-branch 1454] 4 != 2
(pop) ; 654
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 654
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 654
; 0,00s
; (get-info :all-statistics)
(push) ; 654
; [then-branch 1455] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1456] 4 == 2
(push) ; 655
; [else-branch 1456] 4 != 2
(pop) ; 655
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 655
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 655
; 0,00s
; (get-info :all-statistics)
(push) ; 655
; [then-branch 1457] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1458] 4 == 2
(push) ; 656
; [else-branch 1458] 4 != 2
(pop) ; 656
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 656
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 656
; 0,00s
; (get-info :all-statistics)
(push) ; 656
; [then-branch 1459] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1460] 4 == 2
(push) ; 657
; [else-branch 1460] 4 != 2
(pop) ; 657
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 657
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 657
; 0,00s
; (get-info :all-statistics)
(push) ; 657
; [then-branch 1461] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1462] 4 == 2
(push) ; 658
; [else-branch 1462] 4 != 2
(pop) ; 658
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 658
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 658
; 0,00s
; (get-info :all-statistics)
(push) ; 658
; [then-branch 1463] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1464] 4 == 2
(push) ; 659
; [else-branch 1464] 4 != 2
(pop) ; 659
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 659
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 659
; 0,00s
; (get-info :all-statistics)
(push) ; 659
; [then-branch 1465] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1466] 4 == 2
(push) ; 660
; [else-branch 1466] 4 != 2
(pop) ; 660
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 660
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 660
; 0,00s
; (get-info :all-statistics)
(push) ; 660
; [then-branch 1467] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1468] 4 == 2
(push) ; 661
; [else-branch 1468] 4 != 2
(pop) ; 661
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 661
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 661
; 0,00s
; (get-info :all-statistics)
(push) ; 661
; [then-branch 1469] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1470] 4 == 2
(push) ; 662
; [else-branch 1470] 4 != 2
(pop) ; 662
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 662
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 662
; 0,00s
; (get-info :all-statistics)
(push) ; 662
; [then-branch 1471] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1472] 4 == 2
(push) ; 663
; [else-branch 1472] 4 != 2
(pop) ; 663
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 663
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 663
; 0,00s
; (get-info :all-statistics)
(push) ; 663
; [then-branch 1473] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1474] 4 == 2
(push) ; 664
; [else-branch 1474] 4 != 2
(pop) ; 664
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 664
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 664
; 0,00s
; (get-info :all-statistics)
(push) ; 664
; [then-branch 1475] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1476] 4 == 2
(push) ; 665
; [else-branch 1476] 4 != 2
(pop) ; 665
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 665
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 665
; 0,00s
; (get-info :all-statistics)
(push) ; 665
; [then-branch 1477] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1478] 4 == 2
(push) ; 666
; [else-branch 1478] 4 != 2
(pop) ; 666
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 666
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 666
; 0,00s
; (get-info :all-statistics)
(push) ; 666
; [then-branch 1479] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1480] 4 == 2
(push) ; 667
; [else-branch 1480] 4 != 2
(pop) ; 667
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 667
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 667
; 0,00s
; (get-info :all-statistics)
(push) ; 667
; [then-branch 1481] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1482] 4 == 2
(push) ; 668
; [else-branch 1482] 4 != 2
(pop) ; 668
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 668
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 668
; 0,00s
; (get-info :all-statistics)
(push) ; 668
; [then-branch 1483] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1484] 4 == 2
(push) ; 669
; [else-branch 1484] 4 != 2
(pop) ; 669
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 669
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 669
; 0,00s
; (get-info :all-statistics)
(push) ; 669
; [then-branch 1485] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1486] 4 == 2
(push) ; 670
; [else-branch 1486] 4 != 2
(pop) ; 670
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 670
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 670
; 0,00s
; (get-info :all-statistics)
(push) ; 670
; [then-branch 1487] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1488] 4 == 2
(push) ; 671
; [else-branch 1488] 4 != 2
(pop) ; 671
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 671
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 671
; 0,00s
; (get-info :all-statistics)
(push) ; 671
; [then-branch 1489] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1490] 4 == 2
(push) ; 672
; [else-branch 1490] 4 != 2
(pop) ; 672
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 672
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 672
; 0,00s
; (get-info :all-statistics)
(push) ; 672
; [then-branch 1491] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1492] 4 == 2
(push) ; 673
; [else-branch 1492] 4 != 2
(pop) ; 673
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 673
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 673
; 0,00s
; (get-info :all-statistics)
(push) ; 673
; [then-branch 1493] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1494] 4 == 2
(push) ; 674
; [else-branch 1494] 4 != 2
(pop) ; 674
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 674
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 674
; 0,00s
; (get-info :all-statistics)
(push) ; 674
; [then-branch 1495] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1496] 4 == 2
(push) ; 675
; [else-branch 1496] 4 != 2
(pop) ; 675
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 675
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 675
; 0,00s
; (get-info :all-statistics)
(push) ; 675
; [then-branch 1497] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1498] 4 == 2
(push) ; 676
; [else-branch 1498] 4 != 2
(pop) ; 676
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 676
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 676
; 0,00s
; (get-info :all-statistics)
(push) ; 676
; [then-branch 1499] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1500] 4 == 2
(push) ; 677
; [else-branch 1500] 4 != 2
(pop) ; 677
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 677
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 677
; 0,00s
; (get-info :all-statistics)
(push) ; 677
; [then-branch 1501] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1502] 4 == 2
(push) ; 678
; [else-branch 1502] 4 != 2
(pop) ; 678
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 678
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 678
; 0,00s
; (get-info :all-statistics)
(push) ; 678
; [then-branch 1503] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1504] 4 == 2
(push) ; 679
; [else-branch 1504] 4 != 2
(pop) ; 679
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 679
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 679
; 0,00s
; (get-info :all-statistics)
(push) ; 679
; [then-branch 1505] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1506] 4 == 2
(push) ; 680
; [else-branch 1506] 4 != 2
(pop) ; 680
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 680
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 680
; 0,00s
; (get-info :all-statistics)
(push) ; 680
; [then-branch 1507] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1508] 4 == 2
(push) ; 681
; [else-branch 1508] 4 != 2
(pop) ; 681
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 681
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 681
; 0,00s
; (get-info :all-statistics)
(push) ; 681
; [then-branch 1509] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1510] 4 == 2
(push) ; 682
; [else-branch 1510] 4 != 2
(pop) ; 682
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 682
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 682
; 0,00s
; (get-info :all-statistics)
(push) ; 682
; [then-branch 1511] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1512] 4 == 2
(push) ; 683
; [else-branch 1512] 4 != 2
(pop) ; 683
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 683
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 683
; 0,00s
; (get-info :all-statistics)
(push) ; 683
; [then-branch 1513] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1514] 4 == 2
(push) ; 684
; [else-branch 1514] 4 != 2
(pop) ; 684
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 684
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 684
; 0,00s
; (get-info :all-statistics)
(push) ; 684
; [then-branch 1515] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1516] 4 == 2
(push) ; 685
; [else-branch 1516] 4 != 2
(pop) ; 685
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 685
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 685
; 0,00s
; (get-info :all-statistics)
(push) ; 685
; [then-branch 1517] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1518] 4 == 2
(push) ; 686
; [else-branch 1518] 4 != 2
(pop) ; 686
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 686
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 686
; 0,00s
; (get-info :all-statistics)
(push) ; 686
; [then-branch 1519] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1520] 4 == 2
(push) ; 687
; [else-branch 1520] 4 != 2
(pop) ; 687
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 687
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 687
; 0,00s
; (get-info :all-statistics)
(push) ; 687
; [then-branch 1521] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1522] 4 == 2
(push) ; 688
; [else-branch 1522] 4 != 2
(pop) ; 688
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 688
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 688
; 0,00s
; (get-info :all-statistics)
(push) ; 688
; [then-branch 1523] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1524] 4 == 2
(push) ; 689
; [else-branch 1524] 4 != 2
(pop) ; 689
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 689
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 689
; 0,00s
; (get-info :all-statistics)
(push) ; 689
; [then-branch 1525] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1526] 4 == 2
(push) ; 690
; [else-branch 1526] 4 != 2
(pop) ; 690
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 690
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 690
; 0,00s
; (get-info :all-statistics)
(push) ; 690
; [then-branch 1527] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1528] 4 == 2
(push) ; 691
; [else-branch 1528] 4 != 2
(pop) ; 691
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 691
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 691
; 0,00s
; (get-info :all-statistics)
(push) ; 691
; [then-branch 1529] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1530] 4 == 2
(push) ; 692
; [else-branch 1530] 4 != 2
(pop) ; 692
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 692
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 692
; 0,00s
; (get-info :all-statistics)
(push) ; 692
; [then-branch 1531] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1532] 4 == 2
(push) ; 693
; [else-branch 1532] 4 != 2
(pop) ; 693
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 693
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 693
; 0,00s
; (get-info :all-statistics)
(push) ; 693
; [then-branch 1533] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1534] 4 == 2
(push) ; 694
; [else-branch 1534] 4 != 2
(pop) ; 694
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 694
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 694
; 0,00s
; (get-info :all-statistics)
(push) ; 694
; [then-branch 1535] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1536] 4 == 2
(push) ; 695
; [else-branch 1536] 4 != 2
(pop) ; 695
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 695
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 695
; 0,00s
; (get-info :all-statistics)
(push) ; 695
; [then-branch 1537] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1538] 4 == 2
(push) ; 696
; [else-branch 1538] 4 != 2
(pop) ; 696
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 696
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 696
; 0,00s
; (get-info :all-statistics)
(push) ; 696
; [then-branch 1539] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1540] 4 == 2
(push) ; 697
; [else-branch 1540] 4 != 2
(pop) ; 697
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 697
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 697
; 0,00s
; (get-info :all-statistics)
(push) ; 697
; [then-branch 1541] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1542] 4 == 2
(push) ; 698
; [else-branch 1542] 4 != 2
(pop) ; 698
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 698
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 698
; 0,00s
; (get-info :all-statistics)
(push) ; 698
; [then-branch 1543] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1544] 4 == 2
(push) ; 699
; [else-branch 1544] 4 != 2
(pop) ; 699
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 699
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 699
; 0,00s
; (get-info :all-statistics)
(push) ; 699
; [then-branch 1545] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1546] 4 == 2
(push) ; 700
; [else-branch 1546] 4 != 2
(pop) ; 700
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 700
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 700
; 0,00s
; (get-info :all-statistics)
(push) ; 700
; [then-branch 1547] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1548] 4 == 2
(push) ; 701
; [else-branch 1548] 4 != 2
(pop) ; 701
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 701
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 701
; 0,00s
; (get-info :all-statistics)
(push) ; 701
; [then-branch 1549] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1550] 4 == 2
(push) ; 702
; [else-branch 1550] 4 != 2
(pop) ; 702
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 702
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 702
; 0,00s
; (get-info :all-statistics)
(push) ; 702
; [then-branch 1551] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1552] 4 == 2
(push) ; 703
; [else-branch 1552] 4 != 2
(pop) ; 703
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 703
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 703
; 0,00s
; (get-info :all-statistics)
(push) ; 703
; [then-branch 1553] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1554] 4 == 2
(push) ; 704
; [else-branch 1554] 4 != 2
(pop) ; 704
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 704
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 704
; 0,00s
; (get-info :all-statistics)
(push) ; 704
; [then-branch 1555] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1556] 4 == 2
(push) ; 705
; [else-branch 1556] 4 != 2
(pop) ; 705
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 705
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 705
; 0,00s
; (get-info :all-statistics)
(push) ; 705
; [then-branch 1557] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1558] 4 == 2
(push) ; 706
; [else-branch 1558] 4 != 2
(pop) ; 706
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 706
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 706
; 0,00s
; (get-info :all-statistics)
(push) ; 706
; [then-branch 1559] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1560] 4 == 2
(push) ; 707
; [else-branch 1560] 4 != 2
(pop) ; 707
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 707
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 707
; 0,00s
; (get-info :all-statistics)
(push) ; 707
; [then-branch 1561] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1562] 4 == 2
(push) ; 708
; [else-branch 1562] 4 != 2
(pop) ; 708
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 708
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 708
; 0,00s
; (get-info :all-statistics)
(push) ; 708
; [then-branch 1563] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1564] 4 == 2
(push) ; 709
; [else-branch 1564] 4 != 2
(pop) ; 709
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 709
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 709
; 0,00s
; (get-info :all-statistics)
(push) ; 709
; [then-branch 1565] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1566] 4 == 2
(push) ; 710
; [else-branch 1566] 4 != 2
(pop) ; 710
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 710
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 710
; 0,00s
; (get-info :all-statistics)
(push) ; 710
; [then-branch 1567] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1568] 4 == 2
(push) ; 711
; [else-branch 1568] 4 != 2
(pop) ; 711
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 711
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 711
; 0,00s
; (get-info :all-statistics)
(push) ; 711
; [then-branch 1569] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1570] 4 == 2
(push) ; 712
; [else-branch 1570] 4 != 2
(pop) ; 712
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 712
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 712
; 0,00s
; (get-info :all-statistics)
(push) ; 712
; [then-branch 1571] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1572] 4 == 2
(push) ; 713
; [else-branch 1572] 4 != 2
(pop) ; 713
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 713
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 713
; 0,00s
; (get-info :all-statistics)
(push) ; 713
; [then-branch 1573] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1574] 4 == 2
(push) ; 714
; [else-branch 1574] 4 != 2
(pop) ; 714
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 714
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 714
; 0,00s
; (get-info :all-statistics)
(push) ; 714
; [then-branch 1575] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1576] 4 == 2
(push) ; 715
; [else-branch 1576] 4 != 2
(pop) ; 715
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 715
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 715
; 0,00s
; (get-info :all-statistics)
(push) ; 715
; [then-branch 1577] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1578] 4 == 2
(push) ; 716
; [else-branch 1578] 4 != 2
(pop) ; 716
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 716
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 716
; 0,00s
; (get-info :all-statistics)
(push) ; 716
; [then-branch 1579] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1580] 4 == 2
(push) ; 717
; [else-branch 1580] 4 != 2
(pop) ; 717
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 717
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 717
; 0,00s
; (get-info :all-statistics)
(push) ; 717
; [then-branch 1581] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1582] 4 == 2
(push) ; 718
; [else-branch 1582] 4 != 2
(pop) ; 718
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 718
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 718
; 0,00s
; (get-info :all-statistics)
(push) ; 718
; [then-branch 1583] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1584] 4 == 2
(push) ; 719
; [else-branch 1584] 4 != 2
(pop) ; 719
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 719
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 719
; 0,00s
; (get-info :all-statistics)
(push) ; 719
; [then-branch 1585] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1586] 4 == 2
(push) ; 720
; [else-branch 1586] 4 != 2
(pop) ; 720
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 720
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 720
; 0,00s
; (get-info :all-statistics)
(push) ; 720
; [then-branch 1587] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1588] 4 == 2
(push) ; 721
; [else-branch 1588] 4 != 2
(pop) ; 721
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 721
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 721
; 0,00s
; (get-info :all-statistics)
(push) ; 721
; [then-branch 1589] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1590] 4 == 2
(push) ; 722
; [else-branch 1590] 4 != 2
(pop) ; 722
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 722
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 722
; 0,00s
; (get-info :all-statistics)
(push) ; 722
; [then-branch 1591] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1592] 4 == 2
(push) ; 723
; [else-branch 1592] 4 != 2
(pop) ; 723
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 723
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 723
; 0,00s
; (get-info :all-statistics)
(push) ; 723
; [then-branch 1593] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1594] 4 == 2
(push) ; 724
; [else-branch 1594] 4 != 2
(pop) ; 724
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 724
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 724
; 0,00s
; (get-info :all-statistics)
(push) ; 724
; [then-branch 1595] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1596] 4 == 2
(push) ; 725
; [else-branch 1596] 4 != 2
(pop) ; 725
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 725
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 725
; 0,00s
; (get-info :all-statistics)
(push) ; 725
; [then-branch 1597] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1598] 4 == 2
(push) ; 726
; [else-branch 1598] 4 != 2
(pop) ; 726
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 726
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 726
; 0,00s
; (get-info :all-statistics)
(push) ; 726
; [then-branch 1599] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1600] 4 == 2
(push) ; 727
; [else-branch 1600] 4 != 2
(pop) ; 727
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 727
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 727
; 0,00s
; (get-info :all-statistics)
(push) ; 727
; [then-branch 1601] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1602] 4 == 2
(push) ; 728
; [else-branch 1602] 4 != 2
(pop) ; 728
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 728
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 728
; 0,00s
; (get-info :all-statistics)
(push) ; 728
; [then-branch 1603] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1604] 4 == 2
(push) ; 729
; [else-branch 1604] 4 != 2
(pop) ; 729
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 729
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 729
; 0,00s
; (get-info :all-statistics)
(push) ; 729
; [then-branch 1605] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1606] 4 == 2
(push) ; 730
; [else-branch 1606] 4 != 2
(pop) ; 730
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 730
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 730
; 0,00s
; (get-info :all-statistics)
(push) ; 730
; [then-branch 1607] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1608] 4 == 2
(push) ; 731
; [else-branch 1608] 4 != 2
(pop) ; 731
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 731
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 731
; 0,00s
; (get-info :all-statistics)
(push) ; 731
; [then-branch 1609] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1610] 4 == 2
(push) ; 732
; [else-branch 1610] 4 != 2
(pop) ; 732
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 732
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 732
; 0,00s
; (get-info :all-statistics)
(push) ; 732
; [then-branch 1611] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1612] 4 == 2
(push) ; 733
; [else-branch 1612] 4 != 2
(pop) ; 733
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 733
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 733
; 0,00s
; (get-info :all-statistics)
(push) ; 733
; [then-branch 1613] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1614] 4 == 2
(push) ; 734
; [else-branch 1614] 4 != 2
(pop) ; 734
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 734
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 734
; 0,00s
; (get-info :all-statistics)
(push) ; 734
; [then-branch 1615] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1616] 4 == 2
(push) ; 735
; [else-branch 1616] 4 != 2
(pop) ; 735
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 735
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 735
; 0,00s
; (get-info :all-statistics)
(push) ; 735
; [then-branch 1617] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1618] 4 == 2
(push) ; 736
; [else-branch 1618] 4 != 2
(pop) ; 736
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 736
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 736
; 0,00s
; (get-info :all-statistics)
(push) ; 736
; [then-branch 1619] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1620] 4 == 2
(push) ; 737
; [else-branch 1620] 4 != 2
(pop) ; 737
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 737
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 737
; 0,00s
; (get-info :all-statistics)
(push) ; 737
; [then-branch 1621] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1622] 4 == 2
(push) ; 738
; [else-branch 1622] 4 != 2
(pop) ; 738
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 738
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 738
; 0,00s
; (get-info :all-statistics)
(push) ; 738
; [then-branch 1623] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1624] 4 == 2
(push) ; 739
; [else-branch 1624] 4 != 2
(pop) ; 739
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 739
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 739
; 0,00s
; (get-info :all-statistics)
(push) ; 739
; [then-branch 1625] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1626] 4 == 2
(push) ; 740
; [else-branch 1626] 4 != 2
(pop) ; 740
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 740
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 740
; 0,00s
; (get-info :all-statistics)
(push) ; 740
; [then-branch 1627] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1628] 4 == 2
(push) ; 741
; [else-branch 1628] 4 != 2
(pop) ; 741
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 741
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 741
; 0,00s
; (get-info :all-statistics)
(push) ; 741
; [then-branch 1629] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1630] 4 == 2
(push) ; 742
; [else-branch 1630] 4 != 2
(pop) ; 742
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 742
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 742
; 0,00s
; (get-info :all-statistics)
(push) ; 742
; [then-branch 1631] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1632] 4 == 2
(push) ; 743
; [else-branch 1632] 4 != 2
(pop) ; 743
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 743
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 743
; 0,00s
; (get-info :all-statistics)
(push) ; 743
; [then-branch 1633] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1634] 4 == 2
(push) ; 744
; [else-branch 1634] 4 != 2
(pop) ; 744
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 744
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 744
; 0,00s
; (get-info :all-statistics)
(push) ; 744
; [then-branch 1635] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1636] 4 == 2
(push) ; 745
; [else-branch 1636] 4 != 2
(pop) ; 745
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 745
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 745
; 0,00s
; (get-info :all-statistics)
(push) ; 745
; [then-branch 1637] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1638] 4 == 2
(push) ; 746
; [else-branch 1638] 4 != 2
(pop) ; 746
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 746
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 746
; 0,00s
; (get-info :all-statistics)
(push) ; 746
; [then-branch 1639] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1640] 4 == 2
(push) ; 747
; [else-branch 1640] 4 != 2
(pop) ; 747
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 747
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 747
; 0,00s
; (get-info :all-statistics)
(push) ; 747
; [then-branch 1641] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1642] 4 == 2
(push) ; 748
; [else-branch 1642] 4 != 2
(pop) ; 748
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 748
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 748
; 0,00s
; (get-info :all-statistics)
(push) ; 748
; [then-branch 1643] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1644] 4 == 2
(push) ; 749
; [else-branch 1644] 4 != 2
(pop) ; 749
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 749
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 749
; 0,00s
; (get-info :all-statistics)
(push) ; 749
; [then-branch 1645] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1646] 4 == 2
(push) ; 750
; [else-branch 1646] 4 != 2
(pop) ; 750
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 750
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 750
; 0,00s
; (get-info :all-statistics)
(push) ; 750
; [then-branch 1647] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1648] 4 == 2
(push) ; 751
; [else-branch 1648] 4 != 2
(pop) ; 751
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 751
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 751
; 0,00s
; (get-info :all-statistics)
(push) ; 751
; [then-branch 1649] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1650] 4 == 2
(push) ; 752
; [else-branch 1650] 4 != 2
(pop) ; 752
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 752
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 752
; 0,00s
; (get-info :all-statistics)
(push) ; 752
; [then-branch 1651] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1652] 4 == 2
(push) ; 753
; [else-branch 1652] 4 != 2
(pop) ; 753
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 753
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 753
; 0,00s
; (get-info :all-statistics)
(push) ; 753
; [then-branch 1653] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1654] 4 == 2
(push) ; 754
; [else-branch 1654] 4 != 2
(pop) ; 754
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 754
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 754
; 0,00s
; (get-info :all-statistics)
(push) ; 754
; [then-branch 1655] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1656] 4 == 2
(push) ; 755
; [else-branch 1656] 4 != 2
(pop) ; 755
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 755
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 755
; 0,00s
; (get-info :all-statistics)
(push) ; 755
; [then-branch 1657] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1658] 4 == 2
(push) ; 756
; [else-branch 1658] 4 != 2
(pop) ; 756
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 756
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 756
; 0,00s
; (get-info :all-statistics)
(push) ; 756
; [then-branch 1659] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1660] 4 == 2
(push) ; 757
; [else-branch 1660] 4 != 2
(pop) ; 757
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 757
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 757
; 0,00s
; (get-info :all-statistics)
(push) ; 757
; [then-branch 1661] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1662] 4 == 2
(push) ; 758
; [else-branch 1662] 4 != 2
(pop) ; 758
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 758
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 758
; 0,00s
; (get-info :all-statistics)
(push) ; 758
; [then-branch 1663] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1664] 4 == 2
(push) ; 759
; [else-branch 1664] 4 != 2
(pop) ; 759
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 759
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 759
; 0,00s
; (get-info :all-statistics)
(push) ; 759
; [then-branch 1665] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1666] 4 == 2
(push) ; 760
; [else-branch 1666] 4 != 2
(pop) ; 760
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 760
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 760
; 0,00s
; (get-info :all-statistics)
(push) ; 760
; [then-branch 1667] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1668] 4 == 2
(push) ; 761
; [else-branch 1668] 4 != 2
(pop) ; 761
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 761
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 761
; 0,00s
; (get-info :all-statistics)
(push) ; 761
; [then-branch 1669] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1670] 4 == 2
(push) ; 762
; [else-branch 1670] 4 != 2
(pop) ; 762
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 762
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 762
; 0,00s
; (get-info :all-statistics)
(push) ; 762
; [then-branch 1671] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1672] 4 == 2
(push) ; 763
; [else-branch 1672] 4 != 2
(pop) ; 763
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 763
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 763
; 0,00s
; (get-info :all-statistics)
(push) ; 763
; [then-branch 1673] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1674] 4 == 2
(push) ; 764
; [else-branch 1674] 4 != 2
(pop) ; 764
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 764
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 764
; 0,00s
; (get-info :all-statistics)
(push) ; 764
; [then-branch 1675] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1676] 4 == 2
(push) ; 765
; [else-branch 1676] 4 != 2
(pop) ; 765
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 765
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 765
; 0,00s
; (get-info :all-statistics)
(push) ; 765
; [then-branch 1677] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1678] 4 == 2
(push) ; 766
; [else-branch 1678] 4 != 2
(pop) ; 766
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 766
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 766
; 0,00s
; (get-info :all-statistics)
(push) ; 766
; [then-branch 1679] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1680] 4 == 2
(push) ; 767
; [else-branch 1680] 4 != 2
(pop) ; 767
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 767
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 767
; 0,00s
; (get-info :all-statistics)
(push) ; 767
; [then-branch 1681] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1682] 4 == 2
(push) ; 768
; [else-branch 1682] 4 != 2
(pop) ; 768
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 768
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 768
; 0,00s
; (get-info :all-statistics)
(push) ; 768
; [then-branch 1683] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1684] 4 == 2
(push) ; 769
; [else-branch 1684] 4 != 2
(pop) ; 769
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 769
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 769
; 0,00s
; (get-info :all-statistics)
(push) ; 769
; [then-branch 1685] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1686] 4 == 2
(push) ; 770
; [else-branch 1686] 4 != 2
(pop) ; 770
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 770
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 770
; 0,00s
; (get-info :all-statistics)
(push) ; 770
; [then-branch 1687] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1688] 4 == 2
(push) ; 771
; [else-branch 1688] 4 != 2
(pop) ; 771
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 771
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 771
; 0,00s
; (get-info :all-statistics)
(push) ; 771
; [then-branch 1689] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1690] 4 == 2
(push) ; 772
; [else-branch 1690] 4 != 2
(pop) ; 772
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 772
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 772
; 0,00s
; (get-info :all-statistics)
(push) ; 772
; [then-branch 1691] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1692] 4 == 2
(push) ; 773
; [else-branch 1692] 4 != 2
(pop) ; 773
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 773
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 773
; 0,00s
; (get-info :all-statistics)
(push) ; 773
; [then-branch 1693] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1694] 4 == 2
(push) ; 774
; [else-branch 1694] 4 != 2
(pop) ; 774
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 774
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 774
; 0,00s
; (get-info :all-statistics)
(push) ; 774
; [then-branch 1695] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1696] 4 == 2
(push) ; 775
; [else-branch 1696] 4 != 2
(pop) ; 775
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 775
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 775
; 0,00s
; (get-info :all-statistics)
(push) ; 775
; [then-branch 1697] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1698] 4 == 2
(push) ; 776
; [else-branch 1698] 4 != 2
(pop) ; 776
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 776
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 776
; 0,00s
; (get-info :all-statistics)
(push) ; 776
; [then-branch 1699] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1700] 4 == 2
(push) ; 777
; [else-branch 1700] 4 != 2
(pop) ; 777
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 777
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 777
; 0,00s
; (get-info :all-statistics)
(push) ; 777
; [then-branch 1701] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1702] 4 == 2
(push) ; 778
; [else-branch 1702] 4 != 2
(pop) ; 778
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 778
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 778
; 0,00s
; (get-info :all-statistics)
(push) ; 778
; [then-branch 1703] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1704] 4 == 2
(push) ; 779
; [else-branch 1704] 4 != 2
(pop) ; 779
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 779
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 779
; 0,00s
; (get-info :all-statistics)
(push) ; 779
; [then-branch 1705] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1706] 4 == 2
(push) ; 780
; [else-branch 1706] 4 != 2
(pop) ; 780
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 780
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 780
; 0,00s
; (get-info :all-statistics)
(push) ; 780
; [then-branch 1707] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1708] 4 == 2
(push) ; 781
; [else-branch 1708] 4 != 2
(pop) ; 781
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 781
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 781
; 0,00s
; (get-info :all-statistics)
(push) ; 781
; [then-branch 1709] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1710] 4 == 2
(push) ; 782
; [else-branch 1710] 4 != 2
(pop) ; 782
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 782
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 782
; 0,00s
; (get-info :all-statistics)
(push) ; 782
; [then-branch 1711] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1712] 4 == 2
(push) ; 783
; [else-branch 1712] 4 != 2
(pop) ; 783
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 783
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 783
; 0,00s
; (get-info :all-statistics)
(push) ; 783
; [then-branch 1713] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1714] 4 == 2
(push) ; 784
; [else-branch 1714] 4 != 2
(pop) ; 784
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 784
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 784
; 0,00s
; (get-info :all-statistics)
(push) ; 784
; [then-branch 1715] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1716] 4 == 2
(push) ; 785
; [else-branch 1716] 4 != 2
(pop) ; 785
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 785
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 785
; 0,00s
; (get-info :all-statistics)
(push) ; 785
; [then-branch 1717] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1718] 4 == 2
(push) ; 786
; [else-branch 1718] 4 != 2
(pop) ; 786
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 786
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 786
; 0,00s
; (get-info :all-statistics)
(push) ; 786
; [then-branch 1719] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1720] 4 == 2
(push) ; 787
; [else-branch 1720] 4 != 2
(pop) ; 787
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 787
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 787
; 0,00s
; (get-info :all-statistics)
(push) ; 787
; [then-branch 1721] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1722] 4 == 2
(push) ; 788
; [else-branch 1722] 4 != 2
(pop) ; 788
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 788
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 788
; 0,00s
; (get-info :all-statistics)
(push) ; 788
; [then-branch 1723] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1724] 4 == 2
(push) ; 789
; [else-branch 1724] 4 != 2
(pop) ; 789
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 789
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 789
; 0,00s
; (get-info :all-statistics)
(push) ; 789
; [then-branch 1725] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1726] 4 == 2
(push) ; 790
; [else-branch 1726] 4 != 2
(pop) ; 790
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 790
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 790
; 0,00s
; (get-info :all-statistics)
(push) ; 790
; [then-branch 1727] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1728] 4 == 2
(push) ; 791
; [else-branch 1728] 4 != 2
(pop) ; 791
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 791
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 791
; 0,00s
; (get-info :all-statistics)
(push) ; 791
; [then-branch 1729] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1730] 4 == 2
(push) ; 792
; [else-branch 1730] 4 != 2
(pop) ; 792
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 792
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 792
; 0,00s
; (get-info :all-statistics)
(push) ; 792
; [then-branch 1731] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1732] 4 == 2
(push) ; 793
; [else-branch 1732] 4 != 2
(pop) ; 793
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 793
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 793
; 0,00s
; (get-info :all-statistics)
(push) ; 793
; [then-branch 1733] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1734] 4 == 2
(push) ; 794
; [else-branch 1734] 4 != 2
(pop) ; 794
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 794
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 794
; 0,00s
; (get-info :all-statistics)
(push) ; 794
; [then-branch 1735] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1736] 4 == 2
(push) ; 795
; [else-branch 1736] 4 != 2
(pop) ; 795
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 795
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 795
; 0,00s
; (get-info :all-statistics)
(push) ; 795
; [then-branch 1737] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1738] 4 == 2
(push) ; 796
; [else-branch 1738] 4 != 2
(pop) ; 796
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 796
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 796
; 0,00s
; (get-info :all-statistics)
(push) ; 796
; [then-branch 1739] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1740] 4 == 2
(push) ; 797
; [else-branch 1740] 4 != 2
(pop) ; 797
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 797
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 797
; 0,00s
; (get-info :all-statistics)
(push) ; 797
; [then-branch 1741] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1742] 4 == 2
(push) ; 798
; [else-branch 1742] 4 != 2
(pop) ; 798
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 798
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 798
; 0,00s
; (get-info :all-statistics)
(push) ; 798
; [then-branch 1743] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1744] 4 == 2
(push) ; 799
; [else-branch 1744] 4 != 2
(pop) ; 799
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 799
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 799
; 0,00s
; (get-info :all-statistics)
(push) ; 799
; [then-branch 1745] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1746] 4 == 2
(push) ; 800
; [else-branch 1746] 4 != 2
(pop) ; 800
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 800
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 800
; 0,00s
; (get-info :all-statistics)
(push) ; 800
; [then-branch 1747] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1748] 4 == 2
(push) ; 801
; [else-branch 1748] 4 != 2
(pop) ; 801
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 801
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 801
; 0,00s
; (get-info :all-statistics)
(push) ; 801
; [then-branch 1749] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1750] 4 == 2
(push) ; 802
; [else-branch 1750] 4 != 2
(pop) ; 802
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 802
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 802
; 0,00s
; (get-info :all-statistics)
(push) ; 802
; [then-branch 1751] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1752] 4 == 2
(push) ; 803
; [else-branch 1752] 4 != 2
(pop) ; 803
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 803
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 803
; 0,00s
; (get-info :all-statistics)
(push) ; 803
; [then-branch 1753] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1754] 4 == 2
(push) ; 804
; [else-branch 1754] 4 != 2
(pop) ; 804
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 804
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 804
; 0,00s
; (get-info :all-statistics)
(push) ; 804
; [then-branch 1755] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1756] 4 == 2
(push) ; 805
; [else-branch 1756] 4 != 2
(pop) ; 805
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 805
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 805
; 0,00s
; (get-info :all-statistics)
(push) ; 805
; [then-branch 1757] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1758] 4 == 2
(push) ; 806
; [else-branch 1758] 4 != 2
(pop) ; 806
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 806
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 806
; 0,00s
; (get-info :all-statistics)
(push) ; 806
; [then-branch 1759] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1760] 4 == 2
(push) ; 807
; [else-branch 1760] 4 != 2
(pop) ; 807
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 807
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 807
; 0,00s
; (get-info :all-statistics)
(push) ; 807
; [then-branch 1761] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1762] 4 == 2
(push) ; 808
; [else-branch 1762] 4 != 2
(pop) ; 808
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 808
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 808
; 0,00s
; (get-info :all-statistics)
(push) ; 808
; [then-branch 1763] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1764] 4 == 2
(push) ; 809
; [else-branch 1764] 4 != 2
(pop) ; 809
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 809
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 809
; 0,00s
; (get-info :all-statistics)
(push) ; 809
; [then-branch 1765] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1766] 4 == 2
(push) ; 810
; [else-branch 1766] 4 != 2
(pop) ; 810
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 810
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 810
; 0,00s
; (get-info :all-statistics)
(push) ; 810
; [then-branch 1767] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1768] 4 == 2
(push) ; 811
; [else-branch 1768] 4 != 2
(pop) ; 811
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 811
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 811
; 0,00s
; (get-info :all-statistics)
(push) ; 811
; [then-branch 1769] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1770] 4 == 2
(push) ; 812
; [else-branch 1770] 4 != 2
(pop) ; 812
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 812
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 812
; 0,00s
; (get-info :all-statistics)
(push) ; 812
; [then-branch 1771] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1772] 4 == 2
(push) ; 813
; [else-branch 1772] 4 != 2
(pop) ; 813
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 813
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 813
; 0,00s
; (get-info :all-statistics)
(push) ; 813
; [then-branch 1773] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1774] 4 == 2
(push) ; 814
; [else-branch 1774] 4 != 2
(pop) ; 814
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 814
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 814
; 0,00s
; (get-info :all-statistics)
(push) ; 814
; [then-branch 1775] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1776] 4 == 2
(push) ; 815
; [else-branch 1776] 4 != 2
(pop) ; 815
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 815
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 815
; 0,00s
; (get-info :all-statistics)
(push) ; 815
; [then-branch 1777] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1778] 4 == 2
(push) ; 816
; [else-branch 1778] 4 != 2
(pop) ; 816
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 816
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 816
; 0,00s
; (get-info :all-statistics)
(push) ; 816
; [then-branch 1779] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1780] 4 == 2
(push) ; 817
; [else-branch 1780] 4 != 2
(pop) ; 817
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 817
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 817
; 0,00s
; (get-info :all-statistics)
(push) ; 817
; [then-branch 1781] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1782] 4 == 2
(push) ; 818
; [else-branch 1782] 4 != 2
(pop) ; 818
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 818
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 818
; 0,00s
; (get-info :all-statistics)
(push) ; 818
; [then-branch 1783] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1784] 4 == 2
(push) ; 819
; [else-branch 1784] 4 != 2
(pop) ; 819
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 819
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 819
; 0,00s
; (get-info :all-statistics)
(push) ; 819
; [then-branch 1785] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1786] 4 == 2
(push) ; 820
; [else-branch 1786] 4 != 2
(pop) ; 820
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 820
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 820
; 0,00s
; (get-info :all-statistics)
(push) ; 820
; [then-branch 1787] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1788] 4 == 2
(push) ; 821
; [else-branch 1788] 4 != 2
(pop) ; 821
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 821
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 821
; 0,00s
; (get-info :all-statistics)
(push) ; 821
; [then-branch 1789] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1790] 4 == 2
(push) ; 822
; [else-branch 1790] 4 != 2
(pop) ; 822
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 822
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 822
; 0,00s
; (get-info :all-statistics)
(push) ; 822
; [then-branch 1791] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1792] 4 == 2
(push) ; 823
; [else-branch 1792] 4 != 2
(pop) ; 823
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 823
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 823
; 0,00s
; (get-info :all-statistics)
(push) ; 823
; [then-branch 1793] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1794] 4 == 2
(push) ; 824
; [else-branch 1794] 4 != 2
(pop) ; 824
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 824
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 824
; 0,00s
; (get-info :all-statistics)
(push) ; 824
; [then-branch 1795] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1796] 4 == 2
(push) ; 825
; [else-branch 1796] 4 != 2
(pop) ; 825
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 825
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 825
; 0,00s
; (get-info :all-statistics)
(push) ; 825
; [then-branch 1797] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1798] 4 == 2
(push) ; 826
; [else-branch 1798] 4 != 2
(pop) ; 826
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 826
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 826
; 0,00s
; (get-info :all-statistics)
(push) ; 826
; [then-branch 1799] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1800] 4 == 2
(push) ; 827
; [else-branch 1800] 4 != 2
(pop) ; 827
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 827
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 827
; 0,00s
; (get-info :all-statistics)
(push) ; 827
; [then-branch 1801] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1802] 4 == 2
(push) ; 828
; [else-branch 1802] 4 != 2
(pop) ; 828
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 828
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 828
; 0,00s
; (get-info :all-statistics)
(push) ; 828
; [then-branch 1803] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1804] 4 == 2
(push) ; 829
; [else-branch 1804] 4 != 2
(pop) ; 829
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 829
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 829
; 0,00s
; (get-info :all-statistics)
(push) ; 829
; [then-branch 1805] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1806] 4 == 2
(push) ; 830
; [else-branch 1806] 4 != 2
(pop) ; 830
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 830
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 830
; 0,00s
; (get-info :all-statistics)
(push) ; 830
; [then-branch 1807] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1808] 4 == 2
(push) ; 831
; [else-branch 1808] 4 != 2
(pop) ; 831
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 831
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 831
; 0,00s
; (get-info :all-statistics)
(push) ; 831
; [then-branch 1809] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1810] 4 == 2
(push) ; 832
; [else-branch 1810] 4 != 2
(pop) ; 832
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 832
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 832
; 0,00s
; (get-info :all-statistics)
(push) ; 832
; [then-branch 1811] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1812] 4 == 2
(push) ; 833
; [else-branch 1812] 4 != 2
(pop) ; 833
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 833
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 833
; 0,00s
; (get-info :all-statistics)
(push) ; 833
; [then-branch 1813] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1814] 4 == 2
(push) ; 834
; [else-branch 1814] 4 != 2
(pop) ; 834
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 834
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 834
; 0,00s
; (get-info :all-statistics)
(push) ; 834
; [then-branch 1815] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1816] 4 == 2
(push) ; 835
; [else-branch 1816] 4 != 2
(pop) ; 835
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 835
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 835
; 0,00s
; (get-info :all-statistics)
(push) ; 835
; [then-branch 1817] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1818] 4 == 2
(push) ; 836
; [else-branch 1818] 4 != 2
(pop) ; 836
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 836
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 836
; 0,00s
; (get-info :all-statistics)
(push) ; 836
; [then-branch 1819] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1820] 4 == 2
(push) ; 837
; [else-branch 1820] 4 != 2
(pop) ; 837
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 837
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 837
; 0,00s
; (get-info :all-statistics)
(push) ; 837
; [then-branch 1821] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1822] 4 == 2
(push) ; 838
; [else-branch 1822] 4 != 2
(pop) ; 838
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 838
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 838
; 0,00s
; (get-info :all-statistics)
(push) ; 838
; [then-branch 1823] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1824] 4 == 2
(push) ; 839
; [else-branch 1824] 4 != 2
(pop) ; 839
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 839
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 839
; 0,00s
; (get-info :all-statistics)
(push) ; 839
; [then-branch 1825] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1826] 4 == 2
(push) ; 840
; [else-branch 1826] 4 != 2
(pop) ; 840
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 840
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 840
; 0,00s
; (get-info :all-statistics)
(push) ; 840
; [then-branch 1827] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1828] 4 == 2
(push) ; 841
; [else-branch 1828] 4 != 2
(pop) ; 841
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 841
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 841
; 0,00s
; (get-info :all-statistics)
(push) ; 841
; [then-branch 1829] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1830] 4 == 2
(push) ; 842
; [else-branch 1830] 4 != 2
(pop) ; 842
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 842
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 842
; 0,00s
; (get-info :all-statistics)
(push) ; 842
; [then-branch 1831] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1832] 4 == 2
(push) ; 843
; [else-branch 1832] 4 != 2
(pop) ; 843
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 843
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 843
; 0,00s
; (get-info :all-statistics)
(push) ; 843
; [then-branch 1833] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1834] 4 == 2
(push) ; 844
; [else-branch 1834] 4 != 2
(pop) ; 844
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 844
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 844
; 0,00s
; (get-info :all-statistics)
(push) ; 844
; [then-branch 1835] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1836] 4 == 2
(push) ; 845
; [else-branch 1836] 4 != 2
(pop) ; 845
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 845
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 845
; 0,00s
; (get-info :all-statistics)
(push) ; 845
; [then-branch 1837] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1838] 4 == 2
(push) ; 846
; [else-branch 1838] 4 != 2
(pop) ; 846
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 846
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 846
; 0,00s
; (get-info :all-statistics)
(push) ; 846
; [then-branch 1839] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1840] 4 == 2
(push) ; 847
; [else-branch 1840] 4 != 2
(pop) ; 847
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 847
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 847
; 0,00s
; (get-info :all-statistics)
(push) ; 847
; [then-branch 1841] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1842] 4 == 2
(push) ; 848
; [else-branch 1842] 4 != 2
(pop) ; 848
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 848
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 848
; 0,00s
; (get-info :all-statistics)
(push) ; 848
; [then-branch 1843] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1844] 4 == 2
(push) ; 849
; [else-branch 1844] 4 != 2
(pop) ; 849
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 849
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 849
; 0,00s
; (get-info :all-statistics)
(push) ; 849
; [then-branch 1845] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1846] 4 == 2
(push) ; 850
; [else-branch 1846] 4 != 2
(pop) ; 850
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 850
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 850
; 0,00s
; (get-info :all-statistics)
(push) ; 850
; [then-branch 1847] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1848] 4 == 2
(push) ; 851
; [else-branch 1848] 4 != 2
(pop) ; 851
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 851
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 851
; 0,00s
; (get-info :all-statistics)
(push) ; 851
; [then-branch 1849] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1850] 4 == 2
(push) ; 852
; [else-branch 1850] 4 != 2
(pop) ; 852
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 852
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 852
; 0,00s
; (get-info :all-statistics)
(push) ; 852
; [then-branch 1851] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1852] 4 == 2
(push) ; 853
; [else-branch 1852] 4 != 2
(pop) ; 853
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 853
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 853
; 0,00s
; (get-info :all-statistics)
(push) ; 853
; [then-branch 1853] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1854] 4 == 2
(push) ; 854
; [else-branch 1854] 4 != 2
(pop) ; 854
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 854
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 854
; 0,00s
; (get-info :all-statistics)
(push) ; 854
; [then-branch 1855] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1856] 4 == 2
(push) ; 855
; [else-branch 1856] 4 != 2
(pop) ; 855
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 855
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 855
; 0,00s
; (get-info :all-statistics)
(push) ; 855
; [then-branch 1857] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1858] 4 == 2
(push) ; 856
; [else-branch 1858] 4 != 2
(pop) ; 856
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 856
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 856
; 0,00s
; (get-info :all-statistics)
(push) ; 856
; [then-branch 1859] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1860] 4 == 2
(push) ; 857
; [else-branch 1860] 4 != 2
(pop) ; 857
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 857
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 857
; 0,00s
; (get-info :all-statistics)
(push) ; 857
; [then-branch 1861] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1862] 4 == 2
(push) ; 858
; [else-branch 1862] 4 != 2
(pop) ; 858
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 858
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 858
; 0,00s
; (get-info :all-statistics)
(push) ; 858
; [then-branch 1863] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1864] 4 == 2
(push) ; 859
; [else-branch 1864] 4 != 2
(pop) ; 859
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 859
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 859
; 0,00s
; (get-info :all-statistics)
(push) ; 859
; [then-branch 1865] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1866] 4 == 2
(push) ; 860
; [else-branch 1866] 4 != 2
(pop) ; 860
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 860
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 860
; 0,00s
; (get-info :all-statistics)
(push) ; 860
; [then-branch 1867] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1868] 4 == 2
(push) ; 861
; [else-branch 1868] 4 != 2
(pop) ; 861
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 861
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 861
; 0,00s
; (get-info :all-statistics)
(push) ; 861
; [then-branch 1869] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1870] 4 == 2
(push) ; 862
; [else-branch 1870] 4 != 2
(pop) ; 862
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 862
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 862
; 0,00s
; (get-info :all-statistics)
(push) ; 862
; [then-branch 1871] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1872] 4 == 2
(push) ; 863
; [else-branch 1872] 4 != 2
(pop) ; 863
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 863
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 863
; 0,00s
; (get-info :all-statistics)
(push) ; 863
; [then-branch 1873] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1874] 4 == 2
(push) ; 864
; [else-branch 1874] 4 != 2
(pop) ; 864
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 864
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 864
; 0,00s
; (get-info :all-statistics)
(push) ; 864
; [then-branch 1875] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1876] 4 == 2
(push) ; 865
; [else-branch 1876] 4 != 2
(pop) ; 865
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 865
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 865
; 0,00s
; (get-info :all-statistics)
(push) ; 865
; [then-branch 1877] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1878] 4 == 2
(push) ; 866
; [else-branch 1878] 4 != 2
(pop) ; 866
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 866
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 866
; 0,00s
; (get-info :all-statistics)
(push) ; 866
; [then-branch 1879] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1880] 4 == 2
(push) ; 867
; [else-branch 1880] 4 != 2
(pop) ; 867
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 867
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 867
; 0,00s
; (get-info :all-statistics)
(push) ; 867
; [then-branch 1881] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1882] 4 == 2
(push) ; 868
; [else-branch 1882] 4 != 2
(pop) ; 868
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 868
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 868
; 0,00s
; (get-info :all-statistics)
(push) ; 868
; [then-branch 1883] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1884] 4 == 2
(push) ; 869
; [else-branch 1884] 4 != 2
(pop) ; 869
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 869
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 869
; 0,00s
; (get-info :all-statistics)
(push) ; 869
; [then-branch 1885] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1886] 4 == 2
(push) ; 870
; [else-branch 1886] 4 != 2
(pop) ; 870
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 870
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 870
; 0,00s
; (get-info :all-statistics)
(push) ; 870
; [then-branch 1887] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1888] 4 == 2
(push) ; 871
; [else-branch 1888] 4 != 2
(pop) ; 871
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 871
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 871
; 0,00s
; (get-info :all-statistics)
(push) ; 871
; [then-branch 1889] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1890] 4 == 2
(push) ; 872
; [else-branch 1890] 4 != 2
(pop) ; 872
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 872
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 872
; 0,00s
; (get-info :all-statistics)
(push) ; 872
; [then-branch 1891] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1892] 4 == 2
(push) ; 873
; [else-branch 1892] 4 != 2
(pop) ; 873
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 873
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 873
; 0,00s
; (get-info :all-statistics)
(push) ; 873
; [then-branch 1893] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1894] 4 == 2
(push) ; 874
; [else-branch 1894] 4 != 2
(pop) ; 874
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 874
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 874
; 0,00s
; (get-info :all-statistics)
(push) ; 874
; [then-branch 1895] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1896] 4 == 2
(push) ; 875
; [else-branch 1896] 4 != 2
(pop) ; 875
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 875
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 875
; 0,00s
; (get-info :all-statistics)
(push) ; 875
; [then-branch 1897] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1898] 4 == 2
(push) ; 876
; [else-branch 1898] 4 != 2
(pop) ; 876
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 876
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 876
; 0,00s
; (get-info :all-statistics)
(push) ; 876
; [then-branch 1899] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1900] 4 == 2
(push) ; 877
; [else-branch 1900] 4 != 2
(pop) ; 877
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 877
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 877
; 0,00s
; (get-info :all-statistics)
(push) ; 877
; [then-branch 1901] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1902] 4 == 2
(push) ; 878
; [else-branch 1902] 4 != 2
(pop) ; 878
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 878
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 878
; 0,00s
; (get-info :all-statistics)
(push) ; 878
; [then-branch 1903] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1904] 4 == 2
(push) ; 879
; [else-branch 1904] 4 != 2
(pop) ; 879
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 879
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 879
; 0,00s
; (get-info :all-statistics)
(push) ; 879
; [then-branch 1905] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1906] 4 == 2
(push) ; 880
; [else-branch 1906] 4 != 2
(pop) ; 880
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 880
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 880
; 0,00s
; (get-info :all-statistics)
(push) ; 880
; [then-branch 1907] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1908] 4 == 2
(push) ; 881
; [else-branch 1908] 4 != 2
(pop) ; 881
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 881
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 881
; 0,00s
; (get-info :all-statistics)
(push) ; 881
; [then-branch 1909] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1910] 4 == 2
(push) ; 882
; [else-branch 1910] 4 != 2
(pop) ; 882
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 882
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 882
; 0,00s
; (get-info :all-statistics)
(push) ; 882
; [then-branch 1911] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1912] 4 == 2
(push) ; 883
; [else-branch 1912] 4 != 2
(pop) ; 883
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 883
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 883
; 0,00s
; (get-info :all-statistics)
(push) ; 883
; [then-branch 1913] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1914] 4 == 2
(push) ; 884
; [else-branch 1914] 4 != 2
(pop) ; 884
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 884
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 884
; 0,00s
; (get-info :all-statistics)
(push) ; 884
; [then-branch 1915] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1916] 4 == 2
(push) ; 885
; [else-branch 1916] 4 != 2
(pop) ; 885
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 885
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 885
; 0,00s
; (get-info :all-statistics)
(push) ; 885
; [then-branch 1917] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1918] 4 == 2
(push) ; 886
; [else-branch 1918] 4 != 2
(pop) ; 886
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 886
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 886
; 0,00s
; (get-info :all-statistics)
(push) ; 886
; [then-branch 1919] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1920] 4 == 2
(push) ; 887
; [else-branch 1920] 4 != 2
(pop) ; 887
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 887
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 887
; 0,00s
; (get-info :all-statistics)
(push) ; 887
; [then-branch 1921] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1922] 4 == 2
(push) ; 888
; [else-branch 1922] 4 != 2
(pop) ; 888
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 888
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 888
; 0,00s
; (get-info :all-statistics)
(push) ; 888
; [then-branch 1923] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1924] 4 == 2
(push) ; 889
; [else-branch 1924] 4 != 2
(pop) ; 889
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 889
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 889
; 0,00s
; (get-info :all-statistics)
(push) ; 889
; [then-branch 1925] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1926] 4 == 2
(push) ; 890
; [else-branch 1926] 4 != 2
(pop) ; 890
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 890
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 890
; 0,00s
; (get-info :all-statistics)
(push) ; 890
; [then-branch 1927] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1928] 4 == 2
(push) ; 891
; [else-branch 1928] 4 != 2
(pop) ; 891
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 891
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 891
; 0,00s
; (get-info :all-statistics)
(push) ; 891
; [then-branch 1929] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1930] 4 == 2
(push) ; 892
; [else-branch 1930] 4 != 2
(pop) ; 892
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 892
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 892
; 0,00s
; (get-info :all-statistics)
(push) ; 892
; [then-branch 1931] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1932] 4 == 2
(push) ; 893
; [else-branch 1932] 4 != 2
(pop) ; 893
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 893
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 893
; 0,00s
; (get-info :all-statistics)
(push) ; 893
; [then-branch 1933] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1934] 4 == 2
(push) ; 894
; [else-branch 1934] 4 != 2
(pop) ; 894
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 894
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 894
; 0,00s
; (get-info :all-statistics)
(push) ; 894
; [then-branch 1935] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1936] 4 == 2
(push) ; 895
; [else-branch 1936] 4 != 2
(pop) ; 895
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 895
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 895
; 0,00s
; (get-info :all-statistics)
(push) ; 895
; [then-branch 1937] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1938] 4 == 2
(push) ; 896
; [else-branch 1938] 4 != 2
(pop) ; 896
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 896
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 896
; 0,00s
; (get-info :all-statistics)
(push) ; 896
; [then-branch 1939] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1940] 4 == 2
(push) ; 897
; [else-branch 1940] 4 != 2
(pop) ; 897
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 897
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 897
; 0,00s
; (get-info :all-statistics)
(push) ; 897
; [then-branch 1941] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1942] 4 == 2
(push) ; 898
; [else-branch 1942] 4 != 2
(pop) ; 898
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 898
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 898
; 0,00s
; (get-info :all-statistics)
(push) ; 898
; [then-branch 1943] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1944] 4 == 2
(push) ; 899
; [else-branch 1944] 4 != 2
(pop) ; 899
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 899
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 899
; 0,00s
; (get-info :all-statistics)
(push) ; 899
; [then-branch 1945] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1946] 4 == 2
(push) ; 900
; [else-branch 1946] 4 != 2
(pop) ; 900
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 900
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 900
; 0,00s
; (get-info :all-statistics)
(push) ; 900
; [then-branch 1947] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1948] 4 == 2
(push) ; 901
; [else-branch 1948] 4 != 2
(pop) ; 901
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 901
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 901
; 0,00s
; (get-info :all-statistics)
(push) ; 901
; [then-branch 1949] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1950] 4 == 2
(push) ; 902
; [else-branch 1950] 4 != 2
(pop) ; 902
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 902
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 902
; 0,00s
; (get-info :all-statistics)
(push) ; 902
; [then-branch 1951] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1952] 4 == 2
(push) ; 903
; [else-branch 1952] 4 != 2
(pop) ; 903
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 903
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 903
; 0,00s
; (get-info :all-statistics)
(push) ; 903
; [then-branch 1953] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1954] 4 == 2
(push) ; 904
; [else-branch 1954] 4 != 2
(pop) ; 904
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 904
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 904
; 0,00s
; (get-info :all-statistics)
(push) ; 904
; [then-branch 1955] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1956] 4 == 2
(push) ; 905
; [else-branch 1956] 4 != 2
(pop) ; 905
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 905
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 905
; 0,00s
; (get-info :all-statistics)
(push) ; 905
; [then-branch 1957] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1958] 4 == 2
(push) ; 906
; [else-branch 1958] 4 != 2
(pop) ; 906
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 906
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 906
; 0,00s
; (get-info :all-statistics)
(push) ; 906
; [then-branch 1959] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1960] 4 == 2
(push) ; 907
; [else-branch 1960] 4 != 2
(pop) ; 907
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 907
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 907
; 0,00s
; (get-info :all-statistics)
(push) ; 907
; [then-branch 1961] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1962] 4 == 2
(push) ; 908
; [else-branch 1962] 4 != 2
(pop) ; 908
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 908
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 908
; 0,00s
; (get-info :all-statistics)
(push) ; 908
; [then-branch 1963] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1964] 4 == 2
(push) ; 909
; [else-branch 1964] 4 != 2
(pop) ; 909
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 909
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 909
; 0,00s
; (get-info :all-statistics)
(push) ; 909
; [then-branch 1965] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1966] 4 == 2
(push) ; 910
; [else-branch 1966] 4 != 2
(pop) ; 910
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 910
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 910
; 0,00s
; (get-info :all-statistics)
(push) ; 910
; [then-branch 1967] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1968] 4 == 2
(push) ; 911
; [else-branch 1968] 4 != 2
(pop) ; 911
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 911
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 911
; 0,00s
; (get-info :all-statistics)
(push) ; 911
; [then-branch 1969] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1970] 4 == 2
(push) ; 912
; [else-branch 1970] 4 != 2
(pop) ; 912
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 912
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 912
; 0,00s
; (get-info :all-statistics)
(push) ; 912
; [then-branch 1971] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1972] 4 == 2
(push) ; 913
; [else-branch 1972] 4 != 2
(pop) ; 913
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 913
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 913
; 0,00s
; (get-info :all-statistics)
(push) ; 913
; [then-branch 1973] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1974] 4 == 2
(push) ; 914
; [else-branch 1974] 4 != 2
(pop) ; 914
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 914
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 914
; 0,00s
; (get-info :all-statistics)
(push) ; 914
; [then-branch 1975] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1976] 4 == 2
(push) ; 915
; [else-branch 1976] 4 != 2
(pop) ; 915
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 915
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 915
; 0,00s
; (get-info :all-statistics)
(push) ; 915
; [then-branch 1977] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1978] 4 == 2
(push) ; 916
; [else-branch 1978] 4 != 2
(pop) ; 916
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 916
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 916
; 0,00s
; (get-info :all-statistics)
(push) ; 916
; [then-branch 1979] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1980] 4 == 2
(push) ; 917
; [else-branch 1980] 4 != 2
(pop) ; 917
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 917
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 917
; 0,00s
; (get-info :all-statistics)
(push) ; 917
; [then-branch 1981] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1982] 4 == 2
(push) ; 918
; [else-branch 1982] 4 != 2
(pop) ; 918
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 918
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 918
; 0,00s
; (get-info :all-statistics)
(push) ; 918
; [then-branch 1983] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1984] 4 == 2
(push) ; 919
; [else-branch 1984] 4 != 2
(pop) ; 919
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 919
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 919
; 0,00s
; (get-info :all-statistics)
(push) ; 919
; [then-branch 1985] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1986] 4 == 2
(push) ; 920
; [else-branch 1986] 4 != 2
(pop) ; 920
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 920
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 920
; 0,00s
; (get-info :all-statistics)
(push) ; 920
; [then-branch 1987] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1988] 4 == 2
(push) ; 921
; [else-branch 1988] 4 != 2
(pop) ; 921
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 921
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 921
; 0,00s
; (get-info :all-statistics)
(push) ; 921
; [then-branch 1989] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1990] 4 == 2
(push) ; 922
; [else-branch 1990] 4 != 2
(pop) ; 922
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 922
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 922
; 0,00s
; (get-info :all-statistics)
(push) ; 922
; [then-branch 1991] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1992] 4 == 2
(push) ; 923
; [else-branch 1992] 4 != 2
(pop) ; 923
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 923
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 923
; 0,00s
; (get-info :all-statistics)
(push) ; 923
; [then-branch 1993] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1994] 4 == 2
(push) ; 924
; [else-branch 1994] 4 != 2
(pop) ; 924
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 924
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 924
; 0,00s
; (get-info :all-statistics)
(push) ; 924
; [then-branch 1995] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1996] 4 == 2
(push) ; 925
; [else-branch 1996] 4 != 2
(pop) ; 925
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 925
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 925
; 0,00s
; (get-info :all-statistics)
(push) ; 925
; [then-branch 1997] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 1998] 4 == 2
(push) ; 926
; [else-branch 1998] 4 != 2
(pop) ; 926
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 926
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 926
; 0,00s
; (get-info :all-statistics)
(push) ; 926
; [then-branch 1999] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2000] 4 == 2
(push) ; 927
; [else-branch 2000] 4 != 2
(pop) ; 927
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 927
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 927
; 0,00s
; (get-info :all-statistics)
(push) ; 927
; [then-branch 2001] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2002] 4 == 2
(push) ; 928
; [else-branch 2002] 4 != 2
(pop) ; 928
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 928
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 928
; 0,00s
; (get-info :all-statistics)
(push) ; 928
; [then-branch 2003] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2004] 4 == 2
(push) ; 929
; [else-branch 2004] 4 != 2
(pop) ; 929
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 929
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 929
; 0,00s
; (get-info :all-statistics)
(push) ; 929
; [then-branch 2005] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2006] 4 == 2
(push) ; 930
; [else-branch 2006] 4 != 2
(pop) ; 930
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 930
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 930
; 0,00s
; (get-info :all-statistics)
(push) ; 930
; [then-branch 2007] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2008] 4 == 2
(push) ; 931
; [else-branch 2008] 4 != 2
(pop) ; 931
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 931
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 931
; 0,00s
; (get-info :all-statistics)
(push) ; 931
; [then-branch 2009] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2010] 4 == 2
(push) ; 932
; [else-branch 2010] 4 != 2
(pop) ; 932
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 932
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 932
; 0,00s
; (get-info :all-statistics)
(push) ; 932
; [then-branch 2011] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2012] 4 == 2
(push) ; 933
; [else-branch 2012] 4 != 2
(pop) ; 933
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 933
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 933
; 0,00s
; (get-info :all-statistics)
(push) ; 933
; [then-branch 2013] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2014] 4 == 2
(push) ; 934
; [else-branch 2014] 4 != 2
(pop) ; 934
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 934
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 934
; 0,00s
; (get-info :all-statistics)
(push) ; 934
; [then-branch 2015] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2016] 4 == 2
(push) ; 935
; [else-branch 2016] 4 != 2
(pop) ; 935
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 935
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 935
; 0,00s
; (get-info :all-statistics)
(push) ; 935
; [then-branch 2017] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2018] 4 == 2
(push) ; 936
; [else-branch 2018] 4 != 2
(pop) ; 936
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 936
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 936
; 0,00s
; (get-info :all-statistics)
(push) ; 936
; [then-branch 2019] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2020] 4 == 2
(push) ; 937
; [else-branch 2020] 4 != 2
(pop) ; 937
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 937
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 937
; 0,00s
; (get-info :all-statistics)
(push) ; 937
; [then-branch 2021] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2022] 4 == 2
(push) ; 938
; [else-branch 2022] 4 != 2
(pop) ; 938
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 938
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 938
; 0,00s
; (get-info :all-statistics)
(push) ; 938
; [then-branch 2023] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2024] 4 == 2
(push) ; 939
; [else-branch 2024] 4 != 2
(pop) ; 939
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 939
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 939
; 0,00s
; (get-info :all-statistics)
(push) ; 939
; [then-branch 2025] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2026] 4 == 2
(push) ; 940
; [else-branch 2026] 4 != 2
(pop) ; 940
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 940
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 940
; 0,00s
; (get-info :all-statistics)
(push) ; 940
; [then-branch 2027] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2028] 4 == 2
(push) ; 941
; [else-branch 2028] 4 != 2
(pop) ; 941
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 941
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 941
; 0,00s
; (get-info :all-statistics)
(push) ; 941
; [then-branch 2029] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2030] 4 == 2
(push) ; 942
; [else-branch 2030] 4 != 2
(pop) ; 942
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 942
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 942
; 0,00s
; (get-info :all-statistics)
(push) ; 942
; [then-branch 2031] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2032] 4 == 2
(push) ; 943
; [else-branch 2032] 4 != 2
(pop) ; 943
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 943
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 943
; 0,00s
; (get-info :all-statistics)
(push) ; 943
; [then-branch 2033] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2034] 4 == 2
(push) ; 944
; [else-branch 2034] 4 != 2
(pop) ; 944
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 944
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 944
; 0,00s
; (get-info :all-statistics)
(push) ; 944
; [then-branch 2035] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2036] 4 == 2
(push) ; 945
; [else-branch 2036] 4 != 2
(pop) ; 945
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 945
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 945
; 0,00s
; (get-info :all-statistics)
(push) ; 945
; [then-branch 2037] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2038] 4 == 2
(push) ; 946
; [else-branch 2038] 4 != 2
(pop) ; 946
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 946
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 946
; 0,00s
; (get-info :all-statistics)
(push) ; 946
; [then-branch 2039] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2040] 4 == 2
(push) ; 947
; [else-branch 2040] 4 != 2
(pop) ; 947
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 947
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 947
; 0,00s
; (get-info :all-statistics)
(push) ; 947
; [then-branch 2041] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2042] 4 == 2
(push) ; 948
; [else-branch 2042] 4 != 2
(pop) ; 948
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 948
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 948
; 0,00s
; (get-info :all-statistics)
(push) ; 948
; [then-branch 2043] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2044] 4 == 2
(push) ; 949
; [else-branch 2044] 4 != 2
(pop) ; 949
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 949
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 949
; 0,00s
; (get-info :all-statistics)
(push) ; 949
; [then-branch 2045] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2046] 4 == 2
(push) ; 950
; [else-branch 2046] 4 != 2
(pop) ; 950
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 950
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 950
; 0,00s
; (get-info :all-statistics)
(push) ; 950
; [then-branch 2047] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2048] 4 == 2
(push) ; 951
; [else-branch 2048] 4 != 2
(pop) ; 951
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 951
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 951
; 0,00s
; (get-info :all-statistics)
(push) ; 951
; [then-branch 2049] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2050] 4 == 2
(push) ; 952
; [else-branch 2050] 4 != 2
(pop) ; 952
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 952
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 952
; 0,00s
; (get-info :all-statistics)
(push) ; 952
; [then-branch 2051] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2052] 4 == 2
(push) ; 953
; [else-branch 2052] 4 != 2
(pop) ; 953
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 953
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 953
; 0,00s
; (get-info :all-statistics)
(push) ; 953
; [then-branch 2053] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2054] 4 == 2
(push) ; 954
; [else-branch 2054] 4 != 2
(pop) ; 954
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 954
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 954
; 0,00s
; (get-info :all-statistics)
(push) ; 954
; [then-branch 2055] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2056] 4 == 2
(push) ; 955
; [else-branch 2056] 4 != 2
(pop) ; 955
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 955
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 955
; 0,00s
; (get-info :all-statistics)
(push) ; 955
; [then-branch 2057] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2058] 4 == 2
(push) ; 956
; [else-branch 2058] 4 != 2
(pop) ; 956
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 956
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 956
; 0,00s
; (get-info :all-statistics)
(push) ; 956
; [then-branch 2059] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2060] 4 == 2
(push) ; 957
; [else-branch 2060] 4 != 2
(pop) ; 957
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 957
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 957
; 0,00s
; (get-info :all-statistics)
(push) ; 957
; [then-branch 2061] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2062] 4 == 2
(push) ; 958
; [else-branch 2062] 4 != 2
(pop) ; 958
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 958
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 958
; 0,00s
; (get-info :all-statistics)
(push) ; 958
; [then-branch 2063] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2064] 4 == 2
(push) ; 959
; [else-branch 2064] 4 != 2
(pop) ; 959
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 959
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 959
; 0,00s
; (get-info :all-statistics)
(push) ; 959
; [then-branch 2065] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2066] 4 == 2
(push) ; 960
; [else-branch 2066] 4 != 2
(pop) ; 960
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 960
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 960
; 0,00s
; (get-info :all-statistics)
(push) ; 960
; [then-branch 2067] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2068] 4 == 2
(push) ; 961
; [else-branch 2068] 4 != 2
(pop) ; 961
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 961
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 961
; 0,00s
; (get-info :all-statistics)
(push) ; 961
; [then-branch 2069] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2070] 4 == 2
(push) ; 962
; [else-branch 2070] 4 != 2
(pop) ; 962
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 962
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 962
; 0,00s
; (get-info :all-statistics)
(push) ; 962
; [then-branch 2071] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2072] 4 == 2
(push) ; 963
; [else-branch 2072] 4 != 2
(pop) ; 963
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 963
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 963
; 0,00s
; (get-info :all-statistics)
(push) ; 963
; [then-branch 2073] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2074] 4 == 2
(push) ; 964
; [else-branch 2074] 4 != 2
(pop) ; 964
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 964
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 964
; 0,00s
; (get-info :all-statistics)
(push) ; 964
; [then-branch 2075] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2076] 4 == 2
(push) ; 965
; [else-branch 2076] 4 != 2
(pop) ; 965
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 965
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 965
; 0,00s
; (get-info :all-statistics)
(push) ; 965
; [then-branch 2077] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2078] 4 == 2
(push) ; 966
; [else-branch 2078] 4 != 2
(pop) ; 966
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 966
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 966
; 0,00s
; (get-info :all-statistics)
(push) ; 966
; [then-branch 2079] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2080] 4 == 2
(push) ; 967
; [else-branch 2080] 4 != 2
(pop) ; 967
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 967
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 967
; 0,00s
; (get-info :all-statistics)
(push) ; 967
; [then-branch 2081] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2082] 4 == 2
(push) ; 968
; [else-branch 2082] 4 != 2
(pop) ; 968
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 968
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 968
; 0,00s
; (get-info :all-statistics)
(push) ; 968
; [then-branch 2083] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2084] 4 == 2
(push) ; 969
; [else-branch 2084] 4 != 2
(pop) ; 969
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 969
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 969
; 0,00s
; (get-info :all-statistics)
(push) ; 969
; [then-branch 2085] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2086] 4 == 2
(push) ; 970
; [else-branch 2086] 4 != 2
(pop) ; 970
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 970
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 970
; 0,00s
; (get-info :all-statistics)
(push) ; 970
; [then-branch 2087] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2088] 4 == 2
(push) ; 971
; [else-branch 2088] 4 != 2
(pop) ; 971
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 971
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 971
; 0,00s
; (get-info :all-statistics)
(push) ; 971
; [then-branch 2089] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2090] 4 == 2
(push) ; 972
; [else-branch 2090] 4 != 2
(pop) ; 972
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 972
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 972
; 0,00s
; (get-info :all-statistics)
(push) ; 972
; [then-branch 2091] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2092] 4 == 2
(push) ; 973
; [else-branch 2092] 4 != 2
(pop) ; 973
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 973
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 973
; 0,00s
; (get-info :all-statistics)
(push) ; 973
; [then-branch 2093] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2094] 4 == 2
(push) ; 974
; [else-branch 2094] 4 != 2
(pop) ; 974
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 974
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 974
; 0,00s
; (get-info :all-statistics)
(push) ; 974
; [then-branch 2095] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2096] 4 == 2
(push) ; 975
; [else-branch 2096] 4 != 2
(pop) ; 975
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 975
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 975
; 0,00s
; (get-info :all-statistics)
(push) ; 975
; [then-branch 2097] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2098] 4 == 2
(push) ; 976
; [else-branch 2098] 4 != 2
(pop) ; 976
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 976
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 976
; 0,00s
; (get-info :all-statistics)
(push) ; 976
; [then-branch 2099] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2100] 4 == 2
(push) ; 977
; [else-branch 2100] 4 != 2
(pop) ; 977
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 977
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 977
; 0,00s
; (get-info :all-statistics)
(push) ; 977
; [then-branch 2101] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2102] 4 == 2
(push) ; 978
; [else-branch 2102] 4 != 2
(pop) ; 978
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 978
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 978
; 0,00s
; (get-info :all-statistics)
(push) ; 978
; [then-branch 2103] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2104] 4 == 2
(push) ; 979
; [else-branch 2104] 4 != 2
(pop) ; 979
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 979
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 979
; 0,00s
; (get-info :all-statistics)
(push) ; 979
; [then-branch 2105] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2106] 4 == 2
(push) ; 980
; [else-branch 2106] 4 != 2
(pop) ; 980
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 980
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 980
; 0,00s
; (get-info :all-statistics)
(push) ; 980
; [then-branch 2107] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2108] 4 == 2
(push) ; 981
; [else-branch 2108] 4 != 2
(pop) ; 981
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 981
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 981
; 0,00s
; (get-info :all-statistics)
(push) ; 981
; [then-branch 2109] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2110] 4 == 2
(push) ; 982
; [else-branch 2110] 4 != 2
(pop) ; 982
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 982
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 982
; 0,00s
; (get-info :all-statistics)
(push) ; 982
; [then-branch 2111] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2112] 4 == 2
(push) ; 983
; [else-branch 2112] 4 != 2
(pop) ; 983
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 983
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 983
; 0,00s
; (get-info :all-statistics)
(push) ; 983
; [then-branch 2113] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2114] 4 == 2
(push) ; 984
; [else-branch 2114] 4 != 2
(pop) ; 984
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 984
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 984
; 0,00s
; (get-info :all-statistics)
(push) ; 984
; [then-branch 2115] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2116] 4 == 2
(push) ; 985
; [else-branch 2116] 4 != 2
(pop) ; 985
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 985
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 985
; 0,00s
; (get-info :all-statistics)
(push) ; 985
; [then-branch 2117] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2118] 4 == 2
(push) ; 986
; [else-branch 2118] 4 != 2
(pop) ; 986
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 986
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 986
; 0,00s
; (get-info :all-statistics)
(push) ; 986
; [then-branch 2119] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2120] 4 == 2
(push) ; 987
; [else-branch 2120] 4 != 2
(pop) ; 987
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 987
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 987
; 0,00s
; (get-info :all-statistics)
(push) ; 987
; [then-branch 2121] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2122] 4 == 2
(push) ; 988
; [else-branch 2122] 4 != 2
(pop) ; 988
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 988
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 988
; 0,00s
; (get-info :all-statistics)
(push) ; 988
; [then-branch 2123] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2124] 4 == 2
(push) ; 989
; [else-branch 2124] 4 != 2
(pop) ; 989
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 989
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 989
; 0,00s
; (get-info :all-statistics)
(push) ; 989
; [then-branch 2125] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2126] 4 == 2
(push) ; 990
; [else-branch 2126] 4 != 2
(pop) ; 990
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 990
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 990
; 0,00s
; (get-info :all-statistics)
(push) ; 990
; [then-branch 2127] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2128] 4 == 2
(push) ; 991
; [else-branch 2128] 4 != 2
(pop) ; 991
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 991
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 991
; 0,00s
; (get-info :all-statistics)
(push) ; 991
; [then-branch 2129] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2130] 4 == 2
(push) ; 992
; [else-branch 2130] 4 != 2
(pop) ; 992
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 992
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 992
; 0,00s
; (get-info :all-statistics)
(push) ; 992
; [then-branch 2131] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2132] 4 == 2
(push) ; 993
; [else-branch 2132] 4 != 2
(pop) ; 993
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 993
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 993
; 0,00s
; (get-info :all-statistics)
(push) ; 993
; [then-branch 2133] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2134] 4 == 2
(push) ; 994
; [else-branch 2134] 4 != 2
(pop) ; 994
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 994
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 994
; 0,00s
; (get-info :all-statistics)
(push) ; 994
; [then-branch 2135] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2136] 4 == 2
(push) ; 995
; [else-branch 2136] 4 != 2
(pop) ; 995
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 995
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 995
; 0,00s
; (get-info :all-statistics)
(push) ; 995
; [then-branch 2137] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2138] 4 == 2
(push) ; 996
; [else-branch 2138] 4 != 2
(pop) ; 996
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 996
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 996
; 0,00s
; (get-info :all-statistics)
(push) ; 996
; [then-branch 2139] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2140] 4 == 2
(push) ; 997
; [else-branch 2140] 4 != 2
(pop) ; 997
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 997
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 997
; 0,00s
; (get-info :all-statistics)
(push) ; 997
; [then-branch 2141] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2142] 4 == 2
(push) ; 998
; [else-branch 2142] 4 != 2
(pop) ; 998
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 998
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 998
; 0,00s
; (get-info :all-statistics)
(push) ; 998
; [then-branch 2143] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2144] 4 == 2
(push) ; 999
; [else-branch 2144] 4 != 2
(pop) ; 999
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 999
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 999
; 0,00s
; (get-info :all-statistics)
(push) ; 999
; [then-branch 2145] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2146] 4 == 2
(push) ; 1000
; [else-branch 2146] 4 != 2
(pop) ; 1000
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1000
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1000
; 0,00s
; (get-info :all-statistics)
(push) ; 1000
; [then-branch 2147] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2148] 4 == 2
(push) ; 1001
; [else-branch 2148] 4 != 2
(pop) ; 1001
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1001
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1001
; 0,00s
; (get-info :all-statistics)
(push) ; 1001
; [then-branch 2149] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2150] 4 == 2
(push) ; 1002
; [else-branch 2150] 4 != 2
(pop) ; 1002
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1002
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1002
; 0,00s
; (get-info :all-statistics)
(push) ; 1002
; [then-branch 2151] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2152] 4 == 2
(push) ; 1003
; [else-branch 2152] 4 != 2
(pop) ; 1003
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1003
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1003
; 0,00s
; (get-info :all-statistics)
(push) ; 1003
; [then-branch 2153] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2154] 4 == 2
(push) ; 1004
; [else-branch 2154] 4 != 2
(pop) ; 1004
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1004
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1004
; 0,00s
; (get-info :all-statistics)
(push) ; 1004
; [then-branch 2155] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2156] 4 == 2
(push) ; 1005
; [else-branch 2156] 4 != 2
(pop) ; 1005
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1005
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1005
; 0,00s
; (get-info :all-statistics)
(push) ; 1005
; [then-branch 2157] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2158] 4 == 2
(push) ; 1006
; [else-branch 2158] 4 != 2
(pop) ; 1006
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1006
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1006
; 0,00s
; (get-info :all-statistics)
(push) ; 1006
; [then-branch 2159] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2160] 4 == 2
(push) ; 1007
; [else-branch 2160] 4 != 2
(pop) ; 1007
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1007
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1007
; 0,00s
; (get-info :all-statistics)
(push) ; 1007
; [then-branch 2161] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2162] 4 == 2
(push) ; 1008
; [else-branch 2162] 4 != 2
(pop) ; 1008
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1008
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1008
; 0,00s
; (get-info :all-statistics)
(push) ; 1008
; [then-branch 2163] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2164] 4 == 2
(push) ; 1009
; [else-branch 2164] 4 != 2
(pop) ; 1009
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1009
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1009
; 0,00s
; (get-info :all-statistics)
(push) ; 1009
; [then-branch 2165] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2166] 4 == 2
(push) ; 1010
; [else-branch 2166] 4 != 2
(pop) ; 1010
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1010
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1010
; 0,00s
; (get-info :all-statistics)
(push) ; 1010
; [then-branch 2167] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2168] 4 == 2
(push) ; 1011
; [else-branch 2168] 4 != 2
(pop) ; 1011
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1011
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1011
; 0,00s
; (get-info :all-statistics)
(push) ; 1011
; [then-branch 2169] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2170] 4 == 2
(push) ; 1012
; [else-branch 2170] 4 != 2
(pop) ; 1012
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1012
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1012
; 0,00s
; (get-info :all-statistics)
(push) ; 1012
; [then-branch 2171] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2172] 4 == 2
(push) ; 1013
; [else-branch 2172] 4 != 2
(pop) ; 1013
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1013
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1013
; 0,00s
; (get-info :all-statistics)
(push) ; 1013
; [then-branch 2173] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2174] 4 == 2
(push) ; 1014
; [else-branch 2174] 4 != 2
(pop) ; 1014
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1014
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1014
; 0,00s
; (get-info :all-statistics)
(push) ; 1014
; [then-branch 2175] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2176] 4 == 2
(push) ; 1015
; [else-branch 2176] 4 != 2
(pop) ; 1015
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1015
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1015
; 0,00s
; (get-info :all-statistics)
(push) ; 1015
; [then-branch 2177] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2178] 4 == 2
(push) ; 1016
; [else-branch 2178] 4 != 2
(pop) ; 1016
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1016
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1016
; 0,00s
; (get-info :all-statistics)
(push) ; 1016
; [then-branch 2179] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2180] 4 == 2
(push) ; 1017
; [else-branch 2180] 4 != 2
(pop) ; 1017
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1017
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1017
; 0,00s
; (get-info :all-statistics)
(push) ; 1017
; [then-branch 2181] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2182] 4 == 2
(push) ; 1018
; [else-branch 2182] 4 != 2
(pop) ; 1018
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1018
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1018
; 0,00s
; (get-info :all-statistics)
(push) ; 1018
; [then-branch 2183] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2184] 4 == 2
(push) ; 1019
; [else-branch 2184] 4 != 2
(pop) ; 1019
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1019
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1019
; 0,00s
; (get-info :all-statistics)
(push) ; 1019
; [then-branch 2185] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2186] 4 == 2
(push) ; 1020
; [else-branch 2186] 4 != 2
(pop) ; 1020
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1020
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1020
; 0,00s
; (get-info :all-statistics)
(push) ; 1020
; [then-branch 2187] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2188] 4 == 2
(push) ; 1021
; [else-branch 2188] 4 != 2
(pop) ; 1021
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1021
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1021
; 0,00s
; (get-info :all-statistics)
(push) ; 1021
; [then-branch 2189] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2190] 4 == 2
(push) ; 1022
; [else-branch 2190] 4 != 2
(pop) ; 1022
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1022
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1022
; 0,00s
; (get-info :all-statistics)
(push) ; 1022
; [then-branch 2191] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2192] 4 == 2
(push) ; 1023
; [else-branch 2192] 4 != 2
(pop) ; 1023
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1023
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1023
; 0,00s
; (get-info :all-statistics)
(push) ; 1023
; [then-branch 2193] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2194] 4 == 2
(push) ; 1024
; [else-branch 2194] 4 != 2
(pop) ; 1024
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1024
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1024
; 0,00s
; (get-info :all-statistics)
(push) ; 1024
; [then-branch 2195] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2196] 4 == 2
(push) ; 1025
; [else-branch 2196] 4 != 2
(pop) ; 1025
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1025
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1025
; 0,00s
; (get-info :all-statistics)
(push) ; 1025
; [then-branch 2197] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2198] 4 == 2
(push) ; 1026
; [else-branch 2198] 4 != 2
(pop) ; 1026
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1026
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1026
; 0,00s
; (get-info :all-statistics)
(push) ; 1026
; [then-branch 2199] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2200] 4 == 2
(push) ; 1027
; [else-branch 2200] 4 != 2
(pop) ; 1027
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1027
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1027
; 0,00s
; (get-info :all-statistics)
(push) ; 1027
; [then-branch 2201] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2202] 4 == 2
(push) ; 1028
; [else-branch 2202] 4 != 2
(pop) ; 1028
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1028
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1028
; 0,00s
; (get-info :all-statistics)
(push) ; 1028
; [then-branch 2203] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2204] 4 == 2
(push) ; 1029
; [else-branch 2204] 4 != 2
(pop) ; 1029
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1029
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1029
; 0,00s
; (get-info :all-statistics)
(push) ; 1029
; [then-branch 2205] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2206] 4 == 2
(push) ; 1030
; [else-branch 2206] 4 != 2
(pop) ; 1030
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1030
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1030
; 0,00s
; (get-info :all-statistics)
(push) ; 1030
; [then-branch 2207] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2208] 4 == 2
(push) ; 1031
; [else-branch 2208] 4 != 2
(pop) ; 1031
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1031
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1031
; 0,00s
; (get-info :all-statistics)
(push) ; 1031
; [then-branch 2209] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2210] 4 == 2
(push) ; 1032
; [else-branch 2210] 4 != 2
(pop) ; 1032
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1032
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1032
; 0,00s
; (get-info :all-statistics)
(push) ; 1032
; [then-branch 2211] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2212] 4 == 2
(push) ; 1033
; [else-branch 2212] 4 != 2
(pop) ; 1033
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1033
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1033
; 0,00s
; (get-info :all-statistics)
(push) ; 1033
; [then-branch 2213] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2214] 4 == 2
(push) ; 1034
; [else-branch 2214] 4 != 2
(pop) ; 1034
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1034
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1034
; 0,00s
; (get-info :all-statistics)
(push) ; 1034
; [then-branch 2215] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2216] 4 == 2
(push) ; 1035
; [else-branch 2216] 4 != 2
(pop) ; 1035
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1035
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1035
; 0,00s
; (get-info :all-statistics)
(push) ; 1035
; [then-branch 2217] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2218] 4 == 2
(push) ; 1036
; [else-branch 2218] 4 != 2
(pop) ; 1036
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1036
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1036
; 0,00s
; (get-info :all-statistics)
(push) ; 1036
; [then-branch 2219] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2220] 4 == 2
(push) ; 1037
; [else-branch 2220] 4 != 2
(pop) ; 1037
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1037
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1037
; 0,00s
; (get-info :all-statistics)
(push) ; 1037
; [then-branch 2221] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2222] 4 == 2
(push) ; 1038
; [else-branch 2222] 4 != 2
(pop) ; 1038
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1038
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1038
; 0,00s
; (get-info :all-statistics)
(push) ; 1038
; [then-branch 2223] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2224] 4 == 2
(push) ; 1039
; [else-branch 2224] 4 != 2
(pop) ; 1039
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1039
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1039
; 0,00s
; (get-info :all-statistics)
(push) ; 1039
; [then-branch 2225] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2226] 4 == 2
(push) ; 1040
; [else-branch 2226] 4 != 2
(pop) ; 1040
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1040
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1040
; 0,00s
; (get-info :all-statistics)
(push) ; 1040
; [then-branch 2227] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2228] 4 == 2
(push) ; 1041
; [else-branch 2228] 4 != 2
(pop) ; 1041
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1041
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1041
; 0,00s
; (get-info :all-statistics)
(push) ; 1041
; [then-branch 2229] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2230] 4 == 2
(push) ; 1042
; [else-branch 2230] 4 != 2
(pop) ; 1042
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1042
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1042
; 0,00s
; (get-info :all-statistics)
(push) ; 1042
; [then-branch 2231] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2232] 4 == 2
(push) ; 1043
; [else-branch 2232] 4 != 2
(pop) ; 1043
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1043
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1043
; 0,00s
; (get-info :all-statistics)
(push) ; 1043
; [then-branch 2233] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2234] 4 == 2
(push) ; 1044
; [else-branch 2234] 4 != 2
(pop) ; 1044
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1044
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1044
; 0,00s
; (get-info :all-statistics)
(push) ; 1044
; [then-branch 2235] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2236] 4 == 2
(push) ; 1045
; [else-branch 2236] 4 != 2
(pop) ; 1045
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1045
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1045
; 0,00s
; (get-info :all-statistics)
(push) ; 1045
; [then-branch 2237] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2238] 4 == 2
(push) ; 1046
; [else-branch 2238] 4 != 2
(pop) ; 1046
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1046
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1046
; 0,00s
; (get-info :all-statistics)
(push) ; 1046
; [then-branch 2239] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2240] 4 == 2
(push) ; 1047
; [else-branch 2240] 4 != 2
(pop) ; 1047
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1047
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1047
; 0,00s
; (get-info :all-statistics)
(push) ; 1047
; [then-branch 2241] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2242] 4 == 2
(push) ; 1048
; [else-branch 2242] 4 != 2
(pop) ; 1048
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1048
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1048
; 0,00s
; (get-info :all-statistics)
(push) ; 1048
; [then-branch 2243] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2244] 4 == 2
(push) ; 1049
; [else-branch 2244] 4 != 2
(pop) ; 1049
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1049
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1049
; 0,00s
; (get-info :all-statistics)
(push) ; 1049
; [then-branch 2245] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2246] 4 == 2
(push) ; 1050
; [else-branch 2246] 4 != 2
(pop) ; 1050
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1050
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1050
; 0,00s
; (get-info :all-statistics)
(push) ; 1050
; [then-branch 2247] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2248] 4 == 2
(push) ; 1051
; [else-branch 2248] 4 != 2
(pop) ; 1051
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1051
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1051
; 0,00s
; (get-info :all-statistics)
(push) ; 1051
; [then-branch 2249] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2250] 4 == 2
(push) ; 1052
; [else-branch 2250] 4 != 2
(pop) ; 1052
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1052
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1052
; 0,00s
; (get-info :all-statistics)
(push) ; 1052
; [then-branch 2251] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2252] 4 == 2
(push) ; 1053
; [else-branch 2252] 4 != 2
(pop) ; 1053
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1053
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1053
; 0,00s
; (get-info :all-statistics)
(push) ; 1053
; [then-branch 2253] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2254] 4 == 2
(push) ; 1054
; [else-branch 2254] 4 != 2
(pop) ; 1054
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1054
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1054
; 0,00s
; (get-info :all-statistics)
(push) ; 1054
; [then-branch 2255] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2256] 4 == 2
(push) ; 1055
; [else-branch 2256] 4 != 2
(pop) ; 1055
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1055
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1055
; 0,00s
; (get-info :all-statistics)
(push) ; 1055
; [then-branch 2257] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2258] 4 == 2
(push) ; 1056
; [else-branch 2258] 4 != 2
(pop) ; 1056
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1056
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1056
; 0,00s
; (get-info :all-statistics)
(push) ; 1056
; [then-branch 2259] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2260] 4 == 2
(push) ; 1057
; [else-branch 2260] 4 != 2
(pop) ; 1057
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1057
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1057
; 0,00s
; (get-info :all-statistics)
(push) ; 1057
; [then-branch 2261] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2262] 4 == 2
(push) ; 1058
; [else-branch 2262] 4 != 2
(pop) ; 1058
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1058
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1058
; 0,00s
; (get-info :all-statistics)
(push) ; 1058
; [then-branch 2263] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2264] 4 == 2
(push) ; 1059
; [else-branch 2264] 4 != 2
(pop) ; 1059
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1059
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1059
; 0,00s
; (get-info :all-statistics)
(push) ; 1059
; [then-branch 2265] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2266] 4 == 2
(push) ; 1060
; [else-branch 2266] 4 != 2
(pop) ; 1060
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1060
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1060
; 0,00s
; (get-info :all-statistics)
(push) ; 1060
; [then-branch 2267] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2268] 4 == 2
(push) ; 1061
; [else-branch 2268] 4 != 2
(pop) ; 1061
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1061
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1061
; 0,00s
; (get-info :all-statistics)
(push) ; 1061
; [then-branch 2269] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2270] 4 == 2
(push) ; 1062
; [else-branch 2270] 4 != 2
(pop) ; 1062
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1062
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1062
; 0,00s
; (get-info :all-statistics)
(push) ; 1062
; [then-branch 2271] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2272] 4 == 2
(push) ; 1063
; [else-branch 2272] 4 != 2
(pop) ; 1063
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1063
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1063
; 0,00s
; (get-info :all-statistics)
(push) ; 1063
; [then-branch 2273] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2274] 4 == 2
(push) ; 1064
; [else-branch 2274] 4 != 2
(pop) ; 1064
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1064
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1064
; 0,00s
; (get-info :all-statistics)
(push) ; 1064
; [then-branch 2275] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2276] 4 == 2
(push) ; 1065
; [else-branch 2276] 4 != 2
(pop) ; 1065
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1065
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1065
; 0,00s
; (get-info :all-statistics)
(push) ; 1065
; [then-branch 2277] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2278] 4 == 2
(push) ; 1066
; [else-branch 2278] 4 != 2
(pop) ; 1066
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1066
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1066
; 0,00s
; (get-info :all-statistics)
(push) ; 1066
; [then-branch 2279] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2280] 4 == 2
(push) ; 1067
; [else-branch 2280] 4 != 2
(pop) ; 1067
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1067
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1067
; 0,00s
; (get-info :all-statistics)
(push) ; 1067
; [then-branch 2281] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2282] 4 == 2
(push) ; 1068
; [else-branch 2282] 4 != 2
(pop) ; 1068
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1068
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1068
; 0,00s
; (get-info :all-statistics)
(push) ; 1068
; [then-branch 2283] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2284] 4 == 2
(push) ; 1069
; [else-branch 2284] 4 != 2
(pop) ; 1069
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1069
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1069
; 0,00s
; (get-info :all-statistics)
(push) ; 1069
; [then-branch 2285] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2286] 4 == 2
(push) ; 1070
; [else-branch 2286] 4 != 2
(pop) ; 1070
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1070
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1070
; 0,00s
; (get-info :all-statistics)
(push) ; 1070
; [then-branch 2287] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2288] 4 == 2
(push) ; 1071
; [else-branch 2288] 4 != 2
(pop) ; 1071
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1071
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1071
; 0,00s
; (get-info :all-statistics)
(push) ; 1071
; [then-branch 2289] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2290] 4 == 2
(push) ; 1072
; [else-branch 2290] 4 != 2
(pop) ; 1072
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1072
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1072
; 0,00s
; (get-info :all-statistics)
(push) ; 1072
; [then-branch 2291] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2292] 4 == 2
(push) ; 1073
; [else-branch 2292] 4 != 2
(pop) ; 1073
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1073
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1073
; 0,00s
; (get-info :all-statistics)
(push) ; 1073
; [then-branch 2293] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2294] 4 == 2
(push) ; 1074
; [else-branch 2294] 4 != 2
(pop) ; 1074
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1074
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1074
; 0,00s
; (get-info :all-statistics)
(push) ; 1074
; [then-branch 2295] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2296] 4 == 2
(push) ; 1075
; [else-branch 2296] 4 != 2
(pop) ; 1075
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1075
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1075
; 0,00s
; (get-info :all-statistics)
(push) ; 1075
; [then-branch 2297] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2298] 4 == 2
(push) ; 1076
; [else-branch 2298] 4 != 2
(pop) ; 1076
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1076
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1076
; 0,00s
; (get-info :all-statistics)
(push) ; 1076
; [then-branch 2299] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2300] 4 == 2
(push) ; 1077
; [else-branch 2300] 4 != 2
(pop) ; 1077
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1077
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1077
; 0,00s
; (get-info :all-statistics)
(push) ; 1077
; [then-branch 2301] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2302] 4 == 2
(push) ; 1078
; [else-branch 2302] 4 != 2
(pop) ; 1078
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1078
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1078
; 0,00s
; (get-info :all-statistics)
(push) ; 1078
; [then-branch 2303] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2304] 4 == 2
(push) ; 1079
; [else-branch 2304] 4 != 2
(pop) ; 1079
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1079
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1079
; 0,00s
; (get-info :all-statistics)
(push) ; 1079
; [then-branch 2305] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2306] 4 == 2
(push) ; 1080
; [else-branch 2306] 4 != 2
(pop) ; 1080
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1080
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1080
; 0,00s
; (get-info :all-statistics)
(push) ; 1080
; [then-branch 2307] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2308] 4 == 2
(push) ; 1081
; [else-branch 2308] 4 != 2
(pop) ; 1081
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1081
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1081
; 0,00s
; (get-info :all-statistics)
(push) ; 1081
; [then-branch 2309] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2310] 4 == 2
(push) ; 1082
; [else-branch 2310] 4 != 2
(pop) ; 1082
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1082
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1082
; 0,00s
; (get-info :all-statistics)
(push) ; 1082
; [then-branch 2311] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2312] 4 == 2
(push) ; 1083
; [else-branch 2312] 4 != 2
(pop) ; 1083
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1083
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1083
; 0,00s
; (get-info :all-statistics)
(push) ; 1083
; [then-branch 2313] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2314] 4 == 2
(push) ; 1084
; [else-branch 2314] 4 != 2
(pop) ; 1084
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1084
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1084
; 0,00s
; (get-info :all-statistics)
(push) ; 1084
; [then-branch 2315] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2316] 4 == 2
(push) ; 1085
; [else-branch 2316] 4 != 2
(pop) ; 1085
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1085
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1085
; 0,00s
; (get-info :all-statistics)
(push) ; 1085
; [then-branch 2317] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2318] 4 == 2
(push) ; 1086
; [else-branch 2318] 4 != 2
(pop) ; 1086
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1086
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1086
; 0,00s
; (get-info :all-statistics)
(push) ; 1086
; [then-branch 2319] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2320] 4 == 2
(push) ; 1087
; [else-branch 2320] 4 != 2
(pop) ; 1087
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1087
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1087
; 0,00s
; (get-info :all-statistics)
(push) ; 1087
; [then-branch 2321] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2322] 4 == 2
(push) ; 1088
; [else-branch 2322] 4 != 2
(pop) ; 1088
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1088
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1088
; 0,00s
; (get-info :all-statistics)
(push) ; 1088
; [then-branch 2323] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2324] 4 == 2
(push) ; 1089
; [else-branch 2324] 4 != 2
(pop) ; 1089
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1089
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1089
; 0,00s
; (get-info :all-statistics)
(push) ; 1089
; [then-branch 2325] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2326] 4 == 2
(push) ; 1090
; [else-branch 2326] 4 != 2
(pop) ; 1090
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1090
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1090
; 0,00s
; (get-info :all-statistics)
(push) ; 1090
; [then-branch 2327] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2328] 4 == 2
(push) ; 1091
; [else-branch 2328] 4 != 2
(pop) ; 1091
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1091
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1091
; 0,00s
; (get-info :all-statistics)
(push) ; 1091
; [then-branch 2329] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2330] 4 == 2
(push) ; 1092
; [else-branch 2330] 4 != 2
(pop) ; 1092
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1092
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1092
; 0,00s
; (get-info :all-statistics)
(push) ; 1092
; [then-branch 2331] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2332] 4 == 2
(push) ; 1093
; [else-branch 2332] 4 != 2
(pop) ; 1093
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1093
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1093
; 0,00s
; (get-info :all-statistics)
(push) ; 1093
; [then-branch 2333] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2334] 4 == 2
(push) ; 1094
; [else-branch 2334] 4 != 2
(pop) ; 1094
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1094
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1094
; 0,00s
; (get-info :all-statistics)
(push) ; 1094
; [then-branch 2335] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2336] 4 == 2
(push) ; 1095
; [else-branch 2336] 4 != 2
(pop) ; 1095
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1095
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1095
; 0,00s
; (get-info :all-statistics)
(push) ; 1095
; [then-branch 2337] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2338] 4 == 2
(push) ; 1096
; [else-branch 2338] 4 != 2
(pop) ; 1096
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1096
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1096
; 0,00s
; (get-info :all-statistics)
(push) ; 1096
; [then-branch 2339] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2340] 4 == 2
(push) ; 1097
; [else-branch 2340] 4 != 2
(pop) ; 1097
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1097
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1097
; 0,00s
; (get-info :all-statistics)
(push) ; 1097
; [then-branch 2341] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2342] 4 == 2
(push) ; 1098
; [else-branch 2342] 4 != 2
(pop) ; 1098
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1098
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1098
; 0,00s
; (get-info :all-statistics)
(push) ; 1098
; [then-branch 2343] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2344] 4 == 2
(push) ; 1099
; [else-branch 2344] 4 != 2
(pop) ; 1099
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1099
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1099
; 0,00s
; (get-info :all-statistics)
(push) ; 1099
; [then-branch 2345] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2346] 4 == 2
(push) ; 1100
; [else-branch 2346] 4 != 2
(pop) ; 1100
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1100
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1100
; 0,00s
; (get-info :all-statistics)
(push) ; 1100
; [then-branch 2347] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2348] 4 == 2
(push) ; 1101
; [else-branch 2348] 4 != 2
(pop) ; 1101
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1101
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1101
; 0,00s
; (get-info :all-statistics)
(push) ; 1101
; [then-branch 2349] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2350] 4 == 2
(push) ; 1102
; [else-branch 2350] 4 != 2
(pop) ; 1102
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1102
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1102
; 0,00s
; (get-info :all-statistics)
(push) ; 1102
; [then-branch 2351] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2352] 4 == 2
(push) ; 1103
; [else-branch 2352] 4 != 2
(pop) ; 1103
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1103
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1103
; 0,00s
; (get-info :all-statistics)
(push) ; 1103
; [then-branch 2353] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2354] 4 == 2
(push) ; 1104
; [else-branch 2354] 4 != 2
(pop) ; 1104
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1104
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1104
; 0,00s
; (get-info :all-statistics)
(push) ; 1104
; [then-branch 2355] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2356] 4 == 2
(push) ; 1105
; [else-branch 2356] 4 != 2
(pop) ; 1105
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1105
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1105
; 0,00s
; (get-info :all-statistics)
(push) ; 1105
; [then-branch 2357] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2358] 4 == 2
(push) ; 1106
; [else-branch 2358] 4 != 2
(pop) ; 1106
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1106
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1106
; 0,00s
; (get-info :all-statistics)
(push) ; 1106
; [then-branch 2359] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2360] 4 == 2
(push) ; 1107
; [else-branch 2360] 4 != 2
(pop) ; 1107
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1107
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1107
; 0,00s
; (get-info :all-statistics)
(push) ; 1107
; [then-branch 2361] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2362] 4 == 2
(push) ; 1108
; [else-branch 2362] 4 != 2
(pop) ; 1108
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1108
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1108
; 0,00s
; (get-info :all-statistics)
(push) ; 1108
; [then-branch 2363] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2364] 4 == 2
(push) ; 1109
; [else-branch 2364] 4 != 2
(pop) ; 1109
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1109
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1109
; 0,00s
; (get-info :all-statistics)
(push) ; 1109
; [then-branch 2365] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2366] 4 == 2
(push) ; 1110
; [else-branch 2366] 4 != 2
(pop) ; 1110
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1110
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1110
; 0,00s
; (get-info :all-statistics)
(push) ; 1110
; [then-branch 2367] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2368] 4 == 2
(push) ; 1111
; [else-branch 2368] 4 != 2
(pop) ; 1111
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1111
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1111
; 0,00s
; (get-info :all-statistics)
(push) ; 1111
; [then-branch 2369] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2370] 4 == 2
(push) ; 1112
; [else-branch 2370] 4 != 2
(pop) ; 1112
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1112
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1112
; 0,00s
; (get-info :all-statistics)
(push) ; 1112
; [then-branch 2371] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2372] 4 == 2
(push) ; 1113
; [else-branch 2372] 4 != 2
(pop) ; 1113
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1113
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1113
; 0,00s
; (get-info :all-statistics)
(push) ; 1113
; [then-branch 2373] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2374] 4 == 2
(push) ; 1114
; [else-branch 2374] 4 != 2
(pop) ; 1114
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1114
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1114
; 0,00s
; (get-info :all-statistics)
(push) ; 1114
; [then-branch 2375] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2376] 4 == 2
(push) ; 1115
; [else-branch 2376] 4 != 2
(pop) ; 1115
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1115
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1115
; 0,00s
; (get-info :all-statistics)
(push) ; 1115
; [then-branch 2377] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2378] 4 == 2
(push) ; 1116
; [else-branch 2378] 4 != 2
(pop) ; 1116
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1116
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1116
; 0,00s
; (get-info :all-statistics)
(push) ; 1116
; [then-branch 2379] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2380] 4 == 2
(push) ; 1117
; [else-branch 2380] 4 != 2
(pop) ; 1117
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1117
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1117
; 0,00s
; (get-info :all-statistics)
(push) ; 1117
; [then-branch 2381] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2382] 4 == 2
(push) ; 1118
; [else-branch 2382] 4 != 2
(pop) ; 1118
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1118
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1118
; 0,00s
; (get-info :all-statistics)
(push) ; 1118
; [then-branch 2383] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2384] 4 == 2
(push) ; 1119
; [else-branch 2384] 4 != 2
(pop) ; 1119
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1119
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1119
; 0,00s
; (get-info :all-statistics)
(push) ; 1119
; [then-branch 2385] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2386] 4 == 2
(push) ; 1120
; [else-branch 2386] 4 != 2
(pop) ; 1120
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1120
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1120
; 0,00s
; (get-info :all-statistics)
(push) ; 1120
; [then-branch 2387] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2388] 4 == 2
(push) ; 1121
; [else-branch 2388] 4 != 2
(pop) ; 1121
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1121
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1121
; 0,00s
; (get-info :all-statistics)
(push) ; 1121
; [then-branch 2389] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2390] 4 == 2
(push) ; 1122
; [else-branch 2390] 4 != 2
(pop) ; 1122
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1122
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1122
; 0,00s
; (get-info :all-statistics)
(push) ; 1122
; [then-branch 2391] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2392] 4 == 2
(push) ; 1123
; [else-branch 2392] 4 != 2
(pop) ; 1123
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1123
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1123
; 0,00s
; (get-info :all-statistics)
(push) ; 1123
; [then-branch 2393] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2394] 4 == 2
(push) ; 1124
; [else-branch 2394] 4 != 2
(pop) ; 1124
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1124
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1124
; 0,00s
; (get-info :all-statistics)
(push) ; 1124
; [then-branch 2395] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2396] 4 == 2
(push) ; 1125
; [else-branch 2396] 4 != 2
(pop) ; 1125
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1125
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1125
; 0,00s
; (get-info :all-statistics)
(push) ; 1125
; [then-branch 2397] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2398] 4 == 2
(push) ; 1126
; [else-branch 2398] 4 != 2
(pop) ; 1126
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1126
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1126
; 0,00s
; (get-info :all-statistics)
(push) ; 1126
; [then-branch 2399] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2400] 4 == 2
(push) ; 1127
; [else-branch 2400] 4 != 2
(pop) ; 1127
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1127
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1127
; 0,00s
; (get-info :all-statistics)
(push) ; 1127
; [then-branch 2401] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2402] 4 == 2
(push) ; 1128
; [else-branch 2402] 4 != 2
(pop) ; 1128
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1128
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1128
; 0,00s
; (get-info :all-statistics)
(push) ; 1128
; [then-branch 2403] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2404] 4 == 2
(push) ; 1129
; [else-branch 2404] 4 != 2
(pop) ; 1129
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1129
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1129
; 0,00s
; (get-info :all-statistics)
(push) ; 1129
; [then-branch 2405] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2406] 4 == 2
(push) ; 1130
; [else-branch 2406] 4 != 2
(pop) ; 1130
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1130
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1130
; 0,00s
; (get-info :all-statistics)
(push) ; 1130
; [then-branch 2407] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2408] 4 == 2
(push) ; 1131
; [else-branch 2408] 4 != 2
(pop) ; 1131
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1131
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1131
; 0,00s
; (get-info :all-statistics)
(push) ; 1131
; [then-branch 2409] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2410] 4 == 2
(push) ; 1132
; [else-branch 2410] 4 != 2
(pop) ; 1132
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1132
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1132
; 0,00s
; (get-info :all-statistics)
(push) ; 1132
; [then-branch 2411] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2412] 4 == 2
(push) ; 1133
; [else-branch 2412] 4 != 2
(pop) ; 1133
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1133
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1133
; 0,00s
; (get-info :all-statistics)
(push) ; 1133
; [then-branch 2413] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2414] 4 == 2
(push) ; 1134
; [else-branch 2414] 4 != 2
(pop) ; 1134
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1134
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1134
; 0,00s
; (get-info :all-statistics)
(push) ; 1134
; [then-branch 2415] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2416] 4 == 2
(push) ; 1135
; [else-branch 2416] 4 != 2
(pop) ; 1135
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1135
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1135
; 0,00s
; (get-info :all-statistics)
(push) ; 1135
; [then-branch 2417] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2418] 4 == 2
(push) ; 1136
; [else-branch 2418] 4 != 2
(pop) ; 1136
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1136
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1136
; 0,00s
; (get-info :all-statistics)
(push) ; 1136
; [then-branch 2419] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2420] 4 == 2
(push) ; 1137
; [else-branch 2420] 4 != 2
(pop) ; 1137
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1137
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1137
; 0,00s
; (get-info :all-statistics)
(push) ; 1137
; [then-branch 2421] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2422] 4 == 2
(push) ; 1138
; [else-branch 2422] 4 != 2
(pop) ; 1138
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1138
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1138
; 0,00s
; (get-info :all-statistics)
(push) ; 1138
; [then-branch 2423] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2424] 4 == 2
(push) ; 1139
; [else-branch 2424] 4 != 2
(pop) ; 1139
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1139
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1139
; 0,00s
; (get-info :all-statistics)
(push) ; 1139
; [then-branch 2425] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2426] 4 == 2
(push) ; 1140
; [else-branch 2426] 4 != 2
(pop) ; 1140
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1140
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1140
; 0,00s
; (get-info :all-statistics)
(push) ; 1140
; [then-branch 2427] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2428] 4 == 2
(push) ; 1141
; [else-branch 2428] 4 != 2
(pop) ; 1141
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1141
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1141
; 0,00s
; (get-info :all-statistics)
(push) ; 1141
; [then-branch 2429] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2430] 4 == 2
(push) ; 1142
; [else-branch 2430] 4 != 2
(pop) ; 1142
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1142
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1142
; 0,00s
; (get-info :all-statistics)
(push) ; 1142
; [then-branch 2431] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2432] 4 == 2
(push) ; 1143
; [else-branch 2432] 4 != 2
(pop) ; 1143
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1143
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1143
; 0,00s
; (get-info :all-statistics)
(push) ; 1143
; [then-branch 2433] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2434] 4 == 2
(push) ; 1144
; [else-branch 2434] 4 != 2
(pop) ; 1144
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1144
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1144
; 0,00s
; (get-info :all-statistics)
(push) ; 1144
; [then-branch 2435] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2436] 4 == 2
(push) ; 1145
; [else-branch 2436] 4 != 2
(pop) ; 1145
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1145
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1145
; 0,00s
; (get-info :all-statistics)
(push) ; 1145
; [then-branch 2437] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2438] 4 == 2
(push) ; 1146
; [else-branch 2438] 4 != 2
(pop) ; 1146
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1146
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1146
; 0,00s
; (get-info :all-statistics)
(push) ; 1146
; [then-branch 2439] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2440] 4 == 2
(push) ; 1147
; [else-branch 2440] 4 != 2
(pop) ; 1147
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1147
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1147
; 0,00s
; (get-info :all-statistics)
(push) ; 1147
; [then-branch 2441] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2442] 4 == 2
(push) ; 1148
; [else-branch 2442] 4 != 2
(pop) ; 1148
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1148
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1148
; 0,00s
; (get-info :all-statistics)
(push) ; 1148
; [then-branch 2443] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2444] 4 == 2
(push) ; 1149
; [else-branch 2444] 4 != 2
(pop) ; 1149
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1149
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1149
; 0,00s
; (get-info :all-statistics)
(push) ; 1149
; [then-branch 2445] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2446] 4 == 2
(push) ; 1150
; [else-branch 2446] 4 != 2
(pop) ; 1150
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1150
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1150
; 0,00s
; (get-info :all-statistics)
(push) ; 1150
; [then-branch 2447] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2448] 4 == 2
(push) ; 1151
; [else-branch 2448] 4 != 2
(pop) ; 1151
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1151
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1151
; 0,00s
; (get-info :all-statistics)
(push) ; 1151
; [then-branch 2449] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2450] 4 == 2
(push) ; 1152
; [else-branch 2450] 4 != 2
(pop) ; 1152
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1152
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1152
; 0,00s
; (get-info :all-statistics)
(push) ; 1152
; [then-branch 2451] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2452] 4 == 2
(push) ; 1153
; [else-branch 2452] 4 != 2
(pop) ; 1153
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1153
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1153
; 0,00s
; (get-info :all-statistics)
(push) ; 1153
; [then-branch 2453] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2454] 4 == 2
(push) ; 1154
; [else-branch 2454] 4 != 2
(pop) ; 1154
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1154
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1154
; 0,00s
; (get-info :all-statistics)
(push) ; 1154
; [then-branch 2455] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2456] 4 == 2
(push) ; 1155
; [else-branch 2456] 4 != 2
(pop) ; 1155
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1155
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1155
; 0,00s
; (get-info :all-statistics)
(push) ; 1155
; [then-branch 2457] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2458] 4 == 2
(push) ; 1156
; [else-branch 2458] 4 != 2
(pop) ; 1156
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1156
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1156
; 0,00s
; (get-info :all-statistics)
(push) ; 1156
; [then-branch 2459] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2460] 4 == 2
(push) ; 1157
; [else-branch 2460] 4 != 2
(pop) ; 1157
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1157
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1157
; 0,00s
; (get-info :all-statistics)
(push) ; 1157
; [then-branch 2461] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2462] 4 == 2
(push) ; 1158
; [else-branch 2462] 4 != 2
(pop) ; 1158
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1158
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1158
; 0,00s
; (get-info :all-statistics)
(push) ; 1158
; [then-branch 2463] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2464] 4 == 2
(push) ; 1159
; [else-branch 2464] 4 != 2
(pop) ; 1159
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1159
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1159
; 0,00s
; (get-info :all-statistics)
(push) ; 1159
; [then-branch 2465] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2466] 4 == 2
(push) ; 1160
; [else-branch 2466] 4 != 2
(pop) ; 1160
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1160
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1160
; 0,00s
; (get-info :all-statistics)
(push) ; 1160
; [then-branch 2467] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2468] 4 == 2
(push) ; 1161
; [else-branch 2468] 4 != 2
(pop) ; 1161
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1161
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1161
; 0,00s
; (get-info :all-statistics)
(push) ; 1161
; [then-branch 2469] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2470] 4 == 2
(push) ; 1162
; [else-branch 2470] 4 != 2
(pop) ; 1162
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1162
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1162
; 0,00s
; (get-info :all-statistics)
(push) ; 1162
; [then-branch 2471] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2472] 4 == 2
(push) ; 1163
; [else-branch 2472] 4 != 2
(pop) ; 1163
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1163
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1163
; 0,00s
; (get-info :all-statistics)
(push) ; 1163
; [then-branch 2473] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2474] 4 == 2
(push) ; 1164
; [else-branch 2474] 4 != 2
(pop) ; 1164
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1164
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1164
; 0,00s
; (get-info :all-statistics)
(push) ; 1164
; [then-branch 2475] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2476] 4 == 2
(push) ; 1165
; [else-branch 2476] 4 != 2
(pop) ; 1165
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1165
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1165
; 0,00s
; (get-info :all-statistics)
(push) ; 1165
; [then-branch 2477] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2478] 4 == 2
(push) ; 1166
; [else-branch 2478] 4 != 2
(pop) ; 1166
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1166
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1166
; 0,00s
; (get-info :all-statistics)
(push) ; 1166
; [then-branch 2479] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2480] 4 == 2
(push) ; 1167
; [else-branch 2480] 4 != 2
(pop) ; 1167
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1167
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1167
; 0,00s
; (get-info :all-statistics)
(push) ; 1167
; [then-branch 2481] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2482] 4 == 2
(push) ; 1168
; [else-branch 2482] 4 != 2
(pop) ; 1168
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1168
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1168
; 0,00s
; (get-info :all-statistics)
(push) ; 1168
; [then-branch 2483] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2484] 4 == 2
(push) ; 1169
; [else-branch 2484] 4 != 2
(pop) ; 1169
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1169
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1169
; 0,00s
; (get-info :all-statistics)
(push) ; 1169
; [then-branch 2485] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2486] 4 == 2
(push) ; 1170
; [else-branch 2486] 4 != 2
(pop) ; 1170
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1170
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1170
; 0,00s
; (get-info :all-statistics)
(push) ; 1170
; [then-branch 2487] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2488] 4 == 2
(push) ; 1171
; [else-branch 2488] 4 != 2
(pop) ; 1171
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1171
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1171
; 0,00s
; (get-info :all-statistics)
(push) ; 1171
; [then-branch 2489] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2490] 4 == 2
(push) ; 1172
; [else-branch 2490] 4 != 2
(pop) ; 1172
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1172
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1172
; 0,00s
; (get-info :all-statistics)
(push) ; 1172
; [then-branch 2491] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2492] 4 == 2
(push) ; 1173
; [else-branch 2492] 4 != 2
(pop) ; 1173
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1173
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1173
; 0,00s
; (get-info :all-statistics)
(push) ; 1173
; [then-branch 2493] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2494] 4 == 2
(push) ; 1174
; [else-branch 2494] 4 != 2
(pop) ; 1174
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1174
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1174
; 0,00s
; (get-info :all-statistics)
(push) ; 1174
; [then-branch 2495] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2496] 4 == 2
(push) ; 1175
; [else-branch 2496] 4 != 2
(pop) ; 1175
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1175
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1175
; 0,00s
; (get-info :all-statistics)
(push) ; 1175
; [then-branch 2497] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2498] 4 == 2
(push) ; 1176
; [else-branch 2498] 4 != 2
(pop) ; 1176
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1176
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1176
; 0,00s
; (get-info :all-statistics)
(push) ; 1176
; [then-branch 2499] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2500] 4 == 2
(push) ; 1177
; [else-branch 2500] 4 != 2
(pop) ; 1177
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1177
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1177
; 0,00s
; (get-info :all-statistics)
(push) ; 1177
; [then-branch 2501] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2502] 4 == 2
(push) ; 1178
; [else-branch 2502] 4 != 2
(pop) ; 1178
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1178
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1178
; 0,00s
; (get-info :all-statistics)
(push) ; 1178
; [then-branch 2503] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2504] 4 == 2
(push) ; 1179
; [else-branch 2504] 4 != 2
(pop) ; 1179
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1179
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1179
; 0,00s
; (get-info :all-statistics)
(push) ; 1179
; [then-branch 2505] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2506] 4 == 2
(push) ; 1180
; [else-branch 2506] 4 != 2
(pop) ; 1180
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1180
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1180
; 0,00s
; (get-info :all-statistics)
(push) ; 1180
; [then-branch 2507] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2508] 4 == 2
(push) ; 1181
; [else-branch 2508] 4 != 2
(pop) ; 1181
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1181
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1181
; 0,00s
; (get-info :all-statistics)
(push) ; 1181
; [then-branch 2509] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2510] 4 == 2
(push) ; 1182
; [else-branch 2510] 4 != 2
(pop) ; 1182
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1182
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1182
; 0,00s
; (get-info :all-statistics)
(push) ; 1182
; [then-branch 2511] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2512] 4 == 2
(push) ; 1183
; [else-branch 2512] 4 != 2
(pop) ; 1183
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1183
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1183
; 0,00s
; (get-info :all-statistics)
(push) ; 1183
; [then-branch 2513] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2514] 4 == 2
(push) ; 1184
; [else-branch 2514] 4 != 2
(pop) ; 1184
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1184
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1184
; 0,00s
; (get-info :all-statistics)
(push) ; 1184
; [then-branch 2515] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2516] 4 == 2
(push) ; 1185
; [else-branch 2516] 4 != 2
(pop) ; 1185
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1185
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1185
; 0,00s
; (get-info :all-statistics)
(push) ; 1185
; [then-branch 2517] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2518] 4 == 2
(push) ; 1186
; [else-branch 2518] 4 != 2
(pop) ; 1186
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1186
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1186
; 0,00s
; (get-info :all-statistics)
(push) ; 1186
; [then-branch 2519] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2520] 4 == 2
(push) ; 1187
; [else-branch 2520] 4 != 2
(pop) ; 1187
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1187
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1187
; 0,00s
; (get-info :all-statistics)
(push) ; 1187
; [then-branch 2521] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2522] 4 == 2
(push) ; 1188
; [else-branch 2522] 4 != 2
(pop) ; 1188
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1188
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1188
; 0,00s
; (get-info :all-statistics)
(push) ; 1188
; [then-branch 2523] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2524] 4 == 2
(push) ; 1189
; [else-branch 2524] 4 != 2
(pop) ; 1189
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1189
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1189
; 0,00s
; (get-info :all-statistics)
(push) ; 1189
; [then-branch 2525] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2526] 4 == 2
(push) ; 1190
; [else-branch 2526] 4 != 2
(pop) ; 1190
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1190
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1190
; 0,00s
; (get-info :all-statistics)
(push) ; 1190
; [then-branch 2527] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2528] 4 == 2
(push) ; 1191
; [else-branch 2528] 4 != 2
(pop) ; 1191
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1191
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1191
; 0,00s
; (get-info :all-statistics)
(push) ; 1191
; [then-branch 2529] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2530] 4 == 2
(push) ; 1192
; [else-branch 2530] 4 != 2
(pop) ; 1192
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1192
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1192
; 0,00s
; (get-info :all-statistics)
(push) ; 1192
; [then-branch 2531] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2532] 4 == 2
(push) ; 1193
; [else-branch 2532] 4 != 2
(pop) ; 1193
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1193
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1193
; 0,00s
; (get-info :all-statistics)
(push) ; 1193
; [then-branch 2533] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2534] 4 == 2
(push) ; 1194
; [else-branch 2534] 4 != 2
(pop) ; 1194
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1194
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1194
; 0,00s
; (get-info :all-statistics)
(push) ; 1194
; [then-branch 2535] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2536] 4 == 2
(push) ; 1195
; [else-branch 2536] 4 != 2
(pop) ; 1195
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1195
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1195
; 0,00s
; (get-info :all-statistics)
(push) ; 1195
; [then-branch 2537] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2538] 4 == 2
(push) ; 1196
; [else-branch 2538] 4 != 2
(pop) ; 1196
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1196
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1196
; 0,00s
; (get-info :all-statistics)
(push) ; 1196
; [then-branch 2539] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2540] 4 == 2
(push) ; 1197
; [else-branch 2540] 4 != 2
(pop) ; 1197
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1197
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1197
; 0,00s
; (get-info :all-statistics)
(push) ; 1197
; [then-branch 2541] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2542] 4 == 2
(push) ; 1198
; [else-branch 2542] 4 != 2
(pop) ; 1198
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1198
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1198
; 0,00s
; (get-info :all-statistics)
(push) ; 1198
; [then-branch 2543] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2544] 4 == 2
(push) ; 1199
; [else-branch 2544] 4 != 2
(pop) ; 1199
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1199
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1199
; 0,00s
; (get-info :all-statistics)
(push) ; 1199
; [then-branch 2545] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2546] 4 == 2
(push) ; 1200
; [else-branch 2546] 4 != 2
(pop) ; 1200
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1200
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1200
; 0,00s
; (get-info :all-statistics)
(push) ; 1200
; [then-branch 2547] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2548] 4 == 2
(push) ; 1201
; [else-branch 2548] 4 != 2
(pop) ; 1201
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1201
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1201
; 0,00s
; (get-info :all-statistics)
(push) ; 1201
; [then-branch 2549] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2550] 4 == 2
(push) ; 1202
; [else-branch 2550] 4 != 2
(pop) ; 1202
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1202
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1202
; 0,00s
; (get-info :all-statistics)
(push) ; 1202
; [then-branch 2551] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2552] 4 == 2
(push) ; 1203
; [else-branch 2552] 4 != 2
(pop) ; 1203
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1203
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1203
; 0,00s
; (get-info :all-statistics)
(push) ; 1203
; [then-branch 2553] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2554] 4 == 2
(push) ; 1204
; [else-branch 2554] 4 != 2
(pop) ; 1204
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1204
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1204
; 0,00s
; (get-info :all-statistics)
(push) ; 1204
; [then-branch 2555] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2556] 4 == 2
(push) ; 1205
; [else-branch 2556] 4 != 2
(pop) ; 1205
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1205
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1205
; 0,00s
; (get-info :all-statistics)
(push) ; 1205
; [then-branch 2557] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2558] 4 == 2
(push) ; 1206
; [else-branch 2558] 4 != 2
(pop) ; 1206
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1206
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1206
; 0,00s
; (get-info :all-statistics)
(push) ; 1206
; [then-branch 2559] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2560] 4 == 2
(push) ; 1207
; [else-branch 2560] 4 != 2
(pop) ; 1207
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1207
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1207
; 0,00s
; (get-info :all-statistics)
(push) ; 1207
; [then-branch 2561] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2562] 4 == 2
(push) ; 1208
; [else-branch 2562] 4 != 2
(pop) ; 1208
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1208
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1208
; 0,00s
; (get-info :all-statistics)
(push) ; 1208
; [then-branch 2563] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2564] 4 == 2
(push) ; 1209
; [else-branch 2564] 4 != 2
(pop) ; 1209
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1209
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1209
; 0,00s
; (get-info :all-statistics)
(push) ; 1209
; [then-branch 2565] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2566] 4 == 2
(push) ; 1210
; [else-branch 2566] 4 != 2
(pop) ; 1210
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1210
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1210
; 0,00s
; (get-info :all-statistics)
(push) ; 1210
; [then-branch 2567] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2568] 4 == 2
(push) ; 1211
; [else-branch 2568] 4 != 2
(pop) ; 1211
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1211
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1211
; 0,00s
; (get-info :all-statistics)
(push) ; 1211
; [then-branch 2569] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2570] 4 == 2
(push) ; 1212
; [else-branch 2570] 4 != 2
(pop) ; 1212
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1212
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1212
; 0,00s
; (get-info :all-statistics)
(push) ; 1212
; [then-branch 2571] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2572] 4 == 2
(push) ; 1213
; [else-branch 2572] 4 != 2
(pop) ; 1213
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1213
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1213
; 0,00s
; (get-info :all-statistics)
(push) ; 1213
; [then-branch 2573] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2574] 4 == 2
(push) ; 1214
; [else-branch 2574] 4 != 2
(pop) ; 1214
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1214
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1214
; 0,00s
; (get-info :all-statistics)
(push) ; 1214
; [then-branch 2575] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2576] 4 == 2
(push) ; 1215
; [else-branch 2576] 4 != 2
(pop) ; 1215
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1215
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1215
; 0,00s
; (get-info :all-statistics)
(push) ; 1215
; [then-branch 2577] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2578] 4 == 2
(push) ; 1216
; [else-branch 2578] 4 != 2
(pop) ; 1216
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1216
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1216
; 0,00s
; (get-info :all-statistics)
(push) ; 1216
; [then-branch 2579] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2580] 4 == 2
(push) ; 1217
; [else-branch 2580] 4 != 2
(pop) ; 1217
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1217
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1217
; 0,00s
; (get-info :all-statistics)
(push) ; 1217
; [then-branch 2581] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2582] 4 == 2
(push) ; 1218
; [else-branch 2582] 4 != 2
(pop) ; 1218
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1218
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1218
; 0,00s
; (get-info :all-statistics)
(push) ; 1218
; [then-branch 2583] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2584] 4 == 2
(push) ; 1219
; [else-branch 2584] 4 != 2
(pop) ; 1219
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1219
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1219
; 0,00s
; (get-info :all-statistics)
(push) ; 1219
; [then-branch 2585] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2586] 4 == 2
(push) ; 1220
; [else-branch 2586] 4 != 2
(pop) ; 1220
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1220
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1220
; 0,00s
; (get-info :all-statistics)
(push) ; 1220
; [then-branch 2587] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2588] 4 == 2
(push) ; 1221
; [else-branch 2588] 4 != 2
(pop) ; 1221
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1221
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1221
; 0,00s
; (get-info :all-statistics)
(push) ; 1221
; [then-branch 2589] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2590] 4 == 2
(push) ; 1222
; [else-branch 2590] 4 != 2
(pop) ; 1222
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1222
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1222
; 0,00s
; (get-info :all-statistics)
(push) ; 1222
; [then-branch 2591] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2592] 4 == 2
(push) ; 1223
; [else-branch 2592] 4 != 2
(pop) ; 1223
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1223
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1223
; 0,00s
; (get-info :all-statistics)
(push) ; 1223
; [then-branch 2593] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2594] 4 == 2
(push) ; 1224
; [else-branch 2594] 4 != 2
(pop) ; 1224
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1224
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1224
; 0,00s
; (get-info :all-statistics)
(push) ; 1224
; [then-branch 2595] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2596] 4 == 2
(push) ; 1225
; [else-branch 2596] 4 != 2
(pop) ; 1225
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1225
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1225
; 0,00s
; (get-info :all-statistics)
(push) ; 1225
; [then-branch 2597] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2598] 4 == 2
(push) ; 1226
; [else-branch 2598] 4 != 2
(pop) ; 1226
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1226
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1226
; 0,00s
; (get-info :all-statistics)
(push) ; 1226
; [then-branch 2599] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2600] 4 == 2
(push) ; 1227
; [else-branch 2600] 4 != 2
(pop) ; 1227
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1227
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1227
; 0,00s
; (get-info :all-statistics)
(push) ; 1227
; [then-branch 2601] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2602] 4 == 2
(push) ; 1228
; [else-branch 2602] 4 != 2
(pop) ; 1228
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1228
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1228
; 0,00s
; (get-info :all-statistics)
(push) ; 1228
; [then-branch 2603] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2604] 4 == 2
(push) ; 1229
; [else-branch 2604] 4 != 2
(pop) ; 1229
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1229
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1229
; 0,00s
; (get-info :all-statistics)
(push) ; 1229
; [then-branch 2605] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2606] 4 == 2
(push) ; 1230
; [else-branch 2606] 4 != 2
(pop) ; 1230
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1230
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1230
; 0,00s
; (get-info :all-statistics)
(push) ; 1230
; [then-branch 2607] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2608] 4 == 2
(push) ; 1231
; [else-branch 2608] 4 != 2
(pop) ; 1231
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1231
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1231
; 0,00s
; (get-info :all-statistics)
(push) ; 1231
; [then-branch 2609] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2610] 4 == 2
(push) ; 1232
; [else-branch 2610] 4 != 2
(pop) ; 1232
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1232
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1232
; 0,00s
; (get-info :all-statistics)
(push) ; 1232
; [then-branch 2611] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2612] 4 == 2
(push) ; 1233
; [else-branch 2612] 4 != 2
(pop) ; 1233
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1233
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1233
; 0,00s
; (get-info :all-statistics)
(push) ; 1233
; [then-branch 2613] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2614] 4 == 2
(push) ; 1234
; [else-branch 2614] 4 != 2
(pop) ; 1234
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1234
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1234
; 0,00s
; (get-info :all-statistics)
(push) ; 1234
; [then-branch 2615] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2616] 4 == 2
(push) ; 1235
; [else-branch 2616] 4 != 2
(pop) ; 1235
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1235
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1235
; 0,00s
; (get-info :all-statistics)
(push) ; 1235
; [then-branch 2617] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2618] 4 == 2
(push) ; 1236
; [else-branch 2618] 4 != 2
(pop) ; 1236
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1236
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1236
; 0,00s
; (get-info :all-statistics)
(push) ; 1236
; [then-branch 2619] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2620] 4 == 2
(push) ; 1237
; [else-branch 2620] 4 != 2
(pop) ; 1237
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1237
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1237
; 0,00s
; (get-info :all-statistics)
(push) ; 1237
; [then-branch 2621] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2622] 4 == 2
(push) ; 1238
; [else-branch 2622] 4 != 2
(pop) ; 1238
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1238
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1238
; 0,00s
; (get-info :all-statistics)
(push) ; 1238
; [then-branch 2623] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2624] 4 == 2
(push) ; 1239
; [else-branch 2624] 4 != 2
(pop) ; 1239
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1239
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1239
; 0,00s
; (get-info :all-statistics)
(push) ; 1239
; [then-branch 2625] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2626] 4 == 2
(push) ; 1240
; [else-branch 2626] 4 != 2
(pop) ; 1240
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1240
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1240
; 0,00s
; (get-info :all-statistics)
(push) ; 1240
; [then-branch 2627] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2628] 4 == 2
(push) ; 1241
; [else-branch 2628] 4 != 2
(pop) ; 1241
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1241
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1241
; 0,00s
; (get-info :all-statistics)
(push) ; 1241
; [then-branch 2629] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2630] 4 == 2
(push) ; 1242
; [else-branch 2630] 4 != 2
(pop) ; 1242
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1242
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1242
; 0,00s
; (get-info :all-statistics)
(push) ; 1242
; [then-branch 2631] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2632] 4 == 2
(push) ; 1243
; [else-branch 2632] 4 != 2
(pop) ; 1243
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1243
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1243
; 0,00s
; (get-info :all-statistics)
(push) ; 1243
; [then-branch 2633] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2634] 4 == 2
(push) ; 1244
; [else-branch 2634] 4 != 2
(pop) ; 1244
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1244
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1244
; 0,00s
; (get-info :all-statistics)
(push) ; 1244
; [then-branch 2635] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2636] 4 == 2
(push) ; 1245
; [else-branch 2636] 4 != 2
(pop) ; 1245
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1245
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1245
; 0,00s
; (get-info :all-statistics)
(push) ; 1245
; [then-branch 2637] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2638] 4 == 2
(push) ; 1246
; [else-branch 2638] 4 != 2
(pop) ; 1246
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1246
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1246
; 0,00s
; (get-info :all-statistics)
(push) ; 1246
; [then-branch 2639] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2640] 4 == 2
(push) ; 1247
; [else-branch 2640] 4 != 2
(pop) ; 1247
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1247
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1247
; 0,00s
; (get-info :all-statistics)
(push) ; 1247
; [then-branch 2641] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2642] 4 == 2
(push) ; 1248
; [else-branch 2642] 4 != 2
(pop) ; 1248
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1248
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1248
; 0,00s
; (get-info :all-statistics)
(push) ; 1248
; [then-branch 2643] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2644] 4 == 2
(push) ; 1249
; [else-branch 2644] 4 != 2
(pop) ; 1249
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1249
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1249
; 0,00s
; (get-info :all-statistics)
(push) ; 1249
; [then-branch 2645] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2646] 4 == 2
(push) ; 1250
; [else-branch 2646] 4 != 2
(pop) ; 1250
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1250
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1250
; 0,00s
; (get-info :all-statistics)
(push) ; 1250
; [then-branch 2647] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2648] 4 == 2
(push) ; 1251
; [else-branch 2648] 4 != 2
(pop) ; 1251
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1251
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1251
; 0,00s
; (get-info :all-statistics)
(push) ; 1251
; [then-branch 2649] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2650] 4 == 2
(push) ; 1252
; [else-branch 2650] 4 != 2
(pop) ; 1252
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1252
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1252
; 0,00s
; (get-info :all-statistics)
(push) ; 1252
; [then-branch 2651] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2652] 4 == 2
(push) ; 1253
; [else-branch 2652] 4 != 2
(pop) ; 1253
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1253
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1253
; 0,00s
; (get-info :all-statistics)
(push) ; 1253
; [then-branch 2653] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2654] 4 == 2
(push) ; 1254
; [else-branch 2654] 4 != 2
(pop) ; 1254
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1254
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1254
; 0,00s
; (get-info :all-statistics)
(push) ; 1254
; [then-branch 2655] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2656] 4 == 2
(push) ; 1255
; [else-branch 2656] 4 != 2
(pop) ; 1255
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1255
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1255
; 0,00s
; (get-info :all-statistics)
(push) ; 1255
; [then-branch 2657] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2658] 4 == 2
(push) ; 1256
; [else-branch 2658] 4 != 2
(pop) ; 1256
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1256
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1256
; 0,00s
; (get-info :all-statistics)
(push) ; 1256
; [then-branch 2659] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2660] 4 == 2
(push) ; 1257
; [else-branch 2660] 4 != 2
(pop) ; 1257
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1257
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1257
; 0,00s
; (get-info :all-statistics)
(push) ; 1257
; [then-branch 2661] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2662] 4 == 2
(push) ; 1258
; [else-branch 2662] 4 != 2
(pop) ; 1258
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1258
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1258
; 0,00s
; (get-info :all-statistics)
(push) ; 1258
; [then-branch 2663] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2664] 4 == 2
(push) ; 1259
; [else-branch 2664] 4 != 2
(pop) ; 1259
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1259
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1259
; 0,00s
; (get-info :all-statistics)
(push) ; 1259
; [then-branch 2665] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2666] 4 == 2
(push) ; 1260
; [else-branch 2666] 4 != 2
(pop) ; 1260
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1260
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1260
; 0,00s
; (get-info :all-statistics)
(push) ; 1260
; [then-branch 2667] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2668] 4 == 2
(push) ; 1261
; [else-branch 2668] 4 != 2
(pop) ; 1261
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1261
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1261
; 0,00s
; (get-info :all-statistics)
(push) ; 1261
; [then-branch 2669] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2670] 4 == 2
(push) ; 1262
; [else-branch 2670] 4 != 2
(pop) ; 1262
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1262
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1262
; 0,00s
; (get-info :all-statistics)
(push) ; 1262
; [then-branch 2671] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2672] 4 == 2
(push) ; 1263
; [else-branch 2672] 4 != 2
(pop) ; 1263
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1263
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1263
; 0,00s
; (get-info :all-statistics)
(push) ; 1263
; [then-branch 2673] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2674] 4 == 2
(push) ; 1264
; [else-branch 2674] 4 != 2
(pop) ; 1264
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1264
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1264
; 0,00s
; (get-info :all-statistics)
(push) ; 1264
; [then-branch 2675] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2676] 4 == 2
(push) ; 1265
; [else-branch 2676] 4 != 2
(pop) ; 1265
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1265
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1265
; 0,00s
; (get-info :all-statistics)
(push) ; 1265
; [then-branch 2677] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2678] 4 == 2
(push) ; 1266
; [else-branch 2678] 4 != 2
(pop) ; 1266
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1266
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1266
; 0,00s
; (get-info :all-statistics)
(push) ; 1266
; [then-branch 2679] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2680] 4 == 2
(push) ; 1267
; [else-branch 2680] 4 != 2
(pop) ; 1267
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1267
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1267
; 0,00s
; (get-info :all-statistics)
(push) ; 1267
; [then-branch 2681] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2682] 4 == 2
(push) ; 1268
; [else-branch 2682] 4 != 2
(pop) ; 1268
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1268
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1268
; 0,00s
; (get-info :all-statistics)
(push) ; 1268
; [then-branch 2683] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2684] 4 == 2
(push) ; 1269
; [else-branch 2684] 4 != 2
(pop) ; 1269
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1269
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1269
; 0,00s
; (get-info :all-statistics)
(push) ; 1269
; [then-branch 2685] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2686] 4 == 2
(push) ; 1270
; [else-branch 2686] 4 != 2
(pop) ; 1270
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1270
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1270
; 0,00s
; (get-info :all-statistics)
(push) ; 1270
; [then-branch 2687] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2688] 4 == 2
(push) ; 1271
; [else-branch 2688] 4 != 2
(pop) ; 1271
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1271
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1271
; 0,00s
; (get-info :all-statistics)
(push) ; 1271
; [then-branch 2689] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2690] 4 == 2
(push) ; 1272
; [else-branch 2690] 4 != 2
(pop) ; 1272
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1272
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1272
; 0,00s
; (get-info :all-statistics)
(push) ; 1272
; [then-branch 2691] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2692] 4 == 2
(push) ; 1273
; [else-branch 2692] 4 != 2
(pop) ; 1273
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1273
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1273
; 0,00s
; (get-info :all-statistics)
(push) ; 1273
; [then-branch 2693] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2694] 4 == 2
(push) ; 1274
; [else-branch 2694] 4 != 2
(pop) ; 1274
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1274
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1274
; 0,00s
; (get-info :all-statistics)
(push) ; 1274
; [then-branch 2695] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2696] 4 == 2
(push) ; 1275
; [else-branch 2696] 4 != 2
(pop) ; 1275
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1275
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1275
; 0,00s
; (get-info :all-statistics)
(push) ; 1275
; [then-branch 2697] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2698] 4 == 2
(push) ; 1276
; [else-branch 2698] 4 != 2
(pop) ; 1276
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1276
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1276
; 0,00s
; (get-info :all-statistics)
(push) ; 1276
; [then-branch 2699] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2700] 4 == 2
(push) ; 1277
; [else-branch 2700] 4 != 2
(pop) ; 1277
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1277
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1277
; 0,00s
; (get-info :all-statistics)
(push) ; 1277
; [then-branch 2701] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2702] 4 == 2
(push) ; 1278
; [else-branch 2702] 4 != 2
(pop) ; 1278
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1278
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1278
; 0,00s
; (get-info :all-statistics)
(push) ; 1278
; [then-branch 2703] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2704] 4 == 2
(push) ; 1279
; [else-branch 2704] 4 != 2
(pop) ; 1279
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1279
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1279
; 0,00s
; (get-info :all-statistics)
(push) ; 1279
; [then-branch 2705] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2706] 4 == 2
(push) ; 1280
; [else-branch 2706] 4 != 2
(pop) ; 1280
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1280
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1280
; 0,00s
; (get-info :all-statistics)
(push) ; 1280
; [then-branch 2707] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2708] 4 == 2
(push) ; 1281
; [else-branch 2708] 4 != 2
(pop) ; 1281
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1281
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1281
; 0,00s
; (get-info :all-statistics)
(push) ; 1281
; [then-branch 2709] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2710] 4 == 2
(push) ; 1282
; [else-branch 2710] 4 != 2
(pop) ; 1282
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1282
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1282
; 0,00s
; (get-info :all-statistics)
(push) ; 1282
; [then-branch 2711] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2712] 4 == 2
(push) ; 1283
; [else-branch 2712] 4 != 2
(pop) ; 1283
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1283
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1283
; 0,00s
; (get-info :all-statistics)
(push) ; 1283
; [then-branch 2713] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2714] 4 == 2
(push) ; 1284
; [else-branch 2714] 4 != 2
(pop) ; 1284
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1284
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1284
; 0,00s
; (get-info :all-statistics)
(push) ; 1284
; [then-branch 2715] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2716] 4 == 2
(push) ; 1285
; [else-branch 2716] 4 != 2
(pop) ; 1285
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1285
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1285
; 0,00s
; (get-info :all-statistics)
(push) ; 1285
; [then-branch 2717] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2718] 4 == 2
(push) ; 1286
; [else-branch 2718] 4 != 2
(pop) ; 1286
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1286
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1286
; 0,00s
; (get-info :all-statistics)
(push) ; 1286
; [then-branch 2719] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2720] 4 == 2
(push) ; 1287
; [else-branch 2720] 4 != 2
(pop) ; 1287
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1287
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1287
; 0,00s
; (get-info :all-statistics)
(push) ; 1287
; [then-branch 2721] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2722] 4 == 2
(push) ; 1288
; [else-branch 2722] 4 != 2
(pop) ; 1288
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1288
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1288
; 0,00s
; (get-info :all-statistics)
(push) ; 1288
; [then-branch 2723] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2724] 4 == 2
(push) ; 1289
; [else-branch 2724] 4 != 2
(pop) ; 1289
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1289
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1289
; 0,00s
; (get-info :all-statistics)
(push) ; 1289
; [then-branch 2725] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2726] 4 == 2
(push) ; 1290
; [else-branch 2726] 4 != 2
(pop) ; 1290
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1290
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1290
; 0,00s
; (get-info :all-statistics)
(push) ; 1290
; [then-branch 2727] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2728] 4 == 2
(push) ; 1291
; [else-branch 2728] 4 != 2
(pop) ; 1291
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1291
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1291
; 0,00s
; (get-info :all-statistics)
(push) ; 1291
; [then-branch 2729] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2730] 4 == 2
(push) ; 1292
; [else-branch 2730] 4 != 2
(pop) ; 1292
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1292
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1292
; 0,00s
; (get-info :all-statistics)
(push) ; 1292
; [then-branch 2731] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2732] 4 == 2
(push) ; 1293
; [else-branch 2732] 4 != 2
(pop) ; 1293
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1293
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1293
; 0,00s
; (get-info :all-statistics)
(push) ; 1293
; [then-branch 2733] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2734] 4 == 2
(push) ; 1294
; [else-branch 2734] 4 != 2
(pop) ; 1294
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1294
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1294
; 0,00s
; (get-info :all-statistics)
(push) ; 1294
; [then-branch 2735] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2736] 4 == 2
(push) ; 1295
; [else-branch 2736] 4 != 2
(pop) ; 1295
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1295
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1295
; 0,00s
; (get-info :all-statistics)
(push) ; 1295
; [then-branch 2737] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2738] 4 == 2
(push) ; 1296
; [else-branch 2738] 4 != 2
(pop) ; 1296
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1296
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1296
; 0,00s
; (get-info :all-statistics)
(push) ; 1296
; [then-branch 2739] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2740] 4 == 2
(push) ; 1297
; [else-branch 2740] 4 != 2
(pop) ; 1297
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1297
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1297
; 0,00s
; (get-info :all-statistics)
(push) ; 1297
; [then-branch 2741] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2742] 4 == 2
(push) ; 1298
; [else-branch 2742] 4 != 2
(pop) ; 1298
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1298
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1298
; 0,00s
; (get-info :all-statistics)
(push) ; 1298
; [then-branch 2743] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2744] 4 == 2
(push) ; 1299
; [else-branch 2744] 4 != 2
(pop) ; 1299
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1299
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1299
; 0,00s
; (get-info :all-statistics)
(push) ; 1299
; [then-branch 2745] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2746] 4 == 2
(push) ; 1300
; [else-branch 2746] 4 != 2
(pop) ; 1300
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1300
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1300
; 0,00s
; (get-info :all-statistics)
(push) ; 1300
; [then-branch 2747] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2748] 4 == 2
(push) ; 1301
; [else-branch 2748] 4 != 2
(pop) ; 1301
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1301
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1301
; 0,00s
; (get-info :all-statistics)
(push) ; 1301
; [then-branch 2749] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2750] 4 == 2
(push) ; 1302
; [else-branch 2750] 4 != 2
(pop) ; 1302
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1302
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1302
; 0,00s
; (get-info :all-statistics)
(push) ; 1302
; [then-branch 2751] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2752] 4 == 2
(push) ; 1303
; [else-branch 2752] 4 != 2
(pop) ; 1303
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1303
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1303
; 0,00s
; (get-info :all-statistics)
(push) ; 1303
; [then-branch 2753] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2754] 4 == 2
(push) ; 1304
; [else-branch 2754] 4 != 2
(pop) ; 1304
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1304
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1304
; 0,00s
; (get-info :all-statistics)
(push) ; 1304
; [then-branch 2755] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2756] 4 == 2
(push) ; 1305
; [else-branch 2756] 4 != 2
(pop) ; 1305
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1305
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1305
; 0,00s
; (get-info :all-statistics)
(push) ; 1305
; [then-branch 2757] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2758] 4 == 2
(push) ; 1306
; [else-branch 2758] 4 != 2
(pop) ; 1306
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1306
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1306
; 0,00s
; (get-info :all-statistics)
(push) ; 1306
; [then-branch 2759] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2760] 4 == 2
(push) ; 1307
; [else-branch 2760] 4 != 2
(pop) ; 1307
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1307
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1307
; 0,00s
; (get-info :all-statistics)
(push) ; 1307
; [then-branch 2761] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2762] 4 == 2
(push) ; 1308
; [else-branch 2762] 4 != 2
(pop) ; 1308
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1308
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1308
; 0,00s
; (get-info :all-statistics)
(push) ; 1308
; [then-branch 2763] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2764] 4 == 2
(push) ; 1309
; [else-branch 2764] 4 != 2
(pop) ; 1309
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1309
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1309
; 0,00s
; (get-info :all-statistics)
(push) ; 1309
; [then-branch 2765] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2766] 4 == 2
(push) ; 1310
; [else-branch 2766] 4 != 2
(pop) ; 1310
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1310
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1310
; 0,00s
; (get-info :all-statistics)
(push) ; 1310
; [then-branch 2767] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2768] 4 == 2
(push) ; 1311
; [else-branch 2768] 4 != 2
(pop) ; 1311
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1311
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1311
; 0,00s
; (get-info :all-statistics)
(push) ; 1311
; [then-branch 2769] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2770] 4 == 2
(push) ; 1312
; [else-branch 2770] 4 != 2
(pop) ; 1312
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1312
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1312
; 0,00s
; (get-info :all-statistics)
(push) ; 1312
; [then-branch 2771] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2772] 4 == 2
(push) ; 1313
; [else-branch 2772] 4 != 2
(pop) ; 1313
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1313
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1313
; 0,00s
; (get-info :all-statistics)
(push) ; 1313
; [then-branch 2773] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2774] 4 == 2
(push) ; 1314
; [else-branch 2774] 4 != 2
(pop) ; 1314
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1314
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1314
; 0,00s
; (get-info :all-statistics)
(push) ; 1314
; [then-branch 2775] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2776] 4 == 2
(push) ; 1315
; [else-branch 2776] 4 != 2
(pop) ; 1315
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1315
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1315
; 0,00s
; (get-info :all-statistics)
(push) ; 1315
; [then-branch 2777] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2778] 4 == 2
(push) ; 1316
; [else-branch 2778] 4 != 2
(pop) ; 1316
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1316
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1316
; 0,00s
; (get-info :all-statistics)
(push) ; 1316
; [then-branch 2779] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2780] 4 == 2
(push) ; 1317
; [else-branch 2780] 4 != 2
(pop) ; 1317
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1317
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1317
; 0,00s
; (get-info :all-statistics)
(push) ; 1317
; [then-branch 2781] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2782] 4 == 2
(push) ; 1318
; [else-branch 2782] 4 != 2
(pop) ; 1318
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1318
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1318
; 0,00s
; (get-info :all-statistics)
(push) ; 1318
; [then-branch 2783] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2784] 4 == 2
(push) ; 1319
; [else-branch 2784] 4 != 2
(pop) ; 1319
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1319
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1319
; 0,00s
; (get-info :all-statistics)
(push) ; 1319
; [then-branch 2785] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2786] 4 == 2
(push) ; 1320
; [else-branch 2786] 4 != 2
(pop) ; 1320
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1320
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1320
; 0,00s
; (get-info :all-statistics)
(push) ; 1320
; [then-branch 2787] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2788] 4 == 2
(push) ; 1321
; [else-branch 2788] 4 != 2
(pop) ; 1321
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1321
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1321
; 0,00s
; (get-info :all-statistics)
(push) ; 1321
; [then-branch 2789] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2790] 4 == 2
(push) ; 1322
; [else-branch 2790] 4 != 2
(pop) ; 1322
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1322
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1322
; 0,00s
; (get-info :all-statistics)
(push) ; 1322
; [then-branch 2791] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2792] 4 == 2
(push) ; 1323
; [else-branch 2792] 4 != 2
(pop) ; 1323
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1323
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1323
; 0,00s
; (get-info :all-statistics)
(push) ; 1323
; [then-branch 2793] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2794] 4 == 2
(push) ; 1324
; [else-branch 2794] 4 != 2
(pop) ; 1324
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1324
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1324
; 0,00s
; (get-info :all-statistics)
(push) ; 1324
; [then-branch 2795] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2796] 4 == 2
(push) ; 1325
; [else-branch 2796] 4 != 2
(pop) ; 1325
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1325
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1325
; 0,00s
; (get-info :all-statistics)
(push) ; 1325
; [then-branch 2797] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2798] 4 == 2
(push) ; 1326
; [else-branch 2798] 4 != 2
(pop) ; 1326
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1326
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1326
; 0,00s
; (get-info :all-statistics)
(push) ; 1326
; [then-branch 2799] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2800] 4 == 2
(push) ; 1327
; [else-branch 2800] 4 != 2
(pop) ; 1327
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1327
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1327
; 0,00s
; (get-info :all-statistics)
(push) ; 1327
; [then-branch 2801] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2802] 4 == 2
(push) ; 1328
; [else-branch 2802] 4 != 2
(pop) ; 1328
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1328
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1328
; 0,00s
; (get-info :all-statistics)
(push) ; 1328
; [then-branch 2803] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2804] 4 == 2
(push) ; 1329
; [else-branch 2804] 4 != 2
(pop) ; 1329
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1329
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1329
; 0,00s
; (get-info :all-statistics)
(push) ; 1329
; [then-branch 2805] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2806] 4 == 2
(push) ; 1330
; [else-branch 2806] 4 != 2
(pop) ; 1330
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1330
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1330
; 0,00s
; (get-info :all-statistics)
(push) ; 1330
; [then-branch 2807] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2808] 4 == 2
(push) ; 1331
; [else-branch 2808] 4 != 2
(pop) ; 1331
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1331
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1331
; 0,00s
; (get-info :all-statistics)
(push) ; 1331
; [then-branch 2809] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2810] 4 == 2
(push) ; 1332
; [else-branch 2810] 4 != 2
(pop) ; 1332
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1332
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1332
; 0,00s
; (get-info :all-statistics)
(push) ; 1332
; [then-branch 2811] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2812] 4 == 2
(push) ; 1333
; [else-branch 2812] 4 != 2
(pop) ; 1333
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1333
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1333
; 0,00s
; (get-info :all-statistics)
(push) ; 1333
; [then-branch 2813] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2814] 4 == 2
(push) ; 1334
; [else-branch 2814] 4 != 2
(pop) ; 1334
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1334
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1334
; 0,00s
; (get-info :all-statistics)
(push) ; 1334
; [then-branch 2815] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2816] 4 == 2
(push) ; 1335
; [else-branch 2816] 4 != 2
(pop) ; 1335
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1335
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1335
; 0,00s
; (get-info :all-statistics)
(push) ; 1335
; [then-branch 2817] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2818] 4 == 2
(push) ; 1336
; [else-branch 2818] 4 != 2
(pop) ; 1336
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1336
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1336
; 0,00s
; (get-info :all-statistics)
(push) ; 1336
; [then-branch 2819] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2820] 4 == 2
(push) ; 1337
; [else-branch 2820] 4 != 2
(pop) ; 1337
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1337
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1337
; 0,00s
; (get-info :all-statistics)
(push) ; 1337
; [then-branch 2821] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2822] 4 == 2
(push) ; 1338
; [else-branch 2822] 4 != 2
(pop) ; 1338
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1338
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1338
; 0,00s
; (get-info :all-statistics)
(push) ; 1338
; [then-branch 2823] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2824] 4 == 2
(push) ; 1339
; [else-branch 2824] 4 != 2
(pop) ; 1339
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1339
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1339
; 0,00s
; (get-info :all-statistics)
(push) ; 1339
; [then-branch 2825] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2826] 4 == 2
(push) ; 1340
; [else-branch 2826] 4 != 2
(pop) ; 1340
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1340
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1340
; 0,00s
; (get-info :all-statistics)
(push) ; 1340
; [then-branch 2827] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2828] 4 == 2
(push) ; 1341
; [else-branch 2828] 4 != 2
(pop) ; 1341
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1341
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1341
; 0,00s
; (get-info :all-statistics)
(push) ; 1341
; [then-branch 2829] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2830] 4 == 2
(push) ; 1342
; [else-branch 2830] 4 != 2
(pop) ; 1342
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1342
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1342
; 0,00s
; (get-info :all-statistics)
(push) ; 1342
; [then-branch 2831] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2832] 4 == 2
(push) ; 1343
; [else-branch 2832] 4 != 2
(pop) ; 1343
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1343
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1343
; 0,00s
; (get-info :all-statistics)
(push) ; 1343
; [then-branch 2833] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2834] 4 == 2
(push) ; 1344
; [else-branch 2834] 4 != 2
(pop) ; 1344
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1344
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1344
; 0,00s
; (get-info :all-statistics)
(push) ; 1344
; [then-branch 2835] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2836] 4 == 2
(push) ; 1345
; [else-branch 2836] 4 != 2
(pop) ; 1345
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1345
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1345
; 0,00s
; (get-info :all-statistics)
(push) ; 1345
; [then-branch 2837] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2838] 4 == 2
(push) ; 1346
; [else-branch 2838] 4 != 2
(pop) ; 1346
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1346
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1346
; 0,00s
; (get-info :all-statistics)
(push) ; 1346
; [then-branch 2839] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2840] 4 == 2
(push) ; 1347
; [else-branch 2840] 4 != 2
(pop) ; 1347
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1347
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1347
; 0,00s
; (get-info :all-statistics)
(push) ; 1347
; [then-branch 2841] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2842] 4 == 2
(push) ; 1348
; [else-branch 2842] 4 != 2
(pop) ; 1348
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1348
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1348
; 0,00s
; (get-info :all-statistics)
(push) ; 1348
; [then-branch 2843] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2844] 4 == 2
(push) ; 1349
; [else-branch 2844] 4 != 2
(pop) ; 1349
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1349
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1349
; 0,00s
; (get-info :all-statistics)
(push) ; 1349
; [then-branch 2845] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2846] 4 == 2
(push) ; 1350
; [else-branch 2846] 4 != 2
(pop) ; 1350
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1350
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1350
; 0,00s
; (get-info :all-statistics)
(push) ; 1350
; [then-branch 2847] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2848] 4 == 2
(push) ; 1351
; [else-branch 2848] 4 != 2
(pop) ; 1351
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1351
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1351
; 0,00s
; (get-info :all-statistics)
(push) ; 1351
; [then-branch 2849] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2850] 4 == 2
(push) ; 1352
; [else-branch 2850] 4 != 2
(pop) ; 1352
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1352
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1352
; 0,00s
; (get-info :all-statistics)
(push) ; 1352
; [then-branch 2851] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2852] 4 == 2
(push) ; 1353
; [else-branch 2852] 4 != 2
(pop) ; 1353
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1353
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1353
; 0,00s
; (get-info :all-statistics)
(push) ; 1353
; [then-branch 2853] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2854] 4 == 2
(push) ; 1354
; [else-branch 2854] 4 != 2
(pop) ; 1354
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1354
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1354
; 0,00s
; (get-info :all-statistics)
(push) ; 1354
; [then-branch 2855] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2856] 4 == 2
(push) ; 1355
; [else-branch 2856] 4 != 2
(pop) ; 1355
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1355
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1355
; 0,00s
; (get-info :all-statistics)
(push) ; 1355
; [then-branch 2857] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2858] 4 == 2
(push) ; 1356
; [else-branch 2858] 4 != 2
(pop) ; 1356
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1356
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1356
; 0,00s
; (get-info :all-statistics)
(push) ; 1356
; [then-branch 2859] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2860] 4 == 2
(push) ; 1357
; [else-branch 2860] 4 != 2
(pop) ; 1357
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1357
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1357
; 0,00s
; (get-info :all-statistics)
(push) ; 1357
; [then-branch 2861] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2862] 4 == 2
(push) ; 1358
; [else-branch 2862] 4 != 2
(pop) ; 1358
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1358
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1358
; 0,00s
; (get-info :all-statistics)
(push) ; 1358
; [then-branch 2863] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2864] 4 == 2
(push) ; 1359
; [else-branch 2864] 4 != 2
(pop) ; 1359
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1359
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1359
; 0,00s
; (get-info :all-statistics)
(push) ; 1359
; [then-branch 2865] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2866] 4 == 2
(push) ; 1360
; [else-branch 2866] 4 != 2
(pop) ; 1360
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1360
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1360
; 0,00s
; (get-info :all-statistics)
(push) ; 1360
; [then-branch 2867] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2868] 4 == 2
(push) ; 1361
; [else-branch 2868] 4 != 2
(pop) ; 1361
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1361
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1361
; 0,00s
; (get-info :all-statistics)
(push) ; 1361
; [then-branch 2869] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2870] 4 == 2
(push) ; 1362
; [else-branch 2870] 4 != 2
(pop) ; 1362
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1362
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1362
; 0,00s
; (get-info :all-statistics)
(push) ; 1362
; [then-branch 2871] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2872] 4 == 2
(push) ; 1363
; [else-branch 2872] 4 != 2
(pop) ; 1363
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1363
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1363
; 0,00s
; (get-info :all-statistics)
(push) ; 1363
; [then-branch 2873] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2874] 4 == 2
(push) ; 1364
; [else-branch 2874] 4 != 2
(pop) ; 1364
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1364
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1364
; 0,00s
; (get-info :all-statistics)
(push) ; 1364
; [then-branch 2875] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2876] 4 == 2
(push) ; 1365
; [else-branch 2876] 4 != 2
(pop) ; 1365
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1365
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1365
; 0,00s
; (get-info :all-statistics)
(push) ; 1365
; [then-branch 2877] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2878] 4 == 2
(push) ; 1366
; [else-branch 2878] 4 != 2
(pop) ; 1366
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1366
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1366
; 0,00s
; (get-info :all-statistics)
(push) ; 1366
; [then-branch 2879] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2880] 4 == 2
(push) ; 1367
; [else-branch 2880] 4 != 2
(pop) ; 1367
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1367
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1367
; 0,00s
; (get-info :all-statistics)
(push) ; 1367
; [then-branch 2881] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2882] 4 == 2
(push) ; 1368
; [else-branch 2882] 4 != 2
(pop) ; 1368
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1368
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1368
; 0,00s
; (get-info :all-statistics)
(push) ; 1368
; [then-branch 2883] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2884] 4 == 2
(push) ; 1369
; [else-branch 2884] 4 != 2
(pop) ; 1369
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1369
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1369
; 0,00s
; (get-info :all-statistics)
(push) ; 1369
; [then-branch 2885] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2886] 4 == 2
(push) ; 1370
; [else-branch 2886] 4 != 2
(pop) ; 1370
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1370
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1370
; 0,00s
; (get-info :all-statistics)
(push) ; 1370
; [then-branch 2887] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2888] 4 == 2
(push) ; 1371
; [else-branch 2888] 4 != 2
(pop) ; 1371
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1371
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1371
; 0,00s
; (get-info :all-statistics)
(push) ; 1371
; [then-branch 2889] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2890] 4 == 2
(push) ; 1372
; [else-branch 2890] 4 != 2
(pop) ; 1372
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1372
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1372
; 0,00s
; (get-info :all-statistics)
(push) ; 1372
; [then-branch 2891] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2892] 4 == 2
(push) ; 1373
; [else-branch 2892] 4 != 2
(pop) ; 1373
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1373
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1373
; 0,00s
; (get-info :all-statistics)
(push) ; 1373
; [then-branch 2893] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2894] 4 == 2
(push) ; 1374
; [else-branch 2894] 4 != 2
(pop) ; 1374
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1374
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1374
; 0,00s
; (get-info :all-statistics)
(push) ; 1374
; [then-branch 2895] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2896] 4 == 2
(push) ; 1375
; [else-branch 2896] 4 != 2
(pop) ; 1375
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1375
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1375
; 0,00s
; (get-info :all-statistics)
(push) ; 1375
; [then-branch 2897] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2898] 4 == 2
(push) ; 1376
; [else-branch 2898] 4 != 2
(pop) ; 1376
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1376
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1376
; 0,00s
; (get-info :all-statistics)
(push) ; 1376
; [then-branch 2899] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2900] 4 == 2
(push) ; 1377
; [else-branch 2900] 4 != 2
(pop) ; 1377
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1377
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1377
; 0,00s
; (get-info :all-statistics)
(push) ; 1377
; [then-branch 2901] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2902] 4 == 2
(push) ; 1378
; [else-branch 2902] 4 != 2
(pop) ; 1378
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1378
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1378
; 0,00s
; (get-info :all-statistics)
(push) ; 1378
; [then-branch 2903] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2904] 4 == 2
(push) ; 1379
; [else-branch 2904] 4 != 2
(pop) ; 1379
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1379
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1379
; 0,00s
; (get-info :all-statistics)
(push) ; 1379
; [then-branch 2905] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2906] 4 == 2
(push) ; 1380
; [else-branch 2906] 4 != 2
(pop) ; 1380
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1380
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1380
; 0,00s
; (get-info :all-statistics)
(push) ; 1380
; [then-branch 2907] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2908] 4 == 2
(push) ; 1381
; [else-branch 2908] 4 != 2
(pop) ; 1381
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1381
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1381
; 0,00s
; (get-info :all-statistics)
(push) ; 1381
; [then-branch 2909] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2910] 4 == 2
(push) ; 1382
; [else-branch 2910] 4 != 2
(pop) ; 1382
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1382
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1382
; 0,00s
; (get-info :all-statistics)
(push) ; 1382
; [then-branch 2911] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2912] 4 == 2
(push) ; 1383
; [else-branch 2912] 4 != 2
(pop) ; 1383
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1383
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1383
; 0,00s
; (get-info :all-statistics)
(push) ; 1383
; [then-branch 2913] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2914] 4 == 2
(push) ; 1384
; [else-branch 2914] 4 != 2
(pop) ; 1384
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1384
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1384
; 0,00s
; (get-info :all-statistics)
(push) ; 1384
; [then-branch 2915] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2916] 4 == 2
(push) ; 1385
; [else-branch 2916] 4 != 2
(pop) ; 1385
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1385
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1385
; 0,00s
; (get-info :all-statistics)
(push) ; 1385
; [then-branch 2917] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2918] 4 == 2
(push) ; 1386
; [else-branch 2918] 4 != 2
(pop) ; 1386
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1386
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1386
; 0,00s
; (get-info :all-statistics)
(push) ; 1386
; [then-branch 2919] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2920] 4 == 2
(push) ; 1387
; [else-branch 2920] 4 != 2
(pop) ; 1387
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1387
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1387
; 0,00s
; (get-info :all-statistics)
(push) ; 1387
; [then-branch 2921] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2922] 4 == 2
(push) ; 1388
; [else-branch 2922] 4 != 2
(pop) ; 1388
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1388
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1388
; 0,00s
; (get-info :all-statistics)
(push) ; 1388
; [then-branch 2923] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2924] 4 == 2
(push) ; 1389
; [else-branch 2924] 4 != 2
(pop) ; 1389
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1389
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1389
; 0,00s
; (get-info :all-statistics)
(push) ; 1389
; [then-branch 2925] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2926] 4 == 2
(push) ; 1390
; [else-branch 2926] 4 != 2
(pop) ; 1390
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1390
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1390
; 0,00s
; (get-info :all-statistics)
(push) ; 1390
; [then-branch 2927] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2928] 4 == 2
(push) ; 1391
; [else-branch 2928] 4 != 2
(pop) ; 1391
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1391
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1391
; 0,00s
; (get-info :all-statistics)
(push) ; 1391
; [then-branch 2929] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2930] 4 == 2
(push) ; 1392
; [else-branch 2930] 4 != 2
(pop) ; 1392
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1392
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1392
; 0,00s
; (get-info :all-statistics)
(push) ; 1392
; [then-branch 2931] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2932] 4 == 2
(push) ; 1393
; [else-branch 2932] 4 != 2
(pop) ; 1393
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1393
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1393
; 0,00s
; (get-info :all-statistics)
(push) ; 1393
; [then-branch 2933] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2934] 4 == 2
(push) ; 1394
; [else-branch 2934] 4 != 2
(pop) ; 1394
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1394
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1394
; 0,00s
; (get-info :all-statistics)
(push) ; 1394
; [then-branch 2935] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2936] 4 == 2
(push) ; 1395
; [else-branch 2936] 4 != 2
(pop) ; 1395
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1395
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1395
; 0,00s
; (get-info :all-statistics)
(push) ; 1395
; [then-branch 2937] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2938] 4 == 2
(push) ; 1396
; [else-branch 2938] 4 != 2
(pop) ; 1396
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1396
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1396
; 0,00s
; (get-info :all-statistics)
(push) ; 1396
; [then-branch 2939] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2940] 4 == 2
(push) ; 1397
; [else-branch 2940] 4 != 2
(pop) ; 1397
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1397
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1397
; 0,00s
; (get-info :all-statistics)
(push) ; 1397
; [then-branch 2941] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2942] 4 == 2
(push) ; 1398
; [else-branch 2942] 4 != 2
(pop) ; 1398
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1398
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1398
; 0,00s
; (get-info :all-statistics)
(push) ; 1398
; [then-branch 2943] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2944] 4 == 2
(push) ; 1399
; [else-branch 2944] 4 != 2
(pop) ; 1399
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1399
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1399
; 0,00s
; (get-info :all-statistics)
(push) ; 1399
; [then-branch 2945] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2946] 4 == 2
(push) ; 1400
; [else-branch 2946] 4 != 2
(pop) ; 1400
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1400
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1400
; 0,00s
; (get-info :all-statistics)
(push) ; 1400
; [then-branch 2947] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2948] 4 == 2
(push) ; 1401
; [else-branch 2948] 4 != 2
(pop) ; 1401
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1401
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1401
; 0,00s
; (get-info :all-statistics)
(push) ; 1401
; [then-branch 2949] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2950] 4 == 2
(push) ; 1402
; [else-branch 2950] 4 != 2
(pop) ; 1402
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1402
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1402
; 0,00s
; (get-info :all-statistics)
(push) ; 1402
; [then-branch 2951] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2952] 4 == 2
(push) ; 1403
; [else-branch 2952] 4 != 2
(pop) ; 1403
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1403
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1403
; 0,00s
; (get-info :all-statistics)
(push) ; 1403
; [then-branch 2953] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2954] 4 == 2
(push) ; 1404
; [else-branch 2954] 4 != 2
(pop) ; 1404
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1404
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1404
; 0,00s
; (get-info :all-statistics)
(push) ; 1404
; [then-branch 2955] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2956] 4 == 2
(push) ; 1405
; [else-branch 2956] 4 != 2
(pop) ; 1405
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1405
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1405
; 0,00s
; (get-info :all-statistics)
(push) ; 1405
; [then-branch 2957] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2958] 4 == 2
(push) ; 1406
; [else-branch 2958] 4 != 2
(pop) ; 1406
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1406
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1406
; 0,00s
; (get-info :all-statistics)
(push) ; 1406
; [then-branch 2959] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2960] 4 == 2
(push) ; 1407
; [else-branch 2960] 4 != 2
(pop) ; 1407
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1407
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1407
; 0,00s
; (get-info :all-statistics)
(push) ; 1407
; [then-branch 2961] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2962] 4 == 2
(push) ; 1408
; [else-branch 2962] 4 != 2
(pop) ; 1408
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1408
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1408
; 0,00s
; (get-info :all-statistics)
(push) ; 1408
; [then-branch 2963] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2964] 4 == 2
(push) ; 1409
; [else-branch 2964] 4 != 2
(pop) ; 1409
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1409
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1409
; 0,00s
; (get-info :all-statistics)
(push) ; 1409
; [then-branch 2965] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2966] 4 == 2
(push) ; 1410
; [else-branch 2966] 4 != 2
(pop) ; 1410
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1410
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1410
; 0,00s
; (get-info :all-statistics)
(push) ; 1410
; [then-branch 2967] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2968] 4 == 2
(push) ; 1411
; [else-branch 2968] 4 != 2
(pop) ; 1411
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1411
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1411
; 0,00s
; (get-info :all-statistics)
(push) ; 1411
; [then-branch 2969] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2970] 4 == 2
(push) ; 1412
; [else-branch 2970] 4 != 2
(pop) ; 1412
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1412
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1412
; 0,00s
; (get-info :all-statistics)
(push) ; 1412
; [then-branch 2971] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2972] 4 == 2
(push) ; 1413
; [else-branch 2972] 4 != 2
(pop) ; 1413
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1413
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1413
; 0,00s
; (get-info :all-statistics)
(push) ; 1413
; [then-branch 2973] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2974] 4 == 2
(push) ; 1414
; [else-branch 2974] 4 != 2
(pop) ; 1414
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1414
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1414
; 0,00s
; (get-info :all-statistics)
(push) ; 1414
; [then-branch 2975] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2976] 4 == 2
(push) ; 1415
; [else-branch 2976] 4 != 2
(pop) ; 1415
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1415
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1415
; 0,00s
; (get-info :all-statistics)
(push) ; 1415
; [then-branch 2977] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2978] 4 == 2
(push) ; 1416
; [else-branch 2978] 4 != 2
(pop) ; 1416
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1416
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1416
; 0,00s
; (get-info :all-statistics)
(push) ; 1416
; [then-branch 2979] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2980] 4 == 2
(push) ; 1417
; [else-branch 2980] 4 != 2
(pop) ; 1417
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1417
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1417
; 0,00s
; (get-info :all-statistics)
(push) ; 1417
; [then-branch 2981] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2982] 4 == 2
(push) ; 1418
; [else-branch 2982] 4 != 2
(pop) ; 1418
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1418
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1418
; 0,00s
; (get-info :all-statistics)
(push) ; 1418
; [then-branch 2983] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2984] 4 == 2
(push) ; 1419
; [else-branch 2984] 4 != 2
(pop) ; 1419
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1419
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1419
; 0,00s
; (get-info :all-statistics)
(push) ; 1419
; [then-branch 2985] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2986] 4 == 2
(push) ; 1420
; [else-branch 2986] 4 != 2
(pop) ; 1420
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1420
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1420
; 0,00s
; (get-info :all-statistics)
(push) ; 1420
; [then-branch 2987] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2988] 4 == 2
(push) ; 1421
; [else-branch 2988] 4 != 2
(pop) ; 1421
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1421
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1421
; 0,00s
; (get-info :all-statistics)
(push) ; 1421
; [then-branch 2989] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2990] 4 == 2
(push) ; 1422
; [else-branch 2990] 4 != 2
(pop) ; 1422
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1422
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1422
; 0,00s
; (get-info :all-statistics)
(push) ; 1422
; [then-branch 2991] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2992] 4 == 2
(push) ; 1423
; [else-branch 2992] 4 != 2
(pop) ; 1423
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1423
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1423
; 0,00s
; (get-info :all-statistics)
(push) ; 1423
; [then-branch 2993] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2994] 4 == 2
(push) ; 1424
; [else-branch 2994] 4 != 2
(pop) ; 1424
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1424
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1424
; 0,00s
; (get-info :all-statistics)
(push) ; 1424
; [then-branch 2995] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2996] 4 == 2
(push) ; 1425
; [else-branch 2996] 4 != 2
(pop) ; 1425
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1425
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1425
; 0,00s
; (get-info :all-statistics)
(push) ; 1425
; [then-branch 2997] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 2998] 4 == 2
(push) ; 1426
; [else-branch 2998] 4 != 2
(pop) ; 1426
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1426
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1426
; 0,00s
; (get-info :all-statistics)
(push) ; 1426
; [then-branch 2999] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3000] 4 == 2
(push) ; 1427
; [else-branch 3000] 4 != 2
(pop) ; 1427
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1427
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1427
; 0,00s
; (get-info :all-statistics)
(push) ; 1427
; [then-branch 3001] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3002] 4 == 2
(push) ; 1428
; [else-branch 3002] 4 != 2
(pop) ; 1428
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1428
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1428
; 0,00s
; (get-info :all-statistics)
(push) ; 1428
; [then-branch 3003] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3004] 4 == 2
(push) ; 1429
; [else-branch 3004] 4 != 2
(pop) ; 1429
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1429
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1429
; 0,00s
; (get-info :all-statistics)
(push) ; 1429
; [then-branch 3005] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3006] 4 == 2
(push) ; 1430
; [else-branch 3006] 4 != 2
(pop) ; 1430
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1430
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1430
; 0,00s
; (get-info :all-statistics)
(push) ; 1430
; [then-branch 3007] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3008] 4 == 2
(push) ; 1431
; [else-branch 3008] 4 != 2
(pop) ; 1431
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1431
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1431
; 0,00s
; (get-info :all-statistics)
(push) ; 1431
; [then-branch 3009] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3010] 4 == 2
(push) ; 1432
; [else-branch 3010] 4 != 2
(pop) ; 1432
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1432
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1432
; 0,00s
; (get-info :all-statistics)
(push) ; 1432
; [then-branch 3011] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3012] 4 == 2
(push) ; 1433
; [else-branch 3012] 4 != 2
(pop) ; 1433
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1433
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1433
; 0,00s
; (get-info :all-statistics)
(push) ; 1433
; [then-branch 3013] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3014] 4 == 2
(push) ; 1434
; [else-branch 3014] 4 != 2
(pop) ; 1434
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1434
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1434
; 0,00s
; (get-info :all-statistics)
(push) ; 1434
; [then-branch 3015] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3016] 4 == 2
(push) ; 1435
; [else-branch 3016] 4 != 2
(pop) ; 1435
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1435
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1435
; 0,00s
; (get-info :all-statistics)
(push) ; 1435
; [then-branch 3017] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3018] 4 == 2
(push) ; 1436
; [else-branch 3018] 4 != 2
(pop) ; 1436
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1436
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1436
; 0,00s
; (get-info :all-statistics)
(push) ; 1436
; [then-branch 3019] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3020] 4 == 2
(push) ; 1437
; [else-branch 3020] 4 != 2
(pop) ; 1437
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1437
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1437
; 0,00s
; (get-info :all-statistics)
(push) ; 1437
; [then-branch 3021] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3022] 4 == 2
(push) ; 1438
; [else-branch 3022] 4 != 2
(pop) ; 1438
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1438
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1438
; 0,00s
; (get-info :all-statistics)
(push) ; 1438
; [then-branch 3023] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3024] 4 == 2
(push) ; 1439
; [else-branch 3024] 4 != 2
(pop) ; 1439
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1439
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1439
; 0,00s
; (get-info :all-statistics)
(push) ; 1439
; [then-branch 3025] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3026] 4 == 2
(push) ; 1440
; [else-branch 3026] 4 != 2
(pop) ; 1440
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1440
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1440
; 0,00s
; (get-info :all-statistics)
(push) ; 1440
; [then-branch 3027] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3028] 4 == 2
(push) ; 1441
; [else-branch 3028] 4 != 2
(pop) ; 1441
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1441
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1441
; 0,00s
; (get-info :all-statistics)
(push) ; 1441
; [then-branch 3029] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3030] 4 == 2
(push) ; 1442
; [else-branch 3030] 4 != 2
(pop) ; 1442
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1442
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1442
; 0,00s
; (get-info :all-statistics)
(push) ; 1442
; [then-branch 3031] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3032] 4 == 2
(push) ; 1443
; [else-branch 3032] 4 != 2
(pop) ; 1443
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1443
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1443
; 0,00s
; (get-info :all-statistics)
(push) ; 1443
; [then-branch 3033] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3034] 4 == 2
(push) ; 1444
; [else-branch 3034] 4 != 2
(pop) ; 1444
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1444
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1444
; 0,00s
; (get-info :all-statistics)
(push) ; 1444
; [then-branch 3035] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3036] 4 == 2
(push) ; 1445
; [else-branch 3036] 4 != 2
(pop) ; 1445
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1445
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1445
; 0,00s
; (get-info :all-statistics)
(push) ; 1445
; [then-branch 3037] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3038] 4 == 2
(push) ; 1446
; [else-branch 3038] 4 != 2
(pop) ; 1446
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1446
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1446
; 0,00s
; (get-info :all-statistics)
(push) ; 1446
; [then-branch 3039] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3040] 4 == 2
(push) ; 1447
; [else-branch 3040] 4 != 2
(pop) ; 1447
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1447
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1447
; 0,00s
; (get-info :all-statistics)
(push) ; 1447
; [then-branch 3041] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3042] 4 == 2
(push) ; 1448
; [else-branch 3042] 4 != 2
(pop) ; 1448
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1448
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1448
; 0,00s
; (get-info :all-statistics)
(push) ; 1448
; [then-branch 3043] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3044] 4 == 2
(push) ; 1449
; [else-branch 3044] 4 != 2
(pop) ; 1449
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1449
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1449
; 0,00s
; (get-info :all-statistics)
(push) ; 1449
; [then-branch 3045] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3046] 4 == 2
(push) ; 1450
; [else-branch 3046] 4 != 2
(pop) ; 1450
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1450
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1450
; 0,00s
; (get-info :all-statistics)
(push) ; 1450
; [then-branch 3047] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3048] 4 == 2
(push) ; 1451
; [else-branch 3048] 4 != 2
(pop) ; 1451
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1451
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1451
; 0,00s
; (get-info :all-statistics)
(push) ; 1451
; [then-branch 3049] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3050] 4 == 2
(push) ; 1452
; [else-branch 3050] 4 != 2
(pop) ; 1452
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1452
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1452
; 0,00s
; (get-info :all-statistics)
(push) ; 1452
; [then-branch 3051] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3052] 4 == 2
(push) ; 1453
; [else-branch 3052] 4 != 2
(pop) ; 1453
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1453
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1453
; 0,00s
; (get-info :all-statistics)
(push) ; 1453
; [then-branch 3053] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3054] 4 == 2
(push) ; 1454
; [else-branch 3054] 4 != 2
(pop) ; 1454
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1454
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1454
; 0,00s
; (get-info :all-statistics)
(push) ; 1454
; [then-branch 3055] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3056] 4 == 2
(push) ; 1455
; [else-branch 3056] 4 != 2
(pop) ; 1455
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1455
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1455
; 0,00s
; (get-info :all-statistics)
(push) ; 1455
; [then-branch 3057] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3058] 4 == 2
(push) ; 1456
; [else-branch 3058] 4 != 2
(pop) ; 1456
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1456
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1456
; 0,00s
; (get-info :all-statistics)
(push) ; 1456
; [then-branch 3059] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3060] 4 == 2
(push) ; 1457
; [else-branch 3060] 4 != 2
(pop) ; 1457
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1457
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1457
; 0,00s
; (get-info :all-statistics)
(push) ; 1457
; [then-branch 3061] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3062] 4 == 2
(push) ; 1458
; [else-branch 3062] 4 != 2
(pop) ; 1458
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1458
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1458
; 0,00s
; (get-info :all-statistics)
(push) ; 1458
; [then-branch 3063] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3064] 4 == 2
(push) ; 1459
; [else-branch 3064] 4 != 2
(pop) ; 1459
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1459
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1459
; 0,00s
; (get-info :all-statistics)
(push) ; 1459
; [then-branch 3065] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3066] 4 == 2
(push) ; 1460
; [else-branch 3066] 4 != 2
(pop) ; 1460
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1460
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1460
; 0,00s
; (get-info :all-statistics)
(push) ; 1460
; [then-branch 3067] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3068] 4 == 2
(push) ; 1461
; [else-branch 3068] 4 != 2
(pop) ; 1461
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1461
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1461
; 0,00s
; (get-info :all-statistics)
(push) ; 1461
; [then-branch 3069] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3070] 4 == 2
(push) ; 1462
; [else-branch 3070] 4 != 2
(pop) ; 1462
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1462
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1462
; 0,00s
; (get-info :all-statistics)
(push) ; 1462
; [then-branch 3071] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3072] 4 == 2
(push) ; 1463
; [else-branch 3072] 4 != 2
(pop) ; 1463
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1463
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1463
; 0,00s
; (get-info :all-statistics)
(push) ; 1463
; [then-branch 3073] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3074] 4 == 2
(push) ; 1464
; [else-branch 3074] 4 != 2
(pop) ; 1464
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1464
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1464
; 0,00s
; (get-info :all-statistics)
(push) ; 1464
; [then-branch 3075] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3076] 4 == 2
(push) ; 1465
; [else-branch 3076] 4 != 2
(pop) ; 1465
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1465
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1465
; 0,00s
; (get-info :all-statistics)
(push) ; 1465
; [then-branch 3077] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3078] 4 == 2
(push) ; 1466
; [else-branch 3078] 4 != 2
(pop) ; 1466
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1466
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1466
; 0,00s
; (get-info :all-statistics)
(push) ; 1466
; [then-branch 3079] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3080] 4 == 2
(push) ; 1467
; [else-branch 3080] 4 != 2
(pop) ; 1467
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1467
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1467
; 0,00s
; (get-info :all-statistics)
(push) ; 1467
; [then-branch 3081] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3082] 4 == 2
(push) ; 1468
; [else-branch 3082] 4 != 2
(pop) ; 1468
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1468
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1468
; 0,00s
; (get-info :all-statistics)
(push) ; 1468
; [then-branch 3083] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3084] 4 == 2
(push) ; 1469
; [else-branch 3084] 4 != 2
(pop) ; 1469
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1469
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1469
; 0,00s
; (get-info :all-statistics)
(push) ; 1469
; [then-branch 3085] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3086] 4 == 2
(push) ; 1470
; [else-branch 3086] 4 != 2
(pop) ; 1470
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1470
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1470
; 0,00s
; (get-info :all-statistics)
(push) ; 1470
; [then-branch 3087] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3088] 4 == 2
(push) ; 1471
; [else-branch 3088] 4 != 2
(pop) ; 1471
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1471
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1471
; 0,00s
; (get-info :all-statistics)
(push) ; 1471
; [then-branch 3089] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3090] 4 == 2
(push) ; 1472
; [else-branch 3090] 4 != 2
(pop) ; 1472
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1472
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1472
; 0,00s
; (get-info :all-statistics)
(push) ; 1472
; [then-branch 3091] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3092] 4 == 2
(push) ; 1473
; [else-branch 3092] 4 != 2
(pop) ; 1473
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1473
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1473
; 0,00s
; (get-info :all-statistics)
(push) ; 1473
; [then-branch 3093] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3094] 4 == 2
(push) ; 1474
; [else-branch 3094] 4 != 2
(pop) ; 1474
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1474
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1474
; 0,00s
; (get-info :all-statistics)
(push) ; 1474
; [then-branch 3095] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3096] 4 == 2
(push) ; 1475
; [else-branch 3096] 4 != 2
(pop) ; 1475
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1475
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1475
; 0,00s
; (get-info :all-statistics)
(push) ; 1475
; [then-branch 3097] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3098] 4 == 2
(push) ; 1476
; [else-branch 3098] 4 != 2
(pop) ; 1476
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1476
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1476
; 0,00s
; (get-info :all-statistics)
(push) ; 1476
; [then-branch 3099] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3100] 4 == 2
(push) ; 1477
; [else-branch 3100] 4 != 2
(pop) ; 1477
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1477
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1477
; 0,00s
; (get-info :all-statistics)
(push) ; 1477
; [then-branch 3101] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3102] 4 == 2
(push) ; 1478
; [else-branch 3102] 4 != 2
(pop) ; 1478
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1478
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1478
; 0,00s
; (get-info :all-statistics)
(push) ; 1478
; [then-branch 3103] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3104] 4 == 2
(push) ; 1479
; [else-branch 3104] 4 != 2
(pop) ; 1479
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1479
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1479
; 0,00s
; (get-info :all-statistics)
(push) ; 1479
; [then-branch 3105] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3106] 4 == 2
(push) ; 1480
; [else-branch 3106] 4 != 2
(pop) ; 1480
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1480
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1480
; 0,00s
; (get-info :all-statistics)
(push) ; 1480
; [then-branch 3107] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3108] 4 == 2
(push) ; 1481
; [else-branch 3108] 4 != 2
(pop) ; 1481
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1481
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1481
; 0,00s
; (get-info :all-statistics)
(push) ; 1481
; [then-branch 3109] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3110] 4 == 2
(push) ; 1482
; [else-branch 3110] 4 != 2
(pop) ; 1482
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1482
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1482
; 0,00s
; (get-info :all-statistics)
(push) ; 1482
; [then-branch 3111] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3112] 4 == 2
(push) ; 1483
; [else-branch 3112] 4 != 2
(pop) ; 1483
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1483
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1483
; 0,00s
; (get-info :all-statistics)
(push) ; 1483
; [then-branch 3113] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3114] 4 == 2
(push) ; 1484
; [else-branch 3114] 4 != 2
(pop) ; 1484
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1484
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1484
; 0,00s
; (get-info :all-statistics)
(push) ; 1484
; [then-branch 3115] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3116] 4 == 2
(push) ; 1485
; [else-branch 3116] 4 != 2
(pop) ; 1485
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1485
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1485
; 0,00s
; (get-info :all-statistics)
(push) ; 1485
; [then-branch 3117] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3118] 4 == 2
(push) ; 1486
; [else-branch 3118] 4 != 2
(pop) ; 1486
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1486
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1486
; 0,00s
; (get-info :all-statistics)
(push) ; 1486
; [then-branch 3119] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3120] 4 == 2
(push) ; 1487
; [else-branch 3120] 4 != 2
(pop) ; 1487
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1487
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1487
; 0,00s
; (get-info :all-statistics)
(push) ; 1487
; [then-branch 3121] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3122] 4 == 2
(push) ; 1488
; [else-branch 3122] 4 != 2
(pop) ; 1488
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1488
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1488
; 0,00s
; (get-info :all-statistics)
(push) ; 1488
; [then-branch 3123] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3124] 4 == 2
(push) ; 1489
; [else-branch 3124] 4 != 2
(pop) ; 1489
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1489
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1489
; 0,00s
; (get-info :all-statistics)
(push) ; 1489
; [then-branch 3125] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3126] 4 == 2
(push) ; 1490
; [else-branch 3126] 4 != 2
(pop) ; 1490
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1490
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1490
; 0,00s
; (get-info :all-statistics)
(push) ; 1490
; [then-branch 3127] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3128] 4 == 2
(push) ; 1491
; [else-branch 3128] 4 != 2
(pop) ; 1491
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1491
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1491
; 0,00s
; (get-info :all-statistics)
(push) ; 1491
; [then-branch 3129] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3130] 4 == 2
(push) ; 1492
; [else-branch 3130] 4 != 2
(pop) ; 1492
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1492
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1492
; 0,00s
; (get-info :all-statistics)
(push) ; 1492
; [then-branch 3131] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3132] 4 == 2
(push) ; 1493
; [else-branch 3132] 4 != 2
(pop) ; 1493
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1493
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1493
; 0,00s
; (get-info :all-statistics)
(push) ; 1493
; [then-branch 3133] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3134] 4 == 2
(push) ; 1494
; [else-branch 3134] 4 != 2
(pop) ; 1494
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1494
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1494
; 0,00s
; (get-info :all-statistics)
(push) ; 1494
; [then-branch 3135] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3136] 4 == 2
(push) ; 1495
; [else-branch 3136] 4 != 2
(pop) ; 1495
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1495
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1495
; 0,00s
; (get-info :all-statistics)
(push) ; 1495
; [then-branch 3137] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3138] 4 == 2
(push) ; 1496
; [else-branch 3138] 4 != 2
(pop) ; 1496
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1496
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1496
; 0,00s
; (get-info :all-statistics)
(push) ; 1496
; [then-branch 3139] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3140] 4 == 2
(push) ; 1497
; [else-branch 3140] 4 != 2
(pop) ; 1497
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1497
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1497
; 0,00s
; (get-info :all-statistics)
(push) ; 1497
; [then-branch 3141] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3142] 4 == 2
(push) ; 1498
; [else-branch 3142] 4 != 2
(pop) ; 1498
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1498
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1498
; 0,00s
; (get-info :all-statistics)
(push) ; 1498
; [then-branch 3143] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3144] 4 == 2
(push) ; 1499
; [else-branch 3144] 4 != 2
(pop) ; 1499
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1499
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1499
; 0,00s
; (get-info :all-statistics)
(push) ; 1499
; [then-branch 3145] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3146] 4 == 2
(push) ; 1500
; [else-branch 3146] 4 != 2
(pop) ; 1500
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1500
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1500
; 0,00s
; (get-info :all-statistics)
(push) ; 1500
; [then-branch 3147] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3148] 4 == 2
(push) ; 1501
; [else-branch 3148] 4 != 2
(pop) ; 1501
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1501
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1501
; 0,00s
; (get-info :all-statistics)
(push) ; 1501
; [then-branch 3149] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3150] 4 == 2
(push) ; 1502
; [else-branch 3150] 4 != 2
(pop) ; 1502
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1502
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1502
; 0,00s
; (get-info :all-statistics)
(push) ; 1502
; [then-branch 3151] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3152] 4 == 2
(push) ; 1503
; [else-branch 3152] 4 != 2
(pop) ; 1503
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1503
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1503
; 0,00s
; (get-info :all-statistics)
(push) ; 1503
; [then-branch 3153] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3154] 4 == 2
(push) ; 1504
; [else-branch 3154] 4 != 2
(pop) ; 1504
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1504
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1504
; 0,00s
; (get-info :all-statistics)
(push) ; 1504
; [then-branch 3155] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3156] 4 == 2
(push) ; 1505
; [else-branch 3156] 4 != 2
(pop) ; 1505
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1505
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1505
; 0,00s
; (get-info :all-statistics)
(push) ; 1505
; [then-branch 3157] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3158] 4 == 2
(push) ; 1506
; [else-branch 3158] 4 != 2
(pop) ; 1506
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1506
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1506
; 0,00s
; (get-info :all-statistics)
(push) ; 1506
; [then-branch 3159] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3160] 4 == 2
(push) ; 1507
; [else-branch 3160] 4 != 2
(pop) ; 1507
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1507
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1507
; 0,00s
; (get-info :all-statistics)
(push) ; 1507
; [then-branch 3161] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3162] 4 == 2
(push) ; 1508
; [else-branch 3162] 4 != 2
(pop) ; 1508
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1508
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1508
; 0,00s
; (get-info :all-statistics)
(push) ; 1508
; [then-branch 3163] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3164] 4 == 2
(push) ; 1509
; [else-branch 3164] 4 != 2
(pop) ; 1509
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1509
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1509
; 0,00s
; (get-info :all-statistics)
(push) ; 1509
; [then-branch 3165] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3166] 4 == 2
(push) ; 1510
; [else-branch 3166] 4 != 2
(pop) ; 1510
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1510
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1510
; 0,00s
; (get-info :all-statistics)
(push) ; 1510
; [then-branch 3167] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3168] 4 == 2
(push) ; 1511
; [else-branch 3168] 4 != 2
(pop) ; 1511
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1511
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1511
; 0,00s
; (get-info :all-statistics)
(push) ; 1511
; [then-branch 3169] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3170] 4 == 2
(push) ; 1512
; [else-branch 3170] 4 != 2
(pop) ; 1512
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1512
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1512
; 0,00s
; (get-info :all-statistics)
(push) ; 1512
; [then-branch 3171] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3172] 4 == 2
(push) ; 1513
; [else-branch 3172] 4 != 2
(pop) ; 1513
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1513
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1513
; 0,00s
; (get-info :all-statistics)
(push) ; 1513
; [then-branch 3173] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3174] 4 == 2
(push) ; 1514
; [else-branch 3174] 4 != 2
(pop) ; 1514
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1514
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1514
; 0,00s
; (get-info :all-statistics)
(push) ; 1514
; [then-branch 3175] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3176] 4 == 2
(push) ; 1515
; [else-branch 3176] 4 != 2
(pop) ; 1515
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1515
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1515
; 0,00s
; (get-info :all-statistics)
(push) ; 1515
; [then-branch 3177] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3178] 4 == 2
(push) ; 1516
; [else-branch 3178] 4 != 2
(pop) ; 1516
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1516
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1516
; 0,00s
; (get-info :all-statistics)
(push) ; 1516
; [then-branch 3179] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3180] 4 == 2
(push) ; 1517
; [else-branch 3180] 4 != 2
(pop) ; 1517
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1517
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1517
; 0,00s
; (get-info :all-statistics)
(push) ; 1517
; [then-branch 3181] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3182] 4 == 2
(push) ; 1518
; [else-branch 3182] 4 != 2
(pop) ; 1518
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1518
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1518
; 0,00s
; (get-info :all-statistics)
(push) ; 1518
; [then-branch 3183] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3184] 4 == 2
(push) ; 1519
; [else-branch 3184] 4 != 2
(pop) ; 1519
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1519
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1519
; 0,00s
; (get-info :all-statistics)
(push) ; 1519
; [then-branch 3185] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3186] 4 == 2
(push) ; 1520
; [else-branch 3186] 4 != 2
(pop) ; 1520
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1520
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1520
; 0,00s
; (get-info :all-statistics)
(push) ; 1520
; [then-branch 3187] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3188] 4 == 2
(push) ; 1521
; [else-branch 3188] 4 != 2
(pop) ; 1521
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1521
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1521
; 0,00s
; (get-info :all-statistics)
(push) ; 1521
; [then-branch 3189] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3190] 4 == 2
(push) ; 1522
; [else-branch 3190] 4 != 2
(pop) ; 1522
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1522
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1522
; 0,00s
; (get-info :all-statistics)
(push) ; 1522
; [then-branch 3191] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3192] 4 == 2
(push) ; 1523
; [else-branch 3192] 4 != 2
(pop) ; 1523
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1523
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1523
; 0,00s
; (get-info :all-statistics)
(push) ; 1523
; [then-branch 3193] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3194] 4 == 2
(push) ; 1524
; [else-branch 3194] 4 != 2
(pop) ; 1524
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1524
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1524
; 0,00s
; (get-info :all-statistics)
(push) ; 1524
; [then-branch 3195] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3196] 4 == 2
(push) ; 1525
; [else-branch 3196] 4 != 2
(pop) ; 1525
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1525
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1525
; 0,00s
; (get-info :all-statistics)
(push) ; 1525
; [then-branch 3197] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3198] 4 == 2
(push) ; 1526
; [else-branch 3198] 4 != 2
(pop) ; 1526
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1526
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1526
; 0,00s
; (get-info :all-statistics)
(push) ; 1526
; [then-branch 3199] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3200] 4 == 2
(push) ; 1527
; [else-branch 3200] 4 != 2
(pop) ; 1527
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1527
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1527
; 0,00s
; (get-info :all-statistics)
(push) ; 1527
; [then-branch 3201] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3202] 4 == 2
(push) ; 1528
; [else-branch 3202] 4 != 2
(pop) ; 1528
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1528
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1528
; 0,00s
; (get-info :all-statistics)
(push) ; 1528
; [then-branch 3203] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3204] 4 == 2
(push) ; 1529
; [else-branch 3204] 4 != 2
(pop) ; 1529
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1529
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1529
; 0,00s
; (get-info :all-statistics)
(push) ; 1529
; [then-branch 3205] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3206] 4 == 2
(push) ; 1530
; [else-branch 3206] 4 != 2
(pop) ; 1530
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1530
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1530
; 0,00s
; (get-info :all-statistics)
(push) ; 1530
; [then-branch 3207] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3208] 4 == 2
(push) ; 1531
; [else-branch 3208] 4 != 2
(pop) ; 1531
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1531
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1531
; 0,00s
; (get-info :all-statistics)
(push) ; 1531
; [then-branch 3209] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3210] 4 == 2
(push) ; 1532
; [else-branch 3210] 4 != 2
(pop) ; 1532
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1532
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1532
; 0,00s
; (get-info :all-statistics)
(push) ; 1532
; [then-branch 3211] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3212] 4 == 2
(push) ; 1533
; [else-branch 3212] 4 != 2
(pop) ; 1533
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1533
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1533
; 0,00s
; (get-info :all-statistics)
(push) ; 1533
; [then-branch 3213] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3214] 4 == 2
(push) ; 1534
; [else-branch 3214] 4 != 2
(pop) ; 1534
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1534
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1534
; 0,00s
; (get-info :all-statistics)
(push) ; 1534
; [then-branch 3215] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3216] 4 == 2
(push) ; 1535
; [else-branch 3216] 4 != 2
(pop) ; 1535
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1535
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1535
; 0,00s
; (get-info :all-statistics)
(push) ; 1535
; [then-branch 3217] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3218] 4 == 2
(push) ; 1536
; [else-branch 3218] 4 != 2
(pop) ; 1536
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1536
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1536
; 0,00s
; (get-info :all-statistics)
(push) ; 1536
; [then-branch 3219] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3220] 4 == 2
(push) ; 1537
; [else-branch 3220] 4 != 2
(pop) ; 1537
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1537
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1537
; 0,00s
; (get-info :all-statistics)
(push) ; 1537
; [then-branch 3221] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3222] 4 == 2
(push) ; 1538
; [else-branch 3222] 4 != 2
(pop) ; 1538
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1538
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1538
; 0,00s
; (get-info :all-statistics)
(push) ; 1538
; [then-branch 3223] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3224] 4 == 2
(push) ; 1539
; [else-branch 3224] 4 != 2
(pop) ; 1539
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1539
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1539
; 0,00s
; (get-info :all-statistics)
(push) ; 1539
; [then-branch 3225] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3226] 4 == 2
(push) ; 1540
; [else-branch 3226] 4 != 2
(pop) ; 1540
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1540
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1540
; 0,00s
; (get-info :all-statistics)
(push) ; 1540
; [then-branch 3227] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3228] 4 == 2
(push) ; 1541
; [else-branch 3228] 4 != 2
(pop) ; 1541
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1541
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1541
; 0,00s
; (get-info :all-statistics)
(push) ; 1541
; [then-branch 3229] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3230] 4 == 2
(push) ; 1542
; [else-branch 3230] 4 != 2
(pop) ; 1542
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1542
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1542
; 0,00s
; (get-info :all-statistics)
(push) ; 1542
; [then-branch 3231] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3232] 4 == 2
(push) ; 1543
; [else-branch 3232] 4 != 2
(pop) ; 1543
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1543
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1543
; 0,00s
; (get-info :all-statistics)
(push) ; 1543
; [then-branch 3233] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3234] 4 == 2
(push) ; 1544
; [else-branch 3234] 4 != 2
(pop) ; 1544
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1544
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1544
; 0,00s
; (get-info :all-statistics)
(push) ; 1544
; [then-branch 3235] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3236] 4 == 2
(push) ; 1545
; [else-branch 3236] 4 != 2
(pop) ; 1545
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1545
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1545
; 0,00s
; (get-info :all-statistics)
(push) ; 1545
; [then-branch 3237] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3238] 4 == 2
(push) ; 1546
; [else-branch 3238] 4 != 2
(pop) ; 1546
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1546
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1546
; 0,00s
; (get-info :all-statistics)
(push) ; 1546
; [then-branch 3239] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3240] 4 == 2
(push) ; 1547
; [else-branch 3240] 4 != 2
(pop) ; 1547
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1547
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1547
; 0,00s
; (get-info :all-statistics)
(push) ; 1547
; [then-branch 3241] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3242] 4 == 2
(push) ; 1548
; [else-branch 3242] 4 != 2
(pop) ; 1548
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1548
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1548
; 0,00s
; (get-info :all-statistics)
(push) ; 1548
; [then-branch 3243] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3244] 4 == 2
(push) ; 1549
; [else-branch 3244] 4 != 2
(pop) ; 1549
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1549
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1549
; 0,00s
; (get-info :all-statistics)
(push) ; 1549
; [then-branch 3245] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3246] 4 == 2
(push) ; 1550
; [else-branch 3246] 4 != 2
(pop) ; 1550
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1550
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1550
; 0,00s
; (get-info :all-statistics)
(push) ; 1550
; [then-branch 3247] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3248] 4 == 2
(push) ; 1551
; [else-branch 3248] 4 != 2
(pop) ; 1551
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1551
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1551
; 0,00s
; (get-info :all-statistics)
(push) ; 1551
; [then-branch 3249] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3250] 4 == 2
(push) ; 1552
; [else-branch 3250] 4 != 2
(pop) ; 1552
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1552
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1552
; 0,00s
; (get-info :all-statistics)
(push) ; 1552
; [then-branch 3251] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3252] 4 == 2
(push) ; 1553
; [else-branch 3252] 4 != 2
(pop) ; 1553
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1553
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1553
; 0,00s
; (get-info :all-statistics)
(push) ; 1553
; [then-branch 3253] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3254] 4 == 2
(push) ; 1554
; [else-branch 3254] 4 != 2
(pop) ; 1554
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1554
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1554
; 0,00s
; (get-info :all-statistics)
(push) ; 1554
; [then-branch 3255] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3256] 4 == 2
(push) ; 1555
; [else-branch 3256] 4 != 2
(pop) ; 1555
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1555
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1555
; 0,00s
; (get-info :all-statistics)
(push) ; 1555
; [then-branch 3257] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3258] 4 == 2
(push) ; 1556
; [else-branch 3258] 4 != 2
(pop) ; 1556
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1556
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1556
; 0,00s
; (get-info :all-statistics)
(push) ; 1556
; [then-branch 3259] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3260] 4 == 2
(push) ; 1557
; [else-branch 3260] 4 != 2
(pop) ; 1557
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1557
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1557
; 0,00s
; (get-info :all-statistics)
(push) ; 1557
; [then-branch 3261] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3262] 4 == 2
(push) ; 1558
; [else-branch 3262] 4 != 2
(pop) ; 1558
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1558
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1558
; 0,00s
; (get-info :all-statistics)
(push) ; 1558
; [then-branch 3263] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3264] 4 == 2
(push) ; 1559
; [else-branch 3264] 4 != 2
(pop) ; 1559
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1559
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1559
; 0,00s
; (get-info :all-statistics)
(push) ; 1559
; [then-branch 3265] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3266] 4 == 2
(push) ; 1560
; [else-branch 3266] 4 != 2
(pop) ; 1560
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1560
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1560
; 0,00s
; (get-info :all-statistics)
(push) ; 1560
; [then-branch 3267] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3268] 4 == 2
(push) ; 1561
; [else-branch 3268] 4 != 2
(pop) ; 1561
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1561
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1561
; 0,00s
; (get-info :all-statistics)
(push) ; 1561
; [then-branch 3269] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3270] 4 == 2
(push) ; 1562
; [else-branch 3270] 4 != 2
(pop) ; 1562
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1562
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1562
; 0,00s
; (get-info :all-statistics)
(push) ; 1562
; [then-branch 3271] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3272] 4 == 2
(push) ; 1563
; [else-branch 3272] 4 != 2
(pop) ; 1563
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1563
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1563
; 0,00s
; (get-info :all-statistics)
(push) ; 1563
; [then-branch 3273] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3274] 4 == 2
(push) ; 1564
; [else-branch 3274] 4 != 2
(pop) ; 1564
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1564
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1564
; 0,00s
; (get-info :all-statistics)
(push) ; 1564
; [then-branch 3275] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3276] 4 == 2
(push) ; 1565
; [else-branch 3276] 4 != 2
(pop) ; 1565
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1565
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1565
; 0,00s
; (get-info :all-statistics)
(push) ; 1565
; [then-branch 3277] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3278] 4 == 2
(push) ; 1566
; [else-branch 3278] 4 != 2
(pop) ; 1566
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1566
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1566
; 0,00s
; (get-info :all-statistics)
(push) ; 1566
; [then-branch 3279] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3280] 4 == 2
(push) ; 1567
; [else-branch 3280] 4 != 2
(pop) ; 1567
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1567
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1567
; 0,00s
; (get-info :all-statistics)
(push) ; 1567
; [then-branch 3281] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3282] 4 == 2
(push) ; 1568
; [else-branch 3282] 4 != 2
(pop) ; 1568
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1568
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1568
; 0,00s
; (get-info :all-statistics)
(push) ; 1568
; [then-branch 3283] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3284] 4 == 2
(push) ; 1569
; [else-branch 3284] 4 != 2
(pop) ; 1569
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1569
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1569
; 0,00s
; (get-info :all-statistics)
(push) ; 1569
; [then-branch 3285] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3286] 4 == 2
(push) ; 1570
; [else-branch 3286] 4 != 2
(pop) ; 1570
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1570
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1570
; 0,00s
; (get-info :all-statistics)
(push) ; 1570
; [then-branch 3287] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3288] 4 == 2
(push) ; 1571
; [else-branch 3288] 4 != 2
(pop) ; 1571
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1571
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1571
; 0,00s
; (get-info :all-statistics)
(push) ; 1571
; [then-branch 3289] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3290] 4 == 2
(push) ; 1572
; [else-branch 3290] 4 != 2
(pop) ; 1572
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1572
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1572
; 0,00s
; (get-info :all-statistics)
(push) ; 1572
; [then-branch 3291] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3292] 4 == 2
(push) ; 1573
; [else-branch 3292] 4 != 2
(pop) ; 1573
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1573
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1573
; 0,00s
; (get-info :all-statistics)
(push) ; 1573
; [then-branch 3293] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3294] 4 == 2
(push) ; 1574
; [else-branch 3294] 4 != 2
(pop) ; 1574
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1574
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1574
; 0,00s
; (get-info :all-statistics)
(push) ; 1574
; [then-branch 3295] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3296] 4 == 2
(push) ; 1575
; [else-branch 3296] 4 != 2
(pop) ; 1575
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1575
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1575
; 0,00s
; (get-info :all-statistics)
(push) ; 1575
; [then-branch 3297] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3298] 4 == 2
(push) ; 1576
; [else-branch 3298] 4 != 2
(pop) ; 1576
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1576
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1576
; 0,00s
; (get-info :all-statistics)
(push) ; 1576
; [then-branch 3299] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3300] 4 == 2
(push) ; 1577
; [else-branch 3300] 4 != 2
(pop) ; 1577
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1577
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1577
; 0,00s
; (get-info :all-statistics)
(push) ; 1577
; [then-branch 3301] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3302] 4 == 2
(push) ; 1578
; [else-branch 3302] 4 != 2
(pop) ; 1578
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1578
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1578
; 0,00s
; (get-info :all-statistics)
(push) ; 1578
; [then-branch 3303] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3304] 4 == 2
(push) ; 1579
; [else-branch 3304] 4 != 2
(pop) ; 1579
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1579
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1579
; 0,00s
; (get-info :all-statistics)
(push) ; 1579
; [then-branch 3305] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3306] 4 == 2
(push) ; 1580
; [else-branch 3306] 4 != 2
(pop) ; 1580
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1580
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1580
; 0,00s
; (get-info :all-statistics)
(push) ; 1580
; [then-branch 3307] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3308] 4 == 2
(push) ; 1581
; [else-branch 3308] 4 != 2
(pop) ; 1581
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1581
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1581
; 0,00s
; (get-info :all-statistics)
(push) ; 1581
; [then-branch 3309] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3310] 4 == 2
(push) ; 1582
; [else-branch 3310] 4 != 2
(pop) ; 1582
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1582
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1582
; 0,00s
; (get-info :all-statistics)
(push) ; 1582
; [then-branch 3311] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3312] 4 == 2
(push) ; 1583
; [else-branch 3312] 4 != 2
(pop) ; 1583
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1583
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1583
; 0,00s
; (get-info :all-statistics)
(push) ; 1583
; [then-branch 3313] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3314] 4 == 2
(push) ; 1584
; [else-branch 3314] 4 != 2
(pop) ; 1584
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1584
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1584
; 0,00s
; (get-info :all-statistics)
(push) ; 1584
; [then-branch 3315] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3316] 4 == 2
(push) ; 1585
; [else-branch 3316] 4 != 2
(pop) ; 1585
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1585
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1585
; 0,00s
; (get-info :all-statistics)
(push) ; 1585
; [then-branch 3317] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3318] 4 == 2
(push) ; 1586
; [else-branch 3318] 4 != 2
(pop) ; 1586
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1586
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1586
; 0,00s
; (get-info :all-statistics)
(push) ; 1586
; [then-branch 3319] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3320] 4 == 2
(push) ; 1587
; [else-branch 3320] 4 != 2
(pop) ; 1587
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1587
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1587
; 0,00s
; (get-info :all-statistics)
(push) ; 1587
; [then-branch 3321] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3322] 4 == 2
(push) ; 1588
; [else-branch 3322] 4 != 2
(pop) ; 1588
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1588
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1588
; 0,00s
; (get-info :all-statistics)
(push) ; 1588
; [then-branch 3323] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3324] 4 == 2
(push) ; 1589
; [else-branch 3324] 4 != 2
(pop) ; 1589
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1589
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1589
; 0,00s
; (get-info :all-statistics)
(push) ; 1589
; [then-branch 3325] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3326] 4 == 2
(push) ; 1590
; [else-branch 3326] 4 != 2
(pop) ; 1590
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1590
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1590
; 0,00s
; (get-info :all-statistics)
(push) ; 1590
; [then-branch 3327] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3328] 4 == 2
(push) ; 1591
; [else-branch 3328] 4 != 2
(pop) ; 1591
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1591
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1591
; 0,00s
; (get-info :all-statistics)
(push) ; 1591
; [then-branch 3329] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3330] 4 == 2
(push) ; 1592
; [else-branch 3330] 4 != 2
(pop) ; 1592
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1592
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1592
; 0,00s
; (get-info :all-statistics)
(push) ; 1592
; [then-branch 3331] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3332] 4 == 2
(push) ; 1593
; [else-branch 3332] 4 != 2
(pop) ; 1593
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1593
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1593
; 0,00s
; (get-info :all-statistics)
(push) ; 1593
; [then-branch 3333] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3334] 4 == 2
(push) ; 1594
; [else-branch 3334] 4 != 2
(pop) ; 1594
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1594
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1594
; 0,00s
; (get-info :all-statistics)
(push) ; 1594
; [then-branch 3335] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3336] 4 == 2
(push) ; 1595
; [else-branch 3336] 4 != 2
(pop) ; 1595
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1595
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1595
; 0,00s
; (get-info :all-statistics)
(push) ; 1595
; [then-branch 3337] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3338] 4 == 2
(push) ; 1596
; [else-branch 3338] 4 != 2
(pop) ; 1596
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1596
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1596
; 0,00s
; (get-info :all-statistics)
(push) ; 1596
; [then-branch 3339] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3340] 4 == 2
(push) ; 1597
; [else-branch 3340] 4 != 2
(pop) ; 1597
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1597
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1597
; 0,00s
; (get-info :all-statistics)
(push) ; 1597
; [then-branch 3341] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3342] 4 == 2
(push) ; 1598
; [else-branch 3342] 4 != 2
(pop) ; 1598
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1598
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1598
; 0,00s
; (get-info :all-statistics)
(push) ; 1598
; [then-branch 3343] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3344] 4 == 2
(push) ; 1599
; [else-branch 3344] 4 != 2
(pop) ; 1599
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1599
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1599
; 0,00s
; (get-info :all-statistics)
(push) ; 1599
; [then-branch 3345] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3346] 4 == 2
(push) ; 1600
; [else-branch 3346] 4 != 2
(pop) ; 1600
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1600
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1600
; 0,00s
; (get-info :all-statistics)
(push) ; 1600
; [then-branch 3347] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3348] 4 == 2
(push) ; 1601
; [else-branch 3348] 4 != 2
(pop) ; 1601
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1601
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1601
; 0,00s
; (get-info :all-statistics)
(push) ; 1601
; [then-branch 3349] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3350] 4 == 2
(push) ; 1602
; [else-branch 3350] 4 != 2
(pop) ; 1602
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1602
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1602
; 0,00s
; (get-info :all-statistics)
(push) ; 1602
; [then-branch 3351] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3352] 4 == 2
(push) ; 1603
; [else-branch 3352] 4 != 2
(pop) ; 1603
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1603
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1603
; 0,00s
; (get-info :all-statistics)
(push) ; 1603
; [then-branch 3353] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3354] 4 == 2
(push) ; 1604
; [else-branch 3354] 4 != 2
(pop) ; 1604
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1604
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1604
; 0,00s
; (get-info :all-statistics)
(push) ; 1604
; [then-branch 3355] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3356] 4 == 2
(push) ; 1605
; [else-branch 3356] 4 != 2
(pop) ; 1605
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1605
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1605
; 0,00s
; (get-info :all-statistics)
(push) ; 1605
; [then-branch 3357] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3358] 4 == 2
(push) ; 1606
; [else-branch 3358] 4 != 2
(pop) ; 1606
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1606
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1606
; 0,00s
; (get-info :all-statistics)
(push) ; 1606
; [then-branch 3359] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3360] 4 == 2
(push) ; 1607
; [else-branch 3360] 4 != 2
(pop) ; 1607
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1607
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1607
; 0,00s
; (get-info :all-statistics)
(push) ; 1607
; [then-branch 3361] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3362] 4 == 2
(push) ; 1608
; [else-branch 3362] 4 != 2
(pop) ; 1608
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1608
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1608
; 0,00s
; (get-info :all-statistics)
(push) ; 1608
; [then-branch 3363] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3364] 4 == 2
(push) ; 1609
; [else-branch 3364] 4 != 2
(pop) ; 1609
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1609
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1609
; 0,00s
; (get-info :all-statistics)
(push) ; 1609
; [then-branch 3365] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3366] 4 == 2
(push) ; 1610
; [else-branch 3366] 4 != 2
(pop) ; 1610
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1610
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1610
; 0,00s
; (get-info :all-statistics)
(push) ; 1610
; [then-branch 3367] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3368] 4 == 2
(push) ; 1611
; [else-branch 3368] 4 != 2
(pop) ; 1611
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1611
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1611
; 0,00s
; (get-info :all-statistics)
(push) ; 1611
; [then-branch 3369] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3370] 4 == 2
(push) ; 1612
; [else-branch 3370] 4 != 2
(pop) ; 1612
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1612
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1612
; 0,00s
; (get-info :all-statistics)
(push) ; 1612
; [then-branch 3371] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3372] 4 == 2
(push) ; 1613
; [else-branch 3372] 4 != 2
(pop) ; 1613
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1613
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1613
; 0,00s
; (get-info :all-statistics)
(push) ; 1613
; [then-branch 3373] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3374] 4 == 2
(push) ; 1614
; [else-branch 3374] 4 != 2
(pop) ; 1614
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1614
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1614
; 0,00s
; (get-info :all-statistics)
(push) ; 1614
; [then-branch 3375] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3376] 4 == 2
(push) ; 1615
; [else-branch 3376] 4 != 2
(pop) ; 1615
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1615
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1615
; 0,00s
; (get-info :all-statistics)
(push) ; 1615
; [then-branch 3377] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3378] 4 == 2
(push) ; 1616
; [else-branch 3378] 4 != 2
(pop) ; 1616
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1616
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1616
; 0,00s
; (get-info :all-statistics)
(push) ; 1616
; [then-branch 3379] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3380] 4 == 2
(push) ; 1617
; [else-branch 3380] 4 != 2
(pop) ; 1617
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1617
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1617
; 0,00s
; (get-info :all-statistics)
(push) ; 1617
; [then-branch 3381] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3382] 4 == 2
(push) ; 1618
; [else-branch 3382] 4 != 2
(pop) ; 1618
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1618
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1618
; 0,00s
; (get-info :all-statistics)
(push) ; 1618
; [then-branch 3383] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3384] 4 == 2
(push) ; 1619
; [else-branch 3384] 4 != 2
(pop) ; 1619
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1619
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1619
; 0,00s
; (get-info :all-statistics)
(push) ; 1619
; [then-branch 3385] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3386] 4 == 2
(push) ; 1620
; [else-branch 3386] 4 != 2
(pop) ; 1620
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1620
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1620
; 0,00s
; (get-info :all-statistics)
(push) ; 1620
; [then-branch 3387] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3388] 4 == 2
(push) ; 1621
; [else-branch 3388] 4 != 2
(pop) ; 1621
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1621
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1621
; 0,00s
; (get-info :all-statistics)
(push) ; 1621
; [then-branch 3389] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3390] 4 == 2
(push) ; 1622
; [else-branch 3390] 4 != 2
(pop) ; 1622
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1622
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1622
; 0,00s
; (get-info :all-statistics)
(push) ; 1622
; [then-branch 3391] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3392] 4 == 2
(push) ; 1623
; [else-branch 3392] 4 != 2
(pop) ; 1623
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1623
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1623
; 0,00s
; (get-info :all-statistics)
(push) ; 1623
; [then-branch 3393] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3394] 4 == 2
(push) ; 1624
; [else-branch 3394] 4 != 2
(pop) ; 1624
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1624
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1624
; 0,00s
; (get-info :all-statistics)
(push) ; 1624
; [then-branch 3395] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3396] 4 == 2
(push) ; 1625
; [else-branch 3396] 4 != 2
(pop) ; 1625
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1625
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1625
; 0,00s
; (get-info :all-statistics)
(push) ; 1625
; [then-branch 3397] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3398] 4 == 2
(push) ; 1626
; [else-branch 3398] 4 != 2
(pop) ; 1626
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1626
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1626
; 0,00s
; (get-info :all-statistics)
(push) ; 1626
; [then-branch 3399] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3400] 4 == 2
(push) ; 1627
; [else-branch 3400] 4 != 2
(pop) ; 1627
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1627
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1627
; 0,00s
; (get-info :all-statistics)
(push) ; 1627
; [then-branch 3401] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3402] 4 == 2
(push) ; 1628
; [else-branch 3402] 4 != 2
(pop) ; 1628
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1628
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1628
; 0,00s
; (get-info :all-statistics)
(push) ; 1628
; [then-branch 3403] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3404] 4 == 2
(push) ; 1629
; [else-branch 3404] 4 != 2
(pop) ; 1629
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1629
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1629
; 0,00s
; (get-info :all-statistics)
(push) ; 1629
; [then-branch 3405] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3406] 4 == 2
(push) ; 1630
; [else-branch 3406] 4 != 2
(pop) ; 1630
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1630
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1630
; 0,00s
; (get-info :all-statistics)
(push) ; 1630
; [then-branch 3407] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3408] 4 == 2
(push) ; 1631
; [else-branch 3408] 4 != 2
(pop) ; 1631
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1631
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1631
; 0,00s
; (get-info :all-statistics)
(push) ; 1631
; [then-branch 3409] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3410] 4 == 2
(push) ; 1632
; [else-branch 3410] 4 != 2
(pop) ; 1632
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1632
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1632
; 0,00s
; (get-info :all-statistics)
(push) ; 1632
; [then-branch 3411] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3412] 4 == 2
(push) ; 1633
; [else-branch 3412] 4 != 2
(pop) ; 1633
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1633
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1633
; 0,00s
; (get-info :all-statistics)
(push) ; 1633
; [then-branch 3413] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3414] 4 == 2
(push) ; 1634
; [else-branch 3414] 4 != 2
(pop) ; 1634
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1634
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1634
; 0,00s
; (get-info :all-statistics)
(push) ; 1634
; [then-branch 3415] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3416] 4 == 2
(push) ; 1635
; [else-branch 3416] 4 != 2
(pop) ; 1635
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1635
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1635
; 0,00s
; (get-info :all-statistics)
(push) ; 1635
; [then-branch 3417] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3418] 4 == 2
(push) ; 1636
; [else-branch 3418] 4 != 2
(pop) ; 1636
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1636
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1636
; 0,00s
; (get-info :all-statistics)
(push) ; 1636
; [then-branch 3419] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3420] 4 == 2
(push) ; 1637
; [else-branch 3420] 4 != 2
(pop) ; 1637
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1637
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1637
; 0,00s
; (get-info :all-statistics)
(push) ; 1637
; [then-branch 3421] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3422] 4 == 2
(push) ; 1638
; [else-branch 3422] 4 != 2
(pop) ; 1638
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1638
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1638
; 0,00s
; (get-info :all-statistics)
(push) ; 1638
; [then-branch 3423] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3424] 4 == 2
(push) ; 1639
; [else-branch 3424] 4 != 2
(pop) ; 1639
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1639
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1639
; 0,00s
; (get-info :all-statistics)
(push) ; 1639
; [then-branch 3425] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3426] 4 == 2
(push) ; 1640
; [else-branch 3426] 4 != 2
(pop) ; 1640
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1640
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1640
; 0,00s
; (get-info :all-statistics)
(push) ; 1640
; [then-branch 3427] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3428] 4 == 2
(push) ; 1641
; [else-branch 3428] 4 != 2
(pop) ; 1641
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1641
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1641
; 0,00s
; (get-info :all-statistics)
(push) ; 1641
; [then-branch 3429] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3430] 4 == 2
(push) ; 1642
; [else-branch 3430] 4 != 2
(pop) ; 1642
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1642
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1642
; 0,00s
; (get-info :all-statistics)
(push) ; 1642
; [then-branch 3431] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3432] 4 == 2
(push) ; 1643
; [else-branch 3432] 4 != 2
(pop) ; 1643
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1643
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1643
; 0,00s
; (get-info :all-statistics)
(push) ; 1643
; [then-branch 3433] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3434] 4 == 2
(push) ; 1644
; [else-branch 3434] 4 != 2
(pop) ; 1644
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1644
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1644
; 0,00s
; (get-info :all-statistics)
(push) ; 1644
; [then-branch 3435] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3436] 4 == 2
(push) ; 1645
; [else-branch 3436] 4 != 2
(pop) ; 1645
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1645
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1645
; 0,00s
; (get-info :all-statistics)
(push) ; 1645
; [then-branch 3437] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3438] 4 == 2
(push) ; 1646
; [else-branch 3438] 4 != 2
(pop) ; 1646
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1646
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1646
; 0,00s
; (get-info :all-statistics)
(push) ; 1646
; [then-branch 3439] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3440] 4 == 2
(push) ; 1647
; [else-branch 3440] 4 != 2
(pop) ; 1647
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1647
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1647
; 0,00s
; (get-info :all-statistics)
(push) ; 1647
; [then-branch 3441] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3442] 4 == 2
(push) ; 1648
; [else-branch 3442] 4 != 2
(pop) ; 1648
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1648
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1648
; 0,00s
; (get-info :all-statistics)
(push) ; 1648
; [then-branch 3443] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3444] 4 == 2
(push) ; 1649
; [else-branch 3444] 4 != 2
(pop) ; 1649
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1649
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1649
; 0,00s
; (get-info :all-statistics)
(push) ; 1649
; [then-branch 3445] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3446] 4 == 2
(push) ; 1650
; [else-branch 3446] 4 != 2
(pop) ; 1650
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1650
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1650
; 0,00s
; (get-info :all-statistics)
(push) ; 1650
; [then-branch 3447] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3448] 4 == 2
(push) ; 1651
; [else-branch 3448] 4 != 2
(pop) ; 1651
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1651
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1651
; 0,00s
; (get-info :all-statistics)
(push) ; 1651
; [then-branch 3449] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3450] 4 == 2
(push) ; 1652
; [else-branch 3450] 4 != 2
(pop) ; 1652
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1652
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1652
; 0,00s
; (get-info :all-statistics)
(push) ; 1652
; [then-branch 3451] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3452] 4 == 2
(push) ; 1653
; [else-branch 3452] 4 != 2
(pop) ; 1653
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1653
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1653
; 0,00s
; (get-info :all-statistics)
(push) ; 1653
; [then-branch 3453] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3454] 4 == 2
(push) ; 1654
; [else-branch 3454] 4 != 2
(pop) ; 1654
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1654
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1654
; 0,00s
; (get-info :all-statistics)
(push) ; 1654
; [then-branch 3455] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3456] 4 == 2
(push) ; 1655
; [else-branch 3456] 4 != 2
(pop) ; 1655
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1655
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1655
; 0,00s
; (get-info :all-statistics)
(push) ; 1655
; [then-branch 3457] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3458] 4 == 2
(push) ; 1656
; [else-branch 3458] 4 != 2
(pop) ; 1656
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1656
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1656
; 0,00s
; (get-info :all-statistics)
(push) ; 1656
; [then-branch 3459] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3460] 4 == 2
(push) ; 1657
; [else-branch 3460] 4 != 2
(pop) ; 1657
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1657
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1657
; 0,00s
; (get-info :all-statistics)
(push) ; 1657
; [then-branch 3461] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3462] 4 == 2
(push) ; 1658
; [else-branch 3462] 4 != 2
(pop) ; 1658
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1658
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1658
; 0,00s
; (get-info :all-statistics)
(push) ; 1658
; [then-branch 3463] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3464] 4 == 2
(push) ; 1659
; [else-branch 3464] 4 != 2
(pop) ; 1659
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1659
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1659
; 0,00s
; (get-info :all-statistics)
(push) ; 1659
; [then-branch 3465] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3466] 4 == 2
(push) ; 1660
; [else-branch 3466] 4 != 2
(pop) ; 1660
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1660
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1660
; 0,00s
; (get-info :all-statistics)
(push) ; 1660
; [then-branch 3467] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3468] 4 == 2
(push) ; 1661
; [else-branch 3468] 4 != 2
(pop) ; 1661
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1661
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1661
; 0,00s
; (get-info :all-statistics)
(push) ; 1661
; [then-branch 3469] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3470] 4 == 2
(push) ; 1662
; [else-branch 3470] 4 != 2
(pop) ; 1662
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1662
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1662
; 0,00s
; (get-info :all-statistics)
(push) ; 1662
; [then-branch 3471] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3472] 4 == 2
(push) ; 1663
; [else-branch 3472] 4 != 2
(pop) ; 1663
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1663
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1663
; 0,00s
; (get-info :all-statistics)
(push) ; 1663
; [then-branch 3473] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3474] 4 == 2
(push) ; 1664
; [else-branch 3474] 4 != 2
(pop) ; 1664
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1664
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1664
; 0,00s
; (get-info :all-statistics)
(push) ; 1664
; [then-branch 3475] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3476] 4 == 2
(push) ; 1665
; [else-branch 3476] 4 != 2
(pop) ; 1665
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1665
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1665
; 0,00s
; (get-info :all-statistics)
(push) ; 1665
; [then-branch 3477] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3478] 4 == 2
(push) ; 1666
; [else-branch 3478] 4 != 2
(pop) ; 1666
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1666
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1666
; 0,00s
; (get-info :all-statistics)
(push) ; 1666
; [then-branch 3479] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3480] 4 == 2
(push) ; 1667
; [else-branch 3480] 4 != 2
(pop) ; 1667
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1667
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1667
; 0,00s
; (get-info :all-statistics)
(push) ; 1667
; [then-branch 3481] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3482] 4 == 2
(push) ; 1668
; [else-branch 3482] 4 != 2
(pop) ; 1668
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1668
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1668
; 0,00s
; (get-info :all-statistics)
(push) ; 1668
; [then-branch 3483] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3484] 4 == 2
(push) ; 1669
; [else-branch 3484] 4 != 2
(pop) ; 1669
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1669
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1669
; 0,00s
; (get-info :all-statistics)
(push) ; 1669
; [then-branch 3485] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3486] 4 == 2
(push) ; 1670
; [else-branch 3486] 4 != 2
(pop) ; 1670
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1670
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1670
; 0,00s
; (get-info :all-statistics)
(push) ; 1670
; [then-branch 3487] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3488] 4 == 2
(push) ; 1671
; [else-branch 3488] 4 != 2
(pop) ; 1671
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1671
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1671
; 0,00s
; (get-info :all-statistics)
(push) ; 1671
; [then-branch 3489] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3490] 4 == 2
(push) ; 1672
; [else-branch 3490] 4 != 2
(pop) ; 1672
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1672
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1672
; 0,00s
; (get-info :all-statistics)
(push) ; 1672
; [then-branch 3491] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3492] 4 == 2
(push) ; 1673
; [else-branch 3492] 4 != 2
(pop) ; 1673
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1673
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1673
; 0,00s
; (get-info :all-statistics)
(push) ; 1673
; [then-branch 3493] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3494] 4 == 2
(push) ; 1674
; [else-branch 3494] 4 != 2
(pop) ; 1674
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1674
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1674
; 0,00s
; (get-info :all-statistics)
(push) ; 1674
; [then-branch 3495] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3496] 4 == 2
(push) ; 1675
; [else-branch 3496] 4 != 2
(pop) ; 1675
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1675
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1675
; 0,00s
; (get-info :all-statistics)
(push) ; 1675
; [then-branch 3497] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3498] 4 == 2
(push) ; 1676
; [else-branch 3498] 4 != 2
(pop) ; 1676
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1676
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1676
; 0,00s
; (get-info :all-statistics)
(push) ; 1676
; [then-branch 3499] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3500] 4 == 2
(push) ; 1677
; [else-branch 3500] 4 != 2
(pop) ; 1677
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1677
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1677
; 0,00s
; (get-info :all-statistics)
(push) ; 1677
; [then-branch 3501] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3502] 4 == 2
(push) ; 1678
; [else-branch 3502] 4 != 2
(pop) ; 1678
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1678
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1678
; 0,00s
; (get-info :all-statistics)
(push) ; 1678
; [then-branch 3503] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3504] 4 == 2
(push) ; 1679
; [else-branch 3504] 4 != 2
(pop) ; 1679
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1679
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1679
; 0,00s
; (get-info :all-statistics)
(push) ; 1679
; [then-branch 3505] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3506] 4 == 2
(push) ; 1680
; [else-branch 3506] 4 != 2
(pop) ; 1680
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1680
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1680
; 0,00s
; (get-info :all-statistics)
(push) ; 1680
; [then-branch 3507] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3508] 4 == 2
(push) ; 1681
; [else-branch 3508] 4 != 2
(pop) ; 1681
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1681
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1681
; 0,00s
; (get-info :all-statistics)
(push) ; 1681
; [then-branch 3509] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3510] 4 == 2
(push) ; 1682
; [else-branch 3510] 4 != 2
(pop) ; 1682
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1682
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1682
; 0,00s
; (get-info :all-statistics)
(push) ; 1682
; [then-branch 3511] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3512] 4 == 2
(push) ; 1683
; [else-branch 3512] 4 != 2
(pop) ; 1683
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1683
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1683
; 0,00s
; (get-info :all-statistics)
(push) ; 1683
; [then-branch 3513] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3514] 4 == 2
(push) ; 1684
; [else-branch 3514] 4 != 2
(pop) ; 1684
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1684
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1684
; 0,00s
; (get-info :all-statistics)
(push) ; 1684
; [then-branch 3515] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3516] 4 == 2
(push) ; 1685
; [else-branch 3516] 4 != 2
(pop) ; 1685
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1685
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1685
; 0,00s
; (get-info :all-statistics)
(push) ; 1685
; [then-branch 3517] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3518] 4 == 2
(push) ; 1686
; [else-branch 3518] 4 != 2
(pop) ; 1686
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1686
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1686
; 0,00s
; (get-info :all-statistics)
(push) ; 1686
; [then-branch 3519] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3520] 4 == 2
(push) ; 1687
; [else-branch 3520] 4 != 2
(pop) ; 1687
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1687
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1687
; 0,00s
; (get-info :all-statistics)
(push) ; 1687
; [then-branch 3521] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3522] 4 == 2
(push) ; 1688
; [else-branch 3522] 4 != 2
(pop) ; 1688
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1688
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1688
; 0,00s
; (get-info :all-statistics)
(push) ; 1688
; [then-branch 3523] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3524] 4 == 2
(push) ; 1689
; [else-branch 3524] 4 != 2
(pop) ; 1689
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1689
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1689
; 0,00s
; (get-info :all-statistics)
(push) ; 1689
; [then-branch 3525] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3526] 4 == 2
(push) ; 1690
; [else-branch 3526] 4 != 2
(pop) ; 1690
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1690
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1690
; 0,00s
; (get-info :all-statistics)
(push) ; 1690
; [then-branch 3527] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3528] 4 == 2
(push) ; 1691
; [else-branch 3528] 4 != 2
(pop) ; 1691
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1691
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1691
; 0,00s
; (get-info :all-statistics)
(push) ; 1691
; [then-branch 3529] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3530] 4 == 2
(push) ; 1692
; [else-branch 3530] 4 != 2
(pop) ; 1692
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1692
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1692
; 0,00s
; (get-info :all-statistics)
(push) ; 1692
; [then-branch 3531] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3532] 4 == 2
(push) ; 1693
; [else-branch 3532] 4 != 2
(pop) ; 1693
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1693
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1693
; 0,00s
; (get-info :all-statistics)
(push) ; 1693
; [then-branch 3533] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3534] 4 == 2
(push) ; 1694
; [else-branch 3534] 4 != 2
(pop) ; 1694
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1694
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1694
; 0,00s
; (get-info :all-statistics)
(push) ; 1694
; [then-branch 3535] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3536] 4 == 2
(push) ; 1695
; [else-branch 3536] 4 != 2
(pop) ; 1695
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1695
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1695
; 0,00s
; (get-info :all-statistics)
(push) ; 1695
; [then-branch 3537] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3538] 4 == 2
(push) ; 1696
; [else-branch 3538] 4 != 2
(pop) ; 1696
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1696
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1696
; 0,00s
; (get-info :all-statistics)
(push) ; 1696
; [then-branch 3539] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3540] 4 == 2
(push) ; 1697
; [else-branch 3540] 4 != 2
(pop) ; 1697
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1697
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1697
; 0,00s
; (get-info :all-statistics)
(push) ; 1697
; [then-branch 3541] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3542] 4 == 2
(push) ; 1698
; [else-branch 3542] 4 != 2
(pop) ; 1698
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1698
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1698
; 0,00s
; (get-info :all-statistics)
(push) ; 1698
; [then-branch 3543] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3544] 4 == 2
(push) ; 1699
; [else-branch 3544] 4 != 2
(pop) ; 1699
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1699
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1699
; 0,00s
; (get-info :all-statistics)
(push) ; 1699
; [then-branch 3545] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3546] 4 == 2
(push) ; 1700
; [else-branch 3546] 4 != 2
(pop) ; 1700
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1700
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1700
; 0,00s
; (get-info :all-statistics)
(push) ; 1700
; [then-branch 3547] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3548] 4 == 2
(push) ; 1701
; [else-branch 3548] 4 != 2
(pop) ; 1701
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1701
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1701
; 0,00s
; (get-info :all-statistics)
(push) ; 1701
; [then-branch 3549] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3550] 4 == 2
(push) ; 1702
; [else-branch 3550] 4 != 2
(pop) ; 1702
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1702
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1702
; 0,00s
; (get-info :all-statistics)
(push) ; 1702
; [then-branch 3551] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3552] 4 == 2
(push) ; 1703
; [else-branch 3552] 4 != 2
(pop) ; 1703
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1703
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1703
; 0,00s
; (get-info :all-statistics)
(push) ; 1703
; [then-branch 3553] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3554] 4 == 2
(push) ; 1704
; [else-branch 3554] 4 != 2
(pop) ; 1704
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1704
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1704
; 0,00s
; (get-info :all-statistics)
(push) ; 1704
; [then-branch 3555] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3556] 4 == 2
(push) ; 1705
; [else-branch 3556] 4 != 2
(pop) ; 1705
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1705
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1705
; 0,00s
; (get-info :all-statistics)
(push) ; 1705
; [then-branch 3557] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3558] 4 == 2
(push) ; 1706
; [else-branch 3558] 4 != 2
(pop) ; 1706
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1706
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1706
; 0,00s
; (get-info :all-statistics)
(push) ; 1706
; [then-branch 3559] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3560] 4 == 2
(push) ; 1707
; [else-branch 3560] 4 != 2
(pop) ; 1707
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1707
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1707
; 0,00s
; (get-info :all-statistics)
(push) ; 1707
; [then-branch 3561] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3562] 4 == 2
(push) ; 1708
; [else-branch 3562] 4 != 2
(pop) ; 1708
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1708
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1708
; 0,00s
; (get-info :all-statistics)
(push) ; 1708
; [then-branch 3563] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3564] 4 == 2
(push) ; 1709
; [else-branch 3564] 4 != 2
(pop) ; 1709
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1709
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1709
; 0,00s
; (get-info :all-statistics)
(push) ; 1709
; [then-branch 3565] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3566] 4 == 2
(push) ; 1710
; [else-branch 3566] 4 != 2
(pop) ; 1710
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1710
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1710
; 0,00s
; (get-info :all-statistics)
(push) ; 1710
; [then-branch 3567] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3568] 4 == 2
(push) ; 1711
; [else-branch 3568] 4 != 2
(pop) ; 1711
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1711
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1711
; 0,00s
; (get-info :all-statistics)
(push) ; 1711
; [then-branch 3569] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3570] 4 == 2
(push) ; 1712
; [else-branch 3570] 4 != 2
(pop) ; 1712
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1712
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1712
; 0,00s
; (get-info :all-statistics)
(push) ; 1712
; [then-branch 3571] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3572] 4 == 2
(push) ; 1713
; [else-branch 3572] 4 != 2
(pop) ; 1713
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1713
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1713
; 0,00s
; (get-info :all-statistics)
(push) ; 1713
; [then-branch 3573] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3574] 4 == 2
(push) ; 1714
; [else-branch 3574] 4 != 2
(pop) ; 1714
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1714
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1714
; 0,00s
; (get-info :all-statistics)
(push) ; 1714
; [then-branch 3575] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3576] 4 == 2
(push) ; 1715
; [else-branch 3576] 4 != 2
(pop) ; 1715
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1715
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1715
; 0,00s
; (get-info :all-statistics)
(push) ; 1715
; [then-branch 3577] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3578] 4 == 2
(push) ; 1716
; [else-branch 3578] 4 != 2
(pop) ; 1716
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1716
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1716
; 0,00s
; (get-info :all-statistics)
(push) ; 1716
; [then-branch 3579] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3580] 4 == 2
(push) ; 1717
; [else-branch 3580] 4 != 2
(pop) ; 1717
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1717
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1717
; 0,00s
; (get-info :all-statistics)
(push) ; 1717
; [then-branch 3581] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3582] 4 == 2
(push) ; 1718
; [else-branch 3582] 4 != 2
(pop) ; 1718
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1718
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1718
; 0,00s
; (get-info :all-statistics)
(push) ; 1718
; [then-branch 3583] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3584] 4 == 2
(push) ; 1719
; [else-branch 3584] 4 != 2
(pop) ; 1719
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1719
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1719
; 0,00s
; (get-info :all-statistics)
(push) ; 1719
; [then-branch 3585] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3586] 4 == 2
(push) ; 1720
; [else-branch 3586] 4 != 2
(pop) ; 1720
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1720
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1720
; 0,00s
; (get-info :all-statistics)
(push) ; 1720
; [then-branch 3587] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3588] 4 == 2
(push) ; 1721
; [else-branch 3588] 4 != 2
(pop) ; 1721
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1721
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1721
; 0,00s
; (get-info :all-statistics)
(push) ; 1721
; [then-branch 3589] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3590] 4 == 2
(push) ; 1722
; [else-branch 3590] 4 != 2
(pop) ; 1722
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1722
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1722
; 0,00s
; (get-info :all-statistics)
(push) ; 1722
; [then-branch 3591] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3592] 4 == 2
(push) ; 1723
; [else-branch 3592] 4 != 2
(pop) ; 1723
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1723
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1723
; 0,00s
; (get-info :all-statistics)
(push) ; 1723
; [then-branch 3593] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3594] 4 == 2
(push) ; 1724
; [else-branch 3594] 4 != 2
(pop) ; 1724
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1724
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1724
; 0,00s
; (get-info :all-statistics)
(push) ; 1724
; [then-branch 3595] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3596] 4 == 2
(push) ; 1725
; [else-branch 3596] 4 != 2
(pop) ; 1725
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1725
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1725
; 0,00s
; (get-info :all-statistics)
(push) ; 1725
; [then-branch 3597] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3598] 4 == 2
(push) ; 1726
; [else-branch 3598] 4 != 2
(pop) ; 1726
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1726
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1726
; 0,00s
; (get-info :all-statistics)
(push) ; 1726
; [then-branch 3599] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3600] 4 == 2
(push) ; 1727
; [else-branch 3600] 4 != 2
(pop) ; 1727
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1727
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1727
; 0,00s
; (get-info :all-statistics)
(push) ; 1727
; [then-branch 3601] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3602] 4 == 2
(push) ; 1728
; [else-branch 3602] 4 != 2
(pop) ; 1728
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1728
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1728
; 0,00s
; (get-info :all-statistics)
(push) ; 1728
; [then-branch 3603] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3604] 4 == 2
(push) ; 1729
; [else-branch 3604] 4 != 2
(pop) ; 1729
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1729
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1729
; 0,00s
; (get-info :all-statistics)
(push) ; 1729
; [then-branch 3605] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3606] 4 == 2
(push) ; 1730
; [else-branch 3606] 4 != 2
(pop) ; 1730
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1730
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1730
; 0,00s
; (get-info :all-statistics)
(push) ; 1730
; [then-branch 3607] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3608] 4 == 2
(push) ; 1731
; [else-branch 3608] 4 != 2
(pop) ; 1731
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1731
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1731
; 0,00s
; (get-info :all-statistics)
(push) ; 1731
; [then-branch 3609] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3610] 4 == 2
(push) ; 1732
; [else-branch 3610] 4 != 2
(pop) ; 1732
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1732
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1732
; 0,00s
; (get-info :all-statistics)
(push) ; 1732
; [then-branch 3611] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3612] 4 == 2
(push) ; 1733
; [else-branch 3612] 4 != 2
(pop) ; 1733
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1733
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1733
; 0,00s
; (get-info :all-statistics)
(push) ; 1733
; [then-branch 3613] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3614] 4 == 2
(push) ; 1734
; [else-branch 3614] 4 != 2
(pop) ; 1734
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1734
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1734
; 0,00s
; (get-info :all-statistics)
(push) ; 1734
; [then-branch 3615] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3616] 4 == 2
(push) ; 1735
; [else-branch 3616] 4 != 2
(pop) ; 1735
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1735
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1735
; 0,00s
; (get-info :all-statistics)
(push) ; 1735
; [then-branch 3617] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3618] 4 == 2
(push) ; 1736
; [else-branch 3618] 4 != 2
(pop) ; 1736
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1736
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1736
; 0,00s
; (get-info :all-statistics)
(push) ; 1736
; [then-branch 3619] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3620] 4 == 2
(push) ; 1737
; [else-branch 3620] 4 != 2
(pop) ; 1737
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1737
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1737
; 0,00s
; (get-info :all-statistics)
(push) ; 1737
; [then-branch 3621] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3622] 4 == 2
(push) ; 1738
; [else-branch 3622] 4 != 2
(pop) ; 1738
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1738
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1738
; 0,00s
; (get-info :all-statistics)
(push) ; 1738
; [then-branch 3623] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3624] 4 == 2
(push) ; 1739
; [else-branch 3624] 4 != 2
(pop) ; 1739
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1739
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1739
; 0,00s
; (get-info :all-statistics)
(push) ; 1739
; [then-branch 3625] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3626] 4 == 2
(push) ; 1740
; [else-branch 3626] 4 != 2
(pop) ; 1740
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1740
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1740
; 0,00s
; (get-info :all-statistics)
(push) ; 1740
; [then-branch 3627] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3628] 4 == 2
(push) ; 1741
; [else-branch 3628] 4 != 2
(pop) ; 1741
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1741
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1741
; 0,00s
; (get-info :all-statistics)
(push) ; 1741
; [then-branch 3629] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3630] 4 == 2
(push) ; 1742
; [else-branch 3630] 4 != 2
(pop) ; 1742
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1742
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1742
; 0,00s
; (get-info :all-statistics)
(push) ; 1742
; [then-branch 3631] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3632] 4 == 2
(push) ; 1743
; [else-branch 3632] 4 != 2
(pop) ; 1743
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1743
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1743
; 0,00s
; (get-info :all-statistics)
(push) ; 1743
; [then-branch 3633] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3634] 4 == 2
(push) ; 1744
; [else-branch 3634] 4 != 2
(pop) ; 1744
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1744
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1744
; 0,00s
; (get-info :all-statistics)
(push) ; 1744
; [then-branch 3635] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3636] 4 == 2
(push) ; 1745
; [else-branch 3636] 4 != 2
(pop) ; 1745
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1745
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1745
; 0,00s
; (get-info :all-statistics)
(push) ; 1745
; [then-branch 3637] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3638] 4 == 2
(push) ; 1746
; [else-branch 3638] 4 != 2
(pop) ; 1746
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1746
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1746
; 0,00s
; (get-info :all-statistics)
(push) ; 1746
; [then-branch 3639] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3640] 4 == 2
(push) ; 1747
; [else-branch 3640] 4 != 2
(pop) ; 1747
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1747
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1747
; 0,00s
; (get-info :all-statistics)
(push) ; 1747
; [then-branch 3641] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3642] 4 == 2
(push) ; 1748
; [else-branch 3642] 4 != 2
(pop) ; 1748
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1748
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1748
; 0,00s
; (get-info :all-statistics)
(push) ; 1748
; [then-branch 3643] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3644] 4 == 2
(push) ; 1749
; [else-branch 3644] 4 != 2
(pop) ; 1749
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1749
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1749
; 0,00s
; (get-info :all-statistics)
(push) ; 1749
; [then-branch 3645] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3646] 4 == 2
(push) ; 1750
; [else-branch 3646] 4 != 2
(pop) ; 1750
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1750
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1750
; 0,00s
; (get-info :all-statistics)
(push) ; 1750
; [then-branch 3647] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3648] 4 == 2
(push) ; 1751
; [else-branch 3648] 4 != 2
(pop) ; 1751
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1751
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1751
; 0,00s
; (get-info :all-statistics)
(push) ; 1751
; [then-branch 3649] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3650] 4 == 2
(push) ; 1752
; [else-branch 3650] 4 != 2
(pop) ; 1752
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1752
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1752
; 0,00s
; (get-info :all-statistics)
(push) ; 1752
; [then-branch 3651] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3652] 4 == 2
(push) ; 1753
; [else-branch 3652] 4 != 2
(pop) ; 1753
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1753
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1753
; 0,00s
; (get-info :all-statistics)
(push) ; 1753
; [then-branch 3653] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3654] 4 == 2
(push) ; 1754
; [else-branch 3654] 4 != 2
(pop) ; 1754
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1754
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1754
; 0,00s
; (get-info :all-statistics)
(push) ; 1754
; [then-branch 3655] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3656] 4 == 2
(push) ; 1755
; [else-branch 3656] 4 != 2
(pop) ; 1755
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1755
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1755
; 0,00s
; (get-info :all-statistics)
(push) ; 1755
; [then-branch 3657] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3658] 4 == 2
(push) ; 1756
; [else-branch 3658] 4 != 2
(pop) ; 1756
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1756
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1756
; 0,00s
; (get-info :all-statistics)
(push) ; 1756
; [then-branch 3659] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3660] 4 == 2
(push) ; 1757
; [else-branch 3660] 4 != 2
(pop) ; 1757
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1757
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1757
; 0,00s
; (get-info :all-statistics)
(push) ; 1757
; [then-branch 3661] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3662] 4 == 2
(push) ; 1758
; [else-branch 3662] 4 != 2
(pop) ; 1758
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1758
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1758
; 0,00s
; (get-info :all-statistics)
(push) ; 1758
; [then-branch 3663] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3664] 4 == 2
(push) ; 1759
; [else-branch 3664] 4 != 2
(pop) ; 1759
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1759
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1759
; 0,00s
; (get-info :all-statistics)
(push) ; 1759
; [then-branch 3665] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3666] 4 == 2
(push) ; 1760
; [else-branch 3666] 4 != 2
(pop) ; 1760
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1760
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1760
; 0,00s
; (get-info :all-statistics)
(push) ; 1760
; [then-branch 3667] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3668] 4 == 2
(push) ; 1761
; [else-branch 3668] 4 != 2
(pop) ; 1761
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1761
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1761
; 0,00s
; (get-info :all-statistics)
(push) ; 1761
; [then-branch 3669] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3670] 4 == 2
(push) ; 1762
; [else-branch 3670] 4 != 2
(pop) ; 1762
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1762
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1762
; 0,00s
; (get-info :all-statistics)
(push) ; 1762
; [then-branch 3671] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3672] 4 == 2
(push) ; 1763
; [else-branch 3672] 4 != 2
(pop) ; 1763
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1763
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1763
; 0,00s
; (get-info :all-statistics)
(push) ; 1763
; [then-branch 3673] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3674] 4 == 2
(push) ; 1764
; [else-branch 3674] 4 != 2
(pop) ; 1764
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1764
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1764
; 0,00s
; (get-info :all-statistics)
(push) ; 1764
; [then-branch 3675] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3676] 4 == 2
(push) ; 1765
; [else-branch 3676] 4 != 2
(pop) ; 1765
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1765
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1765
; 0,00s
; (get-info :all-statistics)
(push) ; 1765
; [then-branch 3677] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3678] 4 == 2
(push) ; 1766
; [else-branch 3678] 4 != 2
(pop) ; 1766
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1766
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1766
; 0,00s
; (get-info :all-statistics)
(push) ; 1766
; [then-branch 3679] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3680] 4 == 2
(push) ; 1767
; [else-branch 3680] 4 != 2
(pop) ; 1767
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1767
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1767
; 0,00s
; (get-info :all-statistics)
(push) ; 1767
; [then-branch 3681] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3682] 4 == 2
(push) ; 1768
; [else-branch 3682] 4 != 2
(pop) ; 1768
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1768
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1768
; 0,00s
; (get-info :all-statistics)
(push) ; 1768
; [then-branch 3683] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3684] 4 == 2
(push) ; 1769
; [else-branch 3684] 4 != 2
(pop) ; 1769
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1769
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1769
; 0,00s
; (get-info :all-statistics)
(push) ; 1769
; [then-branch 3685] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3686] 4 == 2
(push) ; 1770
; [else-branch 3686] 4 != 2
(pop) ; 1770
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1770
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1770
; 0,00s
; (get-info :all-statistics)
(push) ; 1770
; [then-branch 3687] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3688] 4 == 2
(push) ; 1771
; [else-branch 3688] 4 != 2
(pop) ; 1771
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1771
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1771
; 0,00s
; (get-info :all-statistics)
(push) ; 1771
; [then-branch 3689] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3690] 4 == 2
(push) ; 1772
; [else-branch 3690] 4 != 2
(pop) ; 1772
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1772
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1772
; 0,00s
; (get-info :all-statistics)
(push) ; 1772
; [then-branch 3691] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3692] 4 == 2
(push) ; 1773
; [else-branch 3692] 4 != 2
(pop) ; 1773
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1773
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1773
; 0,00s
; (get-info :all-statistics)
(push) ; 1773
; [then-branch 3693] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3694] 4 == 2
(push) ; 1774
; [else-branch 3694] 4 != 2
(pop) ; 1774
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1774
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1774
; 0,00s
; (get-info :all-statistics)
(push) ; 1774
; [then-branch 3695] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3696] 4 == 2
(push) ; 1775
; [else-branch 3696] 4 != 2
(pop) ; 1775
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1775
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1775
; 0,00s
; (get-info :all-statistics)
(push) ; 1775
; [then-branch 3697] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3698] 4 == 2
(push) ; 1776
; [else-branch 3698] 4 != 2
(pop) ; 1776
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1776
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1776
; 0,00s
; (get-info :all-statistics)
(push) ; 1776
; [then-branch 3699] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3700] 4 == 2
(push) ; 1777
; [else-branch 3700] 4 != 2
(pop) ; 1777
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1777
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1777
; 0,00s
; (get-info :all-statistics)
(push) ; 1777
; [then-branch 3701] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3702] 4 == 2
(push) ; 1778
; [else-branch 3702] 4 != 2
(pop) ; 1778
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1778
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1778
; 0,00s
; (get-info :all-statistics)
(push) ; 1778
; [then-branch 3703] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3704] 4 == 2
(push) ; 1779
; [else-branch 3704] 4 != 2
(pop) ; 1779
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1779
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1779
; 0,00s
; (get-info :all-statistics)
(push) ; 1779
; [then-branch 3705] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3706] 4 == 2
(push) ; 1780
; [else-branch 3706] 4 != 2
(pop) ; 1780
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1780
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1780
; 0,00s
; (get-info :all-statistics)
(push) ; 1780
; [then-branch 3707] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3708] 4 == 2
(push) ; 1781
; [else-branch 3708] 4 != 2
(pop) ; 1781
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1781
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1781
; 0,00s
; (get-info :all-statistics)
(push) ; 1781
; [then-branch 3709] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3710] 4 == 2
(push) ; 1782
; [else-branch 3710] 4 != 2
(pop) ; 1782
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1782
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1782
; 0,00s
; (get-info :all-statistics)
(push) ; 1782
; [then-branch 3711] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3712] 4 == 2
(push) ; 1783
; [else-branch 3712] 4 != 2
(pop) ; 1783
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1783
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1783
; 0,00s
; (get-info :all-statistics)
(push) ; 1783
; [then-branch 3713] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3714] 4 == 2
(push) ; 1784
; [else-branch 3714] 4 != 2
(pop) ; 1784
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1784
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1784
; 0,00s
; (get-info :all-statistics)
(push) ; 1784
; [then-branch 3715] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3716] 4 == 2
(push) ; 1785
; [else-branch 3716] 4 != 2
(pop) ; 1785
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1785
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1785
; 0,00s
; (get-info :all-statistics)
(push) ; 1785
; [then-branch 3717] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3718] 4 == 2
(push) ; 1786
; [else-branch 3718] 4 != 2
(pop) ; 1786
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1786
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1786
; 0,00s
; (get-info :all-statistics)
(push) ; 1786
; [then-branch 3719] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3720] 4 == 2
(push) ; 1787
; [else-branch 3720] 4 != 2
(pop) ; 1787
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1787
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1787
; 0,00s
; (get-info :all-statistics)
(push) ; 1787
; [then-branch 3721] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3722] 4 == 2
(push) ; 1788
; [else-branch 3722] 4 != 2
(pop) ; 1788
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1788
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1788
; 0,00s
; (get-info :all-statistics)
(push) ; 1788
; [then-branch 3723] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3724] 4 == 2
(push) ; 1789
; [else-branch 3724] 4 != 2
(pop) ; 1789
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1789
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1789
; 0,00s
; (get-info :all-statistics)
(push) ; 1789
; [then-branch 3725] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3726] 4 == 2
(push) ; 1790
; [else-branch 3726] 4 != 2
(pop) ; 1790
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1790
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1790
; 0,00s
; (get-info :all-statistics)
(push) ; 1790
; [then-branch 3727] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3728] 4 == 2
(push) ; 1791
; [else-branch 3728] 4 != 2
(pop) ; 1791
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1791
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1791
; 0,00s
; (get-info :all-statistics)
(push) ; 1791
; [then-branch 3729] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3730] 4 == 2
(push) ; 1792
; [else-branch 3730] 4 != 2
(pop) ; 1792
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1792
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1792
; 0,00s
; (get-info :all-statistics)
(push) ; 1792
; [then-branch 3731] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3732] 4 == 2
(push) ; 1793
; [else-branch 3732] 4 != 2
(pop) ; 1793
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1793
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1793
; 0,00s
; (get-info :all-statistics)
(push) ; 1793
; [then-branch 3733] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3734] 4 == 2
(push) ; 1794
; [else-branch 3734] 4 != 2
(pop) ; 1794
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1794
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1794
; 0,00s
; (get-info :all-statistics)
(push) ; 1794
; [then-branch 3735] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3736] 4 == 2
(push) ; 1795
; [else-branch 3736] 4 != 2
(pop) ; 1795
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1795
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1795
; 0,00s
; (get-info :all-statistics)
(push) ; 1795
; [then-branch 3737] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3738] 4 == 2
(push) ; 1796
; [else-branch 3738] 4 != 2
(pop) ; 1796
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1796
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1796
; 0,00s
; (get-info :all-statistics)
(push) ; 1796
; [then-branch 3739] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3740] 4 == 2
(push) ; 1797
; [else-branch 3740] 4 != 2
(pop) ; 1797
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1797
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1797
; 0,00s
; (get-info :all-statistics)
(push) ; 1797
; [then-branch 3741] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3742] 4 == 2
(push) ; 1798
; [else-branch 3742] 4 != 2
(pop) ; 1798
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1798
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1798
; 0,00s
; (get-info :all-statistics)
(push) ; 1798
; [then-branch 3743] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3744] 4 == 2
(push) ; 1799
; [else-branch 3744] 4 != 2
(pop) ; 1799
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1799
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1799
; 0,00s
; (get-info :all-statistics)
(push) ; 1799
; [then-branch 3745] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3746] 4 == 2
(push) ; 1800
; [else-branch 3746] 4 != 2
(pop) ; 1800
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1800
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1800
; 0,00s
; (get-info :all-statistics)
(push) ; 1800
; [then-branch 3747] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3748] 4 == 2
(push) ; 1801
; [else-branch 3748] 4 != 2
(pop) ; 1801
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1801
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1801
; 0,00s
; (get-info :all-statistics)
(push) ; 1801
; [then-branch 3749] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3750] 4 == 2
(push) ; 1802
; [else-branch 3750] 4 != 2
(pop) ; 1802
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1802
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1802
; 0,00s
; (get-info :all-statistics)
(push) ; 1802
; [then-branch 3751] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3752] 4 == 2
(push) ; 1803
; [else-branch 3752] 4 != 2
(pop) ; 1803
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1803
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1803
; 0,00s
; (get-info :all-statistics)
(push) ; 1803
; [then-branch 3753] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3754] 4 == 2
(push) ; 1804
; [else-branch 3754] 4 != 2
(pop) ; 1804
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1804
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1804
; 0,00s
; (get-info :all-statistics)
(push) ; 1804
; [then-branch 3755] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3756] 4 == 2
(push) ; 1805
; [else-branch 3756] 4 != 2
(pop) ; 1805
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1805
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1805
; 0,00s
; (get-info :all-statistics)
(push) ; 1805
; [then-branch 3757] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3758] 4 == 2
(push) ; 1806
; [else-branch 3758] 4 != 2
(pop) ; 1806
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1806
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1806
; 0,00s
; (get-info :all-statistics)
(push) ; 1806
; [then-branch 3759] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3760] 4 == 2
(push) ; 1807
; [else-branch 3760] 4 != 2
(pop) ; 1807
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1807
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1807
; 0,00s
; (get-info :all-statistics)
(push) ; 1807
; [then-branch 3761] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3762] 4 == 2
(push) ; 1808
; [else-branch 3762] 4 != 2
(pop) ; 1808
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1808
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1808
; 0,00s
; (get-info :all-statistics)
(push) ; 1808
; [then-branch 3763] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3764] 4 == 2
(push) ; 1809
; [else-branch 3764] 4 != 2
(pop) ; 1809
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1809
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1809
; 0,00s
; (get-info :all-statistics)
(push) ; 1809
; [then-branch 3765] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3766] 4 == 2
(push) ; 1810
; [else-branch 3766] 4 != 2
(pop) ; 1810
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1810
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1810
; 0,00s
; (get-info :all-statistics)
(push) ; 1810
; [then-branch 3767] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3768] 4 == 2
(push) ; 1811
; [else-branch 3768] 4 != 2
(pop) ; 1811
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1811
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1811
; 0,00s
; (get-info :all-statistics)
(push) ; 1811
; [then-branch 3769] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3770] 4 == 2
(push) ; 1812
; [else-branch 3770] 4 != 2
(pop) ; 1812
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1812
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1812
; 0,00s
; (get-info :all-statistics)
(push) ; 1812
; [then-branch 3771] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3772] 4 == 2
(push) ; 1813
; [else-branch 3772] 4 != 2
(pop) ; 1813
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1813
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1813
; 0,00s
; (get-info :all-statistics)
(push) ; 1813
; [then-branch 3773] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3774] 4 == 2
(push) ; 1814
; [else-branch 3774] 4 != 2
(pop) ; 1814
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1814
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1814
; 0,00s
; (get-info :all-statistics)
(push) ; 1814
; [then-branch 3775] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3776] 4 == 2
(push) ; 1815
; [else-branch 3776] 4 != 2
(pop) ; 1815
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1815
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1815
; 0,00s
; (get-info :all-statistics)
(push) ; 1815
; [then-branch 3777] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3778] 4 == 2
(push) ; 1816
; [else-branch 3778] 4 != 2
(pop) ; 1816
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1816
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1816
; 0,00s
; (get-info :all-statistics)
(push) ; 1816
; [then-branch 3779] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3780] 4 == 2
(push) ; 1817
; [else-branch 3780] 4 != 2
(pop) ; 1817
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1817
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1817
; 0,00s
; (get-info :all-statistics)
(push) ; 1817
; [then-branch 3781] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3782] 4 == 2
(push) ; 1818
; [else-branch 3782] 4 != 2
(pop) ; 1818
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1818
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1818
; 0,00s
; (get-info :all-statistics)
(push) ; 1818
; [then-branch 3783] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3784] 4 == 2
(push) ; 1819
; [else-branch 3784] 4 != 2
(pop) ; 1819
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1819
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1819
; 0,00s
; (get-info :all-statistics)
(push) ; 1819
; [then-branch 3785] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3786] 4 == 2
(push) ; 1820
; [else-branch 3786] 4 != 2
(pop) ; 1820
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1820
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1820
; 0,00s
; (get-info :all-statistics)
(push) ; 1820
; [then-branch 3787] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3788] 4 == 2
(push) ; 1821
; [else-branch 3788] 4 != 2
(pop) ; 1821
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1821
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1821
; 0,00s
; (get-info :all-statistics)
(push) ; 1821
; [then-branch 3789] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3790] 4 == 2
(push) ; 1822
; [else-branch 3790] 4 != 2
(pop) ; 1822
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1822
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1822
; 0,00s
; (get-info :all-statistics)
(push) ; 1822
; [then-branch 3791] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3792] 4 == 2
(push) ; 1823
; [else-branch 3792] 4 != 2
(pop) ; 1823
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1823
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1823
; 0,00s
; (get-info :all-statistics)
(push) ; 1823
; [then-branch 3793] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3794] 4 == 2
(push) ; 1824
; [else-branch 3794] 4 != 2
(pop) ; 1824
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1824
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1824
; 0,00s
; (get-info :all-statistics)
(push) ; 1824
; [then-branch 3795] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3796] 4 == 2
(push) ; 1825
; [else-branch 3796] 4 != 2
(pop) ; 1825
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1825
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1825
; 0,00s
; (get-info :all-statistics)
(push) ; 1825
; [then-branch 3797] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3798] 4 == 2
(push) ; 1826
; [else-branch 3798] 4 != 2
(pop) ; 1826
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1826
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1826
; 0,00s
; (get-info :all-statistics)
(push) ; 1826
; [then-branch 3799] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3800] 4 == 2
(push) ; 1827
; [else-branch 3800] 4 != 2
(pop) ; 1827
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1827
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1827
; 0,00s
; (get-info :all-statistics)
(push) ; 1827
; [then-branch 3801] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3802] 4 == 2
(push) ; 1828
; [else-branch 3802] 4 != 2
(pop) ; 1828
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1828
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1828
; 0,00s
; (get-info :all-statistics)
(push) ; 1828
; [then-branch 3803] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3804] 4 == 2
(push) ; 1829
; [else-branch 3804] 4 != 2
(pop) ; 1829
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1829
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1829
; 0,00s
; (get-info :all-statistics)
(push) ; 1829
; [then-branch 3805] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3806] 4 == 2
(push) ; 1830
; [else-branch 3806] 4 != 2
(pop) ; 1830
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1830
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1830
; 0,00s
; (get-info :all-statistics)
(push) ; 1830
; [then-branch 3807] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3808] 4 == 2
(push) ; 1831
; [else-branch 3808] 4 != 2
(pop) ; 1831
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1831
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1831
; 0,00s
; (get-info :all-statistics)
(push) ; 1831
; [then-branch 3809] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3810] 4 == 2
(push) ; 1832
; [else-branch 3810] 4 != 2
(pop) ; 1832
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1832
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1832
; 0,00s
; (get-info :all-statistics)
(push) ; 1832
; [then-branch 3811] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3812] 4 == 2
(push) ; 1833
; [else-branch 3812] 4 != 2
(pop) ; 1833
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1833
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1833
; 0,00s
; (get-info :all-statistics)
(push) ; 1833
; [then-branch 3813] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3814] 4 == 2
(push) ; 1834
; [else-branch 3814] 4 != 2
(pop) ; 1834
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1834
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1834
; 0,00s
; (get-info :all-statistics)
(push) ; 1834
; [then-branch 3815] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3816] 4 == 2
(push) ; 1835
; [else-branch 3816] 4 != 2
(pop) ; 1835
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1835
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1835
; 0,00s
; (get-info :all-statistics)
(push) ; 1835
; [then-branch 3817] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3818] 4 == 2
(push) ; 1836
; [else-branch 3818] 4 != 2
(pop) ; 1836
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1836
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1836
; 0,00s
; (get-info :all-statistics)
(push) ; 1836
; [then-branch 3819] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3820] 4 == 2
(push) ; 1837
; [else-branch 3820] 4 != 2
(pop) ; 1837
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1837
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1837
; 0,00s
; (get-info :all-statistics)
(push) ; 1837
; [then-branch 3821] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3822] 4 == 2
(push) ; 1838
; [else-branch 3822] 4 != 2
(pop) ; 1838
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1838
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1838
; 0,00s
; (get-info :all-statistics)
(push) ; 1838
; [then-branch 3823] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3824] 4 == 2
(push) ; 1839
; [else-branch 3824] 4 != 2
(pop) ; 1839
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1839
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1839
; 0,00s
; (get-info :all-statistics)
(push) ; 1839
; [then-branch 3825] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3826] 4 == 2
(push) ; 1840
; [else-branch 3826] 4 != 2
(pop) ; 1840
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1840
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1840
; 0,00s
; (get-info :all-statistics)
(push) ; 1840
; [then-branch 3827] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3828] 4 == 2
(push) ; 1841
; [else-branch 3828] 4 != 2
(pop) ; 1841
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1841
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1841
; 0,00s
; (get-info :all-statistics)
(push) ; 1841
; [then-branch 3829] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3830] 4 == 2
(push) ; 1842
; [else-branch 3830] 4 != 2
(pop) ; 1842
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1842
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1842
; 0,00s
; (get-info :all-statistics)
(push) ; 1842
; [then-branch 3831] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3832] 4 == 2
(push) ; 1843
; [else-branch 3832] 4 != 2
(pop) ; 1843
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1843
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1843
; 0,00s
; (get-info :all-statistics)
(push) ; 1843
; [then-branch 3833] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3834] 4 == 2
(push) ; 1844
; [else-branch 3834] 4 != 2
(pop) ; 1844
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1844
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1844
; 0,00s
; (get-info :all-statistics)
(push) ; 1844
; [then-branch 3835] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3836] 4 == 2
(push) ; 1845
; [else-branch 3836] 4 != 2
(pop) ; 1845
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1845
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1845
; 0,00s
; (get-info :all-statistics)
(push) ; 1845
; [then-branch 3837] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3838] 4 == 2
(push) ; 1846
; [else-branch 3838] 4 != 2
(pop) ; 1846
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1846
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1846
; 0,00s
; (get-info :all-statistics)
(push) ; 1846
; [then-branch 3839] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3840] 4 == 2
(push) ; 1847
; [else-branch 3840] 4 != 2
(pop) ; 1847
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1847
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1847
; 0,00s
; (get-info :all-statistics)
(push) ; 1847
; [then-branch 3841] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3842] 4 == 2
(push) ; 1848
; [else-branch 3842] 4 != 2
(pop) ; 1848
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1848
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1848
; 0,00s
; (get-info :all-statistics)
(push) ; 1848
; [then-branch 3843] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3844] 4 == 2
(push) ; 1849
; [else-branch 3844] 4 != 2
(pop) ; 1849
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1849
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1849
; 0,00s
; (get-info :all-statistics)
(push) ; 1849
; [then-branch 3845] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3846] 4 == 2
(push) ; 1850
; [else-branch 3846] 4 != 2
(pop) ; 1850
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1850
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1850
; 0,00s
; (get-info :all-statistics)
(push) ; 1850
; [then-branch 3847] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3848] 4 == 2
(push) ; 1851
; [else-branch 3848] 4 != 2
(pop) ; 1851
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1851
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1851
; 0,00s
; (get-info :all-statistics)
(push) ; 1851
; [then-branch 3849] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3850] 4 == 2
(push) ; 1852
; [else-branch 3850] 4 != 2
(pop) ; 1852
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1852
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1852
; 0,00s
; (get-info :all-statistics)
(push) ; 1852
; [then-branch 3851] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3852] 4 == 2
(push) ; 1853
; [else-branch 3852] 4 != 2
(pop) ; 1853
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1853
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1853
; 0,00s
; (get-info :all-statistics)
(push) ; 1853
; [then-branch 3853] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3854] 4 == 2
(push) ; 1854
; [else-branch 3854] 4 != 2
(pop) ; 1854
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1854
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1854
; 0,00s
; (get-info :all-statistics)
(push) ; 1854
; [then-branch 3855] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3856] 4 == 2
(push) ; 1855
; [else-branch 3856] 4 != 2
(pop) ; 1855
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1855
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1855
; 0,00s
; (get-info :all-statistics)
(push) ; 1855
; [then-branch 3857] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3858] 4 == 2
(push) ; 1856
; [else-branch 3858] 4 != 2
(pop) ; 1856
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1856
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1856
; 0,00s
; (get-info :all-statistics)
(push) ; 1856
; [then-branch 3859] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3860] 4 == 2
(push) ; 1857
; [else-branch 3860] 4 != 2
(pop) ; 1857
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1857
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1857
; 0,00s
; (get-info :all-statistics)
(push) ; 1857
; [then-branch 3861] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3862] 4 == 2
(push) ; 1858
; [else-branch 3862] 4 != 2
(pop) ; 1858
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1858
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1858
; 0,00s
; (get-info :all-statistics)
(push) ; 1858
; [then-branch 3863] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3864] 4 == 2
(push) ; 1859
; [else-branch 3864] 4 != 2
(pop) ; 1859
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1859
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1859
; 0,00s
; (get-info :all-statistics)
(push) ; 1859
; [then-branch 3865] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3866] 4 == 2
(push) ; 1860
; [else-branch 3866] 4 != 2
(pop) ; 1860
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1860
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1860
; 0,00s
; (get-info :all-statistics)
(push) ; 1860
; [then-branch 3867] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3868] 4 == 2
(push) ; 1861
; [else-branch 3868] 4 != 2
(pop) ; 1861
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1861
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1861
; 0,00s
; (get-info :all-statistics)
(push) ; 1861
; [then-branch 3869] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3870] 4 == 2
(push) ; 1862
; [else-branch 3870] 4 != 2
(pop) ; 1862
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1862
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1862
; 0,00s
; (get-info :all-statistics)
(push) ; 1862
; [then-branch 3871] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3872] 4 == 2
(push) ; 1863
; [else-branch 3872] 4 != 2
(pop) ; 1863
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1863
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1863
; 0,00s
; (get-info :all-statistics)
(push) ; 1863
; [then-branch 3873] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3874] 4 == 2
(push) ; 1864
; [else-branch 3874] 4 != 2
(pop) ; 1864
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1864
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1864
; 0,00s
; (get-info :all-statistics)
(push) ; 1864
; [then-branch 3875] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3876] 4 == 2
(push) ; 1865
; [else-branch 3876] 4 != 2
(pop) ; 1865
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1865
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1865
; 0,00s
; (get-info :all-statistics)
(push) ; 1865
; [then-branch 3877] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3878] 4 == 2
(push) ; 1866
; [else-branch 3878] 4 != 2
(pop) ; 1866
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1866
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1866
; 0,00s
; (get-info :all-statistics)
(push) ; 1866
; [then-branch 3879] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3880] 4 == 2
(push) ; 1867
; [else-branch 3880] 4 != 2
(pop) ; 1867
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1867
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1867
; 0,00s
; (get-info :all-statistics)
(push) ; 1867
; [then-branch 3881] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3882] 4 == 2
(push) ; 1868
; [else-branch 3882] 4 != 2
(pop) ; 1868
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1868
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1868
; 0,00s
; (get-info :all-statistics)
(push) ; 1868
; [then-branch 3883] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3884] 4 == 2
(push) ; 1869
; [else-branch 3884] 4 != 2
(pop) ; 1869
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1869
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1869
; 0,00s
; (get-info :all-statistics)
(push) ; 1869
; [then-branch 3885] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3886] 4 == 2
(push) ; 1870
; [else-branch 3886] 4 != 2
(pop) ; 1870
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1870
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1870
; 0,00s
; (get-info :all-statistics)
(push) ; 1870
; [then-branch 3887] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3888] 4 == 2
(push) ; 1871
; [else-branch 3888] 4 != 2
(pop) ; 1871
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1871
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1871
; 0,00s
; (get-info :all-statistics)
(push) ; 1871
; [then-branch 3889] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3890] 4 == 2
(push) ; 1872
; [else-branch 3890] 4 != 2
(pop) ; 1872
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1872
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1872
; 0,00s
; (get-info :all-statistics)
(push) ; 1872
; [then-branch 3891] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3892] 4 == 2
(push) ; 1873
; [else-branch 3892] 4 != 2
(pop) ; 1873
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1873
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1873
; 0,00s
; (get-info :all-statistics)
(push) ; 1873
; [then-branch 3893] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3894] 4 == 2
(push) ; 1874
; [else-branch 3894] 4 != 2
(pop) ; 1874
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1874
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1874
; 0,00s
; (get-info :all-statistics)
(push) ; 1874
; [then-branch 3895] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3896] 4 == 2
(push) ; 1875
; [else-branch 3896] 4 != 2
(pop) ; 1875
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1875
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1875
; 0,00s
; (get-info :all-statistics)
(push) ; 1875
; [then-branch 3897] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3898] 4 == 2
(push) ; 1876
; [else-branch 3898] 4 != 2
(pop) ; 1876
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1876
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1876
; 0,00s
; (get-info :all-statistics)
(push) ; 1876
; [then-branch 3899] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3900] 4 == 2
(push) ; 1877
; [else-branch 3900] 4 != 2
(pop) ; 1877
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1877
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1877
; 0,00s
; (get-info :all-statistics)
(push) ; 1877
; [then-branch 3901] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3902] 4 == 2
(push) ; 1878
; [else-branch 3902] 4 != 2
(pop) ; 1878
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1878
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1878
; 0,00s
; (get-info :all-statistics)
(push) ; 1878
; [then-branch 3903] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3904] 4 == 2
(push) ; 1879
; [else-branch 3904] 4 != 2
(pop) ; 1879
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1879
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1879
; 0,00s
; (get-info :all-statistics)
(push) ; 1879
; [then-branch 3905] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3906] 4 == 2
(push) ; 1880
; [else-branch 3906] 4 != 2
(pop) ; 1880
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1880
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1880
; 0,00s
; (get-info :all-statistics)
(push) ; 1880
; [then-branch 3907] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3908] 4 == 2
(push) ; 1881
; [else-branch 3908] 4 != 2
(pop) ; 1881
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1881
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1881
; 0,00s
; (get-info :all-statistics)
(push) ; 1881
; [then-branch 3909] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3910] 4 == 2
(push) ; 1882
; [else-branch 3910] 4 != 2
(pop) ; 1882
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1882
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1882
; 0,00s
; (get-info :all-statistics)
(push) ; 1882
; [then-branch 3911] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3912] 4 == 2
(push) ; 1883
; [else-branch 3912] 4 != 2
(pop) ; 1883
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1883
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1883
; 0,00s
; (get-info :all-statistics)
(push) ; 1883
; [then-branch 3913] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3914] 4 == 2
(push) ; 1884
; [else-branch 3914] 4 != 2
(pop) ; 1884
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1884
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1884
; 0,00s
; (get-info :all-statistics)
(push) ; 1884
; [then-branch 3915] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3916] 4 == 2
(push) ; 1885
; [else-branch 3916] 4 != 2
(pop) ; 1885
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1885
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1885
; 0,00s
; (get-info :all-statistics)
(push) ; 1885
; [then-branch 3917] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3918] 4 == 2
(push) ; 1886
; [else-branch 3918] 4 != 2
(pop) ; 1886
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1886
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1886
; 0,00s
; (get-info :all-statistics)
(push) ; 1886
; [then-branch 3919] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3920] 4 == 2
(push) ; 1887
; [else-branch 3920] 4 != 2
(pop) ; 1887
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1887
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1887
; 0,00s
; (get-info :all-statistics)
(push) ; 1887
; [then-branch 3921] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3922] 4 == 2
(push) ; 1888
; [else-branch 3922] 4 != 2
(pop) ; 1888
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1888
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1888
; 0,00s
; (get-info :all-statistics)
(push) ; 1888
; [then-branch 3923] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3924] 4 == 2
(push) ; 1889
; [else-branch 3924] 4 != 2
(pop) ; 1889
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1889
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1889
; 0,00s
; (get-info :all-statistics)
(push) ; 1889
; [then-branch 3925] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3926] 4 == 2
(push) ; 1890
; [else-branch 3926] 4 != 2
(pop) ; 1890
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1890
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1890
; 0,00s
; (get-info :all-statistics)
(push) ; 1890
; [then-branch 3927] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3928] 4 == 2
(push) ; 1891
; [else-branch 3928] 4 != 2
(pop) ; 1891
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1891
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1891
; 0,00s
; (get-info :all-statistics)
(push) ; 1891
; [then-branch 3929] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3930] 4 == 2
(push) ; 1892
; [else-branch 3930] 4 != 2
(pop) ; 1892
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1892
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1892
; 0,00s
; (get-info :all-statistics)
(push) ; 1892
; [then-branch 3931] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3932] 4 == 2
(push) ; 1893
; [else-branch 3932] 4 != 2
(pop) ; 1893
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1893
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1893
; 0,00s
; (get-info :all-statistics)
(push) ; 1893
; [then-branch 3933] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3934] 4 == 2
(push) ; 1894
; [else-branch 3934] 4 != 2
(pop) ; 1894
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1894
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1894
; 0,00s
; (get-info :all-statistics)
(push) ; 1894
; [then-branch 3935] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3936] 4 == 2
(push) ; 1895
; [else-branch 3936] 4 != 2
(pop) ; 1895
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1895
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1895
; 0,00s
; (get-info :all-statistics)
(push) ; 1895
; [then-branch 3937] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3938] 4 == 2
(push) ; 1896
; [else-branch 3938] 4 != 2
(pop) ; 1896
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1896
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1896
; 0,00s
; (get-info :all-statistics)
(push) ; 1896
; [then-branch 3939] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3940] 4 == 2
(push) ; 1897
; [else-branch 3940] 4 != 2
(pop) ; 1897
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1897
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1897
; 0,00s
; (get-info :all-statistics)
(push) ; 1897
; [then-branch 3941] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3942] 4 == 2
(push) ; 1898
; [else-branch 3942] 4 != 2
(pop) ; 1898
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1898
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1898
; 0,00s
; (get-info :all-statistics)
(push) ; 1898
; [then-branch 3943] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3944] 4 == 2
(push) ; 1899
; [else-branch 3944] 4 != 2
(pop) ; 1899
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1899
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1899
; 0,00s
; (get-info :all-statistics)
(push) ; 1899
; [then-branch 3945] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3946] 4 == 2
(push) ; 1900
; [else-branch 3946] 4 != 2
(pop) ; 1900
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1900
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1900
; 0,00s
; (get-info :all-statistics)
(push) ; 1900
; [then-branch 3947] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3948] 4 == 2
(push) ; 1901
; [else-branch 3948] 4 != 2
(pop) ; 1901
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1901
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1901
; 0,00s
; (get-info :all-statistics)
(push) ; 1901
; [then-branch 3949] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3950] 4 == 2
(push) ; 1902
; [else-branch 3950] 4 != 2
(pop) ; 1902
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1902
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1902
; 0,00s
; (get-info :all-statistics)
(push) ; 1902
; [then-branch 3951] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3952] 4 == 2
(push) ; 1903
; [else-branch 3952] 4 != 2
(pop) ; 1903
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1903
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1903
; 0,00s
; (get-info :all-statistics)
(push) ; 1903
; [then-branch 3953] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3954] 4 == 2
(push) ; 1904
; [else-branch 3954] 4 != 2
(pop) ; 1904
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1904
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1904
; 0,00s
; (get-info :all-statistics)
(push) ; 1904
; [then-branch 3955] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3956] 4 == 2
(push) ; 1905
; [else-branch 3956] 4 != 2
(pop) ; 1905
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1905
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1905
; 0,00s
; (get-info :all-statistics)
(push) ; 1905
; [then-branch 3957] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3958] 4 == 2
(push) ; 1906
; [else-branch 3958] 4 != 2
(pop) ; 1906
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1906
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1906
; 0,00s
; (get-info :all-statistics)
(push) ; 1906
; [then-branch 3959] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3960] 4 == 2
(push) ; 1907
; [else-branch 3960] 4 != 2
(pop) ; 1907
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1907
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1907
; 0,00s
; (get-info :all-statistics)
(push) ; 1907
; [then-branch 3961] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3962] 4 == 2
(push) ; 1908
; [else-branch 3962] 4 != 2
(pop) ; 1908
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1908
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1908
; 0,00s
; (get-info :all-statistics)
(push) ; 1908
; [then-branch 3963] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3964] 4 == 2
(push) ; 1909
; [else-branch 3964] 4 != 2
(pop) ; 1909
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1909
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1909
; 0,00s
; (get-info :all-statistics)
(push) ; 1909
; [then-branch 3965] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3966] 4 == 2
(push) ; 1910
; [else-branch 3966] 4 != 2
(pop) ; 1910
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1910
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1910
; 0,00s
; (get-info :all-statistics)
(push) ; 1910
; [then-branch 3967] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3968] 4 == 2
(push) ; 1911
; [else-branch 3968] 4 != 2
(pop) ; 1911
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1911
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1911
; 0,00s
; (get-info :all-statistics)
(push) ; 1911
; [then-branch 3969] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3970] 4 == 2
(push) ; 1912
; [else-branch 3970] 4 != 2
(pop) ; 1912
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1912
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1912
; 0,00s
; (get-info :all-statistics)
(push) ; 1912
; [then-branch 3971] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3972] 4 == 2
(push) ; 1913
; [else-branch 3972] 4 != 2
(pop) ; 1913
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1913
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1913
; 0,00s
; (get-info :all-statistics)
(push) ; 1913
; [then-branch 3973] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3974] 4 == 2
(push) ; 1914
; [else-branch 3974] 4 != 2
(pop) ; 1914
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1914
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1914
; 0,00s
; (get-info :all-statistics)
(push) ; 1914
; [then-branch 3975] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3976] 4 == 2
(push) ; 1915
; [else-branch 3976] 4 != 2
(pop) ; 1915
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1915
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1915
; 0,00s
; (get-info :all-statistics)
(push) ; 1915
; [then-branch 3977] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3978] 4 == 2
(push) ; 1916
; [else-branch 3978] 4 != 2
(pop) ; 1916
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1916
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1916
; 0,00s
; (get-info :all-statistics)
(push) ; 1916
; [then-branch 3979] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3980] 4 == 2
(push) ; 1917
; [else-branch 3980] 4 != 2
(pop) ; 1917
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1917
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1917
; 0,00s
; (get-info :all-statistics)
(push) ; 1917
; [then-branch 3981] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3982] 4 == 2
(push) ; 1918
; [else-branch 3982] 4 != 2
(pop) ; 1918
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1918
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1918
; 0,00s
; (get-info :all-statistics)
(push) ; 1918
; [then-branch 3983] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3984] 4 == 2
(push) ; 1919
; [else-branch 3984] 4 != 2
(pop) ; 1919
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1919
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1919
; 0,00s
; (get-info :all-statistics)
(push) ; 1919
; [then-branch 3985] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3986] 4 == 2
(push) ; 1920
; [else-branch 3986] 4 != 2
(pop) ; 1920
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1920
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1920
; 0,00s
; (get-info :all-statistics)
(push) ; 1920
; [then-branch 3987] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3988] 4 == 2
(push) ; 1921
; [else-branch 3988] 4 != 2
(pop) ; 1921
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1921
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1921
; 0,00s
; (get-info :all-statistics)
(push) ; 1921
; [then-branch 3989] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3990] 4 == 2
(push) ; 1922
; [else-branch 3990] 4 != 2
(pop) ; 1922
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1922
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1922
; 0,00s
; (get-info :all-statistics)
(push) ; 1922
; [then-branch 3991] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3992] 4 == 2
(push) ; 1923
; [else-branch 3992] 4 != 2
(pop) ; 1923
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1923
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1923
; 0,00s
; (get-info :all-statistics)
(push) ; 1923
; [then-branch 3993] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3994] 4 == 2
(push) ; 1924
; [else-branch 3994] 4 != 2
(pop) ; 1924
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1924
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1924
; 0,00s
; (get-info :all-statistics)
(push) ; 1924
; [then-branch 3995] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3996] 4 == 2
(push) ; 1925
; [else-branch 3996] 4 != 2
(pop) ; 1925
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1925
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1925
; 0,00s
; (get-info :all-statistics)
(push) ; 1925
; [then-branch 3997] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 3998] 4 == 2
(push) ; 1926
; [else-branch 3998] 4 != 2
(pop) ; 1926
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1926
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1926
; 0,00s
; (get-info :all-statistics)
(push) ; 1926
; [then-branch 3999] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4000] 4 == 2
(push) ; 1927
; [else-branch 4000] 4 != 2
(pop) ; 1927
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1927
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1927
; 0,00s
; (get-info :all-statistics)
(push) ; 1927
; [then-branch 4001] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4002] 4 == 2
(push) ; 1928
; [else-branch 4002] 4 != 2
(pop) ; 1928
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1928
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1928
; 0,00s
; (get-info :all-statistics)
(push) ; 1928
; [then-branch 4003] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4004] 4 == 2
(push) ; 1929
; [else-branch 4004] 4 != 2
(pop) ; 1929
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1929
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1929
; 0,00s
; (get-info :all-statistics)
(push) ; 1929
; [then-branch 4005] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4006] 4 == 2
(push) ; 1930
; [else-branch 4006] 4 != 2
(pop) ; 1930
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1930
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1930
; 0,00s
; (get-info :all-statistics)
(push) ; 1930
; [then-branch 4007] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4008] 4 == 2
(push) ; 1931
; [else-branch 4008] 4 != 2
(pop) ; 1931
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1931
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1931
; 0,00s
; (get-info :all-statistics)
(push) ; 1931
; [then-branch 4009] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4010] 4 == 2
(push) ; 1932
; [else-branch 4010] 4 != 2
(pop) ; 1932
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1932
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1932
; 0,00s
; (get-info :all-statistics)
(push) ; 1932
; [then-branch 4011] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4012] 4 == 2
(push) ; 1933
; [else-branch 4012] 4 != 2
(pop) ; 1933
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1933
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1933
; 0,00s
; (get-info :all-statistics)
(push) ; 1933
; [then-branch 4013] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4014] 4 == 2
(push) ; 1934
; [else-branch 4014] 4 != 2
(pop) ; 1934
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1934
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1934
; 0,00s
; (get-info :all-statistics)
(push) ; 1934
; [then-branch 4015] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4016] 4 == 2
(push) ; 1935
; [else-branch 4016] 4 != 2
(pop) ; 1935
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1935
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1935
; 0,00s
; (get-info :all-statistics)
(push) ; 1935
; [then-branch 4017] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4018] 4 == 2
(push) ; 1936
; [else-branch 4018] 4 != 2
(pop) ; 1936
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1936
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1936
; 0,00s
; (get-info :all-statistics)
(push) ; 1936
; [then-branch 4019] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4020] 4 == 2
(push) ; 1937
; [else-branch 4020] 4 != 2
(pop) ; 1937
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1937
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1937
; 0,00s
; (get-info :all-statistics)
(push) ; 1937
; [then-branch 4021] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4022] 4 == 2
(push) ; 1938
; [else-branch 4022] 4 != 2
(pop) ; 1938
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1938
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1938
; 0,00s
; (get-info :all-statistics)
(push) ; 1938
; [then-branch 4023] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4024] 4 == 2
(push) ; 1939
; [else-branch 4024] 4 != 2
(pop) ; 1939
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1939
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1939
; 0,00s
; (get-info :all-statistics)
(push) ; 1939
; [then-branch 4025] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4026] 4 == 2
(push) ; 1940
; [else-branch 4026] 4 != 2
(pop) ; 1940
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1940
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1940
; 0,00s
; (get-info :all-statistics)
(push) ; 1940
; [then-branch 4027] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4028] 4 == 2
(push) ; 1941
; [else-branch 4028] 4 != 2
(pop) ; 1941
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1941
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1941
; 0,00s
; (get-info :all-statistics)
(push) ; 1941
; [then-branch 4029] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4030] 4 == 2
(push) ; 1942
; [else-branch 4030] 4 != 2
(pop) ; 1942
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1942
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1942
; 0,00s
; (get-info :all-statistics)
(push) ; 1942
; [then-branch 4031] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4032] 4 == 2
(push) ; 1943
; [else-branch 4032] 4 != 2
(pop) ; 1943
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1943
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1943
; 0,00s
; (get-info :all-statistics)
(push) ; 1943
; [then-branch 4033] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4034] 4 == 2
(push) ; 1944
; [else-branch 4034] 4 != 2
(pop) ; 1944
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1944
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1944
; 0,00s
; (get-info :all-statistics)
(push) ; 1944
; [then-branch 4035] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4036] 4 == 2
(push) ; 1945
; [else-branch 4036] 4 != 2
(pop) ; 1945
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1945
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1945
; 0,00s
; (get-info :all-statistics)
(push) ; 1945
; [then-branch 4037] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4038] 4 == 2
(push) ; 1946
; [else-branch 4038] 4 != 2
(pop) ; 1946
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1946
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1946
; 0,00s
; (get-info :all-statistics)
(push) ; 1946
; [then-branch 4039] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4040] 4 == 2
(push) ; 1947
; [else-branch 4040] 4 != 2
(pop) ; 1947
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1947
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1947
; 0,00s
; (get-info :all-statistics)
(push) ; 1947
; [then-branch 4041] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4042] 4 == 2
(push) ; 1948
; [else-branch 4042] 4 != 2
(pop) ; 1948
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1948
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1948
; 0,00s
; (get-info :all-statistics)
(push) ; 1948
; [then-branch 4043] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4044] 4 == 2
(push) ; 1949
; [else-branch 4044] 4 != 2
(pop) ; 1949
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1949
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1949
; 0,00s
; (get-info :all-statistics)
(push) ; 1949
; [then-branch 4045] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4046] 4 == 2
(push) ; 1950
; [else-branch 4046] 4 != 2
(pop) ; 1950
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1950
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1950
; 0,00s
; (get-info :all-statistics)
(push) ; 1950
; [then-branch 4047] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4048] 4 == 2
(push) ; 1951
; [else-branch 4048] 4 != 2
(pop) ; 1951
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1951
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1951
; 0,00s
; (get-info :all-statistics)
(push) ; 1951
; [then-branch 4049] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4050] 4 == 2
(push) ; 1952
; [else-branch 4050] 4 != 2
(pop) ; 1952
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1952
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1952
; 0,00s
; (get-info :all-statistics)
(push) ; 1952
; [then-branch 4051] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4052] 4 == 2
(push) ; 1953
; [else-branch 4052] 4 != 2
(pop) ; 1953
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1953
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1953
; 0,00s
; (get-info :all-statistics)
(push) ; 1953
; [then-branch 4053] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4054] 4 == 2
(push) ; 1954
; [else-branch 4054] 4 != 2
(pop) ; 1954
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1954
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1954
; 0,00s
; (get-info :all-statistics)
(push) ; 1954
; [then-branch 4055] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4056] 4 == 2
(push) ; 1955
; [else-branch 4056] 4 != 2
(pop) ; 1955
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1955
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1955
; 0,00s
; (get-info :all-statistics)
(push) ; 1955
; [then-branch 4057] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4058] 4 == 2
(push) ; 1956
; [else-branch 4058] 4 != 2
(pop) ; 1956
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1956
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1956
; 0,00s
; (get-info :all-statistics)
(push) ; 1956
; [then-branch 4059] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4060] 4 == 2
(push) ; 1957
; [else-branch 4060] 4 != 2
(pop) ; 1957
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1957
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1957
; 0,00s
; (get-info :all-statistics)
(push) ; 1957
; [then-branch 4061] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4062] 4 == 2
(push) ; 1958
; [else-branch 4062] 4 != 2
(pop) ; 1958
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1958
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1958
; 0,00s
; (get-info :all-statistics)
(push) ; 1958
; [then-branch 4063] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4064] 4 == 2
(push) ; 1959
; [else-branch 4064] 4 != 2
(pop) ; 1959
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1959
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1959
; 0,00s
; (get-info :all-statistics)
(push) ; 1959
; [then-branch 4065] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4066] 4 == 2
(push) ; 1960
; [else-branch 4066] 4 != 2
(pop) ; 1960
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1960
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1960
; 0,00s
; (get-info :all-statistics)
(push) ; 1960
; [then-branch 4067] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4068] 4 == 2
(push) ; 1961
; [else-branch 4068] 4 != 2
(pop) ; 1961
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1961
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1961
; 0,00s
; (get-info :all-statistics)
(push) ; 1961
; [then-branch 4069] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4070] 4 == 2
(push) ; 1962
; [else-branch 4070] 4 != 2
(pop) ; 1962
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1962
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1962
; 0,00s
; (get-info :all-statistics)
(push) ; 1962
; [then-branch 4071] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4072] 4 == 2
(push) ; 1963
; [else-branch 4072] 4 != 2
(pop) ; 1963
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1963
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1963
; 0,00s
; (get-info :all-statistics)
(push) ; 1963
; [then-branch 4073] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4074] 4 == 2
(push) ; 1964
; [else-branch 4074] 4 != 2
(pop) ; 1964
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1964
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1964
; 0,00s
; (get-info :all-statistics)
(push) ; 1964
; [then-branch 4075] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4076] 4 == 2
(push) ; 1965
; [else-branch 4076] 4 != 2
(pop) ; 1965
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1965
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1965
; 0,00s
; (get-info :all-statistics)
(push) ; 1965
; [then-branch 4077] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4078] 4 == 2
(push) ; 1966
; [else-branch 4078] 4 != 2
(pop) ; 1966
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1966
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1966
; 0,00s
; (get-info :all-statistics)
(push) ; 1966
; [then-branch 4079] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4080] 4 == 2
(push) ; 1967
; [else-branch 4080] 4 != 2
(pop) ; 1967
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1967
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1967
; 0,00s
; (get-info :all-statistics)
(push) ; 1967
; [then-branch 4081] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4082] 4 == 2
(push) ; 1968
; [else-branch 4082] 4 != 2
(pop) ; 1968
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1968
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1968
; 0,00s
; (get-info :all-statistics)
(push) ; 1968
; [then-branch 4083] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4084] 4 == 2
(push) ; 1969
; [else-branch 4084] 4 != 2
(pop) ; 1969
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1969
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1969
; 0,00s
; (get-info :all-statistics)
(push) ; 1969
; [then-branch 4085] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4086] 4 == 2
(push) ; 1970
; [else-branch 4086] 4 != 2
(pop) ; 1970
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1970
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1970
; 0,00s
; (get-info :all-statistics)
(push) ; 1970
; [then-branch 4087] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4088] 4 == 2
(push) ; 1971
; [else-branch 4088] 4 != 2
(pop) ; 1971
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1971
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1971
; 0,00s
; (get-info :all-statistics)
(push) ; 1971
; [then-branch 4089] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4090] 4 == 2
(push) ; 1972
; [else-branch 4090] 4 != 2
(pop) ; 1972
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1972
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1972
; 0,00s
; (get-info :all-statistics)
(push) ; 1972
; [then-branch 4091] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4092] 4 == 2
(push) ; 1973
; [else-branch 4092] 4 != 2
(pop) ; 1973
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1973
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1973
; 0,00s
; (get-info :all-statistics)
(push) ; 1973
; [then-branch 4093] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4094] 4 == 2
(push) ; 1974
; [else-branch 4094] 4 != 2
(pop) ; 1974
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1974
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1974
; 0,00s
; (get-info :all-statistics)
(push) ; 1974
; [then-branch 4095] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4096] 4 == 2
(push) ; 1975
; [else-branch 4096] 4 != 2
(pop) ; 1975
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1975
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1975
; 0,00s
; (get-info :all-statistics)
(push) ; 1975
; [then-branch 4097] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4098] 4 == 2
(push) ; 1976
; [else-branch 4098] 4 != 2
(pop) ; 1976
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1976
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1976
; 0,00s
; (get-info :all-statistics)
(push) ; 1976
; [then-branch 4099] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4100] 4 == 2
(push) ; 1977
; [else-branch 4100] 4 != 2
(pop) ; 1977
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1977
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1977
; 0,00s
; (get-info :all-statistics)
(push) ; 1977
; [then-branch 4101] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4102] 4 == 2
(push) ; 1978
; [else-branch 4102] 4 != 2
(pop) ; 1978
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1978
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1978
; 0,00s
; (get-info :all-statistics)
(push) ; 1978
; [then-branch 4103] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4104] 4 == 2
(push) ; 1979
; [else-branch 4104] 4 != 2
(pop) ; 1979
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1979
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1979
; 0,00s
; (get-info :all-statistics)
(push) ; 1979
; [then-branch 4105] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4106] 4 == 2
(push) ; 1980
; [else-branch 4106] 4 != 2
(pop) ; 1980
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1980
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1980
; 0,00s
; (get-info :all-statistics)
(push) ; 1980
; [then-branch 4107] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4108] 4 == 2
(push) ; 1981
; [else-branch 4108] 4 != 2
(pop) ; 1981
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1981
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1981
; 0,00s
; (get-info :all-statistics)
(push) ; 1981
; [then-branch 4109] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4110] 4 == 2
(push) ; 1982
; [else-branch 4110] 4 != 2
(pop) ; 1982
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1982
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1982
; 0,00s
; (get-info :all-statistics)
(push) ; 1982
; [then-branch 4111] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4112] 4 == 2
(push) ; 1983
; [else-branch 4112] 4 != 2
(pop) ; 1983
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1983
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1983
; 0,00s
; (get-info :all-statistics)
(push) ; 1983
; [then-branch 4113] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4114] 4 == 2
(push) ; 1984
; [else-branch 4114] 4 != 2
(pop) ; 1984
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1984
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1984
; 0,00s
; (get-info :all-statistics)
(push) ; 1984
; [then-branch 4115] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4116] 4 == 2
(push) ; 1985
; [else-branch 4116] 4 != 2
(pop) ; 1985
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1985
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1985
; 0,00s
; (get-info :all-statistics)
(push) ; 1985
; [then-branch 4117] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4118] 4 == 2
(push) ; 1986
; [else-branch 4118] 4 != 2
(pop) ; 1986
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1986
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1986
; 0,00s
; (get-info :all-statistics)
(push) ; 1986
; [then-branch 4119] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4120] 4 == 2
(push) ; 1987
; [else-branch 4120] 4 != 2
(pop) ; 1987
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1987
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1987
; 0,00s
; (get-info :all-statistics)
(push) ; 1987
; [then-branch 4121] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4122] 4 == 2
(push) ; 1988
; [else-branch 4122] 4 != 2
(pop) ; 1988
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1988
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1988
; 0,00s
; (get-info :all-statistics)
(push) ; 1988
; [then-branch 4123] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4124] 4 == 2
(push) ; 1989
; [else-branch 4124] 4 != 2
(pop) ; 1989
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1989
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1989
; 0,00s
; (get-info :all-statistics)
(push) ; 1989
; [then-branch 4125] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4126] 4 == 2
(push) ; 1990
; [else-branch 4126] 4 != 2
(pop) ; 1990
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1990
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1990
; 0,00s
; (get-info :all-statistics)
(push) ; 1990
; [then-branch 4127] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4128] 4 == 2
(push) ; 1991
; [else-branch 4128] 4 != 2
(pop) ; 1991
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1991
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1991
; 0,00s
; (get-info :all-statistics)
(push) ; 1991
; [then-branch 4129] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4130] 4 == 2
(push) ; 1992
; [else-branch 4130] 4 != 2
(pop) ; 1992
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1992
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1992
; 0,00s
; (get-info :all-statistics)
(push) ; 1992
; [then-branch 4131] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4132] 4 == 2
(push) ; 1993
; [else-branch 4132] 4 != 2
(pop) ; 1993
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1993
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1993
; 0,00s
; (get-info :all-statistics)
(push) ; 1993
; [then-branch 4133] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4134] 4 == 2
(push) ; 1994
; [else-branch 4134] 4 != 2
(pop) ; 1994
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1994
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1994
; 0,00s
; (get-info :all-statistics)
(push) ; 1994
; [then-branch 4135] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4136] 4 == 2
(push) ; 1995
; [else-branch 4136] 4 != 2
(pop) ; 1995
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1995
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1995
; 0,00s
; (get-info :all-statistics)
(push) ; 1995
; [then-branch 4137] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4138] 4 == 2
(push) ; 1996
; [else-branch 4138] 4 != 2
(pop) ; 1996
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1996
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1996
; 0,00s
; (get-info :all-statistics)
(push) ; 1996
; [then-branch 4139] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4140] 4 == 2
(push) ; 1997
; [else-branch 4140] 4 != 2
(pop) ; 1997
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1997
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1997
; 0,00s
; (get-info :all-statistics)
(push) ; 1997
; [then-branch 4141] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4142] 4 == 2
(push) ; 1998
; [else-branch 4142] 4 != 2
(pop) ; 1998
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1998
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1998
; 0,00s
; (get-info :all-statistics)
(push) ; 1998
; [then-branch 4143] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4144] 4 == 2
(push) ; 1999
; [else-branch 4144] 4 != 2
(pop) ; 1999
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 1999
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 1999
; 0,00s
; (get-info :all-statistics)
(push) ; 1999
; [then-branch 4145] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4146] 4 == 2
(push) ; 2000
; [else-branch 4146] 4 != 2
(pop) ; 2000
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2000
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2000
; 0,00s
; (get-info :all-statistics)
(push) ; 2000
; [then-branch 4147] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4148] 4 == 2
(push) ; 2001
; [else-branch 4148] 4 != 2
(pop) ; 2001
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2001
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2001
; 0,00s
; (get-info :all-statistics)
(push) ; 2001
; [then-branch 4149] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4150] 4 == 2
(push) ; 2002
; [else-branch 4150] 4 != 2
(pop) ; 2002
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2002
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2002
; 0,00s
; (get-info :all-statistics)
(push) ; 2002
; [then-branch 4151] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4152] 4 == 2
(push) ; 2003
; [else-branch 4152] 4 != 2
(pop) ; 2003
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2003
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2003
; 0,00s
; (get-info :all-statistics)
(push) ; 2003
; [then-branch 4153] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4154] 4 == 2
(push) ; 2004
; [else-branch 4154] 4 != 2
(pop) ; 2004
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2004
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2004
; 0,00s
; (get-info :all-statistics)
(push) ; 2004
; [then-branch 4155] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4156] 4 == 2
(push) ; 2005
; [else-branch 4156] 4 != 2
(pop) ; 2005
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2005
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2005
; 0,00s
; (get-info :all-statistics)
(push) ; 2005
; [then-branch 4157] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4158] 4 == 2
(push) ; 2006
; [else-branch 4158] 4 != 2
(pop) ; 2006
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2006
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2006
; 0,00s
; (get-info :all-statistics)
(push) ; 2006
; [then-branch 4159] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4160] 4 == 2
(push) ; 2007
; [else-branch 4160] 4 != 2
(pop) ; 2007
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2007
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2007
; 0,00s
; (get-info :all-statistics)
(push) ; 2007
; [then-branch 4161] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4162] 4 == 2
(push) ; 2008
; [else-branch 4162] 4 != 2
(pop) ; 2008
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2008
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2008
; 0,00s
; (get-info :all-statistics)
(push) ; 2008
; [then-branch 4163] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4164] 4 == 2
(push) ; 2009
; [else-branch 4164] 4 != 2
(pop) ; 2009
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2009
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2009
; 0,00s
; (get-info :all-statistics)
(push) ; 2009
; [then-branch 4165] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4166] 4 == 2
(push) ; 2010
; [else-branch 4166] 4 != 2
(pop) ; 2010
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2010
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2010
; 0,00s
; (get-info :all-statistics)
(push) ; 2010
; [then-branch 4167] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4168] 4 == 2
(push) ; 2011
; [else-branch 4168] 4 != 2
(pop) ; 2011
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2011
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2011
; 0,00s
; (get-info :all-statistics)
(push) ; 2011
; [then-branch 4169] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4170] 4 == 2
(push) ; 2012
; [else-branch 4170] 4 != 2
(pop) ; 2012
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2012
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2012
; 0,00s
; (get-info :all-statistics)
(push) ; 2012
; [then-branch 4171] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4172] 4 == 2
(push) ; 2013
; [else-branch 4172] 4 != 2
(pop) ; 2013
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2013
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2013
; 0,00s
; (get-info :all-statistics)
(push) ; 2013
; [then-branch 4173] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4174] 4 == 2
(push) ; 2014
; [else-branch 4174] 4 != 2
(pop) ; 2014
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2014
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2014
; 0,00s
; (get-info :all-statistics)
(push) ; 2014
; [then-branch 4175] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4176] 4 == 2
(push) ; 2015
; [else-branch 4176] 4 != 2
(pop) ; 2015
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2015
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2015
; 0,00s
; (get-info :all-statistics)
(push) ; 2015
; [then-branch 4177] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4178] 4 == 2
(push) ; 2016
; [else-branch 4178] 4 != 2
(pop) ; 2016
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2016
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2016
; 0,00s
; (get-info :all-statistics)
(push) ; 2016
; [then-branch 4179] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4180] 4 == 2
(push) ; 2017
; [else-branch 4180] 4 != 2
(pop) ; 2017
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2017
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2017
; 0,00s
; (get-info :all-statistics)
(push) ; 2017
; [then-branch 4181] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4182] 4 == 2
(push) ; 2018
; [else-branch 4182] 4 != 2
(pop) ; 2018
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2018
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2018
; 0,00s
; (get-info :all-statistics)
(push) ; 2018
; [then-branch 4183] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4184] 4 == 2
(push) ; 2019
; [else-branch 4184] 4 != 2
(pop) ; 2019
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2019
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2019
; 0,00s
; (get-info :all-statistics)
(push) ; 2019
; [then-branch 4185] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4186] 4 == 2
(push) ; 2020
; [else-branch 4186] 4 != 2
(pop) ; 2020
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2020
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2020
; 0,00s
; (get-info :all-statistics)
(push) ; 2020
; [then-branch 4187] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4188] 4 == 2
(push) ; 2021
; [else-branch 4188] 4 != 2
(pop) ; 2021
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2021
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2021
; 0,00s
; (get-info :all-statistics)
(push) ; 2021
; [then-branch 4189] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4190] 4 == 2
(push) ; 2022
; [else-branch 4190] 4 != 2
(pop) ; 2022
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2022
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2022
; 0,00s
; (get-info :all-statistics)
(push) ; 2022
; [then-branch 4191] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4192] 4 == 2
(push) ; 2023
; [else-branch 4192] 4 != 2
(pop) ; 2023
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2023
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2023
; 0,00s
; (get-info :all-statistics)
(push) ; 2023
; [then-branch 4193] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4194] 4 == 2
(push) ; 2024
; [else-branch 4194] 4 != 2
(pop) ; 2024
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2024
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2024
; 0,00s
; (get-info :all-statistics)
(push) ; 2024
; [then-branch 4195] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4196] 4 == 2
(push) ; 2025
; [else-branch 4196] 4 != 2
(pop) ; 2025
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2025
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2025
; 0,00s
; (get-info :all-statistics)
(push) ; 2025
; [then-branch 4197] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4198] 4 == 2
(push) ; 2026
; [else-branch 4198] 4 != 2
(pop) ; 2026
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2026
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2026
; 0,00s
; (get-info :all-statistics)
(push) ; 2026
; [then-branch 4199] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4200] 4 == 2
(push) ; 2027
; [else-branch 4200] 4 != 2
(pop) ; 2027
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2027
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2027
; 0,00s
; (get-info :all-statistics)
(push) ; 2027
; [then-branch 4201] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4202] 4 == 2
(push) ; 2028
; [else-branch 4202] 4 != 2
(pop) ; 2028
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2028
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2028
; 0,00s
; (get-info :all-statistics)
(push) ; 2028
; [then-branch 4203] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4204] 4 == 2
(push) ; 2029
; [else-branch 4204] 4 != 2
(pop) ; 2029
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2029
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2029
; 0,00s
; (get-info :all-statistics)
(push) ; 2029
; [then-branch 4205] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4206] 4 == 2
(push) ; 2030
; [else-branch 4206] 4 != 2
(pop) ; 2030
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2030
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2030
; 0,00s
; (get-info :all-statistics)
(push) ; 2030
; [then-branch 4207] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4208] 4 == 2
(push) ; 2031
; [else-branch 4208] 4 != 2
(pop) ; 2031
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2031
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2031
; 0,00s
; (get-info :all-statistics)
(push) ; 2031
; [then-branch 4209] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4210] 4 == 2
(push) ; 2032
; [else-branch 4210] 4 != 2
(pop) ; 2032
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2032
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2032
; 0,00s
; (get-info :all-statistics)
(push) ; 2032
; [then-branch 4211] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4212] 4 == 2
(push) ; 2033
; [else-branch 4212] 4 != 2
(pop) ; 2033
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2033
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2033
; 0,00s
; (get-info :all-statistics)
(push) ; 2033
; [then-branch 4213] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4214] 4 == 2
(push) ; 2034
; [else-branch 4214] 4 != 2
(pop) ; 2034
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2034
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2034
; 0,00s
; (get-info :all-statistics)
(push) ; 2034
; [then-branch 4215] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4216] 4 == 2
(push) ; 2035
; [else-branch 4216] 4 != 2
(pop) ; 2035
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2035
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2035
; 0,00s
; (get-info :all-statistics)
(push) ; 2035
; [then-branch 4217] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4218] 4 == 2
(push) ; 2036
; [else-branch 4218] 4 != 2
(pop) ; 2036
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2036
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2036
; 0,00s
; (get-info :all-statistics)
(push) ; 2036
; [then-branch 4219] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4220] 4 == 2
(push) ; 2037
; [else-branch 4220] 4 != 2
(pop) ; 2037
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2037
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2037
; 0,00s
; (get-info :all-statistics)
(push) ; 2037
; [then-branch 4221] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4222] 4 == 2
(push) ; 2038
; [else-branch 4222] 4 != 2
(pop) ; 2038
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2038
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2038
; 0,00s
; (get-info :all-statistics)
(push) ; 2038
; [then-branch 4223] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4224] 4 == 2
(push) ; 2039
; [else-branch 4224] 4 != 2
(pop) ; 2039
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2039
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2039
; 0,00s
; (get-info :all-statistics)
(push) ; 2039
; [then-branch 4225] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4226] 4 == 2
(push) ; 2040
; [else-branch 4226] 4 != 2
(pop) ; 2040
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2040
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2040
; 0,00s
; (get-info :all-statistics)
(push) ; 2040
; [then-branch 4227] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4228] 4 == 2
(push) ; 2041
; [else-branch 4228] 4 != 2
(pop) ; 2041
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2041
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2041
; 0,00s
; (get-info :all-statistics)
(push) ; 2041
; [then-branch 4229] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4230] 4 == 2
(push) ; 2042
; [else-branch 4230] 4 != 2
(pop) ; 2042
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2042
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2042
; 0,00s
; (get-info :all-statistics)
(push) ; 2042
; [then-branch 4231] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4232] 4 == 2
(push) ; 2043
; [else-branch 4232] 4 != 2
(pop) ; 2043
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2043
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2043
; 0,00s
; (get-info :all-statistics)
(push) ; 2043
; [then-branch 4233] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4234] 4 == 2
(push) ; 2044
; [else-branch 4234] 4 != 2
(pop) ; 2044
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2044
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2044
; 0,00s
; (get-info :all-statistics)
(push) ; 2044
; [then-branch 4235] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4236] 4 == 2
(push) ; 2045
; [else-branch 4236] 4 != 2
(pop) ; 2045
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2045
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2045
; 0,00s
; (get-info :all-statistics)
(push) ; 2045
; [then-branch 4237] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4238] 4 == 2
(push) ; 2046
; [else-branch 4238] 4 != 2
(pop) ; 2046
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2046
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2046
; 0,00s
; (get-info :all-statistics)
(push) ; 2046
; [then-branch 4239] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4240] 4 == 2
(push) ; 2047
; [else-branch 4240] 4 != 2
(pop) ; 2047
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2047
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2047
; 0,00s
; (get-info :all-statistics)
(push) ; 2047
; [then-branch 4241] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4242] 4 == 2
(push) ; 2048
; [else-branch 4242] 4 != 2
(pop) ; 2048
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2048
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2048
; 0,00s
; (get-info :all-statistics)
(push) ; 2048
; [then-branch 4243] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4244] 4 == 2
(push) ; 2049
; [else-branch 4244] 4 != 2
(pop) ; 2049
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2049
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2049
; 0,00s
; (get-info :all-statistics)
(push) ; 2049
; [then-branch 4245] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4246] 4 == 2
(push) ; 2050
; [else-branch 4246] 4 != 2
(pop) ; 2050
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2050
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2050
; 0,00s
; (get-info :all-statistics)
(push) ; 2050
; [then-branch 4247] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4248] 4 == 2
(push) ; 2051
; [else-branch 4248] 4 != 2
(pop) ; 2051
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2051
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2051
; 0,00s
; (get-info :all-statistics)
(push) ; 2051
; [then-branch 4249] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4250] 4 == 2
(push) ; 2052
; [else-branch 4250] 4 != 2
(pop) ; 2052
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2052
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2052
; 0,00s
; (get-info :all-statistics)
(push) ; 2052
; [then-branch 4251] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4252] 4 == 2
(push) ; 2053
; [else-branch 4252] 4 != 2
(pop) ; 2053
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2053
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2053
; 0,00s
; (get-info :all-statistics)
(push) ; 2053
; [then-branch 4253] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4254] 4 == 2
(push) ; 2054
; [else-branch 4254] 4 != 2
(pop) ; 2054
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2054
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2054
; 0,00s
; (get-info :all-statistics)
(push) ; 2054
; [then-branch 4255] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4256] 4 == 2
(push) ; 2055
; [else-branch 4256] 4 != 2
(pop) ; 2055
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2055
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2055
; 0,00s
; (get-info :all-statistics)
(push) ; 2055
; [then-branch 4257] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4258] 4 == 2
(push) ; 2056
; [else-branch 4258] 4 != 2
(pop) ; 2056
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2056
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2056
; 0,00s
; (get-info :all-statistics)
(push) ; 2056
; [then-branch 4259] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4260] 4 == 2
(push) ; 2057
; [else-branch 4260] 4 != 2
(pop) ; 2057
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2057
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2057
; 0,00s
; (get-info :all-statistics)
(push) ; 2057
; [then-branch 4261] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4262] 4 == 2
(push) ; 2058
; [else-branch 4262] 4 != 2
(pop) ; 2058
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2058
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2058
; 0,00s
; (get-info :all-statistics)
(push) ; 2058
; [then-branch 4263] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4264] 4 == 2
(push) ; 2059
; [else-branch 4264] 4 != 2
(pop) ; 2059
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2059
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2059
; 0,00s
; (get-info :all-statistics)
(push) ; 2059
; [then-branch 4265] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4266] 4 == 2
(push) ; 2060
; [else-branch 4266] 4 != 2
(pop) ; 2060
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2060
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2060
; 0,00s
; (get-info :all-statistics)
(push) ; 2060
; [then-branch 4267] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4268] 4 == 2
(push) ; 2061
; [else-branch 4268] 4 != 2
(pop) ; 2061
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2061
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2061
; 0,00s
; (get-info :all-statistics)
(push) ; 2061
; [then-branch 4269] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4270] 4 == 2
(push) ; 2062
; [else-branch 4270] 4 != 2
(pop) ; 2062
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2062
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2062
; 0,00s
; (get-info :all-statistics)
(push) ; 2062
; [then-branch 4271] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4272] 4 == 2
(push) ; 2063
; [else-branch 4272] 4 != 2
(pop) ; 2063
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2063
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2063
; 0,00s
; (get-info :all-statistics)
(push) ; 2063
; [then-branch 4273] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4274] 4 == 2
(push) ; 2064
; [else-branch 4274] 4 != 2
(pop) ; 2064
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2064
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2064
; 0,00s
; (get-info :all-statistics)
(push) ; 2064
; [then-branch 4275] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4276] 4 == 2
(push) ; 2065
; [else-branch 4276] 4 != 2
(pop) ; 2065
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2065
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2065
; 0,00s
; (get-info :all-statistics)
(push) ; 2065
; [then-branch 4277] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4278] 4 == 2
(push) ; 2066
; [else-branch 4278] 4 != 2
(pop) ; 2066
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2066
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2066
; 0,00s
; (get-info :all-statistics)
(push) ; 2066
; [then-branch 4279] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4280] 4 == 2
(push) ; 2067
; [else-branch 4280] 4 != 2
(pop) ; 2067
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2067
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2067
; 0,00s
; (get-info :all-statistics)
(push) ; 2067
; [then-branch 4281] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4282] 4 == 2
(push) ; 2068
; [else-branch 4282] 4 != 2
(pop) ; 2068
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2068
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2068
; 0,00s
; (get-info :all-statistics)
(push) ; 2068
; [then-branch 4283] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4284] 4 == 2
(push) ; 2069
; [else-branch 4284] 4 != 2
(pop) ; 2069
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2069
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2069
; 0,00s
; (get-info :all-statistics)
(push) ; 2069
; [then-branch 4285] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4286] 4 == 2
(push) ; 2070
; [else-branch 4286] 4 != 2
(pop) ; 2070
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2070
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2070
; 0,00s
; (get-info :all-statistics)
(push) ; 2070
; [then-branch 4287] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4288] 4 == 2
(push) ; 2071
; [else-branch 4288] 4 != 2
(pop) ; 2071
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2071
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2071
; 0,00s
; (get-info :all-statistics)
(push) ; 2071
; [then-branch 4289] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4290] 4 == 2
(push) ; 2072
; [else-branch 4290] 4 != 2
(pop) ; 2072
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2072
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2072
; 0,00s
; (get-info :all-statistics)
(push) ; 2072
; [then-branch 4291] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4292] 4 == 2
(push) ; 2073
; [else-branch 4292] 4 != 2
(pop) ; 2073
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2073
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2073
; 0,00s
; (get-info :all-statistics)
(push) ; 2073
; [then-branch 4293] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4294] 4 == 2
(push) ; 2074
; [else-branch 4294] 4 != 2
(pop) ; 2074
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2074
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2074
; 0,00s
; (get-info :all-statistics)
(push) ; 2074
; [then-branch 4295] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4296] 4 == 2
(push) ; 2075
; [else-branch 4296] 4 != 2
(pop) ; 2075
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2075
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2075
; 0,00s
; (get-info :all-statistics)
(push) ; 2075
; [then-branch 4297] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4298] 4 == 2
(push) ; 2076
; [else-branch 4298] 4 != 2
(pop) ; 2076
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2076
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2076
; 0,00s
; (get-info :all-statistics)
(push) ; 2076
; [then-branch 4299] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4300] 4 == 2
(push) ; 2077
; [else-branch 4300] 4 != 2
(pop) ; 2077
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2077
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2077
; 0,00s
; (get-info :all-statistics)
(push) ; 2077
; [then-branch 4301] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4302] 4 == 2
(push) ; 2078
; [else-branch 4302] 4 != 2
(pop) ; 2078
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2078
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2078
; 0,00s
; (get-info :all-statistics)
(push) ; 2078
; [then-branch 4303] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4304] 4 == 2
(push) ; 2079
; [else-branch 4304] 4 != 2
(pop) ; 2079
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2079
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2079
; 0,00s
; (get-info :all-statistics)
(push) ; 2079
; [then-branch 4305] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4306] 4 == 2
(push) ; 2080
; [else-branch 4306] 4 != 2
(pop) ; 2080
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2080
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2080
; 0,00s
; (get-info :all-statistics)
(push) ; 2080
; [then-branch 4307] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4308] 4 == 2
(push) ; 2081
; [else-branch 4308] 4 != 2
(pop) ; 2081
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2081
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2081
; 0,00s
; (get-info :all-statistics)
(push) ; 2081
; [then-branch 4309] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4310] 4 == 2
(push) ; 2082
; [else-branch 4310] 4 != 2
(pop) ; 2082
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2082
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2082
; 0,00s
; (get-info :all-statistics)
(push) ; 2082
; [then-branch 4311] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4312] 4 == 2
(push) ; 2083
; [else-branch 4312] 4 != 2
(pop) ; 2083
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2083
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2083
; 0,00s
; (get-info :all-statistics)
(push) ; 2083
; [then-branch 4313] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4314] 4 == 2
(push) ; 2084
; [else-branch 4314] 4 != 2
(pop) ; 2084
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2084
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2084
; 0,00s
; (get-info :all-statistics)
(push) ; 2084
; [then-branch 4315] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4316] 4 == 2
(push) ; 2085
; [else-branch 4316] 4 != 2
(pop) ; 2085
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2085
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2085
; 0,00s
; (get-info :all-statistics)
(push) ; 2085
; [then-branch 4317] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4318] 4 == 2
(push) ; 2086
; [else-branch 4318] 4 != 2
(pop) ; 2086
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2086
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2086
; 0,00s
; (get-info :all-statistics)
(push) ; 2086
; [then-branch 4319] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4320] 4 == 2
(push) ; 2087
; [else-branch 4320] 4 != 2
(pop) ; 2087
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2087
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2087
; 0,00s
; (get-info :all-statistics)
(push) ; 2087
; [then-branch 4321] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4322] 4 == 2
(push) ; 2088
; [else-branch 4322] 4 != 2
(pop) ; 2088
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2088
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2088
; 0,00s
; (get-info :all-statistics)
(push) ; 2088
; [then-branch 4323] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4324] 4 == 2
(push) ; 2089
; [else-branch 4324] 4 != 2
(pop) ; 2089
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2089
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2089
; 0,00s
; (get-info :all-statistics)
(push) ; 2089
; [then-branch 4325] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4326] 4 == 2
(push) ; 2090
; [else-branch 4326] 4 != 2
(pop) ; 2090
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2090
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2090
; 0,00s
; (get-info :all-statistics)
(push) ; 2090
; [then-branch 4327] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4328] 4 == 2
(push) ; 2091
; [else-branch 4328] 4 != 2
(pop) ; 2091
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2091
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2091
; 0,00s
; (get-info :all-statistics)
(push) ; 2091
; [then-branch 4329] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4330] 4 == 2
(push) ; 2092
; [else-branch 4330] 4 != 2
(pop) ; 2092
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2092
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2092
; 0,00s
; (get-info :all-statistics)
(push) ; 2092
; [then-branch 4331] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4332] 4 == 2
(push) ; 2093
; [else-branch 4332] 4 != 2
(pop) ; 2093
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2093
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2093
; 0,00s
; (get-info :all-statistics)
(push) ; 2093
; [then-branch 4333] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4334] 4 == 2
(push) ; 2094
; [else-branch 4334] 4 != 2
(pop) ; 2094
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2094
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2094
; 0,00s
; (get-info :all-statistics)
(push) ; 2094
; [then-branch 4335] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4336] 4 == 2
(push) ; 2095
; [else-branch 4336] 4 != 2
(pop) ; 2095
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2095
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2095
; 0,00s
; (get-info :all-statistics)
(push) ; 2095
; [then-branch 4337] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4338] 4 == 2
(push) ; 2096
; [else-branch 4338] 4 != 2
(pop) ; 2096
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2096
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2096
; 0,00s
; (get-info :all-statistics)
(push) ; 2096
; [then-branch 4339] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4340] 4 == 2
(push) ; 2097
; [else-branch 4340] 4 != 2
(pop) ; 2097
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2097
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2097
; 0,00s
; (get-info :all-statistics)
(push) ; 2097
; [then-branch 4341] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4342] 4 == 2
(push) ; 2098
; [else-branch 4342] 4 != 2
(pop) ; 2098
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2098
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2098
; 0,00s
; (get-info :all-statistics)
(push) ; 2098
; [then-branch 4343] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4344] 4 == 2
(push) ; 2099
; [else-branch 4344] 4 != 2
(pop) ; 2099
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2099
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2099
; 0,00s
; (get-info :all-statistics)
(push) ; 2099
; [then-branch 4345] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4346] 4 == 2
(push) ; 2100
; [else-branch 4346] 4 != 2
(pop) ; 2100
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2100
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2100
; 0,00s
; (get-info :all-statistics)
(push) ; 2100
; [then-branch 4347] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4348] 4 == 2
(push) ; 2101
; [else-branch 4348] 4 != 2
(pop) ; 2101
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2101
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2101
; 0,00s
; (get-info :all-statistics)
(push) ; 2101
; [then-branch 4349] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4350] 4 == 2
(push) ; 2102
; [else-branch 4350] 4 != 2
(pop) ; 2102
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2102
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2102
; 0,00s
; (get-info :all-statistics)
(push) ; 2102
; [then-branch 4351] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4352] 4 == 2
(push) ; 2103
; [else-branch 4352] 4 != 2
(pop) ; 2103
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2103
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2103
; 0,00s
; (get-info :all-statistics)
(push) ; 2103
; [then-branch 4353] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4354] 4 == 2
(push) ; 2104
; [else-branch 4354] 4 != 2
(pop) ; 2104
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2104
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2104
; 0,00s
; (get-info :all-statistics)
(push) ; 2104
; [then-branch 4355] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4356] 4 == 2
(push) ; 2105
; [else-branch 4356] 4 != 2
(pop) ; 2105
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2105
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2105
; 0,00s
; (get-info :all-statistics)
(push) ; 2105
; [then-branch 4357] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4358] 4 == 2
(push) ; 2106
; [else-branch 4358] 4 != 2
(pop) ; 2106
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2106
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2106
; 0,00s
; (get-info :all-statistics)
(push) ; 2106
; [then-branch 4359] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4360] 4 == 2
(push) ; 2107
; [else-branch 4360] 4 != 2
(pop) ; 2107
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2107
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2107
; 0,00s
; (get-info :all-statistics)
(push) ; 2107
; [then-branch 4361] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4362] 4 == 2
(push) ; 2108
; [else-branch 4362] 4 != 2
(pop) ; 2108
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2108
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2108
; 0,00s
; (get-info :all-statistics)
(push) ; 2108
; [then-branch 4363] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4364] 4 == 2
(push) ; 2109
; [else-branch 4364] 4 != 2
(pop) ; 2109
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2109
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2109
; 0,00s
; (get-info :all-statistics)
(push) ; 2109
; [then-branch 4365] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4366] 4 == 2
(push) ; 2110
; [else-branch 4366] 4 != 2
(pop) ; 2110
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2110
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2110
; 0,00s
; (get-info :all-statistics)
(push) ; 2110
; [then-branch 4367] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4368] 4 == 2
(push) ; 2111
; [else-branch 4368] 4 != 2
(pop) ; 2111
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2111
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2111
; 0,00s
; (get-info :all-statistics)
(push) ; 2111
; [then-branch 4369] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4370] 4 == 2
(push) ; 2112
; [else-branch 4370] 4 != 2
(pop) ; 2112
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2112
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2112
; 0,00s
; (get-info :all-statistics)
(push) ; 2112
; [then-branch 4371] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4372] 4 == 2
(push) ; 2113
; [else-branch 4372] 4 != 2
(pop) ; 2113
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2113
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2113
; 0,00s
; (get-info :all-statistics)
(push) ; 2113
; [then-branch 4373] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4374] 4 == 2
(push) ; 2114
; [else-branch 4374] 4 != 2
(pop) ; 2114
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2114
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2114
; 0,00s
; (get-info :all-statistics)
(push) ; 2114
; [then-branch 4375] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4376] 4 == 2
(push) ; 2115
; [else-branch 4376] 4 != 2
(pop) ; 2115
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2115
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2115
; 0,00s
; (get-info :all-statistics)
(push) ; 2115
; [then-branch 4377] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4378] 4 == 2
(push) ; 2116
; [else-branch 4378] 4 != 2
(pop) ; 2116
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2116
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2116
; 0,00s
; (get-info :all-statistics)
(push) ; 2116
; [then-branch 4379] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4380] 4 == 2
(push) ; 2117
; [else-branch 4380] 4 != 2
(pop) ; 2117
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2117
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2117
; 0,00s
; (get-info :all-statistics)
(push) ; 2117
; [then-branch 4381] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4382] 4 == 2
(push) ; 2118
; [else-branch 4382] 4 != 2
(pop) ; 2118
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2118
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2118
; 0,00s
; (get-info :all-statistics)
(push) ; 2118
; [then-branch 4383] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4384] 4 == 2
(push) ; 2119
; [else-branch 4384] 4 != 2
(pop) ; 2119
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2119
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2119
; 0,00s
; (get-info :all-statistics)
(push) ; 2119
; [then-branch 4385] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4386] 4 == 2
(push) ; 2120
; [else-branch 4386] 4 != 2
(pop) ; 2120
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2120
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2120
; 0,00s
; (get-info :all-statistics)
(push) ; 2120
; [then-branch 4387] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4388] 4 == 2
(push) ; 2121
; [else-branch 4388] 4 != 2
(pop) ; 2121
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2121
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2121
; 0,00s
; (get-info :all-statistics)
(push) ; 2121
; [then-branch 4389] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4390] 4 == 2
(push) ; 2122
; [else-branch 4390] 4 != 2
(pop) ; 2122
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2122
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2122
; 0,00s
; (get-info :all-statistics)
(push) ; 2122
; [then-branch 4391] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4392] 4 == 2
(push) ; 2123
; [else-branch 4392] 4 != 2
(pop) ; 2123
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2123
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2123
; 0,00s
; (get-info :all-statistics)
(push) ; 2123
; [then-branch 4393] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4394] 4 == 2
(push) ; 2124
; [else-branch 4394] 4 != 2
(pop) ; 2124
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2124
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2124
; 0,00s
; (get-info :all-statistics)
(push) ; 2124
; [then-branch 4395] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4396] 4 == 2
(push) ; 2125
; [else-branch 4396] 4 != 2
(pop) ; 2125
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2125
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2125
; 0,00s
; (get-info :all-statistics)
(push) ; 2125
; [then-branch 4397] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4398] 4 == 2
(push) ; 2126
; [else-branch 4398] 4 != 2
(pop) ; 2126
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2126
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2126
; 0,00s
; (get-info :all-statistics)
(push) ; 2126
; [then-branch 4399] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4400] 4 == 2
(push) ; 2127
; [else-branch 4400] 4 != 2
(pop) ; 2127
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2127
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2127
; 0,00s
; (get-info :all-statistics)
(push) ; 2127
; [then-branch 4401] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4402] 4 == 2
(push) ; 2128
; [else-branch 4402] 4 != 2
(pop) ; 2128
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2128
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2128
; 0,00s
; (get-info :all-statistics)
(push) ; 2128
; [then-branch 4403] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4404] 4 == 2
(push) ; 2129
; [else-branch 4404] 4 != 2
(pop) ; 2129
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2129
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2129
; 0,00s
; (get-info :all-statistics)
(push) ; 2129
; [then-branch 4405] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4406] 4 == 2
(push) ; 2130
; [else-branch 4406] 4 != 2
(pop) ; 2130
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2130
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2130
; 0,00s
; (get-info :all-statistics)
(push) ; 2130
; [then-branch 4407] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4408] 4 == 2
(push) ; 2131
; [else-branch 4408] 4 != 2
(pop) ; 2131
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2131
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2131
; 0,00s
; (get-info :all-statistics)
(push) ; 2131
; [then-branch 4409] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4410] 4 == 2
(push) ; 2132
; [else-branch 4410] 4 != 2
(pop) ; 2132
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2132
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2132
; 0,00s
; (get-info :all-statistics)
(push) ; 2132
; [then-branch 4411] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4412] 4 == 2
(push) ; 2133
; [else-branch 4412] 4 != 2
(pop) ; 2133
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2133
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2133
; 0,00s
; (get-info :all-statistics)
(push) ; 2133
; [then-branch 4413] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4414] 4 == 2
(push) ; 2134
; [else-branch 4414] 4 != 2
(pop) ; 2134
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2134
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2134
; 0,00s
; (get-info :all-statistics)
(push) ; 2134
; [then-branch 4415] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4416] 4 == 2
(push) ; 2135
; [else-branch 4416] 4 != 2
(pop) ; 2135
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2135
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2135
; 0,00s
; (get-info :all-statistics)
(push) ; 2135
; [then-branch 4417] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4418] 4 == 2
(push) ; 2136
; [else-branch 4418] 4 != 2
(pop) ; 2136
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2136
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2136
; 0,00s
; (get-info :all-statistics)
(push) ; 2136
; [then-branch 4419] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4420] 4 == 2
(push) ; 2137
; [else-branch 4420] 4 != 2
(pop) ; 2137
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2137
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2137
; 0,00s
; (get-info :all-statistics)
(push) ; 2137
; [then-branch 4421] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4422] 4 == 2
(push) ; 2138
; [else-branch 4422] 4 != 2
(pop) ; 2138
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2138
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2138
; 0,00s
; (get-info :all-statistics)
(push) ; 2138
; [then-branch 4423] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4424] 4 == 2
(push) ; 2139
; [else-branch 4424] 4 != 2
(pop) ; 2139
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2139
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2139
; 0,00s
; (get-info :all-statistics)
(push) ; 2139
; [then-branch 4425] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4426] 4 == 2
(push) ; 2140
; [else-branch 4426] 4 != 2
(pop) ; 2140
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2140
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2140
; 0,00s
; (get-info :all-statistics)
(push) ; 2140
; [then-branch 4427] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4428] 4 == 2
(push) ; 2141
; [else-branch 4428] 4 != 2
(pop) ; 2141
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2141
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2141
; 0,00s
; (get-info :all-statistics)
(push) ; 2141
; [then-branch 4429] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4430] 4 == 2
(push) ; 2142
; [else-branch 4430] 4 != 2
(pop) ; 2142
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2142
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2142
; 0,00s
; (get-info :all-statistics)
(push) ; 2142
; [then-branch 4431] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4432] 4 == 2
(push) ; 2143
; [else-branch 4432] 4 != 2
(pop) ; 2143
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2143
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2143
; 0,00s
; (get-info :all-statistics)
(push) ; 2143
; [then-branch 4433] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4434] 4 == 2
(push) ; 2144
; [else-branch 4434] 4 != 2
(pop) ; 2144
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2144
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2144
; 0,00s
; (get-info :all-statistics)
(push) ; 2144
; [then-branch 4435] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4436] 4 == 2
(push) ; 2145
; [else-branch 4436] 4 != 2
(pop) ; 2145
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2145
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2145
; 0,00s
; (get-info :all-statistics)
(push) ; 2145
; [then-branch 4437] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4438] 4 == 2
(push) ; 2146
; [else-branch 4438] 4 != 2
(pop) ; 2146
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2146
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2146
; 0,00s
; (get-info :all-statistics)
(push) ; 2146
; [then-branch 4439] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4440] 4 == 2
(push) ; 2147
; [else-branch 4440] 4 != 2
(pop) ; 2147
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2147
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2147
; 0,00s
; (get-info :all-statistics)
(push) ; 2147
; [then-branch 4441] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4442] 4 == 2
(push) ; 2148
; [else-branch 4442] 4 != 2
(pop) ; 2148
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2148
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2148
; 0,00s
; (get-info :all-statistics)
(push) ; 2148
; [then-branch 4443] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4444] 4 == 2
(push) ; 2149
; [else-branch 4444] 4 != 2
(pop) ; 2149
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2149
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2149
; 0,00s
; (get-info :all-statistics)
(push) ; 2149
; [then-branch 4445] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4446] 4 == 2
(push) ; 2150
; [else-branch 4446] 4 != 2
(pop) ; 2150
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2150
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2150
; 0,00s
; (get-info :all-statistics)
(push) ; 2150
; [then-branch 4447] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4448] 4 == 2
(push) ; 2151
; [else-branch 4448] 4 != 2
(pop) ; 2151
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2151
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2151
; 0,00s
; (get-info :all-statistics)
(push) ; 2151
; [then-branch 4449] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4450] 4 == 2
(push) ; 2152
; [else-branch 4450] 4 != 2
(pop) ; 2152
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2152
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2152
; 0,00s
; (get-info :all-statistics)
(push) ; 2152
; [then-branch 4451] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4452] 4 == 2
(push) ; 2153
; [else-branch 4452] 4 != 2
(pop) ; 2153
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2153
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2153
; 0,00s
; (get-info :all-statistics)
(push) ; 2153
; [then-branch 4453] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4454] 4 == 2
(push) ; 2154
; [else-branch 4454] 4 != 2
(pop) ; 2154
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2154
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2154
; 0,00s
; (get-info :all-statistics)
(push) ; 2154
; [then-branch 4455] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4456] 4 == 2
(push) ; 2155
; [else-branch 4456] 4 != 2
(pop) ; 2155
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2155
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2155
; 0,00s
; (get-info :all-statistics)
(push) ; 2155
; [then-branch 4457] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4458] 4 == 2
(push) ; 2156
; [else-branch 4458] 4 != 2
(pop) ; 2156
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2156
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2156
; 0,00s
; (get-info :all-statistics)
(push) ; 2156
; [then-branch 4459] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4460] 4 == 2
(push) ; 2157
; [else-branch 4460] 4 != 2
(pop) ; 2157
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2157
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2157
; 0,00s
; (get-info :all-statistics)
(push) ; 2157
; [then-branch 4461] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4462] 4 == 2
(push) ; 2158
; [else-branch 4462] 4 != 2
(pop) ; 2158
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2158
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2158
; 0,00s
; (get-info :all-statistics)
(push) ; 2158
; [then-branch 4463] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4464] 4 == 2
(push) ; 2159
; [else-branch 4464] 4 != 2
(pop) ; 2159
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2159
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2159
; 0,00s
; (get-info :all-statistics)
(push) ; 2159
; [then-branch 4465] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4466] 4 == 2
(push) ; 2160
; [else-branch 4466] 4 != 2
(pop) ; 2160
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2160
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2160
; 0,00s
; (get-info :all-statistics)
(push) ; 2160
; [then-branch 4467] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4468] 4 == 2
(push) ; 2161
; [else-branch 4468] 4 != 2
(pop) ; 2161
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2161
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2161
; 0,00s
; (get-info :all-statistics)
(push) ; 2161
; [then-branch 4469] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4470] 4 == 2
(push) ; 2162
; [else-branch 4470] 4 != 2
(pop) ; 2162
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2162
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2162
; 0,00s
; (get-info :all-statistics)
(push) ; 2162
; [then-branch 4471] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4472] 4 == 2
(push) ; 2163
; [else-branch 4472] 4 != 2
(pop) ; 2163
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2163
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2163
; 0,00s
; (get-info :all-statistics)
(push) ; 2163
; [then-branch 4473] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4474] 4 == 2
(push) ; 2164
; [else-branch 4474] 4 != 2
(pop) ; 2164
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2164
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2164
; 0,00s
; (get-info :all-statistics)
(push) ; 2164
; [then-branch 4475] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4476] 4 == 2
(push) ; 2165
; [else-branch 4476] 4 != 2
(pop) ; 2165
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2165
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2165
; 0,00s
; (get-info :all-statistics)
(push) ; 2165
; [then-branch 4477] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4478] 4 == 2
(push) ; 2166
; [else-branch 4478] 4 != 2
(pop) ; 2166
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2166
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2166
; 0,00s
; (get-info :all-statistics)
(push) ; 2166
; [then-branch 4479] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4480] 4 == 2
(push) ; 2167
; [else-branch 4480] 4 != 2
(pop) ; 2167
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2167
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2167
; 0,00s
; (get-info :all-statistics)
(push) ; 2167
; [then-branch 4481] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4482] 4 == 2
(push) ; 2168
; [else-branch 4482] 4 != 2
(pop) ; 2168
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2168
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2168
; 0,00s
; (get-info :all-statistics)
(push) ; 2168
; [then-branch 4483] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4484] 4 == 2
(push) ; 2169
; [else-branch 4484] 4 != 2
(pop) ; 2169
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2169
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2169
; 0,00s
; (get-info :all-statistics)
(push) ; 2169
; [then-branch 4485] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4486] 4 == 2
(push) ; 2170
; [else-branch 4486] 4 != 2
(pop) ; 2170
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2170
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2170
; 0,00s
; (get-info :all-statistics)
(push) ; 2170
; [then-branch 4487] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4488] 4 == 2
(push) ; 2171
; [else-branch 4488] 4 != 2
(pop) ; 2171
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2171
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2171
; 0,00s
; (get-info :all-statistics)
(push) ; 2171
; [then-branch 4489] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4490] 4 == 2
(push) ; 2172
; [else-branch 4490] 4 != 2
(pop) ; 2172
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2172
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2172
; 0,00s
; (get-info :all-statistics)
(push) ; 2172
; [then-branch 4491] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4492] 4 == 2
(push) ; 2173
; [else-branch 4492] 4 != 2
(pop) ; 2173
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2173
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2173
; 0,00s
; (get-info :all-statistics)
(push) ; 2173
; [then-branch 4493] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4494] 4 == 2
(push) ; 2174
; [else-branch 4494] 4 != 2
(pop) ; 2174
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2174
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2174
; 0,00s
; (get-info :all-statistics)
(push) ; 2174
; [then-branch 4495] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4496] 4 == 2
(push) ; 2175
; [else-branch 4496] 4 != 2
(pop) ; 2175
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2175
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2175
; 0,00s
; (get-info :all-statistics)
(push) ; 2175
; [then-branch 4497] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4498] 4 == 2
(push) ; 2176
; [else-branch 4498] 4 != 2
(pop) ; 2176
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2176
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2176
; 0,00s
; (get-info :all-statistics)
(push) ; 2176
; [then-branch 4499] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4500] 4 == 2
(push) ; 2177
; [else-branch 4500] 4 != 2
(pop) ; 2177
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2177
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2177
; 0,00s
; (get-info :all-statistics)
(push) ; 2177
; [then-branch 4501] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4502] 4 == 2
(push) ; 2178
; [else-branch 4502] 4 != 2
(pop) ; 2178
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2178
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2178
; 0,00s
; (get-info :all-statistics)
(push) ; 2178
; [then-branch 4503] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4504] 4 == 2
(push) ; 2179
; [else-branch 4504] 4 != 2
(pop) ; 2179
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2179
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2179
; 0,00s
; (get-info :all-statistics)
(push) ; 2179
; [then-branch 4505] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4506] 4 == 2
(push) ; 2180
; [else-branch 4506] 4 != 2
(pop) ; 2180
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2180
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2180
; 0,00s
; (get-info :all-statistics)
(push) ; 2180
; [then-branch 4507] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4508] 4 == 2
(push) ; 2181
; [else-branch 4508] 4 != 2
(pop) ; 2181
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2181
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2181
; 0,00s
; (get-info :all-statistics)
(push) ; 2181
; [then-branch 4509] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4510] 4 == 2
(push) ; 2182
; [else-branch 4510] 4 != 2
(pop) ; 2182
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2182
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2182
; 0,00s
; (get-info :all-statistics)
(push) ; 2182
; [then-branch 4511] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4512] 4 == 2
(push) ; 2183
; [else-branch 4512] 4 != 2
(pop) ; 2183
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2183
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2183
; 0,00s
; (get-info :all-statistics)
(push) ; 2183
; [then-branch 4513] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4514] 4 == 2
(push) ; 2184
; [else-branch 4514] 4 != 2
(pop) ; 2184
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2184
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2184
; 0,00s
; (get-info :all-statistics)
(push) ; 2184
; [then-branch 4515] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4516] 4 == 2
(push) ; 2185
; [else-branch 4516] 4 != 2
(pop) ; 2185
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2185
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2185
; 0,00s
; (get-info :all-statistics)
(push) ; 2185
; [then-branch 4517] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4518] 4 == 2
(push) ; 2186
; [else-branch 4518] 4 != 2
(pop) ; 2186
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2186
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2186
; 0,00s
; (get-info :all-statistics)
(push) ; 2186
; [then-branch 4519] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4520] 4 == 2
(push) ; 2187
; [else-branch 4520] 4 != 2
(pop) ; 2187
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2187
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2187
; 0,00s
; (get-info :all-statistics)
(push) ; 2187
; [then-branch 4521] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4522] 4 == 2
(push) ; 2188
; [else-branch 4522] 4 != 2
(pop) ; 2188
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2188
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2188
; 0,00s
; (get-info :all-statistics)
(push) ; 2188
; [then-branch 4523] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4524] 4 == 2
(push) ; 2189
; [else-branch 4524] 4 != 2
(pop) ; 2189
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2189
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2189
; 0,00s
; (get-info :all-statistics)
(push) ; 2189
; [then-branch 4525] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4526] 4 == 2
(push) ; 2190
; [else-branch 4526] 4 != 2
(pop) ; 2190
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2190
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2190
; 0,00s
; (get-info :all-statistics)
(push) ; 2190
; [then-branch 4527] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4528] 4 == 2
(push) ; 2191
; [else-branch 4528] 4 != 2
(pop) ; 2191
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2191
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2191
; 0,00s
; (get-info :all-statistics)
(push) ; 2191
; [then-branch 4529] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4530] 4 == 2
(push) ; 2192
; [else-branch 4530] 4 != 2
(pop) ; 2192
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2192
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2192
; 0,00s
; (get-info :all-statistics)
(push) ; 2192
; [then-branch 4531] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4532] 4 == 2
(push) ; 2193
; [else-branch 4532] 4 != 2
(pop) ; 2193
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2193
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2193
; 0,00s
; (get-info :all-statistics)
(push) ; 2193
; [then-branch 4533] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4534] 4 == 2
(push) ; 2194
; [else-branch 4534] 4 != 2
(pop) ; 2194
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2194
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2194
; 0,00s
; (get-info :all-statistics)
(push) ; 2194
; [then-branch 4535] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4536] 4 == 2
(push) ; 2195
; [else-branch 4536] 4 != 2
(pop) ; 2195
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2195
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2195
; 0,00s
; (get-info :all-statistics)
(push) ; 2195
; [then-branch 4537] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4538] 4 == 2
(push) ; 2196
; [else-branch 4538] 4 != 2
(pop) ; 2196
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2196
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2196
; 0,00s
; (get-info :all-statistics)
(push) ; 2196
; [then-branch 4539] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4540] 4 == 2
(push) ; 2197
; [else-branch 4540] 4 != 2
(pop) ; 2197
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2197
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2197
; 0,00s
; (get-info :all-statistics)
(push) ; 2197
; [then-branch 4541] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4542] 4 == 2
(push) ; 2198
; [else-branch 4542] 4 != 2
(pop) ; 2198
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2198
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2198
; 0,00s
; (get-info :all-statistics)
(push) ; 2198
; [then-branch 4543] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4544] 4 == 2
(push) ; 2199
; [else-branch 4544] 4 != 2
(pop) ; 2199
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2199
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2199
; 0,00s
; (get-info :all-statistics)
(push) ; 2199
; [then-branch 4545] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4546] 4 == 2
(push) ; 2200
; [else-branch 4546] 4 != 2
(pop) ; 2200
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2200
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2200
; 0,00s
; (get-info :all-statistics)
(push) ; 2200
; [then-branch 4547] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4548] 4 == 2
(push) ; 2201
; [else-branch 4548] 4 != 2
(pop) ; 2201
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2201
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2201
; 0,00s
; (get-info :all-statistics)
(push) ; 2201
; [then-branch 4549] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4550] 4 == 2
(push) ; 2202
; [else-branch 4550] 4 != 2
(pop) ; 2202
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2202
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2202
; 0,00s
; (get-info :all-statistics)
(push) ; 2202
; [then-branch 4551] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4552] 4 == 2
(push) ; 2203
; [else-branch 4552] 4 != 2
(pop) ; 2203
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2203
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2203
; 0,00s
; (get-info :all-statistics)
(push) ; 2203
; [then-branch 4553] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4554] 4 == 2
(push) ; 2204
; [else-branch 4554] 4 != 2
(pop) ; 2204
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2204
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2204
; 0,00s
; (get-info :all-statistics)
(push) ; 2204
; [then-branch 4555] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4556] 4 == 2
(push) ; 2205
; [else-branch 4556] 4 != 2
(pop) ; 2205
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2205
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2205
; 0,00s
; (get-info :all-statistics)
(push) ; 2205
; [then-branch 4557] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4558] 4 == 2
(push) ; 2206
; [else-branch 4558] 4 != 2
(pop) ; 2206
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2206
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2206
; 0,00s
; (get-info :all-statistics)
(push) ; 2206
; [then-branch 4559] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4560] 4 == 2
(push) ; 2207
; [else-branch 4560] 4 != 2
(pop) ; 2207
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2207
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2207
; 0,00s
; (get-info :all-statistics)
(push) ; 2207
; [then-branch 4561] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4562] 4 == 2
(push) ; 2208
; [else-branch 4562] 4 != 2
(pop) ; 2208
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2208
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2208
; 0,00s
; (get-info :all-statistics)
(push) ; 2208
; [then-branch 4563] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4564] 4 == 2
(push) ; 2209
; [else-branch 4564] 4 != 2
(pop) ; 2209
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2209
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2209
; 0,00s
; (get-info :all-statistics)
(push) ; 2209
; [then-branch 4565] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4566] 4 == 2
(push) ; 2210
; [else-branch 4566] 4 != 2
(pop) ; 2210
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2210
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2210
; 0,00s
; (get-info :all-statistics)
(push) ; 2210
; [then-branch 4567] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4568] 4 == 2
(push) ; 2211
; [else-branch 4568] 4 != 2
(pop) ; 2211
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2211
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2211
; 0,00s
; (get-info :all-statistics)
(push) ; 2211
; [then-branch 4569] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4570] 4 == 2
(push) ; 2212
; [else-branch 4570] 4 != 2
(pop) ; 2212
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2212
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2212
; 0,00s
; (get-info :all-statistics)
(push) ; 2212
; [then-branch 4571] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4572] 4 == 2
(push) ; 2213
; [else-branch 4572] 4 != 2
(pop) ; 2213
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2213
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2213
; 0,00s
; (get-info :all-statistics)
(push) ; 2213
; [then-branch 4573] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4574] 4 == 2
(push) ; 2214
; [else-branch 4574] 4 != 2
(pop) ; 2214
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2214
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2214
; 0,00s
; (get-info :all-statistics)
(push) ; 2214
; [then-branch 4575] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4576] 4 == 2
(push) ; 2215
; [else-branch 4576] 4 != 2
(pop) ; 2215
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2215
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2215
; 0,00s
; (get-info :all-statistics)
(push) ; 2215
; [then-branch 4577] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4578] 4 == 2
(push) ; 2216
; [else-branch 4578] 4 != 2
(pop) ; 2216
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2216
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2216
; 0,00s
; (get-info :all-statistics)
(push) ; 2216
; [then-branch 4579] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4580] 4 == 2
(push) ; 2217
; [else-branch 4580] 4 != 2
(pop) ; 2217
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2217
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2217
; 0,00s
; (get-info :all-statistics)
(push) ; 2217
; [then-branch 4581] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4582] 4 == 2
(push) ; 2218
; [else-branch 4582] 4 != 2
(pop) ; 2218
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2218
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2218
; 0,00s
; (get-info :all-statistics)
(push) ; 2218
; [then-branch 4583] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4584] 4 == 2
(push) ; 2219
; [else-branch 4584] 4 != 2
(pop) ; 2219
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2219
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2219
; 0,00s
; (get-info :all-statistics)
(push) ; 2219
; [then-branch 4585] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4586] 4 == 2
(push) ; 2220
; [else-branch 4586] 4 != 2
(pop) ; 2220
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2220
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2220
; 0,00s
; (get-info :all-statistics)
(push) ; 2220
; [then-branch 4587] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4588] 4 == 2
(push) ; 2221
; [else-branch 4588] 4 != 2
(pop) ; 2221
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2221
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2221
; 0,00s
; (get-info :all-statistics)
(push) ; 2221
; [then-branch 4589] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4590] 4 == 2
(push) ; 2222
; [else-branch 4590] 4 != 2
(pop) ; 2222
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2222
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2222
; 0,00s
; (get-info :all-statistics)
(push) ; 2222
; [then-branch 4591] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4592] 4 == 2
(push) ; 2223
; [else-branch 4592] 4 != 2
(pop) ; 2223
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2223
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2223
; 0,00s
; (get-info :all-statistics)
(push) ; 2223
; [then-branch 4593] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4594] 4 == 2
(push) ; 2224
; [else-branch 4594] 4 != 2
(pop) ; 2224
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2224
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2224
; 0,00s
; (get-info :all-statistics)
(push) ; 2224
; [then-branch 4595] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4596] 4 == 2
(push) ; 2225
; [else-branch 4596] 4 != 2
(pop) ; 2225
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2225
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2225
; 0,00s
; (get-info :all-statistics)
(push) ; 2225
; [then-branch 4597] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4598] 4 == 2
(push) ; 2226
; [else-branch 4598] 4 != 2
(pop) ; 2226
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2226
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2226
; 0,00s
; (get-info :all-statistics)
(push) ; 2226
; [then-branch 4599] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4600] 4 == 2
(push) ; 2227
; [else-branch 4600] 4 != 2
(pop) ; 2227
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2227
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2227
; 0,00s
; (get-info :all-statistics)
(push) ; 2227
; [then-branch 4601] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4602] 4 == 2
(push) ; 2228
; [else-branch 4602] 4 != 2
(pop) ; 2228
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2228
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2228
; 0,00s
; (get-info :all-statistics)
(push) ; 2228
; [then-branch 4603] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4604] 4 == 2
(push) ; 2229
; [else-branch 4604] 4 != 2
(pop) ; 2229
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2229
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2229
; 0,00s
; (get-info :all-statistics)
(push) ; 2229
; [then-branch 4605] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4606] 4 == 2
(push) ; 2230
; [else-branch 4606] 4 != 2
(pop) ; 2230
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2230
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2230
; 0,00s
; (get-info :all-statistics)
(push) ; 2230
; [then-branch 4607] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4608] 4 == 2
(push) ; 2231
; [else-branch 4608] 4 != 2
(pop) ; 2231
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2231
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2231
; 0,00s
; (get-info :all-statistics)
(push) ; 2231
; [then-branch 4609] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4610] 4 == 2
(push) ; 2232
; [else-branch 4610] 4 != 2
(pop) ; 2232
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2232
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2232
; 0,00s
; (get-info :all-statistics)
(push) ; 2232
; [then-branch 4611] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4612] 4 == 2
(push) ; 2233
; [else-branch 4612] 4 != 2
(pop) ; 2233
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2233
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2233
; 0,00s
; (get-info :all-statistics)
(push) ; 2233
; [then-branch 4613] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4614] 4 == 2
(push) ; 2234
; [else-branch 4614] 4 != 2
(pop) ; 2234
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2234
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2234
; 0,00s
; (get-info :all-statistics)
(push) ; 2234
; [then-branch 4615] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4616] 4 == 2
(push) ; 2235
; [else-branch 4616] 4 != 2
(pop) ; 2235
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2235
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2235
; 0,00s
; (get-info :all-statistics)
(push) ; 2235
; [then-branch 4617] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4618] 4 == 2
(push) ; 2236
; [else-branch 4618] 4 != 2
(pop) ; 2236
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2236
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2236
; 0,00s
; (get-info :all-statistics)
(push) ; 2236
; [then-branch 4619] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4620] 4 == 2
(push) ; 2237
; [else-branch 4620] 4 != 2
(pop) ; 2237
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2237
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2237
; 0,00s
; (get-info :all-statistics)
(push) ; 2237
; [then-branch 4621] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4622] 4 == 2
(push) ; 2238
; [else-branch 4622] 4 != 2
(pop) ; 2238
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2238
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2238
; 0,00s
; (get-info :all-statistics)
(push) ; 2238
; [then-branch 4623] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4624] 4 == 2
(push) ; 2239
; [else-branch 4624] 4 != 2
(pop) ; 2239
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2239
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2239
; 0,00s
; (get-info :all-statistics)
(push) ; 2239
; [then-branch 4625] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4626] 4 == 2
(push) ; 2240
; [else-branch 4626] 4 != 2
(pop) ; 2240
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2240
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2240
; 0,00s
; (get-info :all-statistics)
(push) ; 2240
; [then-branch 4627] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4628] 4 == 2
(push) ; 2241
; [else-branch 4628] 4 != 2
(pop) ; 2241
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2241
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2241
; 0,00s
; (get-info :all-statistics)
(push) ; 2241
; [then-branch 4629] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4630] 4 == 2
(push) ; 2242
; [else-branch 4630] 4 != 2
(pop) ; 2242
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2242
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2242
; 0,00s
; (get-info :all-statistics)
(push) ; 2242
; [then-branch 4631] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4632] 4 == 2
(push) ; 2243
; [else-branch 4632] 4 != 2
(pop) ; 2243
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2243
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2243
; 0,00s
; (get-info :all-statistics)
(push) ; 2243
; [then-branch 4633] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4634] 4 == 2
(push) ; 2244
; [else-branch 4634] 4 != 2
(pop) ; 2244
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2244
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2244
; 0,00s
; (get-info :all-statistics)
(push) ; 2244
; [then-branch 4635] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4636] 4 == 2
(push) ; 2245
; [else-branch 4636] 4 != 2
(pop) ; 2245
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2245
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2245
; 0,00s
; (get-info :all-statistics)
(push) ; 2245
; [then-branch 4637] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4638] 4 == 2
(push) ; 2246
; [else-branch 4638] 4 != 2
(pop) ; 2246
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2246
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2246
; 0,00s
; (get-info :all-statistics)
(push) ; 2246
; [then-branch 4639] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4640] 4 == 2
(push) ; 2247
; [else-branch 4640] 4 != 2
(pop) ; 2247
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2247
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2247
; 0,00s
; (get-info :all-statistics)
(push) ; 2247
; [then-branch 4641] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4642] 4 == 2
(push) ; 2248
; [else-branch 4642] 4 != 2
(pop) ; 2248
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2248
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2248
; 0,00s
; (get-info :all-statistics)
(push) ; 2248
; [then-branch 4643] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4644] 4 == 2
(push) ; 2249
; [else-branch 4644] 4 != 2
(pop) ; 2249
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2249
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2249
; 0,00s
; (get-info :all-statistics)
(push) ; 2249
; [then-branch 4645] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4646] 4 == 2
(push) ; 2250
; [else-branch 4646] 4 != 2
(pop) ; 2250
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2250
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2250
; 0,00s
; (get-info :all-statistics)
(push) ; 2250
; [then-branch 4647] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4648] 4 == 2
(push) ; 2251
; [else-branch 4648] 4 != 2
(pop) ; 2251
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2251
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2251
; 0,00s
; (get-info :all-statistics)
(push) ; 2251
; [then-branch 4649] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4650] 4 == 2
(push) ; 2252
; [else-branch 4650] 4 != 2
(pop) ; 2252
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2252
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2252
; 0,00s
; (get-info :all-statistics)
(push) ; 2252
; [then-branch 4651] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4652] 4 == 2
(push) ; 2253
; [else-branch 4652] 4 != 2
(pop) ; 2253
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2253
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2253
; 0,00s
; (get-info :all-statistics)
(push) ; 2253
; [then-branch 4653] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4654] 4 == 2
(push) ; 2254
; [else-branch 4654] 4 != 2
(pop) ; 2254
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2254
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2254
; 0,00s
; (get-info :all-statistics)
(push) ; 2254
; [then-branch 4655] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4656] 4 == 2
(push) ; 2255
; [else-branch 4656] 4 != 2
(pop) ; 2255
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2255
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2255
; 0,00s
; (get-info :all-statistics)
(push) ; 2255
; [then-branch 4657] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4658] 4 == 2
(push) ; 2256
; [else-branch 4658] 4 != 2
(pop) ; 2256
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2256
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2256
; 0,00s
; (get-info :all-statistics)
(push) ; 2256
; [then-branch 4659] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4660] 4 == 2
(push) ; 2257
; [else-branch 4660] 4 != 2
(pop) ; 2257
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2257
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2257
; 0,00s
; (get-info :all-statistics)
(push) ; 2257
; [then-branch 4661] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4662] 4 == 2
(push) ; 2258
; [else-branch 4662] 4 != 2
(pop) ; 2258
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2258
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2258
; 0,00s
; (get-info :all-statistics)
(push) ; 2258
; [then-branch 4663] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4664] 4 == 2
(push) ; 2259
; [else-branch 4664] 4 != 2
(pop) ; 2259
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2259
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2259
; 0,00s
; (get-info :all-statistics)
(push) ; 2259
; [then-branch 4665] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4666] 4 == 2
(push) ; 2260
; [else-branch 4666] 4 != 2
(pop) ; 2260
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2260
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2260
; 0,00s
; (get-info :all-statistics)
(push) ; 2260
; [then-branch 4667] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4668] 4 == 2
(push) ; 2261
; [else-branch 4668] 4 != 2
(pop) ; 2261
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2261
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2261
; 0,00s
; (get-info :all-statistics)
(push) ; 2261
; [then-branch 4669] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4670] 4 == 2
(push) ; 2262
; [else-branch 4670] 4 != 2
(pop) ; 2262
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2262
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2262
; 0,00s
; (get-info :all-statistics)
(push) ; 2262
; [then-branch 4671] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4672] 4 == 2
(push) ; 2263
; [else-branch 4672] 4 != 2
(pop) ; 2263
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2263
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2263
; 0,00s
; (get-info :all-statistics)
(push) ; 2263
; [then-branch 4673] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4674] 4 == 2
(push) ; 2264
; [else-branch 4674] 4 != 2
(pop) ; 2264
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2264
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2264
; 0,00s
; (get-info :all-statistics)
(push) ; 2264
; [then-branch 4675] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4676] 4 == 2
(push) ; 2265
; [else-branch 4676] 4 != 2
(pop) ; 2265
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2265
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2265
; 0,00s
; (get-info :all-statistics)
(push) ; 2265
; [then-branch 4677] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4678] 4 == 2
(push) ; 2266
; [else-branch 4678] 4 != 2
(pop) ; 2266
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2266
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2266
; 0,00s
; (get-info :all-statistics)
(push) ; 2266
; [then-branch 4679] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4680] 4 == 2
(push) ; 2267
; [else-branch 4680] 4 != 2
(pop) ; 2267
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2267
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2267
; 0,00s
; (get-info :all-statistics)
(push) ; 2267
; [then-branch 4681] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4682] 4 == 2
(push) ; 2268
; [else-branch 4682] 4 != 2
(pop) ; 2268
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2268
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2268
; 0,00s
; (get-info :all-statistics)
(push) ; 2268
; [then-branch 4683] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4684] 4 == 2
(push) ; 2269
; [else-branch 4684] 4 != 2
(pop) ; 2269
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2269
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2269
; 0,00s
; (get-info :all-statistics)
(push) ; 2269
; [then-branch 4685] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4686] 4 == 2
(push) ; 2270
; [else-branch 4686] 4 != 2
(pop) ; 2270
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2270
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2270
; 0,00s
; (get-info :all-statistics)
(push) ; 2270
; [then-branch 4687] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4688] 4 == 2
(push) ; 2271
; [else-branch 4688] 4 != 2
(pop) ; 2271
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2271
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2271
; 0,00s
; (get-info :all-statistics)
(push) ; 2271
; [then-branch 4689] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4690] 4 == 2
(push) ; 2272
; [else-branch 4690] 4 != 2
(pop) ; 2272
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2272
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2272
; 0,00s
; (get-info :all-statistics)
(push) ; 2272
; [then-branch 4691] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4692] 4 == 2
(push) ; 2273
; [else-branch 4692] 4 != 2
(pop) ; 2273
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2273
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2273
; 0,00s
; (get-info :all-statistics)
(push) ; 2273
; [then-branch 4693] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4694] 4 == 2
(push) ; 2274
; [else-branch 4694] 4 != 2
(pop) ; 2274
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2274
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2274
; 0,00s
; (get-info :all-statistics)
(push) ; 2274
; [then-branch 4695] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4696] 4 == 2
(push) ; 2275
; [else-branch 4696] 4 != 2
(pop) ; 2275
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2275
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2275
; 0,00s
; (get-info :all-statistics)
(push) ; 2275
; [then-branch 4697] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4698] 4 == 2
(push) ; 2276
; [else-branch 4698] 4 != 2
(pop) ; 2276
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2276
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2276
; 0,00s
; (get-info :all-statistics)
(push) ; 2276
; [then-branch 4699] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4700] 4 == 2
(push) ; 2277
; [else-branch 4700] 4 != 2
(pop) ; 2277
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2277
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2277
; 0,00s
; (get-info :all-statistics)
(push) ; 2277
; [then-branch 4701] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4702] 4 == 2
(push) ; 2278
; [else-branch 4702] 4 != 2
(pop) ; 2278
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2278
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2278
; 0,00s
; (get-info :all-statistics)
(push) ; 2278
; [then-branch 4703] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4704] 4 == 2
(push) ; 2279
; [else-branch 4704] 4 != 2
(pop) ; 2279
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2279
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2279
; 0,00s
; (get-info :all-statistics)
(push) ; 2279
; [then-branch 4705] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4706] 4 == 2
(push) ; 2280
; [else-branch 4706] 4 != 2
(pop) ; 2280
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2280
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2280
; 0,00s
; (get-info :all-statistics)
(push) ; 2280
; [then-branch 4707] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4708] 4 == 2
(push) ; 2281
; [else-branch 4708] 4 != 2
(pop) ; 2281
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2281
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2281
; 0,00s
; (get-info :all-statistics)
(push) ; 2281
; [then-branch 4709] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4710] 4 == 2
(push) ; 2282
; [else-branch 4710] 4 != 2
(pop) ; 2282
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2282
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2282
; 0,00s
; (get-info :all-statistics)
(push) ; 2282
; [then-branch 4711] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4712] 4 == 2
(push) ; 2283
; [else-branch 4712] 4 != 2
(pop) ; 2283
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2283
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2283
; 0,00s
; (get-info :all-statistics)
(push) ; 2283
; [then-branch 4713] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4714] 4 == 2
(push) ; 2284
; [else-branch 4714] 4 != 2
(pop) ; 2284
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2284
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2284
; 0,00s
; (get-info :all-statistics)
(push) ; 2284
; [then-branch 4715] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4716] 4 == 2
(push) ; 2285
; [else-branch 4716] 4 != 2
(pop) ; 2285
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2285
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2285
; 0,00s
; (get-info :all-statistics)
(push) ; 2285
; [then-branch 4717] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4718] 4 == 2
(push) ; 2286
; [else-branch 4718] 4 != 2
(pop) ; 2286
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2286
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2286
; 0,00s
; (get-info :all-statistics)
(push) ; 2286
; [then-branch 4719] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4720] 4 == 2
(push) ; 2287
; [else-branch 4720] 4 != 2
(pop) ; 2287
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2287
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2287
; 0,00s
; (get-info :all-statistics)
(push) ; 2287
; [then-branch 4721] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4722] 4 == 2
(push) ; 2288
; [else-branch 4722] 4 != 2
(pop) ; 2288
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2288
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2288
; 0,00s
; (get-info :all-statistics)
(push) ; 2288
; [then-branch 4723] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4724] 4 == 2
(push) ; 2289
; [else-branch 4724] 4 != 2
(pop) ; 2289
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2289
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2289
; 0,00s
; (get-info :all-statistics)
(push) ; 2289
; [then-branch 4725] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4726] 4 == 2
(push) ; 2290
; [else-branch 4726] 4 != 2
(pop) ; 2290
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2290
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2290
; 0,00s
; (get-info :all-statistics)
(push) ; 2290
; [then-branch 4727] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4728] 4 == 2
(push) ; 2291
; [else-branch 4728] 4 != 2
(pop) ; 2291
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2291
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2291
; 0,00s
; (get-info :all-statistics)
(push) ; 2291
; [then-branch 4729] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4730] 4 == 2
(push) ; 2292
; [else-branch 4730] 4 != 2
(pop) ; 2292
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2292
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2292
; 0,00s
; (get-info :all-statistics)
(push) ; 2292
; [then-branch 4731] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4732] 4 == 2
(push) ; 2293
; [else-branch 4732] 4 != 2
(pop) ; 2293
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2293
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2293
; 0,00s
; (get-info :all-statistics)
(push) ; 2293
; [then-branch 4733] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4734] 4 == 2
(push) ; 2294
; [else-branch 4734] 4 != 2
(pop) ; 2294
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2294
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2294
; 0,00s
; (get-info :all-statistics)
(push) ; 2294
; [then-branch 4735] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4736] 4 == 2
(push) ; 2295
; [else-branch 4736] 4 != 2
(pop) ; 2295
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2295
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2295
; 0,00s
; (get-info :all-statistics)
(push) ; 2295
; [then-branch 4737] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4738] 4 == 2
(push) ; 2296
; [else-branch 4738] 4 != 2
(pop) ; 2296
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2296
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2296
; 0,00s
; (get-info :all-statistics)
(push) ; 2296
; [then-branch 4739] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4740] 4 == 2
(push) ; 2297
; [else-branch 4740] 4 != 2
(pop) ; 2297
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2297
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2297
; 0,00s
; (get-info :all-statistics)
(push) ; 2297
; [then-branch 4741] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4742] 4 == 2
(push) ; 2298
; [else-branch 4742] 4 != 2
(pop) ; 2298
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2298
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2298
; 0,00s
; (get-info :all-statistics)
(push) ; 2298
; [then-branch 4743] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4744] 4 == 2
(push) ; 2299
; [else-branch 4744] 4 != 2
(pop) ; 2299
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2299
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2299
; 0,00s
; (get-info :all-statistics)
(push) ; 2299
; [then-branch 4745] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4746] 4 == 2
(push) ; 2300
; [else-branch 4746] 4 != 2
(pop) ; 2300
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2300
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2300
; 0,00s
; (get-info :all-statistics)
(push) ; 2300
; [then-branch 4747] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4748] 4 == 2
(push) ; 2301
; [else-branch 4748] 4 != 2
(pop) ; 2301
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2301
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2301
; 0,00s
; (get-info :all-statistics)
(push) ; 2301
; [then-branch 4749] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4750] 4 == 2
(push) ; 2302
; [else-branch 4750] 4 != 2
(pop) ; 2302
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2302
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2302
; 0,00s
; (get-info :all-statistics)
(push) ; 2302
; [then-branch 4751] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4752] 4 == 2
(push) ; 2303
; [else-branch 4752] 4 != 2
(pop) ; 2303
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2303
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2303
; 0,00s
; (get-info :all-statistics)
(push) ; 2303
; [then-branch 4753] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4754] 4 == 2
(push) ; 2304
; [else-branch 4754] 4 != 2
(pop) ; 2304
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2304
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2304
; 0,00s
; (get-info :all-statistics)
(push) ; 2304
; [then-branch 4755] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4756] 4 == 2
(push) ; 2305
; [else-branch 4756] 4 != 2
(pop) ; 2305
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2305
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2305
; 0,00s
; (get-info :all-statistics)
(push) ; 2305
; [then-branch 4757] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4758] 4 == 2
(push) ; 2306
; [else-branch 4758] 4 != 2
(pop) ; 2306
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2306
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2306
; 0,00s
; (get-info :all-statistics)
(push) ; 2306
; [then-branch 4759] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4760] 4 == 2
(push) ; 2307
; [else-branch 4760] 4 != 2
(pop) ; 2307
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2307
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2307
; 0,00s
; (get-info :all-statistics)
(push) ; 2307
; [then-branch 4761] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4762] 4 == 2
(push) ; 2308
; [else-branch 4762] 4 != 2
(pop) ; 2308
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2308
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2308
; 0,00s
; (get-info :all-statistics)
(push) ; 2308
; [then-branch 4763] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4764] 4 == 2
(push) ; 2309
; [else-branch 4764] 4 != 2
(pop) ; 2309
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2309
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2309
; 0,00s
; (get-info :all-statistics)
(push) ; 2309
; [then-branch 4765] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4766] 4 == 2
(push) ; 2310
; [else-branch 4766] 4 != 2
(pop) ; 2310
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2310
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2310
; 0,00s
; (get-info :all-statistics)
(push) ; 2310
; [then-branch 4767] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4768] 4 == 2
(push) ; 2311
; [else-branch 4768] 4 != 2
(pop) ; 2311
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2311
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2311
; 0,00s
; (get-info :all-statistics)
(push) ; 2311
; [then-branch 4769] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4770] 4 == 2
(push) ; 2312
; [else-branch 4770] 4 != 2
(pop) ; 2312
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2312
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2312
; 0,00s
; (get-info :all-statistics)
(push) ; 2312
; [then-branch 4771] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4772] 4 == 2
(push) ; 2313
; [else-branch 4772] 4 != 2
(pop) ; 2313
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2313
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2313
; 0,00s
; (get-info :all-statistics)
(push) ; 2313
; [then-branch 4773] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4774] 4 == 2
(push) ; 2314
; [else-branch 4774] 4 != 2
(pop) ; 2314
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2314
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2314
; 0,00s
; (get-info :all-statistics)
(push) ; 2314
; [then-branch 4775] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4776] 4 == 2
(push) ; 2315
; [else-branch 4776] 4 != 2
(pop) ; 2315
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2315
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2315
; 0,00s
; (get-info :all-statistics)
(push) ; 2315
; [then-branch 4777] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4778] 4 == 2
(push) ; 2316
; [else-branch 4778] 4 != 2
(pop) ; 2316
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2316
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2316
; 0,00s
; (get-info :all-statistics)
(push) ; 2316
; [then-branch 4779] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4780] 4 == 2
(push) ; 2317
; [else-branch 4780] 4 != 2
(pop) ; 2317
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2317
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2317
; 0,00s
; (get-info :all-statistics)
(push) ; 2317
; [then-branch 4781] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4782] 4 == 2
(push) ; 2318
; [else-branch 4782] 4 != 2
(pop) ; 2318
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2318
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2318
; 0,00s
; (get-info :all-statistics)
(push) ; 2318
; [then-branch 4783] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4784] 4 == 2
(push) ; 2319
; [else-branch 4784] 4 != 2
(pop) ; 2319
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2319
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2319
; 0,00s
; (get-info :all-statistics)
(push) ; 2319
; [then-branch 4785] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4786] 4 == 2
(push) ; 2320
; [else-branch 4786] 4 != 2
(pop) ; 2320
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2320
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2320
; 0,00s
; (get-info :all-statistics)
(push) ; 2320
; [then-branch 4787] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4788] 4 == 2
(push) ; 2321
; [else-branch 4788] 4 != 2
(pop) ; 2321
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2321
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2321
; 0,00s
; (get-info :all-statistics)
(push) ; 2321
; [then-branch 4789] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4790] 4 == 2
(push) ; 2322
; [else-branch 4790] 4 != 2
(pop) ; 2322
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2322
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2322
; 0,00s
; (get-info :all-statistics)
(push) ; 2322
; [then-branch 4791] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4792] 4 == 2
(push) ; 2323
; [else-branch 4792] 4 != 2
(pop) ; 2323
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2323
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2323
; 0,00s
; (get-info :all-statistics)
(push) ; 2323
; [then-branch 4793] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4794] 4 == 2
(push) ; 2324
; [else-branch 4794] 4 != 2
(pop) ; 2324
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2324
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2324
; 0,00s
; (get-info :all-statistics)
(push) ; 2324
; [then-branch 4795] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4796] 4 == 2
(push) ; 2325
; [else-branch 4796] 4 != 2
(pop) ; 2325
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2325
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2325
; 0,00s
; (get-info :all-statistics)
(push) ; 2325
; [then-branch 4797] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4798] 4 == 2
(push) ; 2326
; [else-branch 4798] 4 != 2
(pop) ; 2326
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2326
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2326
; 0,00s
; (get-info :all-statistics)
(push) ; 2326
; [then-branch 4799] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4800] 4 == 2
(push) ; 2327
; [else-branch 4800] 4 != 2
(pop) ; 2327
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2327
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2327
; 0,00s
; (get-info :all-statistics)
(push) ; 2327
; [then-branch 4801] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4802] 4 == 2
(push) ; 2328
; [else-branch 4802] 4 != 2
(pop) ; 2328
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2328
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2328
; 0,00s
; (get-info :all-statistics)
(push) ; 2328
; [then-branch 4803] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4804] 4 == 2
(push) ; 2329
; [else-branch 4804] 4 != 2
(pop) ; 2329
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2329
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2329
; 0,00s
; (get-info :all-statistics)
(push) ; 2329
; [then-branch 4805] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4806] 4 == 2
(push) ; 2330
; [else-branch 4806] 4 != 2
(pop) ; 2330
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2330
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2330
; 0,00s
; (get-info :all-statistics)
(push) ; 2330
; [then-branch 4807] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4808] 4 == 2
(push) ; 2331
; [else-branch 4808] 4 != 2
(pop) ; 2331
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2331
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2331
; 0,00s
; (get-info :all-statistics)
(push) ; 2331
; [then-branch 4809] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4810] 4 == 2
(push) ; 2332
; [else-branch 4810] 4 != 2
(pop) ; 2332
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2332
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2332
; 0,00s
; (get-info :all-statistics)
(push) ; 2332
; [then-branch 4811] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4812] 4 == 2
(push) ; 2333
; [else-branch 4812] 4 != 2
(pop) ; 2333
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2333
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2333
; 0,00s
; (get-info :all-statistics)
(push) ; 2333
; [then-branch 4813] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4814] 4 == 2
(push) ; 2334
; [else-branch 4814] 4 != 2
(pop) ; 2334
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2334
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2334
; 0,00s
; (get-info :all-statistics)
(push) ; 2334
; [then-branch 4815] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4816] 4 == 2
(push) ; 2335
; [else-branch 4816] 4 != 2
(pop) ; 2335
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2335
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2335
; 0,00s
; (get-info :all-statistics)
(push) ; 2335
; [then-branch 4817] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4818] 4 == 2
(push) ; 2336
; [else-branch 4818] 4 != 2
(pop) ; 2336
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2336
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2336
; 0,00s
; (get-info :all-statistics)
(push) ; 2336
; [then-branch 4819] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4820] 4 == 2
(push) ; 2337
; [else-branch 4820] 4 != 2
(pop) ; 2337
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2337
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2337
; 0,00s
; (get-info :all-statistics)
(push) ; 2337
; [then-branch 4821] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4822] 4 == 2
(push) ; 2338
; [else-branch 4822] 4 != 2
(pop) ; 2338
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2338
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2338
; 0,00s
; (get-info :all-statistics)
(push) ; 2338
; [then-branch 4823] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4824] 4 == 2
(push) ; 2339
; [else-branch 4824] 4 != 2
(pop) ; 2339
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2339
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2339
; 0,00s
; (get-info :all-statistics)
(push) ; 2339
; [then-branch 4825] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4826] 4 == 2
(push) ; 2340
; [else-branch 4826] 4 != 2
(pop) ; 2340
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2340
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2340
; 0,00s
; (get-info :all-statistics)
(push) ; 2340
; [then-branch 4827] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4828] 4 == 2
(push) ; 2341
; [else-branch 4828] 4 != 2
(pop) ; 2341
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2341
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2341
; 0,00s
; (get-info :all-statistics)
(push) ; 2341
; [then-branch 4829] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4830] 4 == 2
(push) ; 2342
; [else-branch 4830] 4 != 2
(pop) ; 2342
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2342
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2342
; 0,00s
; (get-info :all-statistics)
(push) ; 2342
; [then-branch 4831] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4832] 4 == 2
(push) ; 2343
; [else-branch 4832] 4 != 2
(pop) ; 2343
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2343
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2343
; 0,00s
; (get-info :all-statistics)
(push) ; 2343
; [then-branch 4833] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4834] 4 == 2
(push) ; 2344
; [else-branch 4834] 4 != 2
(pop) ; 2344
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2344
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2344
; 0,00s
; (get-info :all-statistics)
(push) ; 2344
; [then-branch 4835] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4836] 4 == 2
(push) ; 2345
; [else-branch 4836] 4 != 2
(pop) ; 2345
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2345
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2345
; 0,00s
; (get-info :all-statistics)
(push) ; 2345
; [then-branch 4837] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4838] 4 == 2
(push) ; 2346
; [else-branch 4838] 4 != 2
(pop) ; 2346
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2346
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2346
; 0,00s
; (get-info :all-statistics)
(push) ; 2346
; [then-branch 4839] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4840] 4 == 2
(push) ; 2347
; [else-branch 4840] 4 != 2
(pop) ; 2347
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2347
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2347
; 0,00s
; (get-info :all-statistics)
(push) ; 2347
; [then-branch 4841] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4842] 4 == 2
(push) ; 2348
; [else-branch 4842] 4 != 2
(pop) ; 2348
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2348
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2348
; 0,00s
; (get-info :all-statistics)
(push) ; 2348
; [then-branch 4843] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4844] 4 == 2
(push) ; 2349
; [else-branch 4844] 4 != 2
(pop) ; 2349
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2349
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2349
; 0,00s
; (get-info :all-statistics)
(push) ; 2349
; [then-branch 4845] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4846] 4 == 2
(push) ; 2350
; [else-branch 4846] 4 != 2
(pop) ; 2350
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2350
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2350
; 0,00s
; (get-info :all-statistics)
(push) ; 2350
; [then-branch 4847] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4848] 4 == 2
(push) ; 2351
; [else-branch 4848] 4 != 2
(pop) ; 2351
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2351
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2351
; 0,00s
; (get-info :all-statistics)
(push) ; 2351
; [then-branch 4849] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4850] 4 == 2
(push) ; 2352
; [else-branch 4850] 4 != 2
(pop) ; 2352
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2352
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2352
; 0,00s
; (get-info :all-statistics)
(push) ; 2352
; [then-branch 4851] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4852] 4 == 2
(push) ; 2353
; [else-branch 4852] 4 != 2
(pop) ; 2353
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2353
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2353
; 0,00s
; (get-info :all-statistics)
(push) ; 2353
; [then-branch 4853] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4854] 4 == 2
(push) ; 2354
; [else-branch 4854] 4 != 2
(pop) ; 2354
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2354
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2354
; 0,00s
; (get-info :all-statistics)
(push) ; 2354
; [then-branch 4855] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4856] 4 == 2
(push) ; 2355
; [else-branch 4856] 4 != 2
(pop) ; 2355
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2355
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2355
; 0,00s
; (get-info :all-statistics)
(push) ; 2355
; [then-branch 4857] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4858] 4 == 2
(push) ; 2356
; [else-branch 4858] 4 != 2
(pop) ; 2356
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2356
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2356
; 0,00s
; (get-info :all-statistics)
(push) ; 2356
; [then-branch 4859] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4860] 4 == 2
(push) ; 2357
; [else-branch 4860] 4 != 2
(pop) ; 2357
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2357
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2357
; 0,00s
; (get-info :all-statistics)
(push) ; 2357
; [then-branch 4861] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4862] 4 == 2
(push) ; 2358
; [else-branch 4862] 4 != 2
(pop) ; 2358
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2358
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2358
; 0,00s
; (get-info :all-statistics)
(push) ; 2358
; [then-branch 4863] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4864] 4 == 2
(push) ; 2359
; [else-branch 4864] 4 != 2
(pop) ; 2359
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2359
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2359
; 0,00s
; (get-info :all-statistics)
(push) ; 2359
; [then-branch 4865] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4866] 4 == 2
(push) ; 2360
; [else-branch 4866] 4 != 2
(pop) ; 2360
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2360
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2360
; 0,00s
; (get-info :all-statistics)
(push) ; 2360
; [then-branch 4867] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4868] 4 == 2
(push) ; 2361
; [else-branch 4868] 4 != 2
(pop) ; 2361
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2361
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2361
; 0,00s
; (get-info :all-statistics)
(push) ; 2361
; [then-branch 4869] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4870] 4 == 2
(push) ; 2362
; [else-branch 4870] 4 != 2
(pop) ; 2362
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2362
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2362
; 0,00s
; (get-info :all-statistics)
(push) ; 2362
; [then-branch 4871] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4872] 4 == 2
(push) ; 2363
; [else-branch 4872] 4 != 2
(pop) ; 2363
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2363
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2363
; 0,00s
; (get-info :all-statistics)
(push) ; 2363
; [then-branch 4873] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4874] 4 == 2
(push) ; 2364
; [else-branch 4874] 4 != 2
(pop) ; 2364
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2364
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2364
; 0,00s
; (get-info :all-statistics)
(push) ; 2364
; [then-branch 4875] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4876] 4 == 2
(push) ; 2365
; [else-branch 4876] 4 != 2
(pop) ; 2365
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2365
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2365
; 0,00s
; (get-info :all-statistics)
(push) ; 2365
; [then-branch 4877] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4878] 4 == 2
(push) ; 2366
; [else-branch 4878] 4 != 2
(pop) ; 2366
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2366
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2366
; 0,00s
; (get-info :all-statistics)
(push) ; 2366
; [then-branch 4879] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4880] 4 == 2
(push) ; 2367
; [else-branch 4880] 4 != 2
(pop) ; 2367
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2367
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2367
; 0,00s
; (get-info :all-statistics)
(push) ; 2367
; [then-branch 4881] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4882] 4 == 2
(push) ; 2368
; [else-branch 4882] 4 != 2
(pop) ; 2368
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2368
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2368
; 0,00s
; (get-info :all-statistics)
(push) ; 2368
; [then-branch 4883] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4884] 4 == 2
(push) ; 2369
; [else-branch 4884] 4 != 2
(pop) ; 2369
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2369
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2369
; 0,00s
; (get-info :all-statistics)
(push) ; 2369
; [then-branch 4885] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4886] 4 == 2
(push) ; 2370
; [else-branch 4886] 4 != 2
(pop) ; 2370
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2370
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2370
; 0,00s
; (get-info :all-statistics)
(push) ; 2370
; [then-branch 4887] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4888] 4 == 2
(push) ; 2371
; [else-branch 4888] 4 != 2
(pop) ; 2371
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2371
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2371
; 0,00s
; (get-info :all-statistics)
(push) ; 2371
; [then-branch 4889] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4890] 4 == 2
(push) ; 2372
; [else-branch 4890] 4 != 2
(pop) ; 2372
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2372
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2372
; 0,00s
; (get-info :all-statistics)
(push) ; 2372
; [then-branch 4891] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4892] 4 == 2
(push) ; 2373
; [else-branch 4892] 4 != 2
(pop) ; 2373
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2373
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2373
; 0,00s
; (get-info :all-statistics)
(push) ; 2373
; [then-branch 4893] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4894] 4 == 2
(push) ; 2374
; [else-branch 4894] 4 != 2
(pop) ; 2374
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2374
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2374
; 0,00s
; (get-info :all-statistics)
(push) ; 2374
; [then-branch 4895] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4896] 4 == 2
(push) ; 2375
; [else-branch 4896] 4 != 2
(pop) ; 2375
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2375
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2375
; 0,00s
; (get-info :all-statistics)
(push) ; 2375
; [then-branch 4897] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4898] 4 == 2
(push) ; 2376
; [else-branch 4898] 4 != 2
(pop) ; 2376
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2376
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2376
; 0,00s
; (get-info :all-statistics)
(push) ; 2376
; [then-branch 4899] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4900] 4 == 2
(push) ; 2377
; [else-branch 4900] 4 != 2
(pop) ; 2377
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2377
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2377
; 0,00s
; (get-info :all-statistics)
(push) ; 2377
; [then-branch 4901] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4902] 4 == 2
(push) ; 2378
; [else-branch 4902] 4 != 2
(pop) ; 2378
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2378
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2378
; 0,00s
; (get-info :all-statistics)
(push) ; 2378
; [then-branch 4903] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4904] 4 == 2
(push) ; 2379
; [else-branch 4904] 4 != 2
(pop) ; 2379
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2379
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2379
; 0,00s
; (get-info :all-statistics)
(push) ; 2379
; [then-branch 4905] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4906] 4 == 2
(push) ; 2380
; [else-branch 4906] 4 != 2
(pop) ; 2380
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2380
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2380
; 0,00s
; (get-info :all-statistics)
(push) ; 2380
; [then-branch 4907] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4908] 4 == 2
(push) ; 2381
; [else-branch 4908] 4 != 2
(pop) ; 2381
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2381
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2381
; 0,00s
; (get-info :all-statistics)
(push) ; 2381
; [then-branch 4909] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4910] 4 == 2
(push) ; 2382
; [else-branch 4910] 4 != 2
(pop) ; 2382
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2382
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2382
; 0,00s
; (get-info :all-statistics)
(push) ; 2382
; [then-branch 4911] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4912] 4 == 2
(push) ; 2383
; [else-branch 4912] 4 != 2
(pop) ; 2383
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2383
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2383
; 0,00s
; (get-info :all-statistics)
(push) ; 2383
; [then-branch 4913] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4914] 4 == 2
(push) ; 2384
; [else-branch 4914] 4 != 2
(pop) ; 2384
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2384
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2384
; 0,00s
; (get-info :all-statistics)
(push) ; 2384
; [then-branch 4915] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4916] 4 == 2
(push) ; 2385
; [else-branch 4916] 4 != 2
(pop) ; 2385
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2385
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2385
; 0,00s
; (get-info :all-statistics)
(push) ; 2385
; [then-branch 4917] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4918] 4 == 2
(push) ; 2386
; [else-branch 4918] 4 != 2
(pop) ; 2386
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2386
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2386
; 0,00s
; (get-info :all-statistics)
(push) ; 2386
; [then-branch 4919] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4920] 4 == 2
(push) ; 2387
; [else-branch 4920] 4 != 2
(pop) ; 2387
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2387
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2387
; 0,00s
; (get-info :all-statistics)
(push) ; 2387
; [then-branch 4921] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4922] 4 == 2
(push) ; 2388
; [else-branch 4922] 4 != 2
(pop) ; 2388
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2388
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2388
; 0,00s
; (get-info :all-statistics)
(push) ; 2388
; [then-branch 4923] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4924] 4 == 2
(push) ; 2389
; [else-branch 4924] 4 != 2
(pop) ; 2389
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2389
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2389
; 0,00s
; (get-info :all-statistics)
(push) ; 2389
; [then-branch 4925] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4926] 4 == 2
(push) ; 2390
; [else-branch 4926] 4 != 2
(pop) ; 2390
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2390
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2390
; 0,00s
; (get-info :all-statistics)
(push) ; 2390
; [then-branch 4927] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4928] 4 == 2
(push) ; 2391
; [else-branch 4928] 4 != 2
(pop) ; 2391
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2391
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2391
; 0,00s
; (get-info :all-statistics)
(push) ; 2391
; [then-branch 4929] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4930] 4 == 2
(push) ; 2392
; [else-branch 4930] 4 != 2
(pop) ; 2392
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2392
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2392
; 0,00s
; (get-info :all-statistics)
(push) ; 2392
; [then-branch 4931] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4932] 4 == 2
(push) ; 2393
; [else-branch 4932] 4 != 2
(pop) ; 2393
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2393
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2393
; 0,00s
; (get-info :all-statistics)
(push) ; 2393
; [then-branch 4933] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4934] 4 == 2
(push) ; 2394
; [else-branch 4934] 4 != 2
(pop) ; 2394
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2394
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2394
; 0,00s
; (get-info :all-statistics)
(push) ; 2394
; [then-branch 4935] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4936] 4 == 2
(push) ; 2395
; [else-branch 4936] 4 != 2
(pop) ; 2395
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2395
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2395
; 0,00s
; (get-info :all-statistics)
(push) ; 2395
; [then-branch 4937] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4938] 4 == 2
(push) ; 2396
; [else-branch 4938] 4 != 2
(pop) ; 2396
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2396
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2396
; 0,00s
; (get-info :all-statistics)
(push) ; 2396
; [then-branch 4939] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4940] 4 == 2
(push) ; 2397
; [else-branch 4940] 4 != 2
(pop) ; 2397
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2397
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2397
; 0,00s
; (get-info :all-statistics)
(push) ; 2397
; [then-branch 4941] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4942] 4 == 2
(push) ; 2398
; [else-branch 4942] 4 != 2
(pop) ; 2398
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2398
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2398
; 0,00s
; (get-info :all-statistics)
(push) ; 2398
; [then-branch 4943] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4944] 4 == 2
(push) ; 2399
; [else-branch 4944] 4 != 2
(pop) ; 2399
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2399
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2399
; 0,00s
; (get-info :all-statistics)
(push) ; 2399
; [then-branch 4945] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4946] 4 == 2
(push) ; 2400
; [else-branch 4946] 4 != 2
(pop) ; 2400
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2400
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2400
; 0,00s
; (get-info :all-statistics)
(push) ; 2400
; [then-branch 4947] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4948] 4 == 2
(push) ; 2401
; [else-branch 4948] 4 != 2
(pop) ; 2401
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2401
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2401
; 0,00s
; (get-info :all-statistics)
(push) ; 2401
; [then-branch 4949] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4950] 4 == 2
(push) ; 2402
; [else-branch 4950] 4 != 2
(pop) ; 2402
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2402
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2402
; 0,00s
; (get-info :all-statistics)
(push) ; 2402
; [then-branch 4951] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4952] 4 == 2
(push) ; 2403
; [else-branch 4952] 4 != 2
(pop) ; 2403
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2403
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2403
; 0,00s
; (get-info :all-statistics)
(push) ; 2403
; [then-branch 4953] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4954] 4 == 2
(push) ; 2404
; [else-branch 4954] 4 != 2
(pop) ; 2404
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2404
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2404
; 0,00s
; (get-info :all-statistics)
(push) ; 2404
; [then-branch 4955] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4956] 4 == 2
(push) ; 2405
; [else-branch 4956] 4 != 2
(pop) ; 2405
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2405
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2405
; 0,00s
; (get-info :all-statistics)
(push) ; 2405
; [then-branch 4957] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4958] 4 == 2
(push) ; 2406
; [else-branch 4958] 4 != 2
(pop) ; 2406
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2406
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2406
; 0,00s
; (get-info :all-statistics)
(push) ; 2406
; [then-branch 4959] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4960] 4 == 2
(push) ; 2407
; [else-branch 4960] 4 != 2
(pop) ; 2407
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2407
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2407
; 0,00s
; (get-info :all-statistics)
(push) ; 2407
; [then-branch 4961] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4962] 4 == 2
(push) ; 2408
; [else-branch 4962] 4 != 2
(pop) ; 2408
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2408
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2408
; 0,00s
; (get-info :all-statistics)
(push) ; 2408
; [then-branch 4963] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4964] 4 == 2
(push) ; 2409
; [else-branch 4964] 4 != 2
(pop) ; 2409
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2409
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2409
; 0,00s
; (get-info :all-statistics)
(push) ; 2409
; [then-branch 4965] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4966] 4 == 2
(push) ; 2410
; [else-branch 4966] 4 != 2
(pop) ; 2410
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2410
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2410
; 0,00s
; (get-info :all-statistics)
(push) ; 2410
; [then-branch 4967] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4968] 4 == 2
(push) ; 2411
; [else-branch 4968] 4 != 2
(pop) ; 2411
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2411
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2411
; 0,00s
; (get-info :all-statistics)
(push) ; 2411
; [then-branch 4969] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4970] 4 == 2
(push) ; 2412
; [else-branch 4970] 4 != 2
(pop) ; 2412
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2412
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2412
; 0,00s
; (get-info :all-statistics)
(push) ; 2412
; [then-branch 4971] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4972] 4 == 2
(push) ; 2413
; [else-branch 4972] 4 != 2
(pop) ; 2413
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2413
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2413
; 0,00s
; (get-info :all-statistics)
(push) ; 2413
; [then-branch 4973] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4974] 4 == 2
(push) ; 2414
; [else-branch 4974] 4 != 2
(pop) ; 2414
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2414
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2414
; 0,00s
; (get-info :all-statistics)
(push) ; 2414
; [then-branch 4975] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4976] 4 == 2
(push) ; 2415
; [else-branch 4976] 4 != 2
(pop) ; 2415
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2415
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2415
; 0,00s
; (get-info :all-statistics)
(push) ; 2415
; [then-branch 4977] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4978] 4 == 2
(push) ; 2416
; [else-branch 4978] 4 != 2
(pop) ; 2416
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2416
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2416
; 0,00s
; (get-info :all-statistics)
(push) ; 2416
; [then-branch 4979] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4980] 4 == 2
(push) ; 2417
; [else-branch 4980] 4 != 2
(pop) ; 2417
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2417
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2417
; 0,00s
; (get-info :all-statistics)
(push) ; 2417
; [then-branch 4981] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4982] 4 == 2
(push) ; 2418
; [else-branch 4982] 4 != 2
(pop) ; 2418
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2418
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2418
; 0,00s
; (get-info :all-statistics)
(push) ; 2418
; [then-branch 4983] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4984] 4 == 2
(push) ; 2419
; [else-branch 4984] 4 != 2
(pop) ; 2419
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2419
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2419
; 0,00s
; (get-info :all-statistics)
(push) ; 2419
; [then-branch 4985] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4986] 4 == 2
(push) ; 2420
; [else-branch 4986] 4 != 2
(pop) ; 2420
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2420
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2420
; 0,00s
; (get-info :all-statistics)
(push) ; 2420
; [then-branch 4987] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4988] 4 == 2
(push) ; 2421
; [else-branch 4988] 4 != 2
(pop) ; 2421
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2421
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2421
; 0,00s
; (get-info :all-statistics)
(push) ; 2421
; [then-branch 4989] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4990] 4 == 2
(push) ; 2422
; [else-branch 4990] 4 != 2
(pop) ; 2422
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2422
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2422
; 0,00s
; (get-info :all-statistics)
(push) ; 2422
; [then-branch 4991] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4992] 4 == 2
(push) ; 2423
; [else-branch 4992] 4 != 2
(pop) ; 2423
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2423
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2423
; 0,00s
; (get-info :all-statistics)
(push) ; 2423
; [then-branch 4993] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4994] 4 == 2
(push) ; 2424
; [else-branch 4994] 4 != 2
(pop) ; 2424
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2424
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2424
; 0,00s
; (get-info :all-statistics)
(push) ; 2424
; [then-branch 4995] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4996] 4 == 2
(push) ; 2425
; [else-branch 4996] 4 != 2
(pop) ; 2425
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2425
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2425
; 0,00s
; (get-info :all-statistics)
(push) ; 2425
; [then-branch 4997] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 4998] 4 == 2
(push) ; 2426
; [else-branch 4998] 4 != 2
(pop) ; 2426
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2426
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2426
; 0,00s
; (get-info :all-statistics)
(push) ; 2426
; [then-branch 4999] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5000] 4 == 2
(push) ; 2427
; [else-branch 5000] 4 != 2
(pop) ; 2427
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2427
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2427
; 0,00s
; (get-info :all-statistics)
(push) ; 2427
; [then-branch 5001] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5002] 4 == 2
(push) ; 2428
; [else-branch 5002] 4 != 2
(pop) ; 2428
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2428
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2428
; 0,00s
; (get-info :all-statistics)
(push) ; 2428
; [then-branch 5003] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5004] 4 == 2
(push) ; 2429
; [else-branch 5004] 4 != 2
(pop) ; 2429
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2429
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2429
; 0,00s
; (get-info :all-statistics)
(push) ; 2429
; [then-branch 5005] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5006] 4 == 2
(push) ; 2430
; [else-branch 5006] 4 != 2
(pop) ; 2430
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2430
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2430
; 0,00s
; (get-info :all-statistics)
(push) ; 2430
; [then-branch 5007] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5008] 4 == 2
(push) ; 2431
; [else-branch 5008] 4 != 2
(pop) ; 2431
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2431
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2431
; 0,00s
; (get-info :all-statistics)
(push) ; 2431
; [then-branch 5009] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5010] 4 == 2
(push) ; 2432
; [else-branch 5010] 4 != 2
(pop) ; 2432
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2432
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2432
; 0,00s
; (get-info :all-statistics)
(push) ; 2432
; [then-branch 5011] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5012] 4 == 2
(push) ; 2433
; [else-branch 5012] 4 != 2
(pop) ; 2433
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2433
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2433
; 0,00s
; (get-info :all-statistics)
(push) ; 2433
; [then-branch 5013] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5014] 4 == 2
(push) ; 2434
; [else-branch 5014] 4 != 2
(pop) ; 2434
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2434
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2434
; 0,00s
; (get-info :all-statistics)
(push) ; 2434
; [then-branch 5015] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5016] 4 == 2
(push) ; 2435
; [else-branch 5016] 4 != 2
(pop) ; 2435
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2435
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2435
; 0,00s
; (get-info :all-statistics)
(push) ; 2435
; [then-branch 5017] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5018] 4 == 2
(push) ; 2436
; [else-branch 5018] 4 != 2
(pop) ; 2436
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2436
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2436
; 0,00s
; (get-info :all-statistics)
(push) ; 2436
; [then-branch 5019] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5020] 4 == 2
(push) ; 2437
; [else-branch 5020] 4 != 2
(pop) ; 2437
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2437
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2437
; 0,00s
; (get-info :all-statistics)
(push) ; 2437
; [then-branch 5021] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5022] 4 == 2
(push) ; 2438
; [else-branch 5022] 4 != 2
(pop) ; 2438
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2438
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2438
; 0,00s
; (get-info :all-statistics)
(push) ; 2438
; [then-branch 5023] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5024] 4 == 2
(push) ; 2439
; [else-branch 5024] 4 != 2
(pop) ; 2439
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2439
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2439
; 0,00s
; (get-info :all-statistics)
(push) ; 2439
; [then-branch 5025] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5026] 4 == 2
(push) ; 2440
; [else-branch 5026] 4 != 2
(pop) ; 2440
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2440
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2440
; 0,00s
; (get-info :all-statistics)
(push) ; 2440
; [then-branch 5027] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5028] 4 == 2
(push) ; 2441
; [else-branch 5028] 4 != 2
(pop) ; 2441
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2441
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2441
; 0,00s
; (get-info :all-statistics)
(push) ; 2441
; [then-branch 5029] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5030] 4 == 2
(push) ; 2442
; [else-branch 5030] 4 != 2
(pop) ; 2442
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2442
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2442
; 0,00s
; (get-info :all-statistics)
(push) ; 2442
; [then-branch 5031] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5032] 4 == 2
(push) ; 2443
; [else-branch 5032] 4 != 2
(pop) ; 2443
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2443
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2443
; 0,00s
; (get-info :all-statistics)
(push) ; 2443
; [then-branch 5033] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5034] 4 == 2
(push) ; 2444
; [else-branch 5034] 4 != 2
(pop) ; 2444
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2444
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2444
; 0,00s
; (get-info :all-statistics)
(push) ; 2444
; [then-branch 5035] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5036] 4 == 2
(push) ; 2445
; [else-branch 5036] 4 != 2
(pop) ; 2445
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2445
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2445
; 0,00s
; (get-info :all-statistics)
(push) ; 2445
; [then-branch 5037] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5038] 4 == 2
(push) ; 2446
; [else-branch 5038] 4 != 2
(pop) ; 2446
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2446
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2446
; 0,00s
; (get-info :all-statistics)
(push) ; 2446
; [then-branch 5039] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5040] 4 == 2
(push) ; 2447
; [else-branch 5040] 4 != 2
(pop) ; 2447
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2447
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2447
; 0,00s
; (get-info :all-statistics)
(push) ; 2447
; [then-branch 5041] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5042] 4 == 2
(push) ; 2448
; [else-branch 5042] 4 != 2
(pop) ; 2448
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2448
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2448
; 0,00s
; (get-info :all-statistics)
(push) ; 2448
; [then-branch 5043] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5044] 4 == 2
(push) ; 2449
; [else-branch 5044] 4 != 2
(pop) ; 2449
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2449
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2449
; 0,00s
; (get-info :all-statistics)
(push) ; 2449
; [then-branch 5045] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5046] 4 == 2
(push) ; 2450
; [else-branch 5046] 4 != 2
(pop) ; 2450
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2450
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2450
; 0,00s
; (get-info :all-statistics)
(push) ; 2450
; [then-branch 5047] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5048] 4 == 2
(push) ; 2451
; [else-branch 5048] 4 != 2
(pop) ; 2451
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2451
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2451
; 0,00s
; (get-info :all-statistics)
(push) ; 2451
; [then-branch 5049] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5050] 4 == 2
(push) ; 2452
; [else-branch 5050] 4 != 2
(pop) ; 2452
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2452
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2452
; 0,00s
; (get-info :all-statistics)
(push) ; 2452
; [then-branch 5051] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5052] 4 == 2
(push) ; 2453
; [else-branch 5052] 4 != 2
(pop) ; 2453
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2453
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2453
; 0,00s
; (get-info :all-statistics)
(push) ; 2453
; [then-branch 5053] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5054] 4 == 2
(push) ; 2454
; [else-branch 5054] 4 != 2
(pop) ; 2454
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2454
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2454
; 0,00s
; (get-info :all-statistics)
(push) ; 2454
; [then-branch 5055] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5056] 4 == 2
(push) ; 2455
; [else-branch 5056] 4 != 2
(pop) ; 2455
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2455
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2455
; 0,00s
; (get-info :all-statistics)
(push) ; 2455
; [then-branch 5057] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5058] 4 == 2
(push) ; 2456
; [else-branch 5058] 4 != 2
(pop) ; 2456
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2456
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2456
; 0,00s
; (get-info :all-statistics)
(push) ; 2456
; [then-branch 5059] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5060] 4 == 2
(push) ; 2457
; [else-branch 5060] 4 != 2
(pop) ; 2457
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2457
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2457
; 0,00s
; (get-info :all-statistics)
(push) ; 2457
; [then-branch 5061] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5062] 4 == 2
(push) ; 2458
; [else-branch 5062] 4 != 2
(pop) ; 2458
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2458
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2458
; 0,00s
; (get-info :all-statistics)
(push) ; 2458
; [then-branch 5063] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5064] 4 == 2
(push) ; 2459
; [else-branch 5064] 4 != 2
(pop) ; 2459
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2459
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2459
; 0,00s
; (get-info :all-statistics)
(push) ; 2459
; [then-branch 5065] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5066] 4 == 2
(push) ; 2460
; [else-branch 5066] 4 != 2
(pop) ; 2460
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2460
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2460
; 0,00s
; (get-info :all-statistics)
(push) ; 2460
; [then-branch 5067] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5068] 4 == 2
(push) ; 2461
; [else-branch 5068] 4 != 2
(pop) ; 2461
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2461
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2461
; 0,00s
; (get-info :all-statistics)
(push) ; 2461
; [then-branch 5069] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5070] 4 == 2
(push) ; 2462
; [else-branch 5070] 4 != 2
(pop) ; 2462
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2462
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2462
; 0,00s
; (get-info :all-statistics)
(push) ; 2462
; [then-branch 5071] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5072] 4 == 2
(push) ; 2463
; [else-branch 5072] 4 != 2
(pop) ; 2463
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2463
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2463
; 0,00s
; (get-info :all-statistics)
(push) ; 2463
; [then-branch 5073] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5074] 4 == 2
(push) ; 2464
; [else-branch 5074] 4 != 2
(pop) ; 2464
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2464
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2464
; 0,00s
; (get-info :all-statistics)
(push) ; 2464
; [then-branch 5075] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5076] 4 == 2
(push) ; 2465
; [else-branch 5076] 4 != 2
(pop) ; 2465
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2465
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2465
; 0,00s
; (get-info :all-statistics)
(push) ; 2465
; [then-branch 5077] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5078] 4 == 2
(push) ; 2466
; [else-branch 5078] 4 != 2
(pop) ; 2466
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2466
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2466
; 0,00s
; (get-info :all-statistics)
(push) ; 2466
; [then-branch 5079] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5080] 4 == 2
(push) ; 2467
; [else-branch 5080] 4 != 2
(pop) ; 2467
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2467
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2467
; 0,00s
; (get-info :all-statistics)
(push) ; 2467
; [then-branch 5081] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5082] 4 == 2
(push) ; 2468
; [else-branch 5082] 4 != 2
(pop) ; 2468
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2468
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2468
; 0,00s
; (get-info :all-statistics)
(push) ; 2468
; [then-branch 5083] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5084] 4 == 2
(push) ; 2469
; [else-branch 5084] 4 != 2
(pop) ; 2469
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2469
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2469
; 0,00s
; (get-info :all-statistics)
(push) ; 2469
; [then-branch 5085] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5086] 4 == 2
(push) ; 2470
; [else-branch 5086] 4 != 2
(pop) ; 2470
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2470
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2470
; 0,00s
; (get-info :all-statistics)
(push) ; 2470
; [then-branch 5087] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5088] 4 == 2
(push) ; 2471
; [else-branch 5088] 4 != 2
(pop) ; 2471
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2471
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2471
; 0,00s
; (get-info :all-statistics)
(push) ; 2471
; [then-branch 5089] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5090] 4 == 2
(push) ; 2472
; [else-branch 5090] 4 != 2
(pop) ; 2472
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2472
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2472
; 0,00s
; (get-info :all-statistics)
(push) ; 2472
; [then-branch 5091] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5092] 4 == 2
(push) ; 2473
; [else-branch 5092] 4 != 2
(pop) ; 2473
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2473
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2473
; 0,00s
; (get-info :all-statistics)
(push) ; 2473
; [then-branch 5093] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5094] 4 == 2
(push) ; 2474
; [else-branch 5094] 4 != 2
(pop) ; 2474
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2474
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2474
; 0,00s
; (get-info :all-statistics)
(push) ; 2474
; [then-branch 5095] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5096] 4 == 2
(push) ; 2475
; [else-branch 5096] 4 != 2
(pop) ; 2475
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2475
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2475
; 0,00s
; (get-info :all-statistics)
(push) ; 2475
; [then-branch 5097] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5098] 4 == 2
(push) ; 2476
; [else-branch 5098] 4 != 2
(pop) ; 2476
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2476
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2476
; 0,00s
; (get-info :all-statistics)
(push) ; 2476
; [then-branch 5099] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5100] 4 == 2
(push) ; 2477
; [else-branch 5100] 4 != 2
(pop) ; 2477
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2477
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2477
; 0,00s
; (get-info :all-statistics)
(push) ; 2477
; [then-branch 5101] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5102] 4 == 2
(push) ; 2478
; [else-branch 5102] 4 != 2
(pop) ; 2478
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2478
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2478
; 0,00s
; (get-info :all-statistics)
(push) ; 2478
; [then-branch 5103] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5104] 4 == 2
(push) ; 2479
; [else-branch 5104] 4 != 2
(pop) ; 2479
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2479
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2479
; 0,00s
; (get-info :all-statistics)
(push) ; 2479
; [then-branch 5105] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5106] 4 == 2
(push) ; 2480
; [else-branch 5106] 4 != 2
(pop) ; 2480
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2480
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2480
; 0,00s
; (get-info :all-statistics)
(push) ; 2480
; [then-branch 5107] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5108] 4 == 2
(push) ; 2481
; [else-branch 5108] 4 != 2
(pop) ; 2481
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2481
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2481
; 0,00s
; (get-info :all-statistics)
(push) ; 2481
; [then-branch 5109] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5110] 4 == 2
(push) ; 2482
; [else-branch 5110] 4 != 2
(pop) ; 2482
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2482
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2482
; 0,00s
; (get-info :all-statistics)
(push) ; 2482
; [then-branch 5111] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5112] 4 == 2
(push) ; 2483
; [else-branch 5112] 4 != 2
(pop) ; 2483
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2483
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2483
; 0,00s
; (get-info :all-statistics)
(push) ; 2483
; [then-branch 5113] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5114] 4 == 2
(push) ; 2484
; [else-branch 5114] 4 != 2
(pop) ; 2484
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2484
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2484
; 0,00s
; (get-info :all-statistics)
(push) ; 2484
; [then-branch 5115] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5116] 4 == 2
(push) ; 2485
; [else-branch 5116] 4 != 2
(pop) ; 2485
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2485
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2485
; 0,00s
; (get-info :all-statistics)
(push) ; 2485
; [then-branch 5117] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5118] 4 == 2
(push) ; 2486
; [else-branch 5118] 4 != 2
(pop) ; 2486
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2486
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2486
; 0,00s
; (get-info :all-statistics)
(push) ; 2486
; [then-branch 5119] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5120] 4 == 2
(push) ; 2487
; [else-branch 5120] 4 != 2
(pop) ; 2487
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2487
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2487
; 0,00s
; (get-info :all-statistics)
(push) ; 2487
; [then-branch 5121] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5122] 4 == 2
(push) ; 2488
; [else-branch 5122] 4 != 2
(pop) ; 2488
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2488
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2488
; 0,00s
; (get-info :all-statistics)
(push) ; 2488
; [then-branch 5123] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5124] 4 == 2
(push) ; 2489
; [else-branch 5124] 4 != 2
(pop) ; 2489
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2489
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2489
; 0,00s
; (get-info :all-statistics)
(push) ; 2489
; [then-branch 5125] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5126] 4 == 2
(push) ; 2490
; [else-branch 5126] 4 != 2
(pop) ; 2490
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2490
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2490
; 0,00s
; (get-info :all-statistics)
(push) ; 2490
; [then-branch 5127] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5128] 4 == 2
(push) ; 2491
; [else-branch 5128] 4 != 2
(pop) ; 2491
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2491
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2491
; 0,00s
; (get-info :all-statistics)
(push) ; 2491
; [then-branch 5129] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5130] 4 == 2
(push) ; 2492
; [else-branch 5130] 4 != 2
(pop) ; 2492
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2492
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2492
; 0,00s
; (get-info :all-statistics)
(push) ; 2492
; [then-branch 5131] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5132] 4 == 2
(push) ; 2493
; [else-branch 5132] 4 != 2
(pop) ; 2493
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2493
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2493
; 0,00s
; (get-info :all-statistics)
(push) ; 2493
; [then-branch 5133] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5134] 4 == 2
(push) ; 2494
; [else-branch 5134] 4 != 2
(pop) ; 2494
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2494
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2494
; 0,00s
; (get-info :all-statistics)
(push) ; 2494
; [then-branch 5135] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5136] 4 == 2
(push) ; 2495
; [else-branch 5136] 4 != 2
(pop) ; 2495
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2495
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2495
; 0,00s
; (get-info :all-statistics)
(push) ; 2495
; [then-branch 5137] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5138] 4 == 2
(push) ; 2496
; [else-branch 5138] 4 != 2
(pop) ; 2496
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2496
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2496
; 0,00s
; (get-info :all-statistics)
(push) ; 2496
; [then-branch 5139] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5140] 4 == 2
(push) ; 2497
; [else-branch 5140] 4 != 2
(pop) ; 2497
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2497
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2497
; 0,00s
; (get-info :all-statistics)
(push) ; 2497
; [then-branch 5141] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5142] 4 == 2
(push) ; 2498
; [else-branch 5142] 4 != 2
(pop) ; 2498
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2498
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2498
; 0,00s
; (get-info :all-statistics)
(push) ; 2498
; [then-branch 5143] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5144] 4 == 2
(push) ; 2499
; [else-branch 5144] 4 != 2
(pop) ; 2499
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2499
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2499
; 0,00s
; (get-info :all-statistics)
(push) ; 2499
; [then-branch 5145] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5146] 4 == 2
(push) ; 2500
; [else-branch 5146] 4 != 2
(pop) ; 2500
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2500
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2500
; 0,00s
; (get-info :all-statistics)
(push) ; 2500
; [then-branch 5147] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5148] 4 == 2
(push) ; 2501
; [else-branch 5148] 4 != 2
(pop) ; 2501
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2501
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2501
; 0,00s
; (get-info :all-statistics)
(push) ; 2501
; [then-branch 5149] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5150] 4 == 2
(push) ; 2502
; [else-branch 5150] 4 != 2
(pop) ; 2502
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2502
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2502
; 0,00s
; (get-info :all-statistics)
(push) ; 2502
; [then-branch 5151] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5152] 4 == 2
(push) ; 2503
; [else-branch 5152] 4 != 2
(pop) ; 2503
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2503
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2503
; 0,00s
; (get-info :all-statistics)
(push) ; 2503
; [then-branch 5153] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5154] 4 == 2
(push) ; 2504
; [else-branch 5154] 4 != 2
(pop) ; 2504
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2504
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2504
; 0,00s
; (get-info :all-statistics)
(push) ; 2504
; [then-branch 5155] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5156] 4 == 2
(push) ; 2505
; [else-branch 5156] 4 != 2
(pop) ; 2505
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2505
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2505
; 0,00s
; (get-info :all-statistics)
(push) ; 2505
; [then-branch 5157] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5158] 4 == 2
(push) ; 2506
; [else-branch 5158] 4 != 2
(pop) ; 2506
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2506
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2506
; 0,00s
; (get-info :all-statistics)
(push) ; 2506
; [then-branch 5159] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5160] 4 == 2
(push) ; 2507
; [else-branch 5160] 4 != 2
(pop) ; 2507
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2507
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2507
; 0,00s
; (get-info :all-statistics)
(push) ; 2507
; [then-branch 5161] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5162] 4 == 2
(push) ; 2508
; [else-branch 5162] 4 != 2
(pop) ; 2508
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2508
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2508
; 0,00s
; (get-info :all-statistics)
(push) ; 2508
; [then-branch 5163] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5164] 4 == 2
(push) ; 2509
; [else-branch 5164] 4 != 2
(pop) ; 2509
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2509
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2509
; 0,00s
; (get-info :all-statistics)
(push) ; 2509
; [then-branch 5165] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5166] 4 == 2
(push) ; 2510
; [else-branch 5166] 4 != 2
(pop) ; 2510
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2510
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2510
; 0,00s
; (get-info :all-statistics)
(push) ; 2510
; [then-branch 5167] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5168] 4 == 2
(push) ; 2511
; [else-branch 5168] 4 != 2
(pop) ; 2511
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2511
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2511
; 0,00s
; (get-info :all-statistics)
(push) ; 2511
; [then-branch 5169] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5170] 4 == 2
(push) ; 2512
; [else-branch 5170] 4 != 2
(pop) ; 2512
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2512
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2512
; 0,00s
; (get-info :all-statistics)
(push) ; 2512
; [then-branch 5171] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5172] 4 == 2
(push) ; 2513
; [else-branch 5172] 4 != 2
(pop) ; 2513
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2513
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2513
; 0,00s
; (get-info :all-statistics)
(push) ; 2513
; [then-branch 5173] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5174] 4 == 2
(push) ; 2514
; [else-branch 5174] 4 != 2
(pop) ; 2514
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2514
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2514
; 0,00s
; (get-info :all-statistics)
(push) ; 2514
; [then-branch 5175] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5176] 4 == 2
(push) ; 2515
; [else-branch 5176] 4 != 2
(pop) ; 2515
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2515
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2515
; 0,00s
; (get-info :all-statistics)
(push) ; 2515
; [then-branch 5177] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5178] 4 == 2
(push) ; 2516
; [else-branch 5178] 4 != 2
(pop) ; 2516
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2516
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2516
; 0,00s
; (get-info :all-statistics)
(push) ; 2516
; [then-branch 5179] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5180] 4 == 2
(push) ; 2517
; [else-branch 5180] 4 != 2
(pop) ; 2517
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2517
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2517
; 0,00s
; (get-info :all-statistics)
(push) ; 2517
; [then-branch 5181] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5182] 4 == 2
(push) ; 2518
; [else-branch 5182] 4 != 2
(pop) ; 2518
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2518
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2518
; 0,00s
; (get-info :all-statistics)
(push) ; 2518
; [then-branch 5183] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5184] 4 == 2
(push) ; 2519
; [else-branch 5184] 4 != 2
(pop) ; 2519
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2519
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2519
; 0,00s
; (get-info :all-statistics)
(push) ; 2519
; [then-branch 5185] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5186] 4 == 2
(push) ; 2520
; [else-branch 5186] 4 != 2
(pop) ; 2520
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2520
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2520
; 0,00s
; (get-info :all-statistics)
(push) ; 2520
; [then-branch 5187] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5188] 4 == 2
(push) ; 2521
; [else-branch 5188] 4 != 2
(pop) ; 2521
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2521
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2521
; 0,00s
; (get-info :all-statistics)
(push) ; 2521
; [then-branch 5189] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5190] 4 == 2
(push) ; 2522
; [else-branch 5190] 4 != 2
(pop) ; 2522
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2522
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2522
; 0,00s
; (get-info :all-statistics)
(push) ; 2522
; [then-branch 5191] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5192] 4 == 2
(push) ; 2523
; [else-branch 5192] 4 != 2
(pop) ; 2523
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2523
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2523
; 0,00s
; (get-info :all-statistics)
(push) ; 2523
; [then-branch 5193] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5194] 4 == 2
(push) ; 2524
; [else-branch 5194] 4 != 2
(pop) ; 2524
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2524
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2524
; 0,00s
; (get-info :all-statistics)
(push) ; 2524
; [then-branch 5195] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5196] 4 == 2
(push) ; 2525
; [else-branch 5196] 4 != 2
(pop) ; 2525
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2525
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2525
; 0,00s
; (get-info :all-statistics)
(push) ; 2525
; [then-branch 5197] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5198] 4 == 2
(push) ; 2526
; [else-branch 5198] 4 != 2
(pop) ; 2526
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2526
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2526
; 0,00s
; (get-info :all-statistics)
(push) ; 2526
; [then-branch 5199] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5200] 4 == 2
(push) ; 2527
; [else-branch 5200] 4 != 2
(pop) ; 2527
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2527
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2527
; 0,00s
; (get-info :all-statistics)
(push) ; 2527
; [then-branch 5201] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5202] 4 == 2
(push) ; 2528
; [else-branch 5202] 4 != 2
(pop) ; 2528
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2528
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2528
; 0,00s
; (get-info :all-statistics)
(push) ; 2528
; [then-branch 5203] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5204] 4 == 2
(push) ; 2529
; [else-branch 5204] 4 != 2
(pop) ; 2529
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2529
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2529
; 0,00s
; (get-info :all-statistics)
(push) ; 2529
; [then-branch 5205] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5206] 4 == 2
(push) ; 2530
; [else-branch 5206] 4 != 2
(pop) ; 2530
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2530
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2530
; 0,00s
; (get-info :all-statistics)
(push) ; 2530
; [then-branch 5207] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5208] 4 == 2
(push) ; 2531
; [else-branch 5208] 4 != 2
(pop) ; 2531
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2531
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2531
; 0,00s
; (get-info :all-statistics)
(push) ; 2531
; [then-branch 5209] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5210] 4 == 2
(push) ; 2532
; [else-branch 5210] 4 != 2
(pop) ; 2532
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2532
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2532
; 0,00s
; (get-info :all-statistics)
(push) ; 2532
; [then-branch 5211] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5212] 4 == 2
(push) ; 2533
; [else-branch 5212] 4 != 2
(pop) ; 2533
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2533
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2533
; 0,00s
; (get-info :all-statistics)
(push) ; 2533
; [then-branch 5213] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5214] 4 == 2
(push) ; 2534
; [else-branch 5214] 4 != 2
(pop) ; 2534
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2534
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2534
; 0,00s
; (get-info :all-statistics)
(push) ; 2534
; [then-branch 5215] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5216] 4 == 2
(push) ; 2535
; [else-branch 5216] 4 != 2
(pop) ; 2535
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2535
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2535
; 0,00s
; (get-info :all-statistics)
(push) ; 2535
; [then-branch 5217] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5218] 4 == 2
(push) ; 2536
; [else-branch 5218] 4 != 2
(pop) ; 2536
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2536
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2536
; 0,00s
; (get-info :all-statistics)
(push) ; 2536
; [then-branch 5219] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5220] 4 == 2
(push) ; 2537
; [else-branch 5220] 4 != 2
(pop) ; 2537
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2537
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2537
; 0,00s
; (get-info :all-statistics)
(push) ; 2537
; [then-branch 5221] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5222] 4 == 2
(push) ; 2538
; [else-branch 5222] 4 != 2
(pop) ; 2538
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2538
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2538
; 0,00s
; (get-info :all-statistics)
(push) ; 2538
; [then-branch 5223] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5224] 4 == 2
(push) ; 2539
; [else-branch 5224] 4 != 2
(pop) ; 2539
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2539
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2539
; 0,00s
; (get-info :all-statistics)
(push) ; 2539
; [then-branch 5225] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5226] 4 == 2
(push) ; 2540
; [else-branch 5226] 4 != 2
(pop) ; 2540
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2540
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2540
; 0,00s
; (get-info :all-statistics)
(push) ; 2540
; [then-branch 5227] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5228] 4 == 2
(push) ; 2541
; [else-branch 5228] 4 != 2
(pop) ; 2541
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2541
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2541
; 0,00s
; (get-info :all-statistics)
(push) ; 2541
; [then-branch 5229] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5230] 4 == 2
(push) ; 2542
; [else-branch 5230] 4 != 2
(pop) ; 2542
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2542
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2542
; 0,00s
; (get-info :all-statistics)
(push) ; 2542
; [then-branch 5231] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5232] 4 == 2
(push) ; 2543
; [else-branch 5232] 4 != 2
(pop) ; 2543
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2543
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2543
; 0,00s
; (get-info :all-statistics)
(push) ; 2543
; [then-branch 5233] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5234] 4 == 2
(push) ; 2544
; [else-branch 5234] 4 != 2
(pop) ; 2544
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2544
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2544
; 0,00s
; (get-info :all-statistics)
(push) ; 2544
; [then-branch 5235] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5236] 4 == 2
(push) ; 2545
; [else-branch 5236] 4 != 2
(pop) ; 2545
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2545
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2545
; 0,00s
; (get-info :all-statistics)
(push) ; 2545
; [then-branch 5237] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5238] 4 == 2
(push) ; 2546
; [else-branch 5238] 4 != 2
(pop) ; 2546
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2546
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2546
; 0,00s
; (get-info :all-statistics)
(push) ; 2546
; [then-branch 5239] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5240] 4 == 2
(push) ; 2547
; [else-branch 5240] 4 != 2
(pop) ; 2547
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2547
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2547
; 0,00s
; (get-info :all-statistics)
(push) ; 2547
; [then-branch 5241] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5242] 4 == 2
(push) ; 2548
; [else-branch 5242] 4 != 2
(pop) ; 2548
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2548
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2548
; 0,00s
; (get-info :all-statistics)
(push) ; 2548
; [then-branch 5243] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5244] 4 == 2
(push) ; 2549
; [else-branch 5244] 4 != 2
(pop) ; 2549
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2549
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2549
; 0,00s
; (get-info :all-statistics)
(push) ; 2549
; [then-branch 5245] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5246] 4 == 2
(push) ; 2550
; [else-branch 5246] 4 != 2
(pop) ; 2550
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2550
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2550
; 0,00s
; (get-info :all-statistics)
(push) ; 2550
; [then-branch 5247] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5248] 4 == 2
(push) ; 2551
; [else-branch 5248] 4 != 2
(pop) ; 2551
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2551
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2551
; 0,00s
; (get-info :all-statistics)
(push) ; 2551
; [then-branch 5249] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5250] 4 == 2
(push) ; 2552
; [else-branch 5250] 4 != 2
(pop) ; 2552
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2552
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2552
; 0,00s
; (get-info :all-statistics)
(push) ; 2552
; [then-branch 5251] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5252] 4 == 2
(push) ; 2553
; [else-branch 5252] 4 != 2
(pop) ; 2553
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2553
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2553
; 0,00s
; (get-info :all-statistics)
(push) ; 2553
; [then-branch 5253] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5254] 4 == 2
(push) ; 2554
; [else-branch 5254] 4 != 2
(pop) ; 2554
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2554
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2554
; 0,00s
; (get-info :all-statistics)
(push) ; 2554
; [then-branch 5255] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5256] 4 == 2
(push) ; 2555
; [else-branch 5256] 4 != 2
(pop) ; 2555
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2555
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2555
; 0,00s
; (get-info :all-statistics)
(push) ; 2555
; [then-branch 5257] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5258] 4 == 2
(push) ; 2556
; [else-branch 5258] 4 != 2
(pop) ; 2556
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2556
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2556
; 0,00s
; (get-info :all-statistics)
(push) ; 2556
; [then-branch 5259] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5260] 4 == 2
(push) ; 2557
; [else-branch 5260] 4 != 2
(pop) ; 2557
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2557
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2557
; 0,00s
; (get-info :all-statistics)
(push) ; 2557
; [then-branch 5261] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5262] 4 == 2
(push) ; 2558
; [else-branch 5262] 4 != 2
(pop) ; 2558
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2558
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2558
; 0,00s
; (get-info :all-statistics)
(push) ; 2558
; [then-branch 5263] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5264] 4 == 2
(push) ; 2559
; [else-branch 5264] 4 != 2
(pop) ; 2559
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2559
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2559
; 0,00s
; (get-info :all-statistics)
(push) ; 2559
; [then-branch 5265] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5266] 4 == 2
(push) ; 2560
; [else-branch 5266] 4 != 2
(pop) ; 2560
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2560
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2560
; 0,00s
; (get-info :all-statistics)
(push) ; 2560
; [then-branch 5267] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5268] 4 == 2
(push) ; 2561
; [else-branch 5268] 4 != 2
(pop) ; 2561
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2561
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2561
; 0,00s
; (get-info :all-statistics)
(push) ; 2561
; [then-branch 5269] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5270] 4 == 2
(push) ; 2562
; [else-branch 5270] 4 != 2
(pop) ; 2562
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2562
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2562
; 0,00s
; (get-info :all-statistics)
(push) ; 2562
; [then-branch 5271] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5272] 4 == 2
(push) ; 2563
; [else-branch 5272] 4 != 2
(pop) ; 2563
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2563
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2563
; 0,00s
; (get-info :all-statistics)
(push) ; 2563
; [then-branch 5273] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5274] 4 == 2
(push) ; 2564
; [else-branch 5274] 4 != 2
(pop) ; 2564
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2564
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2564
; 0,00s
; (get-info :all-statistics)
(push) ; 2564
; [then-branch 5275] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5276] 4 == 2
(push) ; 2565
; [else-branch 5276] 4 != 2
(pop) ; 2565
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2565
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2565
; 0,00s
; (get-info :all-statistics)
(push) ; 2565
; [then-branch 5277] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5278] 4 == 2
(push) ; 2566
; [else-branch 5278] 4 != 2
(pop) ; 2566
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2566
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2566
; 0,00s
; (get-info :all-statistics)
(push) ; 2566
; [then-branch 5279] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5280] 4 == 2
(push) ; 2567
; [else-branch 5280] 4 != 2
(pop) ; 2567
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2567
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2567
; 0,00s
; (get-info :all-statistics)
(push) ; 2567
; [then-branch 5281] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5282] 4 == 2
(push) ; 2568
; [else-branch 5282] 4 != 2
(pop) ; 2568
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2568
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2568
; 0,00s
; (get-info :all-statistics)
(push) ; 2568
; [then-branch 5283] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5284] 4 == 2
(push) ; 2569
; [else-branch 5284] 4 != 2
(pop) ; 2569
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2569
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2569
; 0,00s
; (get-info :all-statistics)
(push) ; 2569
; [then-branch 5285] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5286] 4 == 2
(push) ; 2570
; [else-branch 5286] 4 != 2
(pop) ; 2570
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2570
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2570
; 0,00s
; (get-info :all-statistics)
(push) ; 2570
; [then-branch 5287] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5288] 4 == 2
(push) ; 2571
; [else-branch 5288] 4 != 2
(pop) ; 2571
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2571
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2571
; 0,00s
; (get-info :all-statistics)
(push) ; 2571
; [then-branch 5289] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5290] 4 == 2
(push) ; 2572
; [else-branch 5290] 4 != 2
(pop) ; 2572
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2572
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2572
; 0,00s
; (get-info :all-statistics)
(push) ; 2572
; [then-branch 5291] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5292] 4 == 2
(push) ; 2573
; [else-branch 5292] 4 != 2
(pop) ; 2573
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2573
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2573
; 0,00s
; (get-info :all-statistics)
(push) ; 2573
; [then-branch 5293] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5294] 4 == 2
(push) ; 2574
; [else-branch 5294] 4 != 2
(pop) ; 2574
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2574
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2574
; 0,00s
; (get-info :all-statistics)
(push) ; 2574
; [then-branch 5295] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5296] 4 == 2
(push) ; 2575
; [else-branch 5296] 4 != 2
(pop) ; 2575
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2575
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2575
; 0,00s
; (get-info :all-statistics)
(push) ; 2575
; [then-branch 5297] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5298] 4 == 2
(push) ; 2576
; [else-branch 5298] 4 != 2
(pop) ; 2576
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2576
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2576
; 0,00s
; (get-info :all-statistics)
(push) ; 2576
; [then-branch 5299] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5300] 4 == 2
(push) ; 2577
; [else-branch 5300] 4 != 2
(pop) ; 2577
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2577
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2577
; 0,00s
; (get-info :all-statistics)
(push) ; 2577
; [then-branch 5301] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5302] 4 == 2
(push) ; 2578
; [else-branch 5302] 4 != 2
(pop) ; 2578
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2578
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2578
; 0,00s
; (get-info :all-statistics)
(push) ; 2578
; [then-branch 5303] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5304] 4 == 2
(push) ; 2579
; [else-branch 5304] 4 != 2
(pop) ; 2579
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2579
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2579
; 0,00s
; (get-info :all-statistics)
(push) ; 2579
; [then-branch 5305] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5306] 4 == 2
(push) ; 2580
; [else-branch 5306] 4 != 2
(pop) ; 2580
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2580
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2580
; 0,00s
; (get-info :all-statistics)
(push) ; 2580
; [then-branch 5307] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5308] 4 == 2
(push) ; 2581
; [else-branch 5308] 4 != 2
(pop) ; 2581
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2581
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2581
; 0,00s
; (get-info :all-statistics)
(push) ; 2581
; [then-branch 5309] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5310] 4 == 2
(push) ; 2582
; [else-branch 5310] 4 != 2
(pop) ; 2582
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2582
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2582
; 0,00s
; (get-info :all-statistics)
(push) ; 2582
; [then-branch 5311] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5312] 4 == 2
(push) ; 2583
; [else-branch 5312] 4 != 2
(pop) ; 2583
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2583
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2583
; 0,00s
; (get-info :all-statistics)
(push) ; 2583
; [then-branch 5313] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5314] 4 == 2
(push) ; 2584
; [else-branch 5314] 4 != 2
(pop) ; 2584
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2584
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2584
; 0,00s
; (get-info :all-statistics)
(push) ; 2584
; [then-branch 5315] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5316] 4 == 2
(push) ; 2585
; [else-branch 5316] 4 != 2
(pop) ; 2585
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2585
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2585
; 0,00s
; (get-info :all-statistics)
(push) ; 2585
; [then-branch 5317] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5318] 4 == 2
(push) ; 2586
; [else-branch 5318] 4 != 2
(pop) ; 2586
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2586
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2586
; 0,00s
; (get-info :all-statistics)
(push) ; 2586
; [then-branch 5319] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5320] 4 == 2
(push) ; 2587
; [else-branch 5320] 4 != 2
(pop) ; 2587
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2587
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2587
; 0,00s
; (get-info :all-statistics)
(push) ; 2587
; [then-branch 5321] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5322] 4 == 2
(push) ; 2588
; [else-branch 5322] 4 != 2
(pop) ; 2588
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2588
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2588
; 0,00s
; (get-info :all-statistics)
(push) ; 2588
; [then-branch 5323] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5324] 4 == 2
(push) ; 2589
; [else-branch 5324] 4 != 2
(pop) ; 2589
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2589
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2589
; 0,00s
; (get-info :all-statistics)
(push) ; 2589
; [then-branch 5325] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5326] 4 == 2
(push) ; 2590
; [else-branch 5326] 4 != 2
(pop) ; 2590
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2590
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2590
; 0,00s
; (get-info :all-statistics)
(push) ; 2590
; [then-branch 5327] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5328] 4 == 2
(push) ; 2591
; [else-branch 5328] 4 != 2
(pop) ; 2591
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2591
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2591
; 0,00s
; (get-info :all-statistics)
(push) ; 2591
; [then-branch 5329] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5330] 4 == 2
(push) ; 2592
; [else-branch 5330] 4 != 2
(pop) ; 2592
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2592
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2592
; 0,00s
; (get-info :all-statistics)
(push) ; 2592
; [then-branch 5331] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5332] 4 == 2
(push) ; 2593
; [else-branch 5332] 4 != 2
(pop) ; 2593
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2593
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2593
; 0,00s
; (get-info :all-statistics)
(push) ; 2593
; [then-branch 5333] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5334] 4 == 2
(push) ; 2594
; [else-branch 5334] 4 != 2
(pop) ; 2594
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2594
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2594
; 0,00s
; (get-info :all-statistics)
(push) ; 2594
; [then-branch 5335] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5336] 4 == 2
(push) ; 2595
; [else-branch 5336] 4 != 2
(pop) ; 2595
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2595
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2595
; 0,00s
; (get-info :all-statistics)
(push) ; 2595
; [then-branch 5337] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5338] 4 == 2
(push) ; 2596
; [else-branch 5338] 4 != 2
(pop) ; 2596
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2596
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2596
; 0,00s
; (get-info :all-statistics)
(push) ; 2596
; [then-branch 5339] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5340] 4 == 2
(push) ; 2597
; [else-branch 5340] 4 != 2
(pop) ; 2597
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2597
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2597
; 0,00s
; (get-info :all-statistics)
(push) ; 2597
; [then-branch 5341] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5342] 4 == 2
(push) ; 2598
; [else-branch 5342] 4 != 2
(pop) ; 2598
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2598
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2598
; 0,00s
; (get-info :all-statistics)
(push) ; 2598
; [then-branch 5343] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5344] 4 == 2
(push) ; 2599
; [else-branch 5344] 4 != 2
(pop) ; 2599
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2599
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2599
; 0,00s
; (get-info :all-statistics)
(push) ; 2599
; [then-branch 5345] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5346] 4 == 2
(push) ; 2600
; [else-branch 5346] 4 != 2
(pop) ; 2600
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2600
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2600
; 0,00s
; (get-info :all-statistics)
(push) ; 2600
; [then-branch 5347] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5348] 4 == 2
(push) ; 2601
; [else-branch 5348] 4 != 2
(pop) ; 2601
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2601
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2601
; 0,00s
; (get-info :all-statistics)
(push) ; 2601
; [then-branch 5349] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5350] 4 == 2
(push) ; 2602
; [else-branch 5350] 4 != 2
(pop) ; 2602
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2602
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2602
; 0,00s
; (get-info :all-statistics)
(push) ; 2602
; [then-branch 5351] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5352] 4 == 2
(push) ; 2603
; [else-branch 5352] 4 != 2
(pop) ; 2603
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2603
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2603
; 0,00s
; (get-info :all-statistics)
(push) ; 2603
; [then-branch 5353] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5354] 4 == 2
(push) ; 2604
; [else-branch 5354] 4 != 2
(pop) ; 2604
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2604
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2604
; 0,00s
; (get-info :all-statistics)
(push) ; 2604
; [then-branch 5355] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5356] 4 == 2
(push) ; 2605
; [else-branch 5356] 4 != 2
(pop) ; 2605
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2605
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2605
; 0,00s
; (get-info :all-statistics)
(push) ; 2605
; [then-branch 5357] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5358] 4 == 2
(push) ; 2606
; [else-branch 5358] 4 != 2
(pop) ; 2606
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2606
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2606
; 0,00s
; (get-info :all-statistics)
(push) ; 2606
; [then-branch 5359] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5360] 4 == 2
(push) ; 2607
; [else-branch 5360] 4 != 2
(pop) ; 2607
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2607
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2607
; 0,00s
; (get-info :all-statistics)
(push) ; 2607
; [then-branch 5361] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5362] 4 == 2
(push) ; 2608
; [else-branch 5362] 4 != 2
(pop) ; 2608
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2608
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2608
; 0,00s
; (get-info :all-statistics)
(push) ; 2608
; [then-branch 5363] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5364] 4 == 2
(push) ; 2609
; [else-branch 5364] 4 != 2
(pop) ; 2609
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2609
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2609
; 0,00s
; (get-info :all-statistics)
(push) ; 2609
; [then-branch 5365] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5366] 4 == 2
(push) ; 2610
; [else-branch 5366] 4 != 2
(pop) ; 2610
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2610
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2610
; 0,00s
; (get-info :all-statistics)
(push) ; 2610
; [then-branch 5367] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5368] 4 == 2
(push) ; 2611
; [else-branch 5368] 4 != 2
(pop) ; 2611
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2611
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2611
; 0,00s
; (get-info :all-statistics)
(push) ; 2611
; [then-branch 5369] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5370] 4 == 2
(push) ; 2612
; [else-branch 5370] 4 != 2
(pop) ; 2612
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2612
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2612
; 0,00s
; (get-info :all-statistics)
(push) ; 2612
; [then-branch 5371] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5372] 4 == 2
(push) ; 2613
; [else-branch 5372] 4 != 2
(pop) ; 2613
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2613
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2613
; 0,00s
; (get-info :all-statistics)
(push) ; 2613
; [then-branch 5373] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5374] 4 == 2
(push) ; 2614
; [else-branch 5374] 4 != 2
(pop) ; 2614
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2614
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2614
; 0,00s
; (get-info :all-statistics)
(push) ; 2614
; [then-branch 5375] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5376] 4 == 2
(push) ; 2615
; [else-branch 5376] 4 != 2
(pop) ; 2615
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2615
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2615
; 0,00s
; (get-info :all-statistics)
(push) ; 2615
; [then-branch 5377] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5378] 4 == 2
(push) ; 2616
; [else-branch 5378] 4 != 2
(pop) ; 2616
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2616
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2616
; 0,00s
; (get-info :all-statistics)
(push) ; 2616
; [then-branch 5379] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5380] 4 == 2
(push) ; 2617
; [else-branch 5380] 4 != 2
(pop) ; 2617
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2617
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2617
; 0,00s
; (get-info :all-statistics)
(push) ; 2617
; [then-branch 5381] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5382] 4 == 2
(push) ; 2618
; [else-branch 5382] 4 != 2
(pop) ; 2618
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2618
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2618
; 0,00s
; (get-info :all-statistics)
(push) ; 2618
; [then-branch 5383] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5384] 4 == 2
(push) ; 2619
; [else-branch 5384] 4 != 2
(pop) ; 2619
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2619
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2619
; 0,00s
; (get-info :all-statistics)
(push) ; 2619
; [then-branch 5385] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5386] 4 == 2
(push) ; 2620
; [else-branch 5386] 4 != 2
(pop) ; 2620
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2620
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2620
; 0,00s
; (get-info :all-statistics)
(push) ; 2620
; [then-branch 5387] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5388] 4 == 2
(push) ; 2621
; [else-branch 5388] 4 != 2
(pop) ; 2621
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2621
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2621
; 0,00s
; (get-info :all-statistics)
(push) ; 2621
; [then-branch 5389] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5390] 4 == 2
(push) ; 2622
; [else-branch 5390] 4 != 2
(pop) ; 2622
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2622
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2622
; 0,00s
; (get-info :all-statistics)
(push) ; 2622
; [then-branch 5391] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5392] 4 == 2
(push) ; 2623
; [else-branch 5392] 4 != 2
(pop) ; 2623
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2623
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2623
; 0,00s
; (get-info :all-statistics)
(push) ; 2623
; [then-branch 5393] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5394] 4 == 2
(push) ; 2624
; [else-branch 5394] 4 != 2
(pop) ; 2624
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2624
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2624
; 0,00s
; (get-info :all-statistics)
(push) ; 2624
; [then-branch 5395] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5396] 4 == 2
(push) ; 2625
; [else-branch 5396] 4 != 2
(pop) ; 2625
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2625
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2625
; 0,00s
; (get-info :all-statistics)
(push) ; 2625
; [then-branch 5397] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5398] 4 == 2
(push) ; 2626
; [else-branch 5398] 4 != 2
(pop) ; 2626
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2626
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2626
; 0,00s
; (get-info :all-statistics)
(push) ; 2626
; [then-branch 5399] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5400] 4 == 2
(push) ; 2627
; [else-branch 5400] 4 != 2
(pop) ; 2627
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2627
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2627
; 0,00s
; (get-info :all-statistics)
(push) ; 2627
; [then-branch 5401] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5402] 4 == 2
(push) ; 2628
; [else-branch 5402] 4 != 2
(pop) ; 2628
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2628
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2628
; 0,00s
; (get-info :all-statistics)
(push) ; 2628
; [then-branch 5403] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5404] 4 == 2
(push) ; 2629
; [else-branch 5404] 4 != 2
(pop) ; 2629
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2629
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2629
; 0,00s
; (get-info :all-statistics)
(push) ; 2629
; [then-branch 5405] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5406] 4 == 2
(push) ; 2630
; [else-branch 5406] 4 != 2
(pop) ; 2630
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2630
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2630
; 0,00s
; (get-info :all-statistics)
(push) ; 2630
; [then-branch 5407] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5408] 4 == 2
(push) ; 2631
; [else-branch 5408] 4 != 2
(pop) ; 2631
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2631
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2631
; 0,00s
; (get-info :all-statistics)
(push) ; 2631
; [then-branch 5409] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5410] 4 == 2
(push) ; 2632
; [else-branch 5410] 4 != 2
(pop) ; 2632
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2632
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2632
; 0,00s
; (get-info :all-statistics)
(push) ; 2632
; [then-branch 5411] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5412] 4 == 2
(push) ; 2633
; [else-branch 5412] 4 != 2
(pop) ; 2633
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2633
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2633
; 0,00s
; (get-info :all-statistics)
(push) ; 2633
; [then-branch 5413] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5414] 4 == 2
(push) ; 2634
; [else-branch 5414] 4 != 2
(pop) ; 2634
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2634
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2634
; 0,00s
; (get-info :all-statistics)
(push) ; 2634
; [then-branch 5415] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5416] 4 == 2
(push) ; 2635
; [else-branch 5416] 4 != 2
(pop) ; 2635
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2635
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2635
; 0,00s
; (get-info :all-statistics)
(push) ; 2635
; [then-branch 5417] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5418] 4 == 2
(push) ; 2636
; [else-branch 5418] 4 != 2
(pop) ; 2636
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2636
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2636
; 0,00s
; (get-info :all-statistics)
(push) ; 2636
; [then-branch 5419] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5420] 4 == 2
(push) ; 2637
; [else-branch 5420] 4 != 2
(pop) ; 2637
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2637
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2637
; 0,00s
; (get-info :all-statistics)
(push) ; 2637
; [then-branch 5421] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5422] 4 == 2
(push) ; 2638
; [else-branch 5422] 4 != 2
(pop) ; 2638
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2638
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2638
; 0,00s
; (get-info :all-statistics)
(push) ; 2638
; [then-branch 5423] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5424] 4 == 2
(push) ; 2639
; [else-branch 5424] 4 != 2
(pop) ; 2639
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2639
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2639
; 0,00s
; (get-info :all-statistics)
(push) ; 2639
; [then-branch 5425] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5426] 4 == 2
(push) ; 2640
; [else-branch 5426] 4 != 2
(pop) ; 2640
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2640
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2640
; 0,00s
; (get-info :all-statistics)
(push) ; 2640
; [then-branch 5427] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5428] 4 == 2
(push) ; 2641
; [else-branch 5428] 4 != 2
(pop) ; 2641
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2641
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2641
; 0,00s
; (get-info :all-statistics)
(push) ; 2641
; [then-branch 5429] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5430] 4 == 2
(push) ; 2642
; [else-branch 5430] 4 != 2
(pop) ; 2642
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2642
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2642
; 0,00s
; (get-info :all-statistics)
(push) ; 2642
; [then-branch 5431] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5432] 4 == 2
(push) ; 2643
; [else-branch 5432] 4 != 2
(pop) ; 2643
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2643
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2643
; 0,00s
; (get-info :all-statistics)
(push) ; 2643
; [then-branch 5433] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5434] 4 == 2
(push) ; 2644
; [else-branch 5434] 4 != 2
(pop) ; 2644
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2644
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2644
; 0,00s
; (get-info :all-statistics)
(push) ; 2644
; [then-branch 5435] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5436] 4 == 2
(push) ; 2645
; [else-branch 5436] 4 != 2
(pop) ; 2645
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2645
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2645
; 0,00s
; (get-info :all-statistics)
(push) ; 2645
; [then-branch 5437] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5438] 4 == 2
(push) ; 2646
; [else-branch 5438] 4 != 2
(pop) ; 2646
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2646
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2646
; 0,00s
; (get-info :all-statistics)
(push) ; 2646
; [then-branch 5439] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5440] 4 == 2
(push) ; 2647
; [else-branch 5440] 4 != 2
(pop) ; 2647
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2647
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2647
; 0,00s
; (get-info :all-statistics)
(push) ; 2647
; [then-branch 5441] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5442] 4 == 2
(push) ; 2648
; [else-branch 5442] 4 != 2
(pop) ; 2648
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2648
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2648
; 0,00s
; (get-info :all-statistics)
(push) ; 2648
; [then-branch 5443] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5444] 4 == 2
(push) ; 2649
; [else-branch 5444] 4 != 2
(pop) ; 2649
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2649
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2649
; 0,00s
; (get-info :all-statistics)
(push) ; 2649
; [then-branch 5445] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5446] 4 == 2
(push) ; 2650
; [else-branch 5446] 4 != 2
(pop) ; 2650
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2650
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2650
; 0,00s
; (get-info :all-statistics)
(push) ; 2650
; [then-branch 5447] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5448] 4 == 2
(push) ; 2651
; [else-branch 5448] 4 != 2
(pop) ; 2651
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2651
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2651
; 0,00s
; (get-info :all-statistics)
(push) ; 2651
; [then-branch 5449] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5450] 4 == 2
(push) ; 2652
; [else-branch 5450] 4 != 2
(pop) ; 2652
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2652
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2652
; 0,00s
; (get-info :all-statistics)
(push) ; 2652
; [then-branch 5451] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5452] 4 == 2
(push) ; 2653
; [else-branch 5452] 4 != 2
(pop) ; 2653
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2653
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2653
; 0,00s
; (get-info :all-statistics)
(push) ; 2653
; [then-branch 5453] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5454] 4 == 2
(push) ; 2654
; [else-branch 5454] 4 != 2
(pop) ; 2654
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2654
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2654
; 0,00s
; (get-info :all-statistics)
(push) ; 2654
; [then-branch 5455] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5456] 4 == 2
(push) ; 2655
; [else-branch 5456] 4 != 2
(pop) ; 2655
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2655
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2655
; 0,00s
; (get-info :all-statistics)
(push) ; 2655
; [then-branch 5457] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5458] 4 == 2
(push) ; 2656
; [else-branch 5458] 4 != 2
(pop) ; 2656
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2656
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2656
; 0,00s
; (get-info :all-statistics)
(push) ; 2656
; [then-branch 5459] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5460] 4 == 2
(push) ; 2657
; [else-branch 5460] 4 != 2
(pop) ; 2657
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2657
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2657
; 0,00s
; (get-info :all-statistics)
(push) ; 2657
; [then-branch 5461] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5462] 4 == 2
(push) ; 2658
; [else-branch 5462] 4 != 2
(pop) ; 2658
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2658
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2658
; 0,00s
; (get-info :all-statistics)
(push) ; 2658
; [then-branch 5463] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5464] 4 == 2
(push) ; 2659
; [else-branch 5464] 4 != 2
(pop) ; 2659
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2659
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2659
; 0,00s
; (get-info :all-statistics)
(push) ; 2659
; [then-branch 5465] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5466] 4 == 2
(push) ; 2660
; [else-branch 5466] 4 != 2
(pop) ; 2660
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2660
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2660
; 0,00s
; (get-info :all-statistics)
(push) ; 2660
; [then-branch 5467] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5468] 4 == 2
(push) ; 2661
; [else-branch 5468] 4 != 2
(pop) ; 2661
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2661
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2661
; 0,00s
; (get-info :all-statistics)
(push) ; 2661
; [then-branch 5469] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5470] 4 == 2
(push) ; 2662
; [else-branch 5470] 4 != 2
(pop) ; 2662
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2662
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2662
; 0,00s
; (get-info :all-statistics)
(push) ; 2662
; [then-branch 5471] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5472] 4 == 2
(push) ; 2663
; [else-branch 5472] 4 != 2
(pop) ; 2663
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2663
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2663
; 0,00s
; (get-info :all-statistics)
(push) ; 2663
; [then-branch 5473] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5474] 4 == 2
(push) ; 2664
; [else-branch 5474] 4 != 2
(pop) ; 2664
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2664
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2664
; 0,00s
; (get-info :all-statistics)
(push) ; 2664
; [then-branch 5475] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5476] 4 == 2
(push) ; 2665
; [else-branch 5476] 4 != 2
(pop) ; 2665
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2665
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2665
; 0,00s
; (get-info :all-statistics)
(push) ; 2665
; [then-branch 5477] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5478] 4 == 2
(push) ; 2666
; [else-branch 5478] 4 != 2
(pop) ; 2666
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2666
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2666
; 0,00s
; (get-info :all-statistics)
(push) ; 2666
; [then-branch 5479] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5480] 4 == 2
(push) ; 2667
; [else-branch 5480] 4 != 2
(pop) ; 2667
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2667
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2667
; 0,00s
; (get-info :all-statistics)
(push) ; 2667
; [then-branch 5481] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5482] 4 == 2
(push) ; 2668
; [else-branch 5482] 4 != 2
(pop) ; 2668
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2668
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2668
; 0,00s
; (get-info :all-statistics)
(push) ; 2668
; [then-branch 5483] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5484] 4 == 2
(push) ; 2669
; [else-branch 5484] 4 != 2
(pop) ; 2669
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2669
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2669
; 0,00s
; (get-info :all-statistics)
(push) ; 2669
; [then-branch 5485] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5486] 4 == 2
(push) ; 2670
; [else-branch 5486] 4 != 2
(pop) ; 2670
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2670
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2670
; 0,00s
; (get-info :all-statistics)
(push) ; 2670
; [then-branch 5487] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5488] 4 == 2
(push) ; 2671
; [else-branch 5488] 4 != 2
(pop) ; 2671
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2671
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2671
; 0,00s
; (get-info :all-statistics)
(push) ; 2671
; [then-branch 5489] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5490] 4 == 2
(push) ; 2672
; [else-branch 5490] 4 != 2
(pop) ; 2672
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2672
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2672
; 0,00s
; (get-info :all-statistics)
(push) ; 2672
; [then-branch 5491] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5492] 4 == 2
(push) ; 2673
; [else-branch 5492] 4 != 2
(pop) ; 2673
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2673
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2673
; 0,00s
; (get-info :all-statistics)
(push) ; 2673
; [then-branch 5493] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5494] 4 == 2
(push) ; 2674
; [else-branch 5494] 4 != 2
(pop) ; 2674
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2674
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2674
; 0,00s
; (get-info :all-statistics)
(push) ; 2674
; [then-branch 5495] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5496] 4 == 2
(push) ; 2675
; [else-branch 5496] 4 != 2
(pop) ; 2675
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2675
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2675
; 0,00s
; (get-info :all-statistics)
(push) ; 2675
; [then-branch 5497] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5498] 4 == 2
(push) ; 2676
; [else-branch 5498] 4 != 2
(pop) ; 2676
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2676
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2676
; 0,00s
; (get-info :all-statistics)
(push) ; 2676
; [then-branch 5499] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5500] 4 == 2
(push) ; 2677
; [else-branch 5500] 4 != 2
(pop) ; 2677
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2677
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2677
; 0,00s
; (get-info :all-statistics)
(push) ; 2677
; [then-branch 5501] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5502] 4 == 2
(push) ; 2678
; [else-branch 5502] 4 != 2
(pop) ; 2678
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2678
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2678
; 0,00s
; (get-info :all-statistics)
(push) ; 2678
; [then-branch 5503] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5504] 4 == 2
(push) ; 2679
; [else-branch 5504] 4 != 2
(pop) ; 2679
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2679
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2679
; 0,00s
; (get-info :all-statistics)
(push) ; 2679
; [then-branch 5505] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5506] 4 == 2
(push) ; 2680
; [else-branch 5506] 4 != 2
(pop) ; 2680
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2680
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2680
; 0,00s
; (get-info :all-statistics)
(push) ; 2680
; [then-branch 5507] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5508] 4 == 2
(push) ; 2681
; [else-branch 5508] 4 != 2
(pop) ; 2681
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2681
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2681
; 0,00s
; (get-info :all-statistics)
(push) ; 2681
; [then-branch 5509] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5510] 4 == 2
(push) ; 2682
; [else-branch 5510] 4 != 2
(pop) ; 2682
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2682
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2682
; 0,00s
; (get-info :all-statistics)
(push) ; 2682
; [then-branch 5511] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5512] 4 == 2
(push) ; 2683
; [else-branch 5512] 4 != 2
(pop) ; 2683
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2683
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2683
; 0,00s
; (get-info :all-statistics)
(push) ; 2683
; [then-branch 5513] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5514] 4 == 2
(push) ; 2684
; [else-branch 5514] 4 != 2
(pop) ; 2684
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2684
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2684
; 0,00s
; (get-info :all-statistics)
(push) ; 2684
; [then-branch 5515] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5516] 4 == 2
(push) ; 2685
; [else-branch 5516] 4 != 2
(pop) ; 2685
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2685
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2685
; 0,00s
; (get-info :all-statistics)
(push) ; 2685
; [then-branch 5517] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5518] 4 == 2
(push) ; 2686
; [else-branch 5518] 4 != 2
(pop) ; 2686
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2686
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2686
; 0,00s
; (get-info :all-statistics)
(push) ; 2686
; [then-branch 5519] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5520] 4 == 2
(push) ; 2687
; [else-branch 5520] 4 != 2
(pop) ; 2687
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2687
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2687
; 0,00s
; (get-info :all-statistics)
(push) ; 2687
; [then-branch 5521] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5522] 4 == 2
(push) ; 2688
; [else-branch 5522] 4 != 2
(pop) ; 2688
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2688
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2688
; 0,00s
; (get-info :all-statistics)
(push) ; 2688
; [then-branch 5523] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5524] 4 == 2
(push) ; 2689
; [else-branch 5524] 4 != 2
(pop) ; 2689
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2689
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2689
; 0,00s
; (get-info :all-statistics)
(push) ; 2689
; [then-branch 5525] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5526] 4 == 2
(push) ; 2690
; [else-branch 5526] 4 != 2
(pop) ; 2690
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2690
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2690
; 0,00s
; (get-info :all-statistics)
(push) ; 2690
; [then-branch 5527] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5528] 4 == 2
(push) ; 2691
; [else-branch 5528] 4 != 2
(pop) ; 2691
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2691
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2691
; 0,00s
; (get-info :all-statistics)
(push) ; 2691
; [then-branch 5529] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5530] 4 == 2
(push) ; 2692
; [else-branch 5530] 4 != 2
(pop) ; 2692
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2692
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2692
; 0,00s
; (get-info :all-statistics)
(push) ; 2692
; [then-branch 5531] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5532] 4 == 2
(push) ; 2693
; [else-branch 5532] 4 != 2
(pop) ; 2693
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2693
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2693
; 0,00s
; (get-info :all-statistics)
(push) ; 2693
; [then-branch 5533] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5534] 4 == 2
(push) ; 2694
; [else-branch 5534] 4 != 2
(pop) ; 2694
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2694
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2694
; 0,00s
; (get-info :all-statistics)
(push) ; 2694
; [then-branch 5535] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5536] 4 == 2
(push) ; 2695
; [else-branch 5536] 4 != 2
(pop) ; 2695
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2695
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2695
; 0,00s
; (get-info :all-statistics)
(push) ; 2695
; [then-branch 5537] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5538] 4 == 2
(push) ; 2696
; [else-branch 5538] 4 != 2
(pop) ; 2696
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2696
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2696
; 0,00s
; (get-info :all-statistics)
(push) ; 2696
; [then-branch 5539] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5540] 4 == 2
(push) ; 2697
; [else-branch 5540] 4 != 2
(pop) ; 2697
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2697
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2697
; 0,00s
; (get-info :all-statistics)
(push) ; 2697
; [then-branch 5541] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5542] 4 == 2
(push) ; 2698
; [else-branch 5542] 4 != 2
(pop) ; 2698
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2698
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2698
; 0,00s
; (get-info :all-statistics)
(push) ; 2698
; [then-branch 5543] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5544] 4 == 2
(push) ; 2699
; [else-branch 5544] 4 != 2
(pop) ; 2699
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2699
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2699
; 0,00s
; (get-info :all-statistics)
(push) ; 2699
; [then-branch 5545] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5546] 4 == 2
(push) ; 2700
; [else-branch 5546] 4 != 2
(pop) ; 2700
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2700
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2700
; 0,00s
; (get-info :all-statistics)
(push) ; 2700
; [then-branch 5547] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5548] 4 == 2
(push) ; 2701
; [else-branch 5548] 4 != 2
(pop) ; 2701
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2701
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2701
; 0,00s
; (get-info :all-statistics)
(push) ; 2701
; [then-branch 5549] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5550] 4 == 2
(push) ; 2702
; [else-branch 5550] 4 != 2
(pop) ; 2702
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2702
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2702
; 0,00s
; (get-info :all-statistics)
(push) ; 2702
; [then-branch 5551] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5552] 4 == 2
(push) ; 2703
; [else-branch 5552] 4 != 2
(pop) ; 2703
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2703
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2703
; 0,00s
; (get-info :all-statistics)
(push) ; 2703
; [then-branch 5553] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5554] 4 == 2
(push) ; 2704
; [else-branch 5554] 4 != 2
(pop) ; 2704
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2704
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2704
; 0,00s
; (get-info :all-statistics)
(push) ; 2704
; [then-branch 5555] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5556] 4 == 2
(push) ; 2705
; [else-branch 5556] 4 != 2
(pop) ; 2705
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2705
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2705
; 0,00s
; (get-info :all-statistics)
(push) ; 2705
; [then-branch 5557] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5558] 4 == 2
(push) ; 2706
; [else-branch 5558] 4 != 2
(pop) ; 2706
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2706
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2706
; 0,00s
; (get-info :all-statistics)
(push) ; 2706
; [then-branch 5559] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5560] 4 == 2
(push) ; 2707
; [else-branch 5560] 4 != 2
(pop) ; 2707
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2707
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2707
; 0,00s
; (get-info :all-statistics)
(push) ; 2707
; [then-branch 5561] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5562] 4 == 2
(push) ; 2708
; [else-branch 5562] 4 != 2
(pop) ; 2708
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2708
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2708
; 0,00s
; (get-info :all-statistics)
(push) ; 2708
; [then-branch 5563] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5564] 4 == 2
(push) ; 2709
; [else-branch 5564] 4 != 2
(pop) ; 2709
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2709
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2709
; 0,00s
; (get-info :all-statistics)
(push) ; 2709
; [then-branch 5565] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5566] 4 == 2
(push) ; 2710
; [else-branch 5566] 4 != 2
(pop) ; 2710
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2710
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2710
; 0,00s
; (get-info :all-statistics)
(push) ; 2710
; [then-branch 5567] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5568] 4 == 2
(push) ; 2711
; [else-branch 5568] 4 != 2
(pop) ; 2711
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2711
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2711
; 0,00s
; (get-info :all-statistics)
(push) ; 2711
; [then-branch 5569] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5570] 4 == 2
(push) ; 2712
; [else-branch 5570] 4 != 2
(pop) ; 2712
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2712
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2712
; 0,00s
; (get-info :all-statistics)
(push) ; 2712
; [then-branch 5571] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5572] 4 == 2
(push) ; 2713
; [else-branch 5572] 4 != 2
(pop) ; 2713
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2713
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2713
; 0,00s
; (get-info :all-statistics)
(push) ; 2713
; [then-branch 5573] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5574] 4 == 2
(push) ; 2714
; [else-branch 5574] 4 != 2
(pop) ; 2714
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2714
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2714
; 0,00s
; (get-info :all-statistics)
(push) ; 2714
; [then-branch 5575] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5576] 4 == 2
(push) ; 2715
; [else-branch 5576] 4 != 2
(pop) ; 2715
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2715
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2715
; 0,00s
; (get-info :all-statistics)
(push) ; 2715
; [then-branch 5577] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5578] 4 == 2
(push) ; 2716
; [else-branch 5578] 4 != 2
(pop) ; 2716
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2716
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2716
; 0,00s
; (get-info :all-statistics)
(push) ; 2716
; [then-branch 5579] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5580] 4 == 2
(push) ; 2717
; [else-branch 5580] 4 != 2
(pop) ; 2717
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2717
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2717
; 0,00s
; (get-info :all-statistics)
(push) ; 2717
; [then-branch 5581] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5582] 4 == 2
(push) ; 2718
; [else-branch 5582] 4 != 2
(pop) ; 2718
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2718
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2718
; 0,00s
; (get-info :all-statistics)
(push) ; 2718
; [then-branch 5583] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5584] 4 == 2
(push) ; 2719
; [else-branch 5584] 4 != 2
(pop) ; 2719
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2719
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2719
; 0,00s
; (get-info :all-statistics)
(push) ; 2719
; [then-branch 5585] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5586] 4 == 2
(push) ; 2720
; [else-branch 5586] 4 != 2
(pop) ; 2720
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2720
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2720
; 0,00s
; (get-info :all-statistics)
(push) ; 2720
; [then-branch 5587] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5588] 4 == 2
(push) ; 2721
; [else-branch 5588] 4 != 2
(pop) ; 2721
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2721
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2721
; 0,00s
; (get-info :all-statistics)
(push) ; 2721
; [then-branch 5589] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5590] 4 == 2
(push) ; 2722
; [else-branch 5590] 4 != 2
(pop) ; 2722
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2722
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2722
; 0,00s
; (get-info :all-statistics)
(push) ; 2722
; [then-branch 5591] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5592] 4 == 2
(push) ; 2723
; [else-branch 5592] 4 != 2
(pop) ; 2723
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2723
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2723
; 0,00s
; (get-info :all-statistics)
(push) ; 2723
; [then-branch 5593] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5594] 4 == 2
(push) ; 2724
; [else-branch 5594] 4 != 2
(pop) ; 2724
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2724
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2724
; 0,00s
; (get-info :all-statistics)
(push) ; 2724
; [then-branch 5595] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5596] 4 == 2
(push) ; 2725
; [else-branch 5596] 4 != 2
(pop) ; 2725
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2725
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2725
; 0,00s
; (get-info :all-statistics)
(push) ; 2725
; [then-branch 5597] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5598] 4 == 2
(push) ; 2726
; [else-branch 5598] 4 != 2
(pop) ; 2726
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2726
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2726
; 0,00s
; (get-info :all-statistics)
(push) ; 2726
; [then-branch 5599] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5600] 4 == 2
(push) ; 2727
; [else-branch 5600] 4 != 2
(pop) ; 2727
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2727
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2727
; 0,00s
; (get-info :all-statistics)
(push) ; 2727
; [then-branch 5601] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5602] 4 == 2
(push) ; 2728
; [else-branch 5602] 4 != 2
(pop) ; 2728
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2728
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2728
; 0,00s
; (get-info :all-statistics)
(push) ; 2728
; [then-branch 5603] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5604] 4 == 2
(push) ; 2729
; [else-branch 5604] 4 != 2
(pop) ; 2729
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2729
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2729
; 0,00s
; (get-info :all-statistics)
(push) ; 2729
; [then-branch 5605] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5606] 4 == 2
(push) ; 2730
; [else-branch 5606] 4 != 2
(pop) ; 2730
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2730
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2730
; 0,00s
; (get-info :all-statistics)
(push) ; 2730
; [then-branch 5607] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5608] 4 == 2
(push) ; 2731
; [else-branch 5608] 4 != 2
(pop) ; 2731
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2731
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2731
; 0,00s
; (get-info :all-statistics)
(push) ; 2731
; [then-branch 5609] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5610] 4 == 2
(push) ; 2732
; [else-branch 5610] 4 != 2
(pop) ; 2732
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2732
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2732
; 0,00s
; (get-info :all-statistics)
(push) ; 2732
; [then-branch 5611] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5612] 4 == 2
(push) ; 2733
; [else-branch 5612] 4 != 2
(pop) ; 2733
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2733
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2733
; 0,00s
; (get-info :all-statistics)
(push) ; 2733
; [then-branch 5613] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5614] 4 == 2
(push) ; 2734
; [else-branch 5614] 4 != 2
(pop) ; 2734
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2734
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2734
; 0,00s
; (get-info :all-statistics)
(push) ; 2734
; [then-branch 5615] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5616] 4 == 2
(push) ; 2735
; [else-branch 5616] 4 != 2
(pop) ; 2735
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2735
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2735
; 0,00s
; (get-info :all-statistics)
(push) ; 2735
; [then-branch 5617] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5618] 4 == 2
(push) ; 2736
; [else-branch 5618] 4 != 2
(pop) ; 2736
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2736
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2736
; 0,00s
; (get-info :all-statistics)
(push) ; 2736
; [then-branch 5619] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5620] 4 == 2
(push) ; 2737
; [else-branch 5620] 4 != 2
(pop) ; 2737
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2737
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2737
; 0,00s
; (get-info :all-statistics)
(push) ; 2737
; [then-branch 5621] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5622] 4 == 2
(push) ; 2738
; [else-branch 5622] 4 != 2
(pop) ; 2738
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2738
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2738
; 0,00s
; (get-info :all-statistics)
(push) ; 2738
; [then-branch 5623] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5624] 4 == 2
(push) ; 2739
; [else-branch 5624] 4 != 2
(pop) ; 2739
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2739
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2739
; 0,00s
; (get-info :all-statistics)
(push) ; 2739
; [then-branch 5625] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5626] 4 == 2
(push) ; 2740
; [else-branch 5626] 4 != 2
(pop) ; 2740
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2740
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2740
; 0,00s
; (get-info :all-statistics)
(push) ; 2740
; [then-branch 5627] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5628] 4 == 2
(push) ; 2741
; [else-branch 5628] 4 != 2
(pop) ; 2741
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2741
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2741
; 0,00s
; (get-info :all-statistics)
(push) ; 2741
; [then-branch 5629] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5630] 4 == 2
(push) ; 2742
; [else-branch 5630] 4 != 2
(pop) ; 2742
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2742
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2742
; 0,00s
; (get-info :all-statistics)
(push) ; 2742
; [then-branch 5631] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5632] 4 == 2
(push) ; 2743
; [else-branch 5632] 4 != 2
(pop) ; 2743
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2743
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2743
; 0,00s
; (get-info :all-statistics)
(push) ; 2743
; [then-branch 5633] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5634] 4 == 2
(push) ; 2744
; [else-branch 5634] 4 != 2
(pop) ; 2744
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2744
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2744
; 0,00s
; (get-info :all-statistics)
(push) ; 2744
; [then-branch 5635] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5636] 4 == 2
(push) ; 2745
; [else-branch 5636] 4 != 2
(pop) ; 2745
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2745
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2745
; 0,00s
; (get-info :all-statistics)
(push) ; 2745
; [then-branch 5637] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5638] 4 == 2
(push) ; 2746
; [else-branch 5638] 4 != 2
(pop) ; 2746
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2746
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2746
; 0,00s
; (get-info :all-statistics)
(push) ; 2746
; [then-branch 5639] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5640] 4 == 2
(push) ; 2747
; [else-branch 5640] 4 != 2
(pop) ; 2747
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2747
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2747
; 0,00s
; (get-info :all-statistics)
(push) ; 2747
; [then-branch 5641] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5642] 4 == 2
(push) ; 2748
; [else-branch 5642] 4 != 2
(pop) ; 2748
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2748
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2748
; 0,00s
; (get-info :all-statistics)
(push) ; 2748
; [then-branch 5643] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5644] 4 == 2
(push) ; 2749
; [else-branch 5644] 4 != 2
(pop) ; 2749
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2749
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2749
; 0,00s
; (get-info :all-statistics)
(push) ; 2749
; [then-branch 5645] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5646] 4 == 2
(push) ; 2750
; [else-branch 5646] 4 != 2
(pop) ; 2750
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2750
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2750
; 0,00s
; (get-info :all-statistics)
(push) ; 2750
; [then-branch 5647] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5648] 4 == 2
(push) ; 2751
; [else-branch 5648] 4 != 2
(pop) ; 2751
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2751
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2751
; 0,00s
; (get-info :all-statistics)
(push) ; 2751
; [then-branch 5649] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5650] 4 == 2
(push) ; 2752
; [else-branch 5650] 4 != 2
(pop) ; 2752
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2752
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2752
; 0,00s
; (get-info :all-statistics)
(push) ; 2752
; [then-branch 5651] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5652] 4 == 2
(push) ; 2753
; [else-branch 5652] 4 != 2
(pop) ; 2753
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2753
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2753
; 0,00s
; (get-info :all-statistics)
(push) ; 2753
; [then-branch 5653] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5654] 4 == 2
(push) ; 2754
; [else-branch 5654] 4 != 2
(pop) ; 2754
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2754
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2754
; 0,00s
; (get-info :all-statistics)
(push) ; 2754
; [then-branch 5655] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5656] 4 == 2
(push) ; 2755
; [else-branch 5656] 4 != 2
(pop) ; 2755
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2755
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2755
; 0,00s
; (get-info :all-statistics)
(push) ; 2755
; [then-branch 5657] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5658] 4 == 2
(push) ; 2756
; [else-branch 5658] 4 != 2
(pop) ; 2756
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2756
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2756
; 0,00s
; (get-info :all-statistics)
(push) ; 2756
; [then-branch 5659] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5660] 4 == 2
(push) ; 2757
; [else-branch 5660] 4 != 2
(pop) ; 2757
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2757
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2757
; 0,00s
; (get-info :all-statistics)
(push) ; 2757
; [then-branch 5661] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5662] 4 == 2
(push) ; 2758
; [else-branch 5662] 4 != 2
(pop) ; 2758
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2758
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2758
; 0,00s
; (get-info :all-statistics)
(push) ; 2758
; [then-branch 5663] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5664] 4 == 2
(push) ; 2759
; [else-branch 5664] 4 != 2
(pop) ; 2759
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2759
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2759
; 0,00s
; (get-info :all-statistics)
(push) ; 2759
; [then-branch 5665] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5666] 4 == 2
(push) ; 2760
; [else-branch 5666] 4 != 2
(pop) ; 2760
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2760
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2760
; 0,00s
; (get-info :all-statistics)
(push) ; 2760
; [then-branch 5667] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5668] 4 == 2
(push) ; 2761
; [else-branch 5668] 4 != 2
(pop) ; 2761
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2761
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2761
; 0,00s
; (get-info :all-statistics)
(push) ; 2761
; [then-branch 5669] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5670] 4 == 2
(push) ; 2762
; [else-branch 5670] 4 != 2
(pop) ; 2762
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2762
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2762
; 0,00s
; (get-info :all-statistics)
(push) ; 2762
; [then-branch 5671] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5672] 4 == 2
(push) ; 2763
; [else-branch 5672] 4 != 2
(pop) ; 2763
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2763
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2763
; 0,00s
; (get-info :all-statistics)
(push) ; 2763
; [then-branch 5673] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5674] 4 == 2
(push) ; 2764
; [else-branch 5674] 4 != 2
(pop) ; 2764
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2764
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2764
; 0,00s
; (get-info :all-statistics)
(push) ; 2764
; [then-branch 5675] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5676] 4 == 2
(push) ; 2765
; [else-branch 5676] 4 != 2
(pop) ; 2765
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2765
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2765
; 0,00s
; (get-info :all-statistics)
(push) ; 2765
; [then-branch 5677] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5678] 4 == 2
(push) ; 2766
; [else-branch 5678] 4 != 2
(pop) ; 2766
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2766
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2766
; 0,00s
; (get-info :all-statistics)
(push) ; 2766
; [then-branch 5679] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5680] 4 == 2
(push) ; 2767
; [else-branch 5680] 4 != 2
(pop) ; 2767
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2767
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2767
; 0,00s
; (get-info :all-statistics)
(push) ; 2767
; [then-branch 5681] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5682] 4 == 2
(push) ; 2768
; [else-branch 5682] 4 != 2
(pop) ; 2768
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2768
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2768
; 0,00s
; (get-info :all-statistics)
(push) ; 2768
; [then-branch 5683] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5684] 4 == 2
(push) ; 2769
; [else-branch 5684] 4 != 2
(pop) ; 2769
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2769
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2769
; 0,00s
; (get-info :all-statistics)
(push) ; 2769
; [then-branch 5685] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5686] 4 == 2
(push) ; 2770
; [else-branch 5686] 4 != 2
(pop) ; 2770
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2770
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2770
; 0,00s
; (get-info :all-statistics)
(push) ; 2770
; [then-branch 5687] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5688] 4 == 2
(push) ; 2771
; [else-branch 5688] 4 != 2
(pop) ; 2771
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2771
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2771
; 0,00s
; (get-info :all-statistics)
(push) ; 2771
; [then-branch 5689] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5690] 4 == 2
(push) ; 2772
; [else-branch 5690] 4 != 2
(pop) ; 2772
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2772
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2772
; 0,00s
; (get-info :all-statistics)
(push) ; 2772
; [then-branch 5691] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5692] 4 == 2
(push) ; 2773
; [else-branch 5692] 4 != 2
(pop) ; 2773
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2773
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2773
; 0,00s
; (get-info :all-statistics)
(push) ; 2773
; [then-branch 5693] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5694] 4 == 2
(push) ; 2774
; [else-branch 5694] 4 != 2
(pop) ; 2774
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2774
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2774
; 0,00s
; (get-info :all-statistics)
(push) ; 2774
; [then-branch 5695] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5696] 4 == 2
(push) ; 2775
; [else-branch 5696] 4 != 2
(pop) ; 2775
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2775
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2775
; 0,00s
; (get-info :all-statistics)
(push) ; 2775
; [then-branch 5697] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5698] 4 == 2
(push) ; 2776
; [else-branch 5698] 4 != 2
(pop) ; 2776
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2776
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2776
; 0,00s
; (get-info :all-statistics)
(push) ; 2776
; [then-branch 5699] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5700] 4 == 2
(push) ; 2777
; [else-branch 5700] 4 != 2
(pop) ; 2777
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2777
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2777
; 0,00s
; (get-info :all-statistics)
(push) ; 2777
; [then-branch 5701] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5702] 4 == 2
(push) ; 2778
; [else-branch 5702] 4 != 2
(pop) ; 2778
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2778
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2778
; 0,00s
; (get-info :all-statistics)
(push) ; 2778
; [then-branch 5703] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5704] 4 == 2
(push) ; 2779
; [else-branch 5704] 4 != 2
(pop) ; 2779
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2779
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2779
; 0,00s
; (get-info :all-statistics)
(push) ; 2779
; [then-branch 5705] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5706] 4 == 2
(push) ; 2780
; [else-branch 5706] 4 != 2
(pop) ; 2780
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2780
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2780
; 0,00s
; (get-info :all-statistics)
(push) ; 2780
; [then-branch 5707] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5708] 4 == 2
(push) ; 2781
; [else-branch 5708] 4 != 2
(pop) ; 2781
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2781
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2781
; 0,00s
; (get-info :all-statistics)
(push) ; 2781
; [then-branch 5709] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5710] 4 == 2
(push) ; 2782
; [else-branch 5710] 4 != 2
(pop) ; 2782
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2782
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2782
; 0,00s
; (get-info :all-statistics)
(push) ; 2782
; [then-branch 5711] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5712] 4 == 2
(push) ; 2783
; [else-branch 5712] 4 != 2
(pop) ; 2783
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2783
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2783
; 0,00s
; (get-info :all-statistics)
(push) ; 2783
; [then-branch 5713] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5714] 4 == 2
(push) ; 2784
; [else-branch 5714] 4 != 2
(pop) ; 2784
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2784
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2784
; 0,00s
; (get-info :all-statistics)
(push) ; 2784
; [then-branch 5715] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5716] 4 == 2
(push) ; 2785
; [else-branch 5716] 4 != 2
(pop) ; 2785
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2785
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2785
; 0,00s
; (get-info :all-statistics)
(push) ; 2785
; [then-branch 5717] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5718] 4 == 2
(push) ; 2786
; [else-branch 5718] 4 != 2
(pop) ; 2786
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2786
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2786
; 0,00s
; (get-info :all-statistics)
(push) ; 2786
; [then-branch 5719] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5720] 4 == 2
(push) ; 2787
; [else-branch 5720] 4 != 2
(pop) ; 2787
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2787
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2787
; 0,00s
; (get-info :all-statistics)
(push) ; 2787
; [then-branch 5721] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5722] 4 == 2
(push) ; 2788
; [else-branch 5722] 4 != 2
(pop) ; 2788
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2788
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2788
; 0,00s
; (get-info :all-statistics)
(push) ; 2788
; [then-branch 5723] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5724] 4 == 2
(push) ; 2789
; [else-branch 5724] 4 != 2
(pop) ; 2789
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2789
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2789
; 0,00s
; (get-info :all-statistics)
(push) ; 2789
; [then-branch 5725] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5726] 4 == 2
(push) ; 2790
; [else-branch 5726] 4 != 2
(pop) ; 2790
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2790
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2790
; 0,00s
; (get-info :all-statistics)
(push) ; 2790
; [then-branch 5727] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5728] 4 == 2
(push) ; 2791
; [else-branch 5728] 4 != 2
(pop) ; 2791
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2791
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2791
; 0,00s
; (get-info :all-statistics)
(push) ; 2791
; [then-branch 5729] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5730] 4 == 2
(push) ; 2792
; [else-branch 5730] 4 != 2
(pop) ; 2792
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2792
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2792
; 0,00s
; (get-info :all-statistics)
(push) ; 2792
; [then-branch 5731] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5732] 4 == 2
(push) ; 2793
; [else-branch 5732] 4 != 2
(pop) ; 2793
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2793
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2793
; 0,00s
; (get-info :all-statistics)
(push) ; 2793
; [then-branch 5733] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5734] 4 == 2
(push) ; 2794
; [else-branch 5734] 4 != 2
(pop) ; 2794
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2794
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2794
; 0,00s
; (get-info :all-statistics)
(push) ; 2794
; [then-branch 5735] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5736] 4 == 2
(push) ; 2795
; [else-branch 5736] 4 != 2
(pop) ; 2795
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2795
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2795
; 0,00s
; (get-info :all-statistics)
(push) ; 2795
; [then-branch 5737] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5738] 4 == 2
(push) ; 2796
; [else-branch 5738] 4 != 2
(pop) ; 2796
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2796
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2796
; 0,00s
; (get-info :all-statistics)
(push) ; 2796
; [then-branch 5739] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5740] 4 == 2
(push) ; 2797
; [else-branch 5740] 4 != 2
(pop) ; 2797
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2797
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2797
; 0,00s
; (get-info :all-statistics)
(push) ; 2797
; [then-branch 5741] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5742] 4 == 2
(push) ; 2798
; [else-branch 5742] 4 != 2
(pop) ; 2798
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2798
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2798
; 0,00s
; (get-info :all-statistics)
(push) ; 2798
; [then-branch 5743] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5744] 4 == 2
(push) ; 2799
; [else-branch 5744] 4 != 2
(pop) ; 2799
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2799
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2799
; 0,00s
; (get-info :all-statistics)
(push) ; 2799
; [then-branch 5745] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5746] 4 == 2
(push) ; 2800
; [else-branch 5746] 4 != 2
(pop) ; 2800
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2800
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2800
; 0,00s
; (get-info :all-statistics)
(push) ; 2800
; [then-branch 5747] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5748] 4 == 2
(push) ; 2801
; [else-branch 5748] 4 != 2
(pop) ; 2801
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2801
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2801
; 0,00s
; (get-info :all-statistics)
(push) ; 2801
; [then-branch 5749] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5750] 4 == 2
(push) ; 2802
; [else-branch 5750] 4 != 2
(pop) ; 2802
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2802
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2802
; 0,00s
; (get-info :all-statistics)
(push) ; 2802
; [then-branch 5751] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5752] 4 == 2
(push) ; 2803
; [else-branch 5752] 4 != 2
(pop) ; 2803
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2803
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2803
; 0,00s
; (get-info :all-statistics)
(push) ; 2803
; [then-branch 5753] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5754] 4 == 2
(push) ; 2804
; [else-branch 5754] 4 != 2
(pop) ; 2804
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2804
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2804
; 0,00s
; (get-info :all-statistics)
(push) ; 2804
; [then-branch 5755] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5756] 4 == 2
(push) ; 2805
; [else-branch 5756] 4 != 2
(pop) ; 2805
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2805
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2805
; 0,00s
; (get-info :all-statistics)
(push) ; 2805
; [then-branch 5757] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5758] 4 == 2
(push) ; 2806
; [else-branch 5758] 4 != 2
(pop) ; 2806
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2806
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2806
; 0,00s
; (get-info :all-statistics)
(push) ; 2806
; [then-branch 5759] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5760] 4 == 2
(push) ; 2807
; [else-branch 5760] 4 != 2
(pop) ; 2807
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2807
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2807
; 0,00s
; (get-info :all-statistics)
(push) ; 2807
; [then-branch 5761] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5762] 4 == 2
(push) ; 2808
; [else-branch 5762] 4 != 2
(pop) ; 2808
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2808
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2808
; 0,00s
; (get-info :all-statistics)
(push) ; 2808
; [then-branch 5763] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5764] 4 == 2
(push) ; 2809
; [else-branch 5764] 4 != 2
(pop) ; 2809
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2809
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2809
; 0,00s
; (get-info :all-statistics)
(push) ; 2809
; [then-branch 5765] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5766] 4 == 2
(push) ; 2810
; [else-branch 5766] 4 != 2
(pop) ; 2810
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2810
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2810
; 0,00s
; (get-info :all-statistics)
(push) ; 2810
; [then-branch 5767] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5768] 4 == 2
(push) ; 2811
; [else-branch 5768] 4 != 2
(pop) ; 2811
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2811
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2811
; 0,00s
; (get-info :all-statistics)
(push) ; 2811
; [then-branch 5769] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5770] 4 == 2
(push) ; 2812
; [else-branch 5770] 4 != 2
(pop) ; 2812
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2812
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2812
; 0,00s
; (get-info :all-statistics)
(push) ; 2812
; [then-branch 5771] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5772] 4 == 2
(push) ; 2813
; [else-branch 5772] 4 != 2
(pop) ; 2813
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2813
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2813
; 0,00s
; (get-info :all-statistics)
(push) ; 2813
; [then-branch 5773] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5774] 4 == 2
(push) ; 2814
; [else-branch 5774] 4 != 2
(pop) ; 2814
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2814
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2814
; 0,00s
; (get-info :all-statistics)
(push) ; 2814
; [then-branch 5775] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5776] 4 == 2
(push) ; 2815
; [else-branch 5776] 4 != 2
(pop) ; 2815
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2815
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2815
; 0,00s
; (get-info :all-statistics)
(push) ; 2815
; [then-branch 5777] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5778] 4 == 2
(push) ; 2816
; [else-branch 5778] 4 != 2
(pop) ; 2816
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2816
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2816
; 0,00s
; (get-info :all-statistics)
(push) ; 2816
; [then-branch 5779] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5780] 4 == 2
(push) ; 2817
; [else-branch 5780] 4 != 2
(pop) ; 2817
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2817
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2817
; 0,00s
; (get-info :all-statistics)
(push) ; 2817
; [then-branch 5781] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5782] 4 == 2
(push) ; 2818
; [else-branch 5782] 4 != 2
(pop) ; 2818
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2818
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2818
; 0,00s
; (get-info :all-statistics)
(push) ; 2818
; [then-branch 5783] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5784] 4 == 2
(push) ; 2819
; [else-branch 5784] 4 != 2
(pop) ; 2819
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2819
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2819
; 0,00s
; (get-info :all-statistics)
(push) ; 2819
; [then-branch 5785] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5786] 4 == 2
(push) ; 2820
; [else-branch 5786] 4 != 2
(pop) ; 2820
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2820
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2820
; 0,00s
; (get-info :all-statistics)
(push) ; 2820
; [then-branch 5787] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5788] 4 == 2
(push) ; 2821
; [else-branch 5788] 4 != 2
(pop) ; 2821
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2821
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2821
; 0,00s
; (get-info :all-statistics)
(push) ; 2821
; [then-branch 5789] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5790] 4 == 2
(push) ; 2822
; [else-branch 5790] 4 != 2
(pop) ; 2822
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2822
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2822
; 0,00s
; (get-info :all-statistics)
(push) ; 2822
; [then-branch 5791] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5792] 4 == 2
(push) ; 2823
; [else-branch 5792] 4 != 2
(pop) ; 2823
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2823
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2823
; 0,00s
; (get-info :all-statistics)
(push) ; 2823
; [then-branch 5793] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5794] 4 == 2
(push) ; 2824
; [else-branch 5794] 4 != 2
(pop) ; 2824
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2824
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2824
; 0,00s
; (get-info :all-statistics)
(push) ; 2824
; [then-branch 5795] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5796] 4 == 2
(push) ; 2825
; [else-branch 5796] 4 != 2
(pop) ; 2825
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2825
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2825
; 0,00s
; (get-info :all-statistics)
(push) ; 2825
; [then-branch 5797] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5798] 4 == 2
(push) ; 2826
; [else-branch 5798] 4 != 2
(pop) ; 2826
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2826
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2826
; 0,00s
; (get-info :all-statistics)
(push) ; 2826
; [then-branch 5799] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5800] 4 == 2
(push) ; 2827
; [else-branch 5800] 4 != 2
(pop) ; 2827
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2827
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2827
; 0,00s
; (get-info :all-statistics)
(push) ; 2827
; [then-branch 5801] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5802] 4 == 2
(push) ; 2828
; [else-branch 5802] 4 != 2
(pop) ; 2828
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2828
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2828
; 0,00s
; (get-info :all-statistics)
(push) ; 2828
; [then-branch 5803] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5804] 4 == 2
(push) ; 2829
; [else-branch 5804] 4 != 2
(pop) ; 2829
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2829
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2829
; 0,00s
; (get-info :all-statistics)
(push) ; 2829
; [then-branch 5805] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5806] 4 == 2
(push) ; 2830
; [else-branch 5806] 4 != 2
(pop) ; 2830
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2830
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2830
; 0,00s
; (get-info :all-statistics)
(push) ; 2830
; [then-branch 5807] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5808] 4 == 2
(push) ; 2831
; [else-branch 5808] 4 != 2
(pop) ; 2831
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2831
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2831
; 0,00s
; (get-info :all-statistics)
(push) ; 2831
; [then-branch 5809] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5810] 4 == 2
(push) ; 2832
; [else-branch 5810] 4 != 2
(pop) ; 2832
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2832
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2832
; 0,00s
; (get-info :all-statistics)
(push) ; 2832
; [then-branch 5811] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5812] 4 == 2
(push) ; 2833
; [else-branch 5812] 4 != 2
(pop) ; 2833
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2833
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2833
; 0,00s
; (get-info :all-statistics)
(push) ; 2833
; [then-branch 5813] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5814] 4 == 2
(push) ; 2834
; [else-branch 5814] 4 != 2
(pop) ; 2834
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2834
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2834
; 0,00s
; (get-info :all-statistics)
(push) ; 2834
; [then-branch 5815] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5816] 4 == 2
(push) ; 2835
; [else-branch 5816] 4 != 2
(pop) ; 2835
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2835
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2835
; 0,00s
; (get-info :all-statistics)
(push) ; 2835
; [then-branch 5817] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5818] 4 == 2
(push) ; 2836
; [else-branch 5818] 4 != 2
(pop) ; 2836
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2836
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2836
; 0,00s
; (get-info :all-statistics)
(push) ; 2836
; [then-branch 5819] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5820] 4 == 2
(push) ; 2837
; [else-branch 5820] 4 != 2
(pop) ; 2837
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2837
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2837
; 0,00s
; (get-info :all-statistics)
(push) ; 2837
; [then-branch 5821] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5822] 4 == 2
(push) ; 2838
; [else-branch 5822] 4 != 2
(pop) ; 2838
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2838
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2838
; 0,00s
; (get-info :all-statistics)
(push) ; 2838
; [then-branch 5823] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5824] 4 == 2
(push) ; 2839
; [else-branch 5824] 4 != 2
(pop) ; 2839
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2839
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2839
; 0,00s
; (get-info :all-statistics)
(push) ; 2839
; [then-branch 5825] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5826] 4 == 2
(push) ; 2840
; [else-branch 5826] 4 != 2
(pop) ; 2840
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2840
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2840
; 0,00s
; (get-info :all-statistics)
(push) ; 2840
; [then-branch 5827] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5828] 4 == 2
(push) ; 2841
; [else-branch 5828] 4 != 2
(pop) ; 2841
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2841
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2841
; 0,00s
; (get-info :all-statistics)
(push) ; 2841
; [then-branch 5829] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5830] 4 == 2
(push) ; 2842
; [else-branch 5830] 4 != 2
(pop) ; 2842
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2842
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2842
; 0,00s
; (get-info :all-statistics)
(push) ; 2842
; [then-branch 5831] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5832] 4 == 2
(push) ; 2843
; [else-branch 5832] 4 != 2
(pop) ; 2843
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2843
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2843
; 0,00s
; (get-info :all-statistics)
(push) ; 2843
; [then-branch 5833] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5834] 4 == 2
(push) ; 2844
; [else-branch 5834] 4 != 2
(pop) ; 2844
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2844
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2844
; 0,00s
; (get-info :all-statistics)
(push) ; 2844
; [then-branch 5835] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5836] 4 == 2
(push) ; 2845
; [else-branch 5836] 4 != 2
(pop) ; 2845
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2845
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2845
; 0,00s
; (get-info :all-statistics)
(push) ; 2845
; [then-branch 5837] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5838] 4 == 2
(push) ; 2846
; [else-branch 5838] 4 != 2
(pop) ; 2846
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2846
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2846
; 0,00s
; (get-info :all-statistics)
(push) ; 2846
; [then-branch 5839] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5840] 4 == 2
(push) ; 2847
; [else-branch 5840] 4 != 2
(pop) ; 2847
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2847
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2847
; 0,00s
; (get-info :all-statistics)
(push) ; 2847
; [then-branch 5841] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5842] 4 == 2
(push) ; 2848
; [else-branch 5842] 4 != 2
(pop) ; 2848
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2848
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2848
; 0,00s
; (get-info :all-statistics)
(push) ; 2848
; [then-branch 5843] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5844] 4 == 2
(push) ; 2849
; [else-branch 5844] 4 != 2
(pop) ; 2849
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2849
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2849
; 0,00s
; (get-info :all-statistics)
(push) ; 2849
; [then-branch 5845] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5846] 4 == 2
(push) ; 2850
; [else-branch 5846] 4 != 2
(pop) ; 2850
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2850
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2850
; 0,00s
; (get-info :all-statistics)
(push) ; 2850
; [then-branch 5847] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5848] 4 == 2
(push) ; 2851
; [else-branch 5848] 4 != 2
(pop) ; 2851
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2851
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2851
; 0,00s
; (get-info :all-statistics)
(push) ; 2851
; [then-branch 5849] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5850] 4 == 2
(push) ; 2852
; [else-branch 5850] 4 != 2
(pop) ; 2852
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2852
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2852
; 0,00s
; (get-info :all-statistics)
(push) ; 2852
; [then-branch 5851] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5852] 4 == 2
(push) ; 2853
; [else-branch 5852] 4 != 2
(pop) ; 2853
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2853
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2853
; 0,00s
; (get-info :all-statistics)
(push) ; 2853
; [then-branch 5853] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5854] 4 == 2
(push) ; 2854
; [else-branch 5854] 4 != 2
(pop) ; 2854
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2854
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2854
; 0,00s
; (get-info :all-statistics)
(push) ; 2854
; [then-branch 5855] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5856] 4 == 2
(push) ; 2855
; [else-branch 5856] 4 != 2
(pop) ; 2855
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2855
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2855
; 0,00s
; (get-info :all-statistics)
(push) ; 2855
; [then-branch 5857] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5858] 4 == 2
(push) ; 2856
; [else-branch 5858] 4 != 2
(pop) ; 2856
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2856
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2856
; 0,00s
; (get-info :all-statistics)
(push) ; 2856
; [then-branch 5859] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5860] 4 == 2
(push) ; 2857
; [else-branch 5860] 4 != 2
(pop) ; 2857
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2857
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2857
; 0,00s
; (get-info :all-statistics)
(push) ; 2857
; [then-branch 5861] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5862] 4 == 2
(push) ; 2858
; [else-branch 5862] 4 != 2
(pop) ; 2858
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2858
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2858
; 0,00s
; (get-info :all-statistics)
(push) ; 2858
; [then-branch 5863] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5864] 4 == 2
(push) ; 2859
; [else-branch 5864] 4 != 2
(pop) ; 2859
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2859
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2859
; 0,00s
; (get-info :all-statistics)
(push) ; 2859
; [then-branch 5865] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5866] 4 == 2
(push) ; 2860
; [else-branch 5866] 4 != 2
(pop) ; 2860
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2860
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2860
; 0,00s
; (get-info :all-statistics)
(push) ; 2860
; [then-branch 5867] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5868] 4 == 2
(push) ; 2861
; [else-branch 5868] 4 != 2
(pop) ; 2861
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2861
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2861
; 0,00s
; (get-info :all-statistics)
(push) ; 2861
; [then-branch 5869] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5870] 4 == 2
(push) ; 2862
; [else-branch 5870] 4 != 2
(pop) ; 2862
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2862
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2862
; 0,00s
; (get-info :all-statistics)
(push) ; 2862
; [then-branch 5871] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5872] 4 == 2
(push) ; 2863
; [else-branch 5872] 4 != 2
(pop) ; 2863
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2863
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2863
; 0,00s
; (get-info :all-statistics)
(push) ; 2863
; [then-branch 5873] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5874] 4 == 2
(push) ; 2864
; [else-branch 5874] 4 != 2
(pop) ; 2864
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2864
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2864
; 0,00s
; (get-info :all-statistics)
(push) ; 2864
; [then-branch 5875] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5876] 4 == 2
(push) ; 2865
; [else-branch 5876] 4 != 2
(pop) ; 2865
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2865
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2865
; 0,00s
; (get-info :all-statistics)
(push) ; 2865
; [then-branch 5877] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5878] 4 == 2
(push) ; 2866
; [else-branch 5878] 4 != 2
(pop) ; 2866
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2866
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2866
; 0,00s
; (get-info :all-statistics)
(push) ; 2866
; [then-branch 5879] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5880] 4 == 2
(push) ; 2867
; [else-branch 5880] 4 != 2
(pop) ; 2867
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2867
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2867
; 0,00s
; (get-info :all-statistics)
(push) ; 2867
; [then-branch 5881] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5882] 4 == 2
(push) ; 2868
; [else-branch 5882] 4 != 2
(pop) ; 2868
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2868
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2868
; 0,00s
; (get-info :all-statistics)
(push) ; 2868
; [then-branch 5883] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5884] 4 == 2
(push) ; 2869
; [else-branch 5884] 4 != 2
(pop) ; 2869
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2869
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2869
; 0,00s
; (get-info :all-statistics)
(push) ; 2869
; [then-branch 5885] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5886] 4 == 2
(push) ; 2870
; [else-branch 5886] 4 != 2
(pop) ; 2870
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2870
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2870
; 0,00s
; (get-info :all-statistics)
(push) ; 2870
; [then-branch 5887] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5888] 4 == 2
(push) ; 2871
; [else-branch 5888] 4 != 2
(pop) ; 2871
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2871
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2871
; 0,00s
; (get-info :all-statistics)
(push) ; 2871
; [then-branch 5889] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5890] 4 == 2
(push) ; 2872
; [else-branch 5890] 4 != 2
(pop) ; 2872
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2872
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2872
; 0,00s
; (get-info :all-statistics)
(push) ; 2872
; [then-branch 5891] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5892] 4 == 2
(push) ; 2873
; [else-branch 5892] 4 != 2
(pop) ; 2873
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2873
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2873
; 0,00s
; (get-info :all-statistics)
(push) ; 2873
; [then-branch 5893] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5894] 4 == 2
(push) ; 2874
; [else-branch 5894] 4 != 2
(pop) ; 2874
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2874
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2874
; 0,00s
; (get-info :all-statistics)
(push) ; 2874
; [then-branch 5895] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5896] 4 == 2
(push) ; 2875
; [else-branch 5896] 4 != 2
(pop) ; 2875
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2875
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2875
; 0,00s
; (get-info :all-statistics)
(push) ; 2875
; [then-branch 5897] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5898] 4 == 2
(push) ; 2876
; [else-branch 5898] 4 != 2
(pop) ; 2876
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2876
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2876
; 0,00s
; (get-info :all-statistics)
(push) ; 2876
; [then-branch 5899] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5900] 4 == 2
(push) ; 2877
; [else-branch 5900] 4 != 2
(pop) ; 2877
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2877
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2877
; 0,00s
; (get-info :all-statistics)
(push) ; 2877
; [then-branch 5901] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5902] 4 == 2
(push) ; 2878
; [else-branch 5902] 4 != 2
(pop) ; 2878
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2878
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2878
; 0,00s
; (get-info :all-statistics)
(push) ; 2878
; [then-branch 5903] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5904] 4 == 2
(push) ; 2879
; [else-branch 5904] 4 != 2
(pop) ; 2879
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2879
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2879
; 0,00s
; (get-info :all-statistics)
(push) ; 2879
; [then-branch 5905] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5906] 4 == 2
(push) ; 2880
; [else-branch 5906] 4 != 2
(pop) ; 2880
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2880
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2880
; 0,00s
; (get-info :all-statistics)
(push) ; 2880
; [then-branch 5907] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5908] 4 == 2
(push) ; 2881
; [else-branch 5908] 4 != 2
(pop) ; 2881
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2881
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2881
; 0,00s
; (get-info :all-statistics)
(push) ; 2881
; [then-branch 5909] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5910] 4 == 2
(push) ; 2882
; [else-branch 5910] 4 != 2
(pop) ; 2882
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2882
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2882
; 0,00s
; (get-info :all-statistics)
(push) ; 2882
; [then-branch 5911] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5912] 4 == 2
(push) ; 2883
; [else-branch 5912] 4 != 2
(pop) ; 2883
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2883
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2883
; 0,00s
; (get-info :all-statistics)
(push) ; 2883
; [then-branch 5913] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5914] 4 == 2
(push) ; 2884
; [else-branch 5914] 4 != 2
(pop) ; 2884
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2884
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2884
; 0,00s
; (get-info :all-statistics)
(push) ; 2884
; [then-branch 5915] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5916] 4 == 2
(push) ; 2885
; [else-branch 5916] 4 != 2
(pop) ; 2885
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2885
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2885
; 0,00s
; (get-info :all-statistics)
(push) ; 2885
; [then-branch 5917] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5918] 4 == 2
(push) ; 2886
; [else-branch 5918] 4 != 2
(pop) ; 2886
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2886
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2886
; 0,00s
; (get-info :all-statistics)
(push) ; 2886
; [then-branch 5919] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5920] 4 == 2
(push) ; 2887
; [else-branch 5920] 4 != 2
(pop) ; 2887
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2887
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2887
; 0,00s
; (get-info :all-statistics)
(push) ; 2887
; [then-branch 5921] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5922] 4 == 2
(push) ; 2888
; [else-branch 5922] 4 != 2
(pop) ; 2888
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2888
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2888
; 0,00s
; (get-info :all-statistics)
(push) ; 2888
; [then-branch 5923] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5924] 4 == 2
(push) ; 2889
; [else-branch 5924] 4 != 2
(pop) ; 2889
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2889
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2889
; 0,00s
; (get-info :all-statistics)
(push) ; 2889
; [then-branch 5925] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5926] 4 == 2
(push) ; 2890
; [else-branch 5926] 4 != 2
(pop) ; 2890
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2890
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2890
; 0,00s
; (get-info :all-statistics)
(push) ; 2890
; [then-branch 5927] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5928] 4 == 2
(push) ; 2891
; [else-branch 5928] 4 != 2
(pop) ; 2891
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2891
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2891
; 0,00s
; (get-info :all-statistics)
(push) ; 2891
; [then-branch 5929] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5930] 4 == 2
(push) ; 2892
; [else-branch 5930] 4 != 2
(pop) ; 2892
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2892
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2892
; 0,00s
; (get-info :all-statistics)
(push) ; 2892
; [then-branch 5931] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5932] 4 == 2
(push) ; 2893
; [else-branch 5932] 4 != 2
(pop) ; 2893
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2893
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2893
; 0,00s
; (get-info :all-statistics)
(push) ; 2893
; [then-branch 5933] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5934] 4 == 2
(push) ; 2894
; [else-branch 5934] 4 != 2
(pop) ; 2894
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2894
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2894
; 0,00s
; (get-info :all-statistics)
(push) ; 2894
; [then-branch 5935] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5936] 4 == 2
(push) ; 2895
; [else-branch 5936] 4 != 2
(pop) ; 2895
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2895
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2895
; 0,00s
; (get-info :all-statistics)
(push) ; 2895
; [then-branch 5937] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5938] 4 == 2
(push) ; 2896
; [else-branch 5938] 4 != 2
(pop) ; 2896
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2896
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2896
; 0,00s
; (get-info :all-statistics)
(push) ; 2896
; [then-branch 5939] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5940] 4 == 2
(push) ; 2897
; [else-branch 5940] 4 != 2
(pop) ; 2897
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2897
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2897
; 0,00s
; (get-info :all-statistics)
(push) ; 2897
; [then-branch 5941] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5942] 4 == 2
(push) ; 2898
; [else-branch 5942] 4 != 2
(pop) ; 2898
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2898
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2898
; 0,00s
; (get-info :all-statistics)
(push) ; 2898
; [then-branch 5943] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5944] 4 == 2
(push) ; 2899
; [else-branch 5944] 4 != 2
(pop) ; 2899
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2899
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2899
; 0,00s
; (get-info :all-statistics)
(push) ; 2899
; [then-branch 5945] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5946] 4 == 2
(push) ; 2900
; [else-branch 5946] 4 != 2
(pop) ; 2900
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2900
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2900
; 0,00s
; (get-info :all-statistics)
(push) ; 2900
; [then-branch 5947] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5948] 4 == 2
(push) ; 2901
; [else-branch 5948] 4 != 2
(pop) ; 2901
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2901
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2901
; 0,00s
; (get-info :all-statistics)
(push) ; 2901
; [then-branch 5949] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5950] 4 == 2
(push) ; 2902
; [else-branch 5950] 4 != 2
(pop) ; 2902
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2902
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2902
; 0,00s
; (get-info :all-statistics)
(push) ; 2902
; [then-branch 5951] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5952] 4 == 2
(push) ; 2903
; [else-branch 5952] 4 != 2
(pop) ; 2903
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2903
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2903
; 0,00s
; (get-info :all-statistics)
(push) ; 2903
; [then-branch 5953] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5954] 4 == 2
(push) ; 2904
; [else-branch 5954] 4 != 2
(pop) ; 2904
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2904
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2904
; 0,00s
; (get-info :all-statistics)
(push) ; 2904
; [then-branch 5955] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5956] 4 == 2
(push) ; 2905
; [else-branch 5956] 4 != 2
(pop) ; 2905
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2905
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2905
; 0,00s
; (get-info :all-statistics)
(push) ; 2905
; [then-branch 5957] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5958] 4 == 2
(push) ; 2906
; [else-branch 5958] 4 != 2
(pop) ; 2906
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2906
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2906
; 0,00s
; (get-info :all-statistics)
(push) ; 2906
; [then-branch 5959] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5960] 4 == 2
(push) ; 2907
; [else-branch 5960] 4 != 2
(pop) ; 2907
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2907
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2907
; 0,00s
; (get-info :all-statistics)
(push) ; 2907
; [then-branch 5961] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5962] 4 == 2
(push) ; 2908
; [else-branch 5962] 4 != 2
(pop) ; 2908
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2908
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2908
; 0,00s
; (get-info :all-statistics)
(push) ; 2908
; [then-branch 5963] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5964] 4 == 2
(push) ; 2909
; [else-branch 5964] 4 != 2
(pop) ; 2909
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2909
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2909
; 0,00s
; (get-info :all-statistics)
(push) ; 2909
; [then-branch 5965] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5966] 4 == 2
(push) ; 2910
; [else-branch 5966] 4 != 2
(pop) ; 2910
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2910
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2910
; 0,00s
; (get-info :all-statistics)
(push) ; 2910
; [then-branch 5967] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5968] 4 == 2
(push) ; 2911
; [else-branch 5968] 4 != 2
(pop) ; 2911
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2911
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2911
; 0,00s
; (get-info :all-statistics)
(push) ; 2911
; [then-branch 5969] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5970] 4 == 2
(push) ; 2912
; [else-branch 5970] 4 != 2
(pop) ; 2912
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2912
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2912
; 0,00s
; (get-info :all-statistics)
(push) ; 2912
; [then-branch 5971] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5972] 4 == 2
(push) ; 2913
; [else-branch 5972] 4 != 2
(pop) ; 2913
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2913
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2913
; 0,00s
; (get-info :all-statistics)
(push) ; 2913
; [then-branch 5973] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5974] 4 == 2
(push) ; 2914
; [else-branch 5974] 4 != 2
(pop) ; 2914
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2914
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2914
; 0,00s
; (get-info :all-statistics)
(push) ; 2914
; [then-branch 5975] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5976] 4 == 2
(push) ; 2915
; [else-branch 5976] 4 != 2
(pop) ; 2915
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2915
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2915
; 0,00s
; (get-info :all-statistics)
(push) ; 2915
; [then-branch 5977] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5978] 4 == 2
(push) ; 2916
; [else-branch 5978] 4 != 2
(pop) ; 2916
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2916
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2916
; 0,00s
; (get-info :all-statistics)
(push) ; 2916
; [then-branch 5979] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5980] 4 == 2
(push) ; 2917
; [else-branch 5980] 4 != 2
(pop) ; 2917
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2917
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2917
; 0,00s
; (get-info :all-statistics)
(push) ; 2917
; [then-branch 5981] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5982] 4 == 2
(push) ; 2918
; [else-branch 5982] 4 != 2
(pop) ; 2918
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2918
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2918
; 0,00s
; (get-info :all-statistics)
(push) ; 2918
; [then-branch 5983] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5984] 4 == 2
(push) ; 2919
; [else-branch 5984] 4 != 2
(pop) ; 2919
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2919
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2919
; 0,00s
; (get-info :all-statistics)
(push) ; 2919
; [then-branch 5985] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5986] 4 == 2
(push) ; 2920
; [else-branch 5986] 4 != 2
(pop) ; 2920
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2920
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2920
; 0,00s
; (get-info :all-statistics)
(push) ; 2920
; [then-branch 5987] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5988] 4 == 2
(push) ; 2921
; [else-branch 5988] 4 != 2
(pop) ; 2921
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2921
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2921
; 0,00s
; (get-info :all-statistics)
(push) ; 2921
; [then-branch 5989] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5990] 4 == 2
(push) ; 2922
; [else-branch 5990] 4 != 2
(pop) ; 2922
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2922
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2922
; 0,00s
; (get-info :all-statistics)
(push) ; 2922
; [then-branch 5991] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5992] 4 == 2
(push) ; 2923
; [else-branch 5992] 4 != 2
(pop) ; 2923
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2923
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2923
; 0,00s
; (get-info :all-statistics)
(push) ; 2923
; [then-branch 5993] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5994] 4 == 2
(push) ; 2924
; [else-branch 5994] 4 != 2
(pop) ; 2924
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2924
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2924
; 0,00s
; (get-info :all-statistics)
(push) ; 2924
; [then-branch 5995] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5996] 4 == 2
(push) ; 2925
; [else-branch 5996] 4 != 2
(pop) ; 2925
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2925
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2925
; 0,00s
; (get-info :all-statistics)
(push) ; 2925
; [then-branch 5997] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 5998] 4 == 2
(push) ; 2926
; [else-branch 5998] 4 != 2
(pop) ; 2926
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2926
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2926
; 0,00s
; (get-info :all-statistics)
(push) ; 2926
; [then-branch 5999] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6000] 4 == 2
(push) ; 2927
; [else-branch 6000] 4 != 2
(pop) ; 2927
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2927
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2927
; 0,00s
; (get-info :all-statistics)
(push) ; 2927
; [then-branch 6001] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6002] 4 == 2
(push) ; 2928
; [else-branch 6002] 4 != 2
(pop) ; 2928
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2928
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2928
; 0,00s
; (get-info :all-statistics)
(push) ; 2928
; [then-branch 6003] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6004] 4 == 2
(push) ; 2929
; [else-branch 6004] 4 != 2
(pop) ; 2929
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2929
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2929
; 0,00s
; (get-info :all-statistics)
(push) ; 2929
; [then-branch 6005] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6006] 4 == 2
(push) ; 2930
; [else-branch 6006] 4 != 2
(pop) ; 2930
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2930
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2930
; 0,00s
; (get-info :all-statistics)
(push) ; 2930
; [then-branch 6007] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6008] 4 == 2
(push) ; 2931
; [else-branch 6008] 4 != 2
(pop) ; 2931
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2931
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2931
; 0,00s
; (get-info :all-statistics)
(push) ; 2931
; [then-branch 6009] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6010] 4 == 2
(push) ; 2932
; [else-branch 6010] 4 != 2
(pop) ; 2932
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2932
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2932
; 0,00s
; (get-info :all-statistics)
(push) ; 2932
; [then-branch 6011] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6012] 4 == 2
(push) ; 2933
; [else-branch 6012] 4 != 2
(pop) ; 2933
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2933
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2933
; 0,00s
; (get-info :all-statistics)
(push) ; 2933
; [then-branch 6013] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6014] 4 == 2
(push) ; 2934
; [else-branch 6014] 4 != 2
(pop) ; 2934
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2934
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2934
; 0,00s
; (get-info :all-statistics)
(push) ; 2934
; [then-branch 6015] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6016] 4 == 2
(push) ; 2935
; [else-branch 6016] 4 != 2
(pop) ; 2935
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2935
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2935
; 0,00s
; (get-info :all-statistics)
(push) ; 2935
; [then-branch 6017] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6018] 4 == 2
(push) ; 2936
; [else-branch 6018] 4 != 2
(pop) ; 2936
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2936
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2936
; 0,00s
; (get-info :all-statistics)
(push) ; 2936
; [then-branch 6019] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6020] 4 == 2
(push) ; 2937
; [else-branch 6020] 4 != 2
(pop) ; 2937
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2937
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2937
; 0,00s
; (get-info :all-statistics)
(push) ; 2937
; [then-branch 6021] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6022] 4 == 2
(push) ; 2938
; [else-branch 6022] 4 != 2
(pop) ; 2938
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2938
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2938
; 0,00s
; (get-info :all-statistics)
(push) ; 2938
; [then-branch 6023] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6024] 4 == 2
(push) ; 2939
; [else-branch 6024] 4 != 2
(pop) ; 2939
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2939
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2939
; 0,00s
; (get-info :all-statistics)
(push) ; 2939
; [then-branch 6025] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6026] 4 == 2
(push) ; 2940
; [else-branch 6026] 4 != 2
(pop) ; 2940
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2940
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2940
; 0,00s
; (get-info :all-statistics)
(push) ; 2940
; [then-branch 6027] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6028] 4 == 2
(push) ; 2941
; [else-branch 6028] 4 != 2
(pop) ; 2941
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2941
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2941
; 0,00s
; (get-info :all-statistics)
(push) ; 2941
; [then-branch 6029] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6030] 4 == 2
(push) ; 2942
; [else-branch 6030] 4 != 2
(pop) ; 2942
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2942
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2942
; 0,00s
; (get-info :all-statistics)
(push) ; 2942
; [then-branch 6031] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6032] 4 == 2
(push) ; 2943
; [else-branch 6032] 4 != 2
(pop) ; 2943
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2943
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2943
; 0,00s
; (get-info :all-statistics)
(push) ; 2943
; [then-branch 6033] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6034] 4 == 2
(push) ; 2944
; [else-branch 6034] 4 != 2
(pop) ; 2944
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2944
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2944
; 0,00s
; (get-info :all-statistics)
(push) ; 2944
; [then-branch 6035] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6036] 4 == 2
(push) ; 2945
; [else-branch 6036] 4 != 2
(pop) ; 2945
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2945
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2945
; 0,00s
; (get-info :all-statistics)
(push) ; 2945
; [then-branch 6037] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6038] 4 == 2
(push) ; 2946
; [else-branch 6038] 4 != 2
(pop) ; 2946
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2946
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2946
; 0,00s
; (get-info :all-statistics)
(push) ; 2946
; [then-branch 6039] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6040] 4 == 2
(push) ; 2947
; [else-branch 6040] 4 != 2
(pop) ; 2947
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2947
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2947
; 0,00s
; (get-info :all-statistics)
(push) ; 2947
; [then-branch 6041] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6042] 4 == 2
(push) ; 2948
; [else-branch 6042] 4 != 2
(pop) ; 2948
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2948
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2948
; 0,00s
; (get-info :all-statistics)
(push) ; 2948
; [then-branch 6043] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6044] 4 == 2
(push) ; 2949
; [else-branch 6044] 4 != 2
(pop) ; 2949
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2949
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2949
; 0,00s
; (get-info :all-statistics)
(push) ; 2949
; [then-branch 6045] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6046] 4 == 2
(push) ; 2950
; [else-branch 6046] 4 != 2
(pop) ; 2950
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2950
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2950
; 0,00s
; (get-info :all-statistics)
(push) ; 2950
; [then-branch 6047] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6048] 4 == 2
(push) ; 2951
; [else-branch 6048] 4 != 2
(pop) ; 2951
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2951
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2951
; 0,00s
; (get-info :all-statistics)
(push) ; 2951
; [then-branch 6049] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6050] 4 == 2
(push) ; 2952
; [else-branch 6050] 4 != 2
(pop) ; 2952
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2952
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2952
; 0,00s
; (get-info :all-statistics)
(push) ; 2952
; [then-branch 6051] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6052] 4 == 2
(push) ; 2953
; [else-branch 6052] 4 != 2
(pop) ; 2953
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2953
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2953
; 0,00s
; (get-info :all-statistics)
(push) ; 2953
; [then-branch 6053] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6054] 4 == 2
(push) ; 2954
; [else-branch 6054] 4 != 2
(pop) ; 2954
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2954
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2954
; 0,00s
; (get-info :all-statistics)
(push) ; 2954
; [then-branch 6055] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6056] 4 == 2
(push) ; 2955
; [else-branch 6056] 4 != 2
(pop) ; 2955
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2955
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2955
; 0,00s
; (get-info :all-statistics)
(push) ; 2955
; [then-branch 6057] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6058] 4 == 2
(push) ; 2956
; [else-branch 6058] 4 != 2
(pop) ; 2956
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2956
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2956
; 0,00s
; (get-info :all-statistics)
(push) ; 2956
; [then-branch 6059] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6060] 4 == 2
(push) ; 2957
; [else-branch 6060] 4 != 2
(pop) ; 2957
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2957
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2957
; 0,00s
; (get-info :all-statistics)
(push) ; 2957
; [then-branch 6061] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6062] 4 == 2
(push) ; 2958
; [else-branch 6062] 4 != 2
(pop) ; 2958
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2958
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2958
; 0,00s
; (get-info :all-statistics)
(push) ; 2958
; [then-branch 6063] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6064] 4 == 2
(push) ; 2959
; [else-branch 6064] 4 != 2
(pop) ; 2959
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2959
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2959
; 0,00s
; (get-info :all-statistics)
(push) ; 2959
; [then-branch 6065] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6066] 4 == 2
(push) ; 2960
; [else-branch 6066] 4 != 2
(pop) ; 2960
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2960
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2960
; 0,00s
; (get-info :all-statistics)
(push) ; 2960
; [then-branch 6067] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6068] 4 == 2
(push) ; 2961
; [else-branch 6068] 4 != 2
(pop) ; 2961
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2961
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2961
; 0,00s
; (get-info :all-statistics)
(push) ; 2961
; [then-branch 6069] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6070] 4 == 2
(push) ; 2962
; [else-branch 6070] 4 != 2
(pop) ; 2962
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2962
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2962
; 0,00s
; (get-info :all-statistics)
(push) ; 2962
; [then-branch 6071] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6072] 4 == 2
(push) ; 2963
; [else-branch 6072] 4 != 2
(pop) ; 2963
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2963
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2963
; 0,00s
; (get-info :all-statistics)
(push) ; 2963
; [then-branch 6073] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6074] 4 == 2
(push) ; 2964
; [else-branch 6074] 4 != 2
(pop) ; 2964
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2964
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2964
; 0,00s
; (get-info :all-statistics)
(push) ; 2964
; [then-branch 6075] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6076] 4 == 2
(push) ; 2965
; [else-branch 6076] 4 != 2
(pop) ; 2965
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2965
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2965
; 0,00s
; (get-info :all-statistics)
(push) ; 2965
; [then-branch 6077] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6078] 4 == 2
(push) ; 2966
; [else-branch 6078] 4 != 2
(pop) ; 2966
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2966
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2966
; 0,00s
; (get-info :all-statistics)
(push) ; 2966
; [then-branch 6079] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6080] 4 == 2
(push) ; 2967
; [else-branch 6080] 4 != 2
(pop) ; 2967
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2967
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2967
; 0,00s
; (get-info :all-statistics)
(push) ; 2967
; [then-branch 6081] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6082] 4 == 2
(push) ; 2968
; [else-branch 6082] 4 != 2
(pop) ; 2968
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2968
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2968
; 0,00s
; (get-info :all-statistics)
(push) ; 2968
; [then-branch 6083] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6084] 4 == 2
(push) ; 2969
; [else-branch 6084] 4 != 2
(pop) ; 2969
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2969
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2969
; 0,00s
; (get-info :all-statistics)
(push) ; 2969
; [then-branch 6085] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6086] 4 == 2
(push) ; 2970
; [else-branch 6086] 4 != 2
(pop) ; 2970
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2970
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2970
; 0,00s
; (get-info :all-statistics)
(push) ; 2970
; [then-branch 6087] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6088] 4 == 2
(push) ; 2971
; [else-branch 6088] 4 != 2
(pop) ; 2971
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2971
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2971
; 0,00s
; (get-info :all-statistics)
(push) ; 2971
; [then-branch 6089] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6090] 4 == 2
(push) ; 2972
; [else-branch 6090] 4 != 2
(pop) ; 2972
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2972
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2972
; 0,00s
; (get-info :all-statistics)
(push) ; 2972
; [then-branch 6091] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6092] 4 == 2
(push) ; 2973
; [else-branch 6092] 4 != 2
(pop) ; 2973
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2973
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2973
; 0,00s
; (get-info :all-statistics)
(push) ; 2973
; [then-branch 6093] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6094] 4 == 2
(push) ; 2974
; [else-branch 6094] 4 != 2
(pop) ; 2974
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2974
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2974
; 0,00s
; (get-info :all-statistics)
(push) ; 2974
; [then-branch 6095] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6096] 4 == 2
(push) ; 2975
; [else-branch 6096] 4 != 2
(pop) ; 2975
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2975
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2975
; 0,00s
; (get-info :all-statistics)
(push) ; 2975
; [then-branch 6097] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6098] 4 == 2
(push) ; 2976
; [else-branch 6098] 4 != 2
(pop) ; 2976
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2976
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2976
; 0,00s
; (get-info :all-statistics)
(push) ; 2976
; [then-branch 6099] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6100] 4 == 2
(push) ; 2977
; [else-branch 6100] 4 != 2
(pop) ; 2977
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2977
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2977
; 0,00s
; (get-info :all-statistics)
(push) ; 2977
; [then-branch 6101] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6102] 4 == 2
(push) ; 2978
; [else-branch 6102] 4 != 2
(pop) ; 2978
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2978
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2978
; 0,00s
; (get-info :all-statistics)
(push) ; 2978
; [then-branch 6103] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6104] 4 == 2
(push) ; 2979
; [else-branch 6104] 4 != 2
(pop) ; 2979
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2979
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2979
; 0,00s
; (get-info :all-statistics)
(push) ; 2979
; [then-branch 6105] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6106] 4 == 2
(push) ; 2980
; [else-branch 6106] 4 != 2
(pop) ; 2980
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2980
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2980
; 0,00s
; (get-info :all-statistics)
(push) ; 2980
; [then-branch 6107] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6108] 4 == 2
(push) ; 2981
; [else-branch 6108] 4 != 2
(pop) ; 2981
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2981
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2981
; 0,00s
; (get-info :all-statistics)
(push) ; 2981
; [then-branch 6109] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6110] 4 == 2
(push) ; 2982
; [else-branch 6110] 4 != 2
(pop) ; 2982
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2982
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2982
; 0,00s
; (get-info :all-statistics)
(push) ; 2982
; [then-branch 6111] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6112] 4 == 2
(push) ; 2983
; [else-branch 6112] 4 != 2
(pop) ; 2983
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2983
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2983
; 0,00s
; (get-info :all-statistics)
(push) ; 2983
; [then-branch 6113] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6114] 4 == 2
(push) ; 2984
; [else-branch 6114] 4 != 2
(pop) ; 2984
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2984
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2984
; 0,00s
; (get-info :all-statistics)
(push) ; 2984
; [then-branch 6115] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6116] 4 == 2
(push) ; 2985
; [else-branch 6116] 4 != 2
(pop) ; 2985
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2985
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2985
; 0,00s
; (get-info :all-statistics)
(push) ; 2985
; [then-branch 6117] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6118] 4 == 2
(push) ; 2986
; [else-branch 6118] 4 != 2
(pop) ; 2986
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2986
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2986
; 0,00s
; (get-info :all-statistics)
(push) ; 2986
; [then-branch 6119] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6120] 4 == 2
(push) ; 2987
; [else-branch 6120] 4 != 2
(pop) ; 2987
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2987
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2987
; 0,00s
; (get-info :all-statistics)
(push) ; 2987
; [then-branch 6121] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6122] 4 == 2
(push) ; 2988
; [else-branch 6122] 4 != 2
(pop) ; 2988
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2988
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2988
; 0,00s
; (get-info :all-statistics)
(push) ; 2988
; [then-branch 6123] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6124] 4 == 2
(push) ; 2989
; [else-branch 6124] 4 != 2
(pop) ; 2989
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2989
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2989
; 0,00s
; (get-info :all-statistics)
(push) ; 2989
; [then-branch 6125] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6126] 4 == 2
(push) ; 2990
; [else-branch 6126] 4 != 2
(pop) ; 2990
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2990
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2990
; 0,00s
; (get-info :all-statistics)
(push) ; 2990
; [then-branch 6127] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6128] 4 == 2
(push) ; 2991
; [else-branch 6128] 4 != 2
(pop) ; 2991
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2991
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2991
; 0,00s
; (get-info :all-statistics)
(push) ; 2991
; [then-branch 6129] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6130] 4 == 2
(push) ; 2992
; [else-branch 6130] 4 != 2
(pop) ; 2992
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2992
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2992
; 0,00s
; (get-info :all-statistics)
(push) ; 2992
; [then-branch 6131] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6132] 4 == 2
(push) ; 2993
; [else-branch 6132] 4 != 2
(pop) ; 2993
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2993
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2993
; 0,00s
; (get-info :all-statistics)
(push) ; 2993
; [then-branch 6133] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6134] 4 == 2
(push) ; 2994
; [else-branch 6134] 4 != 2
(pop) ; 2994
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2994
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2994
; 0,00s
; (get-info :all-statistics)
(push) ; 2994
; [then-branch 6135] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6136] 4 == 2
(push) ; 2995
; [else-branch 6136] 4 != 2
(pop) ; 2995
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2995
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2995
; 0,00s
; (get-info :all-statistics)
(push) ; 2995
; [then-branch 6137] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6138] 4 == 2
(push) ; 2996
; [else-branch 6138] 4 != 2
(pop) ; 2996
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2996
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2996
; 0,00s
; (get-info :all-statistics)
(push) ; 2996
; [then-branch 6139] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6140] 4 == 2
(push) ; 2997
; [else-branch 6140] 4 != 2
(pop) ; 2997
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2997
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2997
; 0,00s
; (get-info :all-statistics)
(push) ; 2997
; [then-branch 6141] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6142] 4 == 2
(push) ; 2998
; [else-branch 6142] 4 != 2
(pop) ; 2998
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2998
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2998
; 0,00s
; (get-info :all-statistics)
(push) ; 2998
; [then-branch 6143] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6144] 4 == 2
(push) ; 2999
; [else-branch 6144] 4 != 2
(pop) ; 2999
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 2999
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 2999
; 0,00s
; (get-info :all-statistics)
(push) ; 2999
; [then-branch 6145] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6146] 4 == 2
(push) ; 3000
; [else-branch 6146] 4 != 2
(pop) ; 3000
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3000
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3000
; 0,00s
; (get-info :all-statistics)
(push) ; 3000
; [then-branch 6147] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6148] 4 == 2
(push) ; 3001
; [else-branch 6148] 4 != 2
(pop) ; 3001
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3001
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3001
; 0,00s
; (get-info :all-statistics)
(push) ; 3001
; [then-branch 6149] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6150] 4 == 2
(push) ; 3002
; [else-branch 6150] 4 != 2
(pop) ; 3002
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3002
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3002
; 0,00s
; (get-info :all-statistics)
(push) ; 3002
; [then-branch 6151] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6152] 4 == 2
(push) ; 3003
; [else-branch 6152] 4 != 2
(pop) ; 3003
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3003
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3003
; 0,00s
; (get-info :all-statistics)
(push) ; 3003
; [then-branch 6153] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6154] 4 == 2
(push) ; 3004
; [else-branch 6154] 4 != 2
(pop) ; 3004
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3004
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3004
; 0,00s
; (get-info :all-statistics)
(push) ; 3004
; [then-branch 6155] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6156] 4 == 2
(push) ; 3005
; [else-branch 6156] 4 != 2
(pop) ; 3005
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3005
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3005
; 0,00s
; (get-info :all-statistics)
(push) ; 3005
; [then-branch 6157] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6158] 4 == 2
(push) ; 3006
; [else-branch 6158] 4 != 2
(pop) ; 3006
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3006
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3006
; 0,00s
; (get-info :all-statistics)
(push) ; 3006
; [then-branch 6159] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6160] 4 == 2
(push) ; 3007
; [else-branch 6160] 4 != 2
(pop) ; 3007
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3007
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3007
; 0,00s
; (get-info :all-statistics)
(push) ; 3007
; [then-branch 6161] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6162] 4 == 2
(push) ; 3008
; [else-branch 6162] 4 != 2
(pop) ; 3008
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3008
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3008
; 0,00s
; (get-info :all-statistics)
(push) ; 3008
; [then-branch 6163] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6164] 4 == 2
(push) ; 3009
; [else-branch 6164] 4 != 2
(pop) ; 3009
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3009
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3009
; 0,00s
; (get-info :all-statistics)
(push) ; 3009
; [then-branch 6165] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6166] 4 == 2
(push) ; 3010
; [else-branch 6166] 4 != 2
(pop) ; 3010
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3010
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3010
; 0,00s
; (get-info :all-statistics)
(push) ; 3010
; [then-branch 6167] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6168] 4 == 2
(push) ; 3011
; [else-branch 6168] 4 != 2
(pop) ; 3011
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3011
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3011
; 0,00s
; (get-info :all-statistics)
(push) ; 3011
; [then-branch 6169] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6170] 4 == 2
(push) ; 3012
; [else-branch 6170] 4 != 2
(pop) ; 3012
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3012
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3012
; 0,00s
; (get-info :all-statistics)
(push) ; 3012
; [then-branch 6171] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6172] 4 == 2
(push) ; 3013
; [else-branch 6172] 4 != 2
(pop) ; 3013
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3013
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3013
; 0,00s
; (get-info :all-statistics)
(push) ; 3013
; [then-branch 6173] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6174] 4 == 2
(push) ; 3014
; [else-branch 6174] 4 != 2
(pop) ; 3014
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3014
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3014
; 0,00s
; (get-info :all-statistics)
(push) ; 3014
; [then-branch 6175] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6176] 4 == 2
(push) ; 3015
; [else-branch 6176] 4 != 2
(pop) ; 3015
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3015
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3015
; 0,00s
; (get-info :all-statistics)
(push) ; 3015
; [then-branch 6177] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6178] 4 == 2
(push) ; 3016
; [else-branch 6178] 4 != 2
(pop) ; 3016
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3016
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3016
; 0,00s
; (get-info :all-statistics)
(push) ; 3016
; [then-branch 6179] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6180] 4 == 2
(push) ; 3017
; [else-branch 6180] 4 != 2
(pop) ; 3017
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3017
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3017
; 0,00s
; (get-info :all-statistics)
(push) ; 3017
; [then-branch 6181] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6182] 4 == 2
(push) ; 3018
; [else-branch 6182] 4 != 2
(pop) ; 3018
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3018
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3018
; 0,00s
; (get-info :all-statistics)
(push) ; 3018
; [then-branch 6183] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6184] 4 == 2
(push) ; 3019
; [else-branch 6184] 4 != 2
(pop) ; 3019
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3019
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3019
; 0,00s
; (get-info :all-statistics)
(push) ; 3019
; [then-branch 6185] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6186] 4 == 2
(push) ; 3020
; [else-branch 6186] 4 != 2
(pop) ; 3020
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3020
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3020
; 0,00s
; (get-info :all-statistics)
(push) ; 3020
; [then-branch 6187] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6188] 4 == 2
(push) ; 3021
; [else-branch 6188] 4 != 2
(pop) ; 3021
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3021
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3021
; 0,00s
; (get-info :all-statistics)
(push) ; 3021
; [then-branch 6189] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6190] 4 == 2
(push) ; 3022
; [else-branch 6190] 4 != 2
(pop) ; 3022
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3022
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3022
; 0,00s
; (get-info :all-statistics)
(push) ; 3022
; [then-branch 6191] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6192] 4 == 2
(push) ; 3023
; [else-branch 6192] 4 != 2
(pop) ; 3023
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3023
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3023
; 0,00s
; (get-info :all-statistics)
(push) ; 3023
; [then-branch 6193] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6194] 4 == 2
(push) ; 3024
; [else-branch 6194] 4 != 2
(pop) ; 3024
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3024
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3024
; 0,00s
; (get-info :all-statistics)
(push) ; 3024
; [then-branch 6195] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6196] 4 == 2
(push) ; 3025
; [else-branch 6196] 4 != 2
(pop) ; 3025
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3025
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3025
; 0,00s
; (get-info :all-statistics)
(push) ; 3025
; [then-branch 6197] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6198] 4 == 2
(push) ; 3026
; [else-branch 6198] 4 != 2
(pop) ; 3026
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3026
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3026
; 0,00s
; (get-info :all-statistics)
(push) ; 3026
; [then-branch 6199] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6200] 4 == 2
(push) ; 3027
; [else-branch 6200] 4 != 2
(pop) ; 3027
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3027
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3027
; 0,00s
; (get-info :all-statistics)
(push) ; 3027
; [then-branch 6201] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6202] 4 == 2
(push) ; 3028
; [else-branch 6202] 4 != 2
(pop) ; 3028
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3028
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3028
; 0,00s
; (get-info :all-statistics)
(push) ; 3028
; [then-branch 6203] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6204] 4 == 2
(push) ; 3029
; [else-branch 6204] 4 != 2
(pop) ; 3029
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3029
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3029
; 0,00s
; (get-info :all-statistics)
(push) ; 3029
; [then-branch 6205] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6206] 4 == 2
(push) ; 3030
; [else-branch 6206] 4 != 2
(pop) ; 3030
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3030
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3030
; 0,00s
; (get-info :all-statistics)
(push) ; 3030
; [then-branch 6207] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6208] 4 == 2
(push) ; 3031
; [else-branch 6208] 4 != 2
(pop) ; 3031
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3031
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3031
; 0,00s
; (get-info :all-statistics)
(push) ; 3031
; [then-branch 6209] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6210] 4 == 2
(push) ; 3032
; [else-branch 6210] 4 != 2
(pop) ; 3032
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3032
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3032
; 0,00s
; (get-info :all-statistics)
(push) ; 3032
; [then-branch 6211] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6212] 4 == 2
(push) ; 3033
; [else-branch 6212] 4 != 2
(pop) ; 3033
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3033
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3033
; 0,00s
; (get-info :all-statistics)
(push) ; 3033
; [then-branch 6213] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6214] 4 == 2
(push) ; 3034
; [else-branch 6214] 4 != 2
(pop) ; 3034
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3034
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3034
; 0,00s
; (get-info :all-statistics)
(push) ; 3034
; [then-branch 6215] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6216] 4 == 2
(push) ; 3035
; [else-branch 6216] 4 != 2
(pop) ; 3035
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3035
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3035
; 0,00s
; (get-info :all-statistics)
(push) ; 3035
; [then-branch 6217] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6218] 4 == 2
(push) ; 3036
; [else-branch 6218] 4 != 2
(pop) ; 3036
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3036
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3036
; 0,00s
; (get-info :all-statistics)
(push) ; 3036
; [then-branch 6219] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6220] 4 == 2
(push) ; 3037
; [else-branch 6220] 4 != 2
(pop) ; 3037
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3037
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3037
; 0,00s
; (get-info :all-statistics)
(push) ; 3037
; [then-branch 6221] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6222] 4 == 2
(push) ; 3038
; [else-branch 6222] 4 != 2
(pop) ; 3038
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3038
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3038
; 0,00s
; (get-info :all-statistics)
(push) ; 3038
; [then-branch 6223] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6224] 4 == 2
(push) ; 3039
; [else-branch 6224] 4 != 2
(pop) ; 3039
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3039
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3039
; 0,00s
; (get-info :all-statistics)
(push) ; 3039
; [then-branch 6225] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6226] 4 == 2
(push) ; 3040
; [else-branch 6226] 4 != 2
(pop) ; 3040
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3040
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3040
; 0,00s
; (get-info :all-statistics)
(push) ; 3040
; [then-branch 6227] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6228] 4 == 2
(push) ; 3041
; [else-branch 6228] 4 != 2
(pop) ; 3041
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3041
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3041
; 0,00s
; (get-info :all-statistics)
(push) ; 3041
; [then-branch 6229] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6230] 4 == 2
(push) ; 3042
; [else-branch 6230] 4 != 2
(pop) ; 3042
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3042
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3042
; 0,00s
; (get-info :all-statistics)
(push) ; 3042
; [then-branch 6231] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6232] 4 == 2
(push) ; 3043
; [else-branch 6232] 4 != 2
(pop) ; 3043
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3043
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3043
; 0,00s
; (get-info :all-statistics)
(push) ; 3043
; [then-branch 6233] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6234] 4 == 2
(push) ; 3044
; [else-branch 6234] 4 != 2
(pop) ; 3044
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3044
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3044
; 0,00s
; (get-info :all-statistics)
(push) ; 3044
; [then-branch 6235] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6236] 4 == 2
(push) ; 3045
; [else-branch 6236] 4 != 2
(pop) ; 3045
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3045
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3045
; 0,00s
; (get-info :all-statistics)
(push) ; 3045
; [then-branch 6237] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6238] 4 == 2
(push) ; 3046
; [else-branch 6238] 4 != 2
(pop) ; 3046
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3046
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3046
; 0,00s
; (get-info :all-statistics)
(push) ; 3046
; [then-branch 6239] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6240] 4 == 2
(push) ; 3047
; [else-branch 6240] 4 != 2
(pop) ; 3047
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3047
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3047
; 0,00s
; (get-info :all-statistics)
(push) ; 3047
; [then-branch 6241] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6242] 4 == 2
(push) ; 3048
; [else-branch 6242] 4 != 2
(pop) ; 3048
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3048
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3048
; 0,00s
; (get-info :all-statistics)
(push) ; 3048
; [then-branch 6243] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6244] 4 == 2
(push) ; 3049
; [else-branch 6244] 4 != 2
(pop) ; 3049
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3049
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3049
; 0,00s
; (get-info :all-statistics)
(push) ; 3049
; [then-branch 6245] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6246] 4 == 2
(push) ; 3050
; [else-branch 6246] 4 != 2
(pop) ; 3050
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3050
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3050
; 0,00s
; (get-info :all-statistics)
(push) ; 3050
; [then-branch 6247] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6248] 4 == 2
(push) ; 3051
; [else-branch 6248] 4 != 2
(pop) ; 3051
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3051
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3051
; 0,00s
; (get-info :all-statistics)
(push) ; 3051
; [then-branch 6249] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6250] 4 == 2
(push) ; 3052
; [else-branch 6250] 4 != 2
(pop) ; 3052
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3052
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3052
; 0,00s
; (get-info :all-statistics)
(push) ; 3052
; [then-branch 6251] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6252] 4 == 2
(push) ; 3053
; [else-branch 6252] 4 != 2
(pop) ; 3053
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3053
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3053
; 0,00s
; (get-info :all-statistics)
(push) ; 3053
; [then-branch 6253] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6254] 4 == 2
(push) ; 3054
; [else-branch 6254] 4 != 2
(pop) ; 3054
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3054
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3054
; 0,00s
; (get-info :all-statistics)
(push) ; 3054
; [then-branch 6255] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6256] 4 == 2
(push) ; 3055
; [else-branch 6256] 4 != 2
(pop) ; 3055
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3055
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3055
; 0,00s
; (get-info :all-statistics)
(push) ; 3055
; [then-branch 6257] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6258] 4 == 2
(push) ; 3056
; [else-branch 6258] 4 != 2
(pop) ; 3056
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3056
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3056
; 0,00s
; (get-info :all-statistics)
(push) ; 3056
; [then-branch 6259] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6260] 4 == 2
(push) ; 3057
; [else-branch 6260] 4 != 2
(pop) ; 3057
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3057
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3057
; 0,00s
; (get-info :all-statistics)
(push) ; 3057
; [then-branch 6261] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6262] 4 == 2
(push) ; 3058
; [else-branch 6262] 4 != 2
(pop) ; 3058
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3058
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3058
; 0,00s
; (get-info :all-statistics)
(push) ; 3058
; [then-branch 6263] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6264] 4 == 2
(push) ; 3059
; [else-branch 6264] 4 != 2
(pop) ; 3059
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3059
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3059
; 0,00s
; (get-info :all-statistics)
(push) ; 3059
; [then-branch 6265] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6266] 4 == 2
(push) ; 3060
; [else-branch 6266] 4 != 2
(pop) ; 3060
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3060
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3060
; 0,00s
; (get-info :all-statistics)
(push) ; 3060
; [then-branch 6267] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6268] 4 == 2
(push) ; 3061
; [else-branch 6268] 4 != 2
(pop) ; 3061
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3061
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3061
; 0,00s
; (get-info :all-statistics)
(push) ; 3061
; [then-branch 6269] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6270] 4 == 2
(push) ; 3062
; [else-branch 6270] 4 != 2
(pop) ; 3062
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3062
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3062
; 0,00s
; (get-info :all-statistics)
(push) ; 3062
; [then-branch 6271] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6272] 4 == 2
(push) ; 3063
; [else-branch 6272] 4 != 2
(pop) ; 3063
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3063
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3063
; 0,00s
; (get-info :all-statistics)
(push) ; 3063
; [then-branch 6273] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6274] 4 == 2
(push) ; 3064
; [else-branch 6274] 4 != 2
(pop) ; 3064
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3064
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3064
; 0,00s
; (get-info :all-statistics)
(push) ; 3064
; [then-branch 6275] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6276] 4 == 2
(push) ; 3065
; [else-branch 6276] 4 != 2
(pop) ; 3065
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3065
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3065
; 0,00s
; (get-info :all-statistics)
(push) ; 3065
; [then-branch 6277] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6278] 4 == 2
(push) ; 3066
; [else-branch 6278] 4 != 2
(pop) ; 3066
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3066
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3066
; 0,00s
; (get-info :all-statistics)
(push) ; 3066
; [then-branch 6279] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6280] 4 == 2
(push) ; 3067
; [else-branch 6280] 4 != 2
(pop) ; 3067
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3067
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3067
; 0,00s
; (get-info :all-statistics)
(push) ; 3067
; [then-branch 6281] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6282] 4 == 2
(push) ; 3068
; [else-branch 6282] 4 != 2
(pop) ; 3068
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3068
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3068
; 0,00s
; (get-info :all-statistics)
(push) ; 3068
; [then-branch 6283] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6284] 4 == 2
(push) ; 3069
; [else-branch 6284] 4 != 2
(pop) ; 3069
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3069
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3069
; 0,00s
; (get-info :all-statistics)
(push) ; 3069
; [then-branch 6285] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6286] 4 == 2
(push) ; 3070
; [else-branch 6286] 4 != 2
(pop) ; 3070
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3070
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3070
; 0,00s
; (get-info :all-statistics)
(push) ; 3070
; [then-branch 6287] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6288] 4 == 2
(push) ; 3071
; [else-branch 6288] 4 != 2
(pop) ; 3071
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3071
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3071
; 0,00s
; (get-info :all-statistics)
(push) ; 3071
; [then-branch 6289] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6290] 4 == 2
(push) ; 3072
; [else-branch 6290] 4 != 2
(pop) ; 3072
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3072
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3072
; 0,00s
; (get-info :all-statistics)
(push) ; 3072
; [then-branch 6291] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6292] 4 == 2
(push) ; 3073
; [else-branch 6292] 4 != 2
(pop) ; 3073
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3073
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3073
; 0,00s
; (get-info :all-statistics)
(push) ; 3073
; [then-branch 6293] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6294] 4 == 2
(push) ; 3074
; [else-branch 6294] 4 != 2
(pop) ; 3074
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3074
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3074
; 0,00s
; (get-info :all-statistics)
(push) ; 3074
; [then-branch 6295] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6296] 4 == 2
(push) ; 3075
; [else-branch 6296] 4 != 2
(pop) ; 3075
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3075
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3075
; 0,00s
; (get-info :all-statistics)
(push) ; 3075
; [then-branch 6297] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6298] 4 == 2
(push) ; 3076
; [else-branch 6298] 4 != 2
(pop) ; 3076
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3076
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3076
; 0,00s
; (get-info :all-statistics)
(push) ; 3076
; [then-branch 6299] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6300] 4 == 2
(push) ; 3077
; [else-branch 6300] 4 != 2
(pop) ; 3077
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3077
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3077
; 0,00s
; (get-info :all-statistics)
(push) ; 3077
; [then-branch 6301] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6302] 4 == 2
(push) ; 3078
; [else-branch 6302] 4 != 2
(pop) ; 3078
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3078
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3078
; 0,00s
; (get-info :all-statistics)
(push) ; 3078
; [then-branch 6303] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6304] 4 == 2
(push) ; 3079
; [else-branch 6304] 4 != 2
(pop) ; 3079
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3079
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3079
; 0,00s
; (get-info :all-statistics)
(push) ; 3079
; [then-branch 6305] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6306] 4 == 2
(push) ; 3080
; [else-branch 6306] 4 != 2
(pop) ; 3080
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3080
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3080
; 0,00s
; (get-info :all-statistics)
(push) ; 3080
; [then-branch 6307] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6308] 4 == 2
(push) ; 3081
; [else-branch 6308] 4 != 2
(pop) ; 3081
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3081
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3081
; 0,00s
; (get-info :all-statistics)
(push) ; 3081
; [then-branch 6309] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6310] 4 == 2
(push) ; 3082
; [else-branch 6310] 4 != 2
(pop) ; 3082
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3082
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3082
; 0,00s
; (get-info :all-statistics)
(push) ; 3082
; [then-branch 6311] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6312] 4 == 2
(push) ; 3083
; [else-branch 6312] 4 != 2
(pop) ; 3083
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3083
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3083
; 0,00s
; (get-info :all-statistics)
(push) ; 3083
; [then-branch 6313] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6314] 4 == 2
(push) ; 3084
; [else-branch 6314] 4 != 2
(pop) ; 3084
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3084
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3084
; 0,00s
; (get-info :all-statistics)
(push) ; 3084
; [then-branch 6315] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6316] 4 == 2
(push) ; 3085
; [else-branch 6316] 4 != 2
(pop) ; 3085
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3085
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3085
; 0,00s
; (get-info :all-statistics)
(push) ; 3085
; [then-branch 6317] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6318] 4 == 2
(push) ; 3086
; [else-branch 6318] 4 != 2
(pop) ; 3086
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3086
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3086
; 0,00s
; (get-info :all-statistics)
(push) ; 3086
; [then-branch 6319] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6320] 4 == 2
(push) ; 3087
; [else-branch 6320] 4 != 2
(pop) ; 3087
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3087
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3087
; 0,00s
; (get-info :all-statistics)
(push) ; 3087
; [then-branch 6321] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6322] 4 == 2
(push) ; 3088
; [else-branch 6322] 4 != 2
(pop) ; 3088
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3088
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3088
; 0,00s
; (get-info :all-statistics)
(push) ; 3088
; [then-branch 6323] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6324] 4 == 2
(push) ; 3089
; [else-branch 6324] 4 != 2
(pop) ; 3089
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3089
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3089
; 0,00s
; (get-info :all-statistics)
(push) ; 3089
; [then-branch 6325] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6326] 4 == 2
(push) ; 3090
; [else-branch 6326] 4 != 2
(pop) ; 3090
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3090
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3090
; 0,00s
; (get-info :all-statistics)
(push) ; 3090
; [then-branch 6327] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6328] 4 == 2
(push) ; 3091
; [else-branch 6328] 4 != 2
(pop) ; 3091
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3091
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3091
; 0,00s
; (get-info :all-statistics)
(push) ; 3091
; [then-branch 6329] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6330] 4 == 2
(push) ; 3092
; [else-branch 6330] 4 != 2
(pop) ; 3092
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3092
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3092
; 0,00s
; (get-info :all-statistics)
(push) ; 3092
; [then-branch 6331] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6332] 4 == 2
(push) ; 3093
; [else-branch 6332] 4 != 2
(pop) ; 3093
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3093
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3093
; 0,00s
; (get-info :all-statistics)
(push) ; 3093
; [then-branch 6333] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6334] 4 == 2
(push) ; 3094
; [else-branch 6334] 4 != 2
(pop) ; 3094
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3094
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3094
; 0,00s
; (get-info :all-statistics)
(push) ; 3094
; [then-branch 6335] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6336] 4 == 2
(push) ; 3095
; [else-branch 6336] 4 != 2
(pop) ; 3095
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3095
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3095
; 0,00s
; (get-info :all-statistics)
(push) ; 3095
; [then-branch 6337] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6338] 4 == 2
(push) ; 3096
; [else-branch 6338] 4 != 2
(pop) ; 3096
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3096
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3096
; 0,00s
; (get-info :all-statistics)
(push) ; 3096
; [then-branch 6339] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6340] 4 == 2
(push) ; 3097
; [else-branch 6340] 4 != 2
(pop) ; 3097
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3097
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3097
; 0,00s
; (get-info :all-statistics)
(push) ; 3097
; [then-branch 6341] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6342] 4 == 2
(push) ; 3098
; [else-branch 6342] 4 != 2
(pop) ; 3098
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3098
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3098
; 0,00s
; (get-info :all-statistics)
(push) ; 3098
; [then-branch 6343] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6344] 4 == 2
(push) ; 3099
; [else-branch 6344] 4 != 2
(pop) ; 3099
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3099
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3099
; 0,00s
; (get-info :all-statistics)
(push) ; 3099
; [then-branch 6345] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6346] 4 == 2
(push) ; 3100
; [else-branch 6346] 4 != 2
(pop) ; 3100
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3100
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3100
; 0,00s
; (get-info :all-statistics)
(push) ; 3100
; [then-branch 6347] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6348] 4 == 2
(push) ; 3101
; [else-branch 6348] 4 != 2
(pop) ; 3101
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3101
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3101
; 0,00s
; (get-info :all-statistics)
(push) ; 3101
; [then-branch 6349] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6350] 4 == 2
(push) ; 3102
; [else-branch 6350] 4 != 2
(pop) ; 3102
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3102
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3102
; 0,00s
; (get-info :all-statistics)
(push) ; 3102
; [then-branch 6351] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6352] 4 == 2
(push) ; 3103
; [else-branch 6352] 4 != 2
(pop) ; 3103
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3103
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3103
; 0,00s
; (get-info :all-statistics)
(push) ; 3103
; [then-branch 6353] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6354] 4 == 2
(push) ; 3104
; [else-branch 6354] 4 != 2
(pop) ; 3104
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3104
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3104
; 0,00s
; (get-info :all-statistics)
(push) ; 3104
; [then-branch 6355] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6356] 4 == 2
(push) ; 3105
; [else-branch 6356] 4 != 2
(pop) ; 3105
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3105
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3105
; 0,00s
; (get-info :all-statistics)
(push) ; 3105
; [then-branch 6357] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6358] 4 == 2
(push) ; 3106
; [else-branch 6358] 4 != 2
(pop) ; 3106
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3106
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3106
; 0,00s
; (get-info :all-statistics)
(push) ; 3106
; [then-branch 6359] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6360] 4 == 2
(push) ; 3107
; [else-branch 6360] 4 != 2
(pop) ; 3107
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3107
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3107
; 0,00s
; (get-info :all-statistics)
(push) ; 3107
; [then-branch 6361] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6362] 4 == 2
(push) ; 3108
; [else-branch 6362] 4 != 2
(pop) ; 3108
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3108
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3108
; 0,00s
; (get-info :all-statistics)
(push) ; 3108
; [then-branch 6363] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6364] 4 == 2
(push) ; 3109
; [else-branch 6364] 4 != 2
(pop) ; 3109
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3109
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3109
; 0,00s
; (get-info :all-statistics)
(push) ; 3109
; [then-branch 6365] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6366] 4 == 2
(push) ; 3110
; [else-branch 6366] 4 != 2
(pop) ; 3110
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3110
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3110
; 0,00s
; (get-info :all-statistics)
(push) ; 3110
; [then-branch 6367] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6368] 4 == 2
(push) ; 3111
; [else-branch 6368] 4 != 2
(pop) ; 3111
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3111
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3111
; 0,00s
; (get-info :all-statistics)
(push) ; 3111
; [then-branch 6369] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6370] 4 == 2
(push) ; 3112
; [else-branch 6370] 4 != 2
(pop) ; 3112
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3112
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3112
; 0,00s
; (get-info :all-statistics)
(push) ; 3112
; [then-branch 6371] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6372] 4 == 2
(push) ; 3113
; [else-branch 6372] 4 != 2
(pop) ; 3113
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3113
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3113
; 0,00s
; (get-info :all-statistics)
(push) ; 3113
; [then-branch 6373] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6374] 4 == 2
(push) ; 3114
; [else-branch 6374] 4 != 2
(pop) ; 3114
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3114
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3114
; 0,00s
; (get-info :all-statistics)
(push) ; 3114
; [then-branch 6375] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6376] 4 == 2
(push) ; 3115
; [else-branch 6376] 4 != 2
(pop) ; 3115
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3115
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3115
; 0,00s
; (get-info :all-statistics)
(push) ; 3115
; [then-branch 6377] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6378] 4 == 2
(push) ; 3116
; [else-branch 6378] 4 != 2
(pop) ; 3116
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3116
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3116
; 0,00s
; (get-info :all-statistics)
(push) ; 3116
; [then-branch 6379] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6380] 4 == 2
(push) ; 3117
; [else-branch 6380] 4 != 2
(pop) ; 3117
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3117
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3117
; 0,00s
; (get-info :all-statistics)
(push) ; 3117
; [then-branch 6381] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6382] 4 == 2
(push) ; 3118
; [else-branch 6382] 4 != 2
(pop) ; 3118
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3118
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3118
; 0,00s
; (get-info :all-statistics)
(push) ; 3118
; [then-branch 6383] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6384] 4 == 2
(push) ; 3119
; [else-branch 6384] 4 != 2
(pop) ; 3119
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3119
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3119
; 0,00s
; (get-info :all-statistics)
(push) ; 3119
; [then-branch 6385] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6386] 4 == 2
(push) ; 3120
; [else-branch 6386] 4 != 2
(pop) ; 3120
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3120
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3120
; 0,00s
; (get-info :all-statistics)
(push) ; 3120
; [then-branch 6387] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6388] 4 == 2
(push) ; 3121
; [else-branch 6388] 4 != 2
(pop) ; 3121
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3121
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3121
; 0,00s
; (get-info :all-statistics)
(push) ; 3121
; [then-branch 6389] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6390] 4 == 2
(push) ; 3122
; [else-branch 6390] 4 != 2
(pop) ; 3122
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3122
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3122
; 0,00s
; (get-info :all-statistics)
(push) ; 3122
; [then-branch 6391] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6392] 4 == 2
(push) ; 3123
; [else-branch 6392] 4 != 2
(pop) ; 3123
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3123
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3123
; 0,00s
; (get-info :all-statistics)
(push) ; 3123
; [then-branch 6393] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6394] 4 == 2
(push) ; 3124
; [else-branch 6394] 4 != 2
(pop) ; 3124
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3124
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3124
; 0,00s
; (get-info :all-statistics)
(push) ; 3124
; [then-branch 6395] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6396] 4 == 2
(push) ; 3125
; [else-branch 6396] 4 != 2
(pop) ; 3125
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3125
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3125
; 0,00s
; (get-info :all-statistics)
(push) ; 3125
; [then-branch 6397] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6398] 4 == 2
(push) ; 3126
; [else-branch 6398] 4 != 2
(pop) ; 3126
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3126
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3126
; 0,00s
; (get-info :all-statistics)
(push) ; 3126
; [then-branch 6399] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6400] 4 == 2
(push) ; 3127
; [else-branch 6400] 4 != 2
(pop) ; 3127
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3127
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3127
; 0,00s
; (get-info :all-statistics)
(push) ; 3127
; [then-branch 6401] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6402] 4 == 2
(push) ; 3128
; [else-branch 6402] 4 != 2
(pop) ; 3128
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3128
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3128
; 0,00s
; (get-info :all-statistics)
(push) ; 3128
; [then-branch 6403] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6404] 4 == 2
(push) ; 3129
; [else-branch 6404] 4 != 2
(pop) ; 3129
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3129
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3129
; 0,00s
; (get-info :all-statistics)
(push) ; 3129
; [then-branch 6405] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6406] 4 == 2
(push) ; 3130
; [else-branch 6406] 4 != 2
(pop) ; 3130
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3130
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3130
; 0,00s
; (get-info :all-statistics)
(push) ; 3130
; [then-branch 6407] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6408] 4 == 2
(push) ; 3131
; [else-branch 6408] 4 != 2
(pop) ; 3131
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3131
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3131
; 0,00s
; (get-info :all-statistics)
(push) ; 3131
; [then-branch 6409] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6410] 4 == 2
(push) ; 3132
; [else-branch 6410] 4 != 2
(pop) ; 3132
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3132
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3132
; 0,00s
; (get-info :all-statistics)
(push) ; 3132
; [then-branch 6411] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6412] 4 == 2
(push) ; 3133
; [else-branch 6412] 4 != 2
(pop) ; 3133
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3133
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3133
; 0,00s
; (get-info :all-statistics)
(push) ; 3133
; [then-branch 6413] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6414] 4 == 2
(push) ; 3134
; [else-branch 6414] 4 != 2
(pop) ; 3134
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3134
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3134
; 0,00s
; (get-info :all-statistics)
(push) ; 3134
; [then-branch 6415] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6416] 4 == 2
(push) ; 3135
; [else-branch 6416] 4 != 2
(pop) ; 3135
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3135
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3135
; 0,00s
; (get-info :all-statistics)
(push) ; 3135
; [then-branch 6417] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6418] 4 == 2
(push) ; 3136
; [else-branch 6418] 4 != 2
(pop) ; 3136
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3136
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3136
; 0,00s
; (get-info :all-statistics)
(push) ; 3136
; [then-branch 6419] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6420] 4 == 2
(push) ; 3137
; [else-branch 6420] 4 != 2
(pop) ; 3137
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3137
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3137
; 0,00s
; (get-info :all-statistics)
(push) ; 3137
; [then-branch 6421] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6422] 4 == 2
(push) ; 3138
; [else-branch 6422] 4 != 2
(pop) ; 3138
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3138
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3138
; 0,00s
; (get-info :all-statistics)
(push) ; 3138
; [then-branch 6423] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6424] 4 == 2
(push) ; 3139
; [else-branch 6424] 4 != 2
(pop) ; 3139
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3139
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3139
; 0,00s
; (get-info :all-statistics)
(push) ; 3139
; [then-branch 6425] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6426] 4 == 2
(push) ; 3140
; [else-branch 6426] 4 != 2
(pop) ; 3140
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3140
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3140
; 0,00s
; (get-info :all-statistics)
(push) ; 3140
; [then-branch 6427] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6428] 4 == 2
(push) ; 3141
; [else-branch 6428] 4 != 2
(pop) ; 3141
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3141
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3141
; 0,00s
; (get-info :all-statistics)
(push) ; 3141
; [then-branch 6429] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6430] 4 == 2
(push) ; 3142
; [else-branch 6430] 4 != 2
(pop) ; 3142
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3142
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3142
; 0,00s
; (get-info :all-statistics)
(push) ; 3142
; [then-branch 6431] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6432] 4 == 2
(push) ; 3143
; [else-branch 6432] 4 != 2
(pop) ; 3143
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3143
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3143
; 0,00s
; (get-info :all-statistics)
(push) ; 3143
; [then-branch 6433] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6434] 4 == 2
(push) ; 3144
; [else-branch 6434] 4 != 2
(pop) ; 3144
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3144
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3144
; 0,00s
; (get-info :all-statistics)
(push) ; 3144
; [then-branch 6435] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6436] 4 == 2
(push) ; 3145
; [else-branch 6436] 4 != 2
(pop) ; 3145
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3145
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3145
; 0,00s
; (get-info :all-statistics)
(push) ; 3145
; [then-branch 6437] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6438] 4 == 2
(push) ; 3146
; [else-branch 6438] 4 != 2
(pop) ; 3146
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3146
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3146
; 0,00s
; (get-info :all-statistics)
(push) ; 3146
; [then-branch 6439] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6440] 4 == 2
(push) ; 3147
; [else-branch 6440] 4 != 2
(pop) ; 3147
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3147
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3147
; 0,00s
; (get-info :all-statistics)
(push) ; 3147
; [then-branch 6441] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6442] 4 == 2
(push) ; 3148
; [else-branch 6442] 4 != 2
(pop) ; 3148
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3148
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3148
; 0,00s
; (get-info :all-statistics)
(push) ; 3148
; [then-branch 6443] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6444] 4 == 2
(push) ; 3149
; [else-branch 6444] 4 != 2
(pop) ; 3149
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3149
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3149
; 0,00s
; (get-info :all-statistics)
(push) ; 3149
; [then-branch 6445] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6446] 4 == 2
(push) ; 3150
; [else-branch 6446] 4 != 2
(pop) ; 3150
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3150
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3150
; 0,00s
; (get-info :all-statistics)
(push) ; 3150
; [then-branch 6447] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6448] 4 == 2
(push) ; 3151
; [else-branch 6448] 4 != 2
(pop) ; 3151
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3151
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3151
; 0,00s
; (get-info :all-statistics)
(push) ; 3151
; [then-branch 6449] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6450] 4 == 2
(push) ; 3152
; [else-branch 6450] 4 != 2
(pop) ; 3152
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3152
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3152
; 0,00s
; (get-info :all-statistics)
(push) ; 3152
; [then-branch 6451] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6452] 4 == 2
(push) ; 3153
; [else-branch 6452] 4 != 2
(pop) ; 3153
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3153
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3153
; 0,00s
; (get-info :all-statistics)
(push) ; 3153
; [then-branch 6453] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6454] 4 == 2
(push) ; 3154
; [else-branch 6454] 4 != 2
(pop) ; 3154
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3154
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3154
; 0,00s
; (get-info :all-statistics)
(push) ; 3154
; [then-branch 6455] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6456] 4 == 2
(push) ; 3155
; [else-branch 6456] 4 != 2
(pop) ; 3155
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3155
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3155
; 0,00s
; (get-info :all-statistics)
(push) ; 3155
; [then-branch 6457] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6458] 4 == 2
(push) ; 3156
; [else-branch 6458] 4 != 2
(pop) ; 3156
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3156
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3156
; 0,00s
; (get-info :all-statistics)
(push) ; 3156
; [then-branch 6459] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6460] 4 == 2
(push) ; 3157
; [else-branch 6460] 4 != 2
(pop) ; 3157
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3157
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3157
; 0,00s
; (get-info :all-statistics)
(push) ; 3157
; [then-branch 6461] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6462] 4 == 2
(push) ; 3158
; [else-branch 6462] 4 != 2
(pop) ; 3158
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3158
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3158
; 0,00s
; (get-info :all-statistics)
(push) ; 3158
; [then-branch 6463] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6464] 4 == 2
(push) ; 3159
; [else-branch 6464] 4 != 2
(pop) ; 3159
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3159
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3159
; 0,00s
; (get-info :all-statistics)
(push) ; 3159
; [then-branch 6465] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6466] 4 == 2
(push) ; 3160
; [else-branch 6466] 4 != 2
(pop) ; 3160
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3160
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3160
; 0,00s
; (get-info :all-statistics)
(push) ; 3160
; [then-branch 6467] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6468] 4 == 2
(push) ; 3161
; [else-branch 6468] 4 != 2
(pop) ; 3161
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3161
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3161
; 0,00s
; (get-info :all-statistics)
(push) ; 3161
; [then-branch 6469] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6470] 4 == 2
(push) ; 3162
; [else-branch 6470] 4 != 2
(pop) ; 3162
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3162
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3162
; 0,00s
; (get-info :all-statistics)
(push) ; 3162
; [then-branch 6471] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6472] 4 == 2
(push) ; 3163
; [else-branch 6472] 4 != 2
(pop) ; 3163
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3163
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3163
; 0,00s
; (get-info :all-statistics)
(push) ; 3163
; [then-branch 6473] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6474] 4 == 2
(push) ; 3164
; [else-branch 6474] 4 != 2
(pop) ; 3164
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3164
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3164
; 0,00s
; (get-info :all-statistics)
(push) ; 3164
; [then-branch 6475] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6476] 4 == 2
(push) ; 3165
; [else-branch 6476] 4 != 2
(pop) ; 3165
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3165
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3165
; 0,00s
; (get-info :all-statistics)
(push) ; 3165
; [then-branch 6477] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6478] 4 == 2
(push) ; 3166
; [else-branch 6478] 4 != 2
(pop) ; 3166
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3166
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3166
; 0,00s
; (get-info :all-statistics)
(push) ; 3166
; [then-branch 6479] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6480] 4 == 2
(push) ; 3167
; [else-branch 6480] 4 != 2
(pop) ; 3167
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3167
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3167
; 0,00s
; (get-info :all-statistics)
(push) ; 3167
; [then-branch 6481] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6482] 4 == 2
(push) ; 3168
; [else-branch 6482] 4 != 2
(pop) ; 3168
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3168
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3168
; 0,00s
; (get-info :all-statistics)
(push) ; 3168
; [then-branch 6483] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6484] 4 == 2
(push) ; 3169
; [else-branch 6484] 4 != 2
(pop) ; 3169
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3169
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3169
; 0,00s
; (get-info :all-statistics)
(push) ; 3169
; [then-branch 6485] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6486] 4 == 2
(push) ; 3170
; [else-branch 6486] 4 != 2
(pop) ; 3170
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3170
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3170
; 0,00s
; (get-info :all-statistics)
(push) ; 3170
; [then-branch 6487] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6488] 4 == 2
(push) ; 3171
; [else-branch 6488] 4 != 2
(pop) ; 3171
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3171
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3171
; 0,00s
; (get-info :all-statistics)
(push) ; 3171
; [then-branch 6489] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6490] 4 == 2
(push) ; 3172
; [else-branch 6490] 4 != 2
(pop) ; 3172
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3172
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3172
; 0,00s
; (get-info :all-statistics)
(push) ; 3172
; [then-branch 6491] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6492] 4 == 2
(push) ; 3173
; [else-branch 6492] 4 != 2
(pop) ; 3173
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3173
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3173
; 0,00s
; (get-info :all-statistics)
(push) ; 3173
; [then-branch 6493] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6494] 4 == 2
(push) ; 3174
; [else-branch 6494] 4 != 2
(pop) ; 3174
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3174
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3174
; 0,00s
; (get-info :all-statistics)
(push) ; 3174
; [then-branch 6495] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6496] 4 == 2
(push) ; 3175
; [else-branch 6496] 4 != 2
(pop) ; 3175
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3175
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3175
; 0,00s
; (get-info :all-statistics)
(push) ; 3175
; [then-branch 6497] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6498] 4 == 2
(push) ; 3176
; [else-branch 6498] 4 != 2
(pop) ; 3176
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3176
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3176
; 0,00s
; (get-info :all-statistics)
(push) ; 3176
; [then-branch 6499] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6500] 4 == 2
(push) ; 3177
; [else-branch 6500] 4 != 2
(pop) ; 3177
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3177
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3177
; 0,00s
; (get-info :all-statistics)
(push) ; 3177
; [then-branch 6501] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6502] 4 == 2
(push) ; 3178
; [else-branch 6502] 4 != 2
(pop) ; 3178
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3178
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3178
; 0,00s
; (get-info :all-statistics)
(push) ; 3178
; [then-branch 6503] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6504] 4 == 2
(push) ; 3179
; [else-branch 6504] 4 != 2
(pop) ; 3179
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3179
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3179
; 0,00s
; (get-info :all-statistics)
(push) ; 3179
; [then-branch 6505] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6506] 4 == 2
(push) ; 3180
; [else-branch 6506] 4 != 2
(pop) ; 3180
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3180
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3180
; 0,00s
; (get-info :all-statistics)
(push) ; 3180
; [then-branch 6507] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6508] 4 == 2
(push) ; 3181
; [else-branch 6508] 4 != 2
(pop) ; 3181
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3181
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3181
; 0,00s
; (get-info :all-statistics)
(push) ; 3181
; [then-branch 6509] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6510] 4 == 2
(push) ; 3182
; [else-branch 6510] 4 != 2
(pop) ; 3182
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3182
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3182
; 0,00s
; (get-info :all-statistics)
(push) ; 3182
; [then-branch 6511] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6512] 4 == 2
(push) ; 3183
; [else-branch 6512] 4 != 2
(pop) ; 3183
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3183
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3183
; 0,00s
; (get-info :all-statistics)
(push) ; 3183
; [then-branch 6513] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6514] 4 == 2
(push) ; 3184
; [else-branch 6514] 4 != 2
(pop) ; 3184
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3184
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3184
; 0,00s
; (get-info :all-statistics)
(push) ; 3184
; [then-branch 6515] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6516] 4 == 2
(push) ; 3185
; [else-branch 6516] 4 != 2
(pop) ; 3185
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3185
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3185
; 0,00s
; (get-info :all-statistics)
(push) ; 3185
; [then-branch 6517] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6518] 4 == 2
(push) ; 3186
; [else-branch 6518] 4 != 2
(pop) ; 3186
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3186
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3186
; 0,00s
; (get-info :all-statistics)
(push) ; 3186
; [then-branch 6519] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6520] 4 == 2
(push) ; 3187
; [else-branch 6520] 4 != 2
(pop) ; 3187
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3187
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3187
; 0,00s
; (get-info :all-statistics)
(push) ; 3187
; [then-branch 6521] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6522] 4 == 2
(push) ; 3188
; [else-branch 6522] 4 != 2
(pop) ; 3188
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3188
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3188
; 0,00s
; (get-info :all-statistics)
(push) ; 3188
; [then-branch 6523] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6524] 4 == 2
(push) ; 3189
; [else-branch 6524] 4 != 2
(pop) ; 3189
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3189
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3189
; 0,00s
; (get-info :all-statistics)
(push) ; 3189
; [then-branch 6525] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6526] 4 == 2
(push) ; 3190
; [else-branch 6526] 4 != 2
(pop) ; 3190
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3190
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3190
; 0,00s
; (get-info :all-statistics)
(push) ; 3190
; [then-branch 6527] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6528] 4 == 2
(push) ; 3191
; [else-branch 6528] 4 != 2
(pop) ; 3191
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3191
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3191
; 0,00s
; (get-info :all-statistics)
(push) ; 3191
; [then-branch 6529] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6530] 4 == 2
(push) ; 3192
; [else-branch 6530] 4 != 2
(pop) ; 3192
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3192
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3192
; 0,00s
; (get-info :all-statistics)
(push) ; 3192
; [then-branch 6531] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6532] 4 == 2
(push) ; 3193
; [else-branch 6532] 4 != 2
(pop) ; 3193
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3193
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3193
; 0,00s
; (get-info :all-statistics)
(push) ; 3193
; [then-branch 6533] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6534] 4 == 2
(push) ; 3194
; [else-branch 6534] 4 != 2
(pop) ; 3194
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3194
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3194
; 0,00s
; (get-info :all-statistics)
(push) ; 3194
; [then-branch 6535] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6536] 4 == 2
(push) ; 3195
; [else-branch 6536] 4 != 2
(pop) ; 3195
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3195
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3195
; 0,00s
; (get-info :all-statistics)
(push) ; 3195
; [then-branch 6537] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6538] 4 == 2
(push) ; 3196
; [else-branch 6538] 4 != 2
(pop) ; 3196
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3196
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3196
; 0,00s
; (get-info :all-statistics)
(push) ; 3196
; [then-branch 6539] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6540] 4 == 2
(push) ; 3197
; [else-branch 6540] 4 != 2
(pop) ; 3197
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3197
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3197
; 0,00s
; (get-info :all-statistics)
(push) ; 3197
; [then-branch 6541] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6542] 4 == 2
(push) ; 3198
; [else-branch 6542] 4 != 2
(pop) ; 3198
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3198
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3198
; 0,00s
; (get-info :all-statistics)
(push) ; 3198
; [then-branch 6543] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6544] 4 == 2
(push) ; 3199
; [else-branch 6544] 4 != 2
(pop) ; 3199
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3199
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3199
; 0,00s
; (get-info :all-statistics)
(push) ; 3199
; [then-branch 6545] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6546] 4 == 2
(push) ; 3200
; [else-branch 6546] 4 != 2
(pop) ; 3200
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3200
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3200
; 0,00s
; (get-info :all-statistics)
(push) ; 3200
; [then-branch 6547] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6548] 4 == 2
(push) ; 3201
; [else-branch 6548] 4 != 2
(pop) ; 3201
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3201
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3201
; 0,00s
; (get-info :all-statistics)
(push) ; 3201
; [then-branch 6549] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6550] 4 == 2
(push) ; 3202
; [else-branch 6550] 4 != 2
(pop) ; 3202
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3202
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3202
; 0,00s
; (get-info :all-statistics)
(push) ; 3202
; [then-branch 6551] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6552] 4 == 2
(push) ; 3203
; [else-branch 6552] 4 != 2
(pop) ; 3203
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3203
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3203
; 0,00s
; (get-info :all-statistics)
(push) ; 3203
; [then-branch 6553] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6554] 4 == 2
(push) ; 3204
; [else-branch 6554] 4 != 2
(pop) ; 3204
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3204
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3204
; 0,00s
; (get-info :all-statistics)
(push) ; 3204
; [then-branch 6555] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6556] 4 == 2
(push) ; 3205
; [else-branch 6556] 4 != 2
(pop) ; 3205
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3205
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3205
; 0,00s
; (get-info :all-statistics)
(push) ; 3205
; [then-branch 6557] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6558] 4 == 2
(push) ; 3206
; [else-branch 6558] 4 != 2
(pop) ; 3206
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3206
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3206
; 0,00s
; (get-info :all-statistics)
(push) ; 3206
; [then-branch 6559] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6560] 4 == 2
(push) ; 3207
; [else-branch 6560] 4 != 2
(pop) ; 3207
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3207
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3207
; 0,00s
; (get-info :all-statistics)
(push) ; 3207
; [then-branch 6561] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6562] 4 == 2
(push) ; 3208
; [else-branch 6562] 4 != 2
(pop) ; 3208
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3208
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3208
; 0,00s
; (get-info :all-statistics)
(push) ; 3208
; [then-branch 6563] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6564] 4 == 2
(push) ; 3209
; [else-branch 6564] 4 != 2
(pop) ; 3209
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3209
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3209
; 0,00s
; (get-info :all-statistics)
(push) ; 3209
; [then-branch 6565] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6566] 4 == 2
(push) ; 3210
; [else-branch 6566] 4 != 2
(pop) ; 3210
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3210
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3210
; 0,00s
; (get-info :all-statistics)
(push) ; 3210
; [then-branch 6567] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6568] 4 == 2
(push) ; 3211
; [else-branch 6568] 4 != 2
(pop) ; 3211
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3211
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3211
; 0,00s
; (get-info :all-statistics)
(push) ; 3211
; [then-branch 6569] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6570] 4 == 2
(push) ; 3212
; [else-branch 6570] 4 != 2
(pop) ; 3212
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3212
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3212
; 0,00s
; (get-info :all-statistics)
(push) ; 3212
; [then-branch 6571] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6572] 4 == 2
(push) ; 3213
; [else-branch 6572] 4 != 2
(pop) ; 3213
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3213
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3213
; 0,00s
; (get-info :all-statistics)
(push) ; 3213
; [then-branch 6573] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6574] 4 == 2
(push) ; 3214
; [else-branch 6574] 4 != 2
(pop) ; 3214
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3214
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3214
; 0,00s
; (get-info :all-statistics)
(push) ; 3214
; [then-branch 6575] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6576] 4 == 2
(push) ; 3215
; [else-branch 6576] 4 != 2
(pop) ; 3215
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3215
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3215
; 0,00s
; (get-info :all-statistics)
(push) ; 3215
; [then-branch 6577] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6578] 4 == 2
(push) ; 3216
; [else-branch 6578] 4 != 2
(pop) ; 3216
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3216
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3216
; 0,00s
; (get-info :all-statistics)
(push) ; 3216
; [then-branch 6579] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6580] 4 == 2
(push) ; 3217
; [else-branch 6580] 4 != 2
(pop) ; 3217
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3217
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3217
; 0,00s
; (get-info :all-statistics)
(push) ; 3217
; [then-branch 6581] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6582] 4 == 2
(push) ; 3218
; [else-branch 6582] 4 != 2
(pop) ; 3218
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3218
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3218
; 0,00s
; (get-info :all-statistics)
(push) ; 3218
; [then-branch 6583] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6584] 4 == 2
(push) ; 3219
; [else-branch 6584] 4 != 2
(pop) ; 3219
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3219
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3219
; 0,00s
; (get-info :all-statistics)
(push) ; 3219
; [then-branch 6585] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6586] 4 == 2
(push) ; 3220
; [else-branch 6586] 4 != 2
(pop) ; 3220
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3220
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3220
; 0,00s
; (get-info :all-statistics)
(push) ; 3220
; [then-branch 6587] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6588] 4 == 2
(push) ; 3221
; [else-branch 6588] 4 != 2
(pop) ; 3221
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3221
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3221
; 0,00s
; (get-info :all-statistics)
(push) ; 3221
; [then-branch 6589] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6590] 4 == 2
(push) ; 3222
; [else-branch 6590] 4 != 2
(pop) ; 3222
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3222
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3222
; 0,00s
; (get-info :all-statistics)
(push) ; 3222
; [then-branch 6591] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6592] 4 == 2
(push) ; 3223
; [else-branch 6592] 4 != 2
(pop) ; 3223
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3223
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3223
; 0,00s
; (get-info :all-statistics)
(push) ; 3223
; [then-branch 6593] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6594] 4 == 2
(push) ; 3224
; [else-branch 6594] 4 != 2
(pop) ; 3224
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3224
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3224
; 0,00s
; (get-info :all-statistics)
(push) ; 3224
; [then-branch 6595] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6596] 4 == 2
(push) ; 3225
; [else-branch 6596] 4 != 2
(pop) ; 3225
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3225
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3225
; 0,00s
; (get-info :all-statistics)
(push) ; 3225
; [then-branch 6597] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6598] 4 == 2
(push) ; 3226
; [else-branch 6598] 4 != 2
(pop) ; 3226
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3226
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3226
; 0,00s
; (get-info :all-statistics)
(push) ; 3226
; [then-branch 6599] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6600] 4 == 2
(push) ; 3227
; [else-branch 6600] 4 != 2
(pop) ; 3227
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3227
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3227
; 0,00s
; (get-info :all-statistics)
(push) ; 3227
; [then-branch 6601] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6602] 4 == 2
(push) ; 3228
; [else-branch 6602] 4 != 2
(pop) ; 3228
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3228
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3228
; 0,00s
; (get-info :all-statistics)
(push) ; 3228
; [then-branch 6603] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6604] 4 == 2
(push) ; 3229
; [else-branch 6604] 4 != 2
(pop) ; 3229
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3229
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3229
; 0,00s
; (get-info :all-statistics)
(push) ; 3229
; [then-branch 6605] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6606] 4 == 2
(push) ; 3230
; [else-branch 6606] 4 != 2
(pop) ; 3230
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3230
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3230
; 0,00s
; (get-info :all-statistics)
(push) ; 3230
; [then-branch 6607] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6608] 4 == 2
(push) ; 3231
; [else-branch 6608] 4 != 2
(pop) ; 3231
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3231
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3231
; 0,00s
; (get-info :all-statistics)
(push) ; 3231
; [then-branch 6609] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6610] 4 == 2
(push) ; 3232
; [else-branch 6610] 4 != 2
(pop) ; 3232
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3232
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3232
; 0,00s
; (get-info :all-statistics)
(push) ; 3232
; [then-branch 6611] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6612] 4 == 2
(push) ; 3233
; [else-branch 6612] 4 != 2
(pop) ; 3233
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3233
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3233
; 0,00s
; (get-info :all-statistics)
(push) ; 3233
; [then-branch 6613] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6614] 4 == 2
(push) ; 3234
; [else-branch 6614] 4 != 2
(pop) ; 3234
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3234
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3234
; 0,00s
; (get-info :all-statistics)
(push) ; 3234
; [then-branch 6615] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6616] 4 == 2
(push) ; 3235
; [else-branch 6616] 4 != 2
(pop) ; 3235
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3235
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3235
; 0,00s
; (get-info :all-statistics)
(push) ; 3235
; [then-branch 6617] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6618] 4 == 2
(push) ; 3236
; [else-branch 6618] 4 != 2
(pop) ; 3236
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3236
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3236
; 0,00s
; (get-info :all-statistics)
(push) ; 3236
; [then-branch 6619] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6620] 4 == 2
(push) ; 3237
; [else-branch 6620] 4 != 2
(pop) ; 3237
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3237
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3237
; 0,00s
; (get-info :all-statistics)
(push) ; 3237
; [then-branch 6621] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6622] 4 == 2
(push) ; 3238
; [else-branch 6622] 4 != 2
(pop) ; 3238
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3238
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3238
; 0,00s
; (get-info :all-statistics)
(push) ; 3238
; [then-branch 6623] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6624] 4 == 2
(push) ; 3239
; [else-branch 6624] 4 != 2
(pop) ; 3239
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3239
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3239
; 0,00s
; (get-info :all-statistics)
(push) ; 3239
; [then-branch 6625] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6626] 4 == 2
(push) ; 3240
; [else-branch 6626] 4 != 2
(pop) ; 3240
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3240
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3240
; 0,00s
; (get-info :all-statistics)
(push) ; 3240
; [then-branch 6627] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6628] 4 == 2
(push) ; 3241
; [else-branch 6628] 4 != 2
(pop) ; 3241
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3241
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3241
; 0,00s
; (get-info :all-statistics)
(push) ; 3241
; [then-branch 6629] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6630] 4 == 2
(push) ; 3242
; [else-branch 6630] 4 != 2
(pop) ; 3242
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3242
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3242
; 0,00s
; (get-info :all-statistics)
(push) ; 3242
; [then-branch 6631] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6632] 4 == 2
(push) ; 3243
; [else-branch 6632] 4 != 2
(pop) ; 3243
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3243
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3243
; 0,00s
; (get-info :all-statistics)
(push) ; 3243
; [then-branch 6633] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6634] 4 == 2
(push) ; 3244
; [else-branch 6634] 4 != 2
(pop) ; 3244
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3244
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3244
; 0,00s
; (get-info :all-statistics)
(push) ; 3244
; [then-branch 6635] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6636] 4 == 2
(push) ; 3245
; [else-branch 6636] 4 != 2
(pop) ; 3245
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3245
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3245
; 0,00s
; (get-info :all-statistics)
(push) ; 3245
; [then-branch 6637] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6638] 4 == 2
(push) ; 3246
; [else-branch 6638] 4 != 2
(pop) ; 3246
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3246
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3246
; 0,00s
; (get-info :all-statistics)
(push) ; 3246
; [then-branch 6639] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6640] 4 == 2
(push) ; 3247
; [else-branch 6640] 4 != 2
(pop) ; 3247
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3247
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3247
; 0,00s
; (get-info :all-statistics)
(push) ; 3247
; [then-branch 6641] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6642] 4 == 2
(push) ; 3248
; [else-branch 6642] 4 != 2
(pop) ; 3248
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3248
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3248
; 0,00s
; (get-info :all-statistics)
(push) ; 3248
; [then-branch 6643] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6644] 4 == 2
(push) ; 3249
; [else-branch 6644] 4 != 2
(pop) ; 3249
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3249
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3249
; 0,00s
; (get-info :all-statistics)
(push) ; 3249
; [then-branch 6645] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6646] 4 == 2
(push) ; 3250
; [else-branch 6646] 4 != 2
(pop) ; 3250
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3250
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3250
; 0,00s
; (get-info :all-statistics)
(push) ; 3250
; [then-branch 6647] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6648] 4 == 2
(push) ; 3251
; [else-branch 6648] 4 != 2
(pop) ; 3251
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3251
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3251
; 0,00s
; (get-info :all-statistics)
(push) ; 3251
; [then-branch 6649] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6650] 4 == 2
(push) ; 3252
; [else-branch 6650] 4 != 2
(pop) ; 3252
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3252
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3252
; 0,00s
; (get-info :all-statistics)
(push) ; 3252
; [then-branch 6651] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6652] 4 == 2
(push) ; 3253
; [else-branch 6652] 4 != 2
(pop) ; 3253
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3253
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3253
; 0,00s
; (get-info :all-statistics)
(push) ; 3253
; [then-branch 6653] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6654] 4 == 2
(push) ; 3254
; [else-branch 6654] 4 != 2
(pop) ; 3254
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3254
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3254
; 0,00s
; (get-info :all-statistics)
(push) ; 3254
; [then-branch 6655] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6656] 4 == 2
(push) ; 3255
; [else-branch 6656] 4 != 2
(pop) ; 3255
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3255
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3255
; 0,00s
; (get-info :all-statistics)
(push) ; 3255
; [then-branch 6657] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6658] 4 == 2
(push) ; 3256
; [else-branch 6658] 4 != 2
(pop) ; 3256
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3256
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3256
; 0,00s
; (get-info :all-statistics)
(push) ; 3256
; [then-branch 6659] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6660] 4 == 2
(push) ; 3257
; [else-branch 6660] 4 != 2
(pop) ; 3257
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3257
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3257
; 0,00s
; (get-info :all-statistics)
(push) ; 3257
; [then-branch 6661] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6662] 4 == 2
(push) ; 3258
; [else-branch 6662] 4 != 2
(pop) ; 3258
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3258
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3258
; 0,00s
; (get-info :all-statistics)
(push) ; 3258
; [then-branch 6663] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6664] 4 == 2
(push) ; 3259
; [else-branch 6664] 4 != 2
(pop) ; 3259
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3259
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3259
; 0,00s
; (get-info :all-statistics)
(push) ; 3259
; [then-branch 6665] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6666] 4 == 2
(push) ; 3260
; [else-branch 6666] 4 != 2
(pop) ; 3260
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3260
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3260
; 0,00s
; (get-info :all-statistics)
(push) ; 3260
; [then-branch 6667] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6668] 4 == 2
(push) ; 3261
; [else-branch 6668] 4 != 2
(pop) ; 3261
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3261
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3261
; 0,00s
; (get-info :all-statistics)
(push) ; 3261
; [then-branch 6669] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6670] 4 == 2
(push) ; 3262
; [else-branch 6670] 4 != 2
(pop) ; 3262
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3262
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3262
; 0,00s
; (get-info :all-statistics)
(push) ; 3262
; [then-branch 6671] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6672] 4 == 2
(push) ; 3263
; [else-branch 6672] 4 != 2
(pop) ; 3263
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3263
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3263
; 0,00s
; (get-info :all-statistics)
(push) ; 3263
; [then-branch 6673] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6674] 4 == 2
(push) ; 3264
; [else-branch 6674] 4 != 2
(pop) ; 3264
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3264
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3264
; 0,00s
; (get-info :all-statistics)
(push) ; 3264
; [then-branch 6675] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6676] 4 == 2
(push) ; 3265
; [else-branch 6676] 4 != 2
(pop) ; 3265
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3265
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3265
; 0,00s
; (get-info :all-statistics)
(push) ; 3265
; [then-branch 6677] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6678] 4 == 2
(push) ; 3266
; [else-branch 6678] 4 != 2
(pop) ; 3266
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3266
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3266
; 0,00s
; (get-info :all-statistics)
(push) ; 3266
; [then-branch 6679] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6680] 4 == 2
(push) ; 3267
; [else-branch 6680] 4 != 2
(pop) ; 3267
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3267
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3267
; 0,00s
; (get-info :all-statistics)
(push) ; 3267
; [then-branch 6681] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6682] 4 == 2
(push) ; 3268
; [else-branch 6682] 4 != 2
(pop) ; 3268
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3268
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3268
; 0,00s
; (get-info :all-statistics)
(push) ; 3268
; [then-branch 6683] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6684] 4 == 2
(push) ; 3269
; [else-branch 6684] 4 != 2
(pop) ; 3269
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3269
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3269
; 0,00s
; (get-info :all-statistics)
(push) ; 3269
; [then-branch 6685] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6686] 4 == 2
(push) ; 3270
; [else-branch 6686] 4 != 2
(pop) ; 3270
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3270
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3270
; 0,00s
; (get-info :all-statistics)
(push) ; 3270
; [then-branch 6687] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6688] 4 == 2
(push) ; 3271
; [else-branch 6688] 4 != 2
(pop) ; 3271
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3271
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3271
; 0,00s
; (get-info :all-statistics)
(push) ; 3271
; [then-branch 6689] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6690] 4 == 2
(push) ; 3272
; [else-branch 6690] 4 != 2
(pop) ; 3272
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3272
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3272
; 0,00s
; (get-info :all-statistics)
(push) ; 3272
; [then-branch 6691] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6692] 4 == 2
(push) ; 3273
; [else-branch 6692] 4 != 2
(pop) ; 3273
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3273
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3273
; 0,00s
; (get-info :all-statistics)
(push) ; 3273
; [then-branch 6693] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6694] 4 == 2
(push) ; 3274
; [else-branch 6694] 4 != 2
(pop) ; 3274
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3274
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3274
; 0,00s
; (get-info :all-statistics)
(push) ; 3274
; [then-branch 6695] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6696] 4 == 2
(push) ; 3275
; [else-branch 6696] 4 != 2
(pop) ; 3275
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3275
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3275
; 0,00s
; (get-info :all-statistics)
(push) ; 3275
; [then-branch 6697] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6698] 4 == 2
(push) ; 3276
; [else-branch 6698] 4 != 2
(pop) ; 3276
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3276
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3276
; 0,00s
; (get-info :all-statistics)
(push) ; 3276
; [then-branch 6699] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6700] 4 == 2
(push) ; 3277
; [else-branch 6700] 4 != 2
(pop) ; 3277
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3277
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3277
; 0,00s
; (get-info :all-statistics)
(push) ; 3277
; [then-branch 6701] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6702] 4 == 2
(push) ; 3278
; [else-branch 6702] 4 != 2
(pop) ; 3278
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3278
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3278
; 0,00s
; (get-info :all-statistics)
(push) ; 3278
; [then-branch 6703] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6704] 4 == 2
(push) ; 3279
; [else-branch 6704] 4 != 2
(pop) ; 3279
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3279
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3279
; 0,00s
; (get-info :all-statistics)
(push) ; 3279
; [then-branch 6705] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6706] 4 == 2
(push) ; 3280
; [else-branch 6706] 4 != 2
(pop) ; 3280
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3280
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3280
; 0,00s
; (get-info :all-statistics)
(push) ; 3280
; [then-branch 6707] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6708] 4 == 2
(push) ; 3281
; [else-branch 6708] 4 != 2
(pop) ; 3281
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3281
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3281
; 0,00s
; (get-info :all-statistics)
(push) ; 3281
; [then-branch 6709] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6710] 4 == 2
(push) ; 3282
; [else-branch 6710] 4 != 2
(pop) ; 3282
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3282
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3282
; 0,00s
; (get-info :all-statistics)
(push) ; 3282
; [then-branch 6711] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6712] 4 == 2
(push) ; 3283
; [else-branch 6712] 4 != 2
(pop) ; 3283
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3283
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3283
; 0,00s
; (get-info :all-statistics)
(push) ; 3283
; [then-branch 6713] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6714] 4 == 2
(push) ; 3284
; [else-branch 6714] 4 != 2
(pop) ; 3284
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3284
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3284
; 0,00s
; (get-info :all-statistics)
(push) ; 3284
; [then-branch 6715] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6716] 4 == 2
(push) ; 3285
; [else-branch 6716] 4 != 2
(pop) ; 3285
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3285
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3285
; 0,00s
; (get-info :all-statistics)
(push) ; 3285
; [then-branch 6717] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6718] 4 == 2
(push) ; 3286
; [else-branch 6718] 4 != 2
(pop) ; 3286
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3286
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3286
; 0,00s
; (get-info :all-statistics)
(push) ; 3286
; [then-branch 6719] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6720] 4 == 2
(push) ; 3287
; [else-branch 6720] 4 != 2
(pop) ; 3287
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3287
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3287
; 0,00s
; (get-info :all-statistics)
(push) ; 3287
; [then-branch 6721] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6722] 4 == 2
(push) ; 3288
; [else-branch 6722] 4 != 2
(pop) ; 3288
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3288
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3288
; 0,00s
; (get-info :all-statistics)
(push) ; 3288
; [then-branch 6723] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6724] 4 == 2
(push) ; 3289
; [else-branch 6724] 4 != 2
(pop) ; 3289
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3289
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3289
; 0,00s
; (get-info :all-statistics)
(push) ; 3289
; [then-branch 6725] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6726] 4 == 2
(push) ; 3290
; [else-branch 6726] 4 != 2
(pop) ; 3290
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3290
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3290
; 0,00s
; (get-info :all-statistics)
(push) ; 3290
; [then-branch 6727] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6728] 4 == 2
(push) ; 3291
; [else-branch 6728] 4 != 2
(pop) ; 3291
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3291
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3291
; 0,00s
; (get-info :all-statistics)
(push) ; 3291
; [then-branch 6729] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6730] 4 == 2
(push) ; 3292
; [else-branch 6730] 4 != 2
(pop) ; 3292
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3292
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3292
; 0,00s
; (get-info :all-statistics)
(push) ; 3292
; [then-branch 6731] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6732] 4 == 2
(push) ; 3293
; [else-branch 6732] 4 != 2
(pop) ; 3293
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3293
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3293
; 0,00s
; (get-info :all-statistics)
(push) ; 3293
; [then-branch 6733] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6734] 4 == 2
(push) ; 3294
; [else-branch 6734] 4 != 2
(pop) ; 3294
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3294
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3294
; 0,00s
; (get-info :all-statistics)
(push) ; 3294
; [then-branch 6735] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6736] 4 == 2
(push) ; 3295
; [else-branch 6736] 4 != 2
(pop) ; 3295
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3295
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3295
; 0,00s
; (get-info :all-statistics)
(push) ; 3295
; [then-branch 6737] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6738] 4 == 2
(push) ; 3296
; [else-branch 6738] 4 != 2
(pop) ; 3296
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3296
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3296
; 0,00s
; (get-info :all-statistics)
(push) ; 3296
; [then-branch 6739] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6740] 4 == 2
(push) ; 3297
; [else-branch 6740] 4 != 2
(pop) ; 3297
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3297
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3297
; 0,00s
; (get-info :all-statistics)
(push) ; 3297
; [then-branch 6741] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6742] 4 == 2
(push) ; 3298
; [else-branch 6742] 4 != 2
(pop) ; 3298
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3298
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3298
; 0,00s
; (get-info :all-statistics)
(push) ; 3298
; [then-branch 6743] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6744] 4 == 2
(push) ; 3299
; [else-branch 6744] 4 != 2
(pop) ; 3299
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3299
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3299
; 0,00s
; (get-info :all-statistics)
(push) ; 3299
; [then-branch 6745] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6746] 4 == 2
(push) ; 3300
; [else-branch 6746] 4 != 2
(pop) ; 3300
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3300
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3300
; 0,00s
; (get-info :all-statistics)
(push) ; 3300
; [then-branch 6747] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6748] 4 == 2
(push) ; 3301
; [else-branch 6748] 4 != 2
(pop) ; 3301
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3301
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3301
; 0,00s
; (get-info :all-statistics)
(push) ; 3301
; [then-branch 6749] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6750] 4 == 2
(push) ; 3302
; [else-branch 6750] 4 != 2
(pop) ; 3302
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3302
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3302
; 0,00s
; (get-info :all-statistics)
(push) ; 3302
; [then-branch 6751] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6752] 4 == 2
(push) ; 3303
; [else-branch 6752] 4 != 2
(pop) ; 3303
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3303
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3303
; 0,00s
; (get-info :all-statistics)
(push) ; 3303
; [then-branch 6753] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6754] 4 == 2
(push) ; 3304
; [else-branch 6754] 4 != 2
(pop) ; 3304
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3304
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3304
; 0,00s
; (get-info :all-statistics)
(push) ; 3304
; [then-branch 6755] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6756] 4 == 2
(push) ; 3305
; [else-branch 6756] 4 != 2
(pop) ; 3305
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3305
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3305
; 0,00s
; (get-info :all-statistics)
(push) ; 3305
; [then-branch 6757] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6758] 4 == 2
(push) ; 3306
; [else-branch 6758] 4 != 2
(pop) ; 3306
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3306
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3306
; 0,00s
; (get-info :all-statistics)
(push) ; 3306
; [then-branch 6759] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6760] 4 == 2
(push) ; 3307
; [else-branch 6760] 4 != 2
(pop) ; 3307
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3307
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3307
; 0,00s
; (get-info :all-statistics)
(push) ; 3307
; [then-branch 6761] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6762] 4 == 2
(push) ; 3308
; [else-branch 6762] 4 != 2
(pop) ; 3308
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3308
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3308
; 0,00s
; (get-info :all-statistics)
(push) ; 3308
; [then-branch 6763] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6764] 4 == 2
(push) ; 3309
; [else-branch 6764] 4 != 2
(pop) ; 3309
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3309
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3309
; 0,00s
; (get-info :all-statistics)
(push) ; 3309
; [then-branch 6765] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6766] 4 == 2
(push) ; 3310
; [else-branch 6766] 4 != 2
(pop) ; 3310
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3310
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3310
; 0,00s
; (get-info :all-statistics)
(push) ; 3310
; [then-branch 6767] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6768] 4 == 2
(push) ; 3311
; [else-branch 6768] 4 != 2
(pop) ; 3311
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3311
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3311
; 0,00s
; (get-info :all-statistics)
(push) ; 3311
; [then-branch 6769] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6770] 4 == 2
(push) ; 3312
; [else-branch 6770] 4 != 2
(pop) ; 3312
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3312
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3312
; 0,00s
; (get-info :all-statistics)
(push) ; 3312
; [then-branch 6771] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6772] 4 == 2
(push) ; 3313
; [else-branch 6772] 4 != 2
(pop) ; 3313
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3313
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3313
; 0,00s
; (get-info :all-statistics)
(push) ; 3313
; [then-branch 6773] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6774] 4 == 2
(push) ; 3314
; [else-branch 6774] 4 != 2
(pop) ; 3314
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3314
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3314
; 0,00s
; (get-info :all-statistics)
(push) ; 3314
; [then-branch 6775] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6776] 4 == 2
(push) ; 3315
; [else-branch 6776] 4 != 2
(pop) ; 3315
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3315
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3315
; 0,00s
; (get-info :all-statistics)
(push) ; 3315
; [then-branch 6777] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6778] 4 == 2
(push) ; 3316
; [else-branch 6778] 4 != 2
(pop) ; 3316
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3316
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3316
; 0,00s
; (get-info :all-statistics)
(push) ; 3316
; [then-branch 6779] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6780] 4 == 2
(push) ; 3317
; [else-branch 6780] 4 != 2
(pop) ; 3317
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3317
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3317
; 0,00s
; (get-info :all-statistics)
(push) ; 3317
; [then-branch 6781] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6782] 4 == 2
(push) ; 3318
; [else-branch 6782] 4 != 2
(pop) ; 3318
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3318
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3318
; 0,00s
; (get-info :all-statistics)
(push) ; 3318
; [then-branch 6783] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6784] 4 == 2
(push) ; 3319
; [else-branch 6784] 4 != 2
(pop) ; 3319
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3319
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3319
; 0,00s
; (get-info :all-statistics)
(push) ; 3319
; [then-branch 6785] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6786] 4 == 2
(push) ; 3320
; [else-branch 6786] 4 != 2
(pop) ; 3320
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3320
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3320
; 0,00s
; (get-info :all-statistics)
(push) ; 3320
; [then-branch 6787] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6788] 4 == 2
(push) ; 3321
; [else-branch 6788] 4 != 2
(pop) ; 3321
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3321
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3321
; 0,00s
; (get-info :all-statistics)
(push) ; 3321
; [then-branch 6789] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6790] 4 == 2
(push) ; 3322
; [else-branch 6790] 4 != 2
(pop) ; 3322
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3322
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3322
; 0,00s
; (get-info :all-statistics)
(push) ; 3322
; [then-branch 6791] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6792] 4 == 2
(push) ; 3323
; [else-branch 6792] 4 != 2
(pop) ; 3323
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3323
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3323
; 0,00s
; (get-info :all-statistics)
(push) ; 3323
; [then-branch 6793] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6794] 4 == 2
(push) ; 3324
; [else-branch 6794] 4 != 2
(pop) ; 3324
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3324
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3324
; 0,00s
; (get-info :all-statistics)
(push) ; 3324
; [then-branch 6795] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6796] 4 == 2
(push) ; 3325
; [else-branch 6796] 4 != 2
(pop) ; 3325
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3325
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3325
; 0,00s
; (get-info :all-statistics)
(push) ; 3325
; [then-branch 6797] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6798] 4 == 2
(push) ; 3326
; [else-branch 6798] 4 != 2
(pop) ; 3326
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3326
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3326
; 0,00s
; (get-info :all-statistics)
(push) ; 3326
; [then-branch 6799] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6800] 4 == 2
(push) ; 3327
; [else-branch 6800] 4 != 2
(pop) ; 3327
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3327
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3327
; 0,00s
; (get-info :all-statistics)
(push) ; 3327
; [then-branch 6801] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6802] 4 == 2
(push) ; 3328
; [else-branch 6802] 4 != 2
(pop) ; 3328
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3328
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3328
; 0,00s
; (get-info :all-statistics)
(push) ; 3328
; [then-branch 6803] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6804] 4 == 2
(push) ; 3329
; [else-branch 6804] 4 != 2
(pop) ; 3329
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3329
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3329
; 0,00s
; (get-info :all-statistics)
(push) ; 3329
; [then-branch 6805] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6806] 4 == 2
(push) ; 3330
; [else-branch 6806] 4 != 2
(pop) ; 3330
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3330
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3330
; 0,00s
; (get-info :all-statistics)
(push) ; 3330
; [then-branch 6807] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6808] 4 == 2
(push) ; 3331
; [else-branch 6808] 4 != 2
(pop) ; 3331
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3331
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3331
; 0,00s
; (get-info :all-statistics)
(push) ; 3331
; [then-branch 6809] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6810] 4 == 2
(push) ; 3332
; [else-branch 6810] 4 != 2
(pop) ; 3332
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3332
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3332
; 0,00s
; (get-info :all-statistics)
(push) ; 3332
; [then-branch 6811] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6812] 4 == 2
(push) ; 3333
; [else-branch 6812] 4 != 2
(pop) ; 3333
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3333
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3333
; 0,00s
; (get-info :all-statistics)
(push) ; 3333
; [then-branch 6813] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6814] 4 == 2
(push) ; 3334
; [else-branch 6814] 4 != 2
(pop) ; 3334
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3334
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3334
; 0,00s
; (get-info :all-statistics)
(push) ; 3334
; [then-branch 6815] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6816] 4 == 2
(push) ; 3335
; [else-branch 6816] 4 != 2
(pop) ; 3335
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3335
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3335
; 0,00s
; (get-info :all-statistics)
(push) ; 3335
; [then-branch 6817] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6818] 4 == 2
(push) ; 3336
; [else-branch 6818] 4 != 2
(pop) ; 3336
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3336
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3336
; 0,00s
; (get-info :all-statistics)
(push) ; 3336
; [then-branch 6819] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6820] 4 == 2
(push) ; 3337
; [else-branch 6820] 4 != 2
(pop) ; 3337
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3337
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3337
; 0,00s
; (get-info :all-statistics)
(push) ; 3337
; [then-branch 6821] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6822] 4 == 2
(push) ; 3338
; [else-branch 6822] 4 != 2
(pop) ; 3338
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3338
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3338
; 0,00s
; (get-info :all-statistics)
(push) ; 3338
; [then-branch 6823] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6824] 4 == 2
(push) ; 3339
; [else-branch 6824] 4 != 2
(pop) ; 3339
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3339
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3339
; 0,00s
; (get-info :all-statistics)
(push) ; 3339
; [then-branch 6825] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6826] 4 == 2
(push) ; 3340
; [else-branch 6826] 4 != 2
(pop) ; 3340
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3340
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3340
; 0,00s
; (get-info :all-statistics)
(push) ; 3340
; [then-branch 6827] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6828] 4 == 2
(push) ; 3341
; [else-branch 6828] 4 != 2
(pop) ; 3341
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3341
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3341
; 0,00s
; (get-info :all-statistics)
(push) ; 3341
; [then-branch 6829] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6830] 4 == 2
(push) ; 3342
; [else-branch 6830] 4 != 2
(pop) ; 3342
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3342
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3342
; 0,00s
; (get-info :all-statistics)
(push) ; 3342
; [then-branch 6831] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6832] 4 == 2
(push) ; 3343
; [else-branch 6832] 4 != 2
(pop) ; 3343
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3343
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3343
; 0,00s
; (get-info :all-statistics)
(push) ; 3343
; [then-branch 6833] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6834] 4 == 2
(push) ; 3344
; [else-branch 6834] 4 != 2
(pop) ; 3344
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3344
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3344
; 0,00s
; (get-info :all-statistics)
(push) ; 3344
; [then-branch 6835] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6836] 4 == 2
(push) ; 3345
; [else-branch 6836] 4 != 2
(pop) ; 3345
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3345
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3345
; 0,00s
; (get-info :all-statistics)
(push) ; 3345
; [then-branch 6837] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6838] 4 == 2
(push) ; 3346
; [else-branch 6838] 4 != 2
(pop) ; 3346
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3346
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3346
; 0,00s
; (get-info :all-statistics)
(push) ; 3346
; [then-branch 6839] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6840] 4 == 2
(push) ; 3347
; [else-branch 6840] 4 != 2
(pop) ; 3347
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3347
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3347
; 0,00s
; (get-info :all-statistics)
(push) ; 3347
; [then-branch 6841] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6842] 4 == 2
(push) ; 3348
; [else-branch 6842] 4 != 2
(pop) ; 3348
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3348
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3348
; 0,00s
; (get-info :all-statistics)
(push) ; 3348
; [then-branch 6843] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6844] 4 == 2
(push) ; 3349
; [else-branch 6844] 4 != 2
(pop) ; 3349
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3349
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3349
; 0,00s
; (get-info :all-statistics)
(push) ; 3349
; [then-branch 6845] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6846] 4 == 2
(push) ; 3350
; [else-branch 6846] 4 != 2
(pop) ; 3350
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3350
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3350
; 0,00s
; (get-info :all-statistics)
(push) ; 3350
; [then-branch 6847] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6848] 4 == 2
(push) ; 3351
; [else-branch 6848] 4 != 2
(pop) ; 3351
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3351
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3351
; 0,00s
; (get-info :all-statistics)
(push) ; 3351
; [then-branch 6849] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6850] 4 == 2
(push) ; 3352
; [else-branch 6850] 4 != 2
(pop) ; 3352
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3352
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3352
; 0,00s
; (get-info :all-statistics)
(push) ; 3352
; [then-branch 6851] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6852] 4 == 2
(push) ; 3353
; [else-branch 6852] 4 != 2
(pop) ; 3353
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3353
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3353
; 0,00s
; (get-info :all-statistics)
(push) ; 3353
; [then-branch 6853] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6854] 4 == 2
(push) ; 3354
; [else-branch 6854] 4 != 2
(pop) ; 3354
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3354
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3354
; 0,00s
; (get-info :all-statistics)
(push) ; 3354
; [then-branch 6855] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6856] 4 == 2
(push) ; 3355
; [else-branch 6856] 4 != 2
(pop) ; 3355
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3355
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3355
; 0,00s
; (get-info :all-statistics)
(push) ; 3355
; [then-branch 6857] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6858] 4 == 2
(push) ; 3356
; [else-branch 6858] 4 != 2
(pop) ; 3356
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3356
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3356
; 0,00s
; (get-info :all-statistics)
(push) ; 3356
; [then-branch 6859] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6860] 4 == 2
(push) ; 3357
; [else-branch 6860] 4 != 2
(pop) ; 3357
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3357
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3357
; 0,00s
; (get-info :all-statistics)
(push) ; 3357
; [then-branch 6861] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6862] 4 == 2
(push) ; 3358
; [else-branch 6862] 4 != 2
(pop) ; 3358
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3358
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3358
; 0,00s
; (get-info :all-statistics)
(push) ; 3358
; [then-branch 6863] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6864] 4 == 2
(push) ; 3359
; [else-branch 6864] 4 != 2
(pop) ; 3359
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3359
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3359
; 0,00s
; (get-info :all-statistics)
(push) ; 3359
; [then-branch 6865] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6866] 4 == 2
(push) ; 3360
; [else-branch 6866] 4 != 2
(pop) ; 3360
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3360
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3360
; 0,00s
; (get-info :all-statistics)
(push) ; 3360
; [then-branch 6867] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6868] 4 == 2
(push) ; 3361
; [else-branch 6868] 4 != 2
(pop) ; 3361
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3361
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3361
; 0,00s
; (get-info :all-statistics)
(push) ; 3361
; [then-branch 6869] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6870] 4 == 2
(push) ; 3362
; [else-branch 6870] 4 != 2
(pop) ; 3362
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3362
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3362
; 0,00s
; (get-info :all-statistics)
(push) ; 3362
; [then-branch 6871] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6872] 4 == 2
(push) ; 3363
; [else-branch 6872] 4 != 2
(pop) ; 3363
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3363
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3363
; 0,00s
; (get-info :all-statistics)
(push) ; 3363
; [then-branch 6873] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6874] 4 == 2
(push) ; 3364
; [else-branch 6874] 4 != 2
(pop) ; 3364
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3364
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3364
; 0,00s
; (get-info :all-statistics)
(push) ; 3364
; [then-branch 6875] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6876] 4 == 2
(push) ; 3365
; [else-branch 6876] 4 != 2
(pop) ; 3365
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3365
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3365
; 0,00s
; (get-info :all-statistics)
(push) ; 3365
; [then-branch 6877] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6878] 4 == 2
(push) ; 3366
; [else-branch 6878] 4 != 2
(pop) ; 3366
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3366
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3366
; 0,00s
; (get-info :all-statistics)
(push) ; 3366
; [then-branch 6879] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6880] 4 == 2
(push) ; 3367
; [else-branch 6880] 4 != 2
(pop) ; 3367
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3367
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3367
; 0,00s
; (get-info :all-statistics)
(push) ; 3367
; [then-branch 6881] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6882] 4 == 2
(push) ; 3368
; [else-branch 6882] 4 != 2
(pop) ; 3368
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3368
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3368
; 0,00s
; (get-info :all-statistics)
(push) ; 3368
; [then-branch 6883] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6884] 4 == 2
(push) ; 3369
; [else-branch 6884] 4 != 2
(pop) ; 3369
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3369
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3369
; 0,00s
; (get-info :all-statistics)
(push) ; 3369
; [then-branch 6885] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6886] 4 == 2
(push) ; 3370
; [else-branch 6886] 4 != 2
(pop) ; 3370
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3370
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3370
; 0,00s
; (get-info :all-statistics)
(push) ; 3370
; [then-branch 6887] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6888] 4 == 2
(push) ; 3371
; [else-branch 6888] 4 != 2
(pop) ; 3371
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3371
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3371
; 0,00s
; (get-info :all-statistics)
(push) ; 3371
; [then-branch 6889] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6890] 4 == 2
(push) ; 3372
; [else-branch 6890] 4 != 2
(pop) ; 3372
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3372
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3372
; 0,00s
; (get-info :all-statistics)
(push) ; 3372
; [then-branch 6891] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6892] 4 == 2
(push) ; 3373
; [else-branch 6892] 4 != 2
(pop) ; 3373
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3373
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3373
; 0,00s
; (get-info :all-statistics)
(push) ; 3373
; [then-branch 6893] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6894] 4 == 2
(push) ; 3374
; [else-branch 6894] 4 != 2
(pop) ; 3374
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3374
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3374
; 0,00s
; (get-info :all-statistics)
(push) ; 3374
; [then-branch 6895] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6896] 4 == 2
(push) ; 3375
; [else-branch 6896] 4 != 2
(pop) ; 3375
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3375
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3375
; 0,00s
; (get-info :all-statistics)
(push) ; 3375
; [then-branch 6897] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6898] 4 == 2
(push) ; 3376
; [else-branch 6898] 4 != 2
(pop) ; 3376
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3376
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3376
; 0,00s
; (get-info :all-statistics)
(push) ; 3376
; [then-branch 6899] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6900] 4 == 2
(push) ; 3377
; [else-branch 6900] 4 != 2
(pop) ; 3377
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3377
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3377
; 0,00s
; (get-info :all-statistics)
(push) ; 3377
; [then-branch 6901] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6902] 4 == 2
(push) ; 3378
; [else-branch 6902] 4 != 2
(pop) ; 3378
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3378
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3378
; 0,00s
; (get-info :all-statistics)
(push) ; 3378
; [then-branch 6903] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6904] 4 == 2
(push) ; 3379
; [else-branch 6904] 4 != 2
(pop) ; 3379
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3379
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3379
; 0,00s
; (get-info :all-statistics)
(push) ; 3379
; [then-branch 6905] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6906] 4 == 2
(push) ; 3380
; [else-branch 6906] 4 != 2
(pop) ; 3380
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3380
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3380
; 0,00s
; (get-info :all-statistics)
(push) ; 3380
; [then-branch 6907] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6908] 4 == 2
(push) ; 3381
; [else-branch 6908] 4 != 2
(pop) ; 3381
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3381
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3381
; 0,00s
; (get-info :all-statistics)
(push) ; 3381
; [then-branch 6909] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6910] 4 == 2
(push) ; 3382
; [else-branch 6910] 4 != 2
(pop) ; 3382
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3382
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3382
; 0,00s
; (get-info :all-statistics)
(push) ; 3382
; [then-branch 6911] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6912] 4 == 2
(push) ; 3383
; [else-branch 6912] 4 != 2
(pop) ; 3383
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3383
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3383
; 0,00s
; (get-info :all-statistics)
(push) ; 3383
; [then-branch 6913] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6914] 4 == 2
(push) ; 3384
; [else-branch 6914] 4 != 2
(pop) ; 3384
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3384
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3384
; 0,00s
; (get-info :all-statistics)
(push) ; 3384
; [then-branch 6915] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6916] 4 == 2
(push) ; 3385
; [else-branch 6916] 4 != 2
(pop) ; 3385
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3385
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3385
; 0,00s
; (get-info :all-statistics)
(push) ; 3385
; [then-branch 6917] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6918] 4 == 2
(push) ; 3386
; [else-branch 6918] 4 != 2
(pop) ; 3386
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3386
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3386
; 0,00s
; (get-info :all-statistics)
(push) ; 3386
; [then-branch 6919] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6920] 4 == 2
(push) ; 3387
; [else-branch 6920] 4 != 2
(pop) ; 3387
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3387
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3387
; 0,00s
; (get-info :all-statistics)
(push) ; 3387
; [then-branch 6921] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6922] 4 == 2
(push) ; 3388
; [else-branch 6922] 4 != 2
(pop) ; 3388
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3388
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3388
; 0,00s
; (get-info :all-statistics)
(push) ; 3388
; [then-branch 6923] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6924] 4 == 2
(push) ; 3389
; [else-branch 6924] 4 != 2
(pop) ; 3389
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3389
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3389
; 0,00s
; (get-info :all-statistics)
(push) ; 3389
; [then-branch 6925] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6926] 4 == 2
(push) ; 3390
; [else-branch 6926] 4 != 2
(pop) ; 3390
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3390
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3390
; 0,00s
; (get-info :all-statistics)
(push) ; 3390
; [then-branch 6927] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6928] 4 == 2
(push) ; 3391
; [else-branch 6928] 4 != 2
(pop) ; 3391
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3391
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3391
; 0,00s
; (get-info :all-statistics)
(push) ; 3391
; [then-branch 6929] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6930] 4 == 2
(push) ; 3392
; [else-branch 6930] 4 != 2
(pop) ; 3392
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3392
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3392
; 0,00s
; (get-info :all-statistics)
(push) ; 3392
; [then-branch 6931] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6932] 4 == 2
(push) ; 3393
; [else-branch 6932] 4 != 2
(pop) ; 3393
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3393
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3393
; 0,00s
; (get-info :all-statistics)
(push) ; 3393
; [then-branch 6933] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6934] 4 == 2
(push) ; 3394
; [else-branch 6934] 4 != 2
(pop) ; 3394
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3394
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3394
; 0,00s
; (get-info :all-statistics)
(push) ; 3394
; [then-branch 6935] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6936] 4 == 2
(push) ; 3395
; [else-branch 6936] 4 != 2
(pop) ; 3395
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3395
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3395
; 0,00s
; (get-info :all-statistics)
(push) ; 3395
; [then-branch 6937] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6938] 4 == 2
(push) ; 3396
; [else-branch 6938] 4 != 2
(pop) ; 3396
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3396
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3396
; 0,00s
; (get-info :all-statistics)
(push) ; 3396
; [then-branch 6939] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6940] 4 == 2
(push) ; 3397
; [else-branch 6940] 4 != 2
(pop) ; 3397
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3397
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3397
; 0,00s
; (get-info :all-statistics)
(push) ; 3397
; [then-branch 6941] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6942] 4 == 2
(push) ; 3398
; [else-branch 6942] 4 != 2
(pop) ; 3398
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3398
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3398
; 0,00s
; (get-info :all-statistics)
(push) ; 3398
; [then-branch 6943] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6944] 4 == 2
(push) ; 3399
; [else-branch 6944] 4 != 2
(pop) ; 3399
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3399
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3399
; 0,00s
; (get-info :all-statistics)
(push) ; 3399
; [then-branch 6945] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6946] 4 == 2
(push) ; 3400
; [else-branch 6946] 4 != 2
(pop) ; 3400
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3400
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3400
; 0,00s
; (get-info :all-statistics)
(push) ; 3400
; [then-branch 6947] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6948] 4 == 2
(push) ; 3401
; [else-branch 6948] 4 != 2
(pop) ; 3401
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3401
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3401
; 0,00s
; (get-info :all-statistics)
(push) ; 3401
; [then-branch 6949] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6950] 4 == 2
(push) ; 3402
; [else-branch 6950] 4 != 2
(pop) ; 3402
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3402
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3402
; 0,00s
; (get-info :all-statistics)
(push) ; 3402
; [then-branch 6951] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6952] 4 == 2
(push) ; 3403
; [else-branch 6952] 4 != 2
(pop) ; 3403
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3403
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3403
; 0,00s
; (get-info :all-statistics)
(push) ; 3403
; [then-branch 6953] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6954] 4 == 2
(push) ; 3404
; [else-branch 6954] 4 != 2
(pop) ; 3404
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3404
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3404
; 0,00s
; (get-info :all-statistics)
(push) ; 3404
; [then-branch 6955] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6956] 4 == 2
(push) ; 3405
; [else-branch 6956] 4 != 2
(pop) ; 3405
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3405
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3405
; 0,00s
; (get-info :all-statistics)
(push) ; 3405
; [then-branch 6957] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6958] 4 == 2
(push) ; 3406
; [else-branch 6958] 4 != 2
(pop) ; 3406
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3406
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3406
; 0,00s
; (get-info :all-statistics)
(push) ; 3406
; [then-branch 6959] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6960] 4 == 2
(push) ; 3407
; [else-branch 6960] 4 != 2
(pop) ; 3407
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3407
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3407
; 0,00s
; (get-info :all-statistics)
(push) ; 3407
; [then-branch 6961] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6962] 4 == 2
(push) ; 3408
; [else-branch 6962] 4 != 2
(pop) ; 3408
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3408
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3408
; 0,00s
; (get-info :all-statistics)
(push) ; 3408
; [then-branch 6963] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6964] 4 == 2
(push) ; 3409
; [else-branch 6964] 4 != 2
(pop) ; 3409
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3409
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3409
; 0,00s
; (get-info :all-statistics)
(push) ; 3409
; [then-branch 6965] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6966] 4 == 2
(push) ; 3410
; [else-branch 6966] 4 != 2
(pop) ; 3410
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3410
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3410
; 0,00s
; (get-info :all-statistics)
(push) ; 3410
; [then-branch 6967] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6968] 4 == 2
(push) ; 3411
; [else-branch 6968] 4 != 2
(pop) ; 3411
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3411
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3411
; 0,00s
; (get-info :all-statistics)
(push) ; 3411
; [then-branch 6969] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6970] 4 == 2
(push) ; 3412
; [else-branch 6970] 4 != 2
(pop) ; 3412
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3412
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3412
; 0,00s
; (get-info :all-statistics)
(push) ; 3412
; [then-branch 6971] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6972] 4 == 2
(push) ; 3413
; [else-branch 6972] 4 != 2
(pop) ; 3413
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3413
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3413
; 0,00s
; (get-info :all-statistics)
(push) ; 3413
; [then-branch 6973] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6974] 4 == 2
(push) ; 3414
; [else-branch 6974] 4 != 2
(pop) ; 3414
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3414
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3414
; 0,00s
; (get-info :all-statistics)
(push) ; 3414
; [then-branch 6975] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6976] 4 == 2
(push) ; 3415
; [else-branch 6976] 4 != 2
(pop) ; 3415
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3415
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3415
; 0,00s
; (get-info :all-statistics)
(push) ; 3415
; [then-branch 6977] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6978] 4 == 2
(push) ; 3416
; [else-branch 6978] 4 != 2
(pop) ; 3416
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3416
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3416
; 0,00s
; (get-info :all-statistics)
(push) ; 3416
; [then-branch 6979] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6980] 4 == 2
(push) ; 3417
; [else-branch 6980] 4 != 2
(pop) ; 3417
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3417
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3417
; 0,00s
; (get-info :all-statistics)
(push) ; 3417
; [then-branch 6981] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6982] 4 == 2
(push) ; 3418
; [else-branch 6982] 4 != 2
(pop) ; 3418
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3418
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3418
; 0,00s
; (get-info :all-statistics)
(push) ; 3418
; [then-branch 6983] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6984] 4 == 2
(push) ; 3419
; [else-branch 6984] 4 != 2
(pop) ; 3419
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3419
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3419
; 0,00s
; (get-info :all-statistics)
(push) ; 3419
; [then-branch 6985] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6986] 4 == 2
(push) ; 3420
; [else-branch 6986] 4 != 2
(pop) ; 3420
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3420
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3420
; 0,00s
; (get-info :all-statistics)
(push) ; 3420
; [then-branch 6987] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6988] 4 == 2
(push) ; 3421
; [else-branch 6988] 4 != 2
(pop) ; 3421
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3421
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3421
; 0,00s
; (get-info :all-statistics)
(push) ; 3421
; [then-branch 6989] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6990] 4 == 2
(push) ; 3422
; [else-branch 6990] 4 != 2
(pop) ; 3422
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3422
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3422
; 0,00s
; (get-info :all-statistics)
(push) ; 3422
; [then-branch 6991] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6992] 4 == 2
(push) ; 3423
; [else-branch 6992] 4 != 2
(pop) ; 3423
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3423
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3423
; 0,00s
; (get-info :all-statistics)
(push) ; 3423
; [then-branch 6993] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6994] 4 == 2
(push) ; 3424
; [else-branch 6994] 4 != 2
(pop) ; 3424
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3424
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3424
; 0,00s
; (get-info :all-statistics)
(push) ; 3424
; [then-branch 6995] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6996] 4 == 2
(push) ; 3425
; [else-branch 6996] 4 != 2
(pop) ; 3425
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3425
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3425
; 0,00s
; (get-info :all-statistics)
(push) ; 3425
; [then-branch 6997] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 6998] 4 == 2
(push) ; 3426
; [else-branch 6998] 4 != 2
(pop) ; 3426
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3426
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3426
; 0,00s
; (get-info :all-statistics)
(push) ; 3426
; [then-branch 6999] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7000] 4 == 2
(push) ; 3427
; [else-branch 7000] 4 != 2
(pop) ; 3427
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3427
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3427
; 0,00s
; (get-info :all-statistics)
(push) ; 3427
; [then-branch 7001] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7002] 4 == 2
(push) ; 3428
; [else-branch 7002] 4 != 2
(pop) ; 3428
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3428
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3428
; 0,00s
; (get-info :all-statistics)
(push) ; 3428
; [then-branch 7003] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7004] 4 == 2
(push) ; 3429
; [else-branch 7004] 4 != 2
(pop) ; 3429
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3429
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3429
; 0,00s
; (get-info :all-statistics)
(push) ; 3429
; [then-branch 7005] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7006] 4 == 2
(push) ; 3430
; [else-branch 7006] 4 != 2
(pop) ; 3430
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3430
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3430
; 0,00s
; (get-info :all-statistics)
(push) ; 3430
; [then-branch 7007] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7008] 4 == 2
(push) ; 3431
; [else-branch 7008] 4 != 2
(pop) ; 3431
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3431
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3431
; 0,00s
; (get-info :all-statistics)
(push) ; 3431
; [then-branch 7009] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7010] 4 == 2
(push) ; 3432
; [else-branch 7010] 4 != 2
(pop) ; 3432
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3432
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3432
; 0,00s
; (get-info :all-statistics)
(push) ; 3432
; [then-branch 7011] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7012] 4 == 2
(push) ; 3433
; [else-branch 7012] 4 != 2
(pop) ; 3433
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3433
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3433
; 0,00s
; (get-info :all-statistics)
(push) ; 3433
; [then-branch 7013] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7014] 4 == 2
(push) ; 3434
; [else-branch 7014] 4 != 2
(pop) ; 3434
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3434
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3434
; 0,00s
; (get-info :all-statistics)
(push) ; 3434
; [then-branch 7015] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7016] 4 == 2
(push) ; 3435
; [else-branch 7016] 4 != 2
(pop) ; 3435
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3435
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3435
; 0,00s
; (get-info :all-statistics)
(push) ; 3435
; [then-branch 7017] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7018] 4 == 2
(push) ; 3436
; [else-branch 7018] 4 != 2
(pop) ; 3436
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3436
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3436
; 0,00s
; (get-info :all-statistics)
(push) ; 3436
; [then-branch 7019] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7020] 4 == 2
(push) ; 3437
; [else-branch 7020] 4 != 2
(pop) ; 3437
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3437
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3437
; 0,00s
; (get-info :all-statistics)
(push) ; 3437
; [then-branch 7021] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7022] 4 == 2
(push) ; 3438
; [else-branch 7022] 4 != 2
(pop) ; 3438
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3438
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3438
; 0,00s
; (get-info :all-statistics)
(push) ; 3438
; [then-branch 7023] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7024] 4 == 2
(push) ; 3439
; [else-branch 7024] 4 != 2
(pop) ; 3439
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3439
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3439
; 0,00s
; (get-info :all-statistics)
(push) ; 3439
; [then-branch 7025] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7026] 4 == 2
(push) ; 3440
; [else-branch 7026] 4 != 2
(pop) ; 3440
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3440
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3440
; 0,00s
; (get-info :all-statistics)
(push) ; 3440
; [then-branch 7027] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7028] 4 == 2
(push) ; 3441
; [else-branch 7028] 4 != 2
(pop) ; 3441
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3441
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3441
; 0,00s
; (get-info :all-statistics)
(push) ; 3441
; [then-branch 7029] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7030] 4 == 2
(push) ; 3442
; [else-branch 7030] 4 != 2
(pop) ; 3442
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3442
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3442
; 0,00s
; (get-info :all-statistics)
(push) ; 3442
; [then-branch 7031] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7032] 4 == 2
(push) ; 3443
; [else-branch 7032] 4 != 2
(pop) ; 3443
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3443
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3443
; 0,00s
; (get-info :all-statistics)
(push) ; 3443
; [then-branch 7033] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7034] 4 == 2
(push) ; 3444
; [else-branch 7034] 4 != 2
(pop) ; 3444
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3444
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3444
; 0,00s
; (get-info :all-statistics)
(push) ; 3444
; [then-branch 7035] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7036] 4 == 2
(push) ; 3445
; [else-branch 7036] 4 != 2
(pop) ; 3445
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3445
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3445
; 0,00s
; (get-info :all-statistics)
(push) ; 3445
; [then-branch 7037] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7038] 4 == 2
(push) ; 3446
; [else-branch 7038] 4 != 2
(pop) ; 3446
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3446
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3446
; 0,00s
; (get-info :all-statistics)
(push) ; 3446
; [then-branch 7039] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7040] 4 == 2
(push) ; 3447
; [else-branch 7040] 4 != 2
(pop) ; 3447
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3447
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3447
; 0,00s
; (get-info :all-statistics)
(push) ; 3447
; [then-branch 7041] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7042] 4 == 2
(push) ; 3448
; [else-branch 7042] 4 != 2
(pop) ; 3448
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3448
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3448
; 0,00s
; (get-info :all-statistics)
(push) ; 3448
; [then-branch 7043] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7044] 4 == 2
(push) ; 3449
; [else-branch 7044] 4 != 2
(pop) ; 3449
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3449
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3449
; 0,00s
; (get-info :all-statistics)
(push) ; 3449
; [then-branch 7045] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7046] 4 == 2
(push) ; 3450
; [else-branch 7046] 4 != 2
(pop) ; 3450
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3450
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3450
; 0,00s
; (get-info :all-statistics)
(push) ; 3450
; [then-branch 7047] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7048] 4 == 2
(push) ; 3451
; [else-branch 7048] 4 != 2
(pop) ; 3451
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3451
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3451
; 0,00s
; (get-info :all-statistics)
(push) ; 3451
; [then-branch 7049] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7050] 4 == 2
(push) ; 3452
; [else-branch 7050] 4 != 2
(pop) ; 3452
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3452
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3452
; 0,00s
; (get-info :all-statistics)
(push) ; 3452
; [then-branch 7051] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7052] 4 == 2
(push) ; 3453
; [else-branch 7052] 4 != 2
(pop) ; 3453
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3453
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3453
; 0,00s
; (get-info :all-statistics)
(push) ; 3453
; [then-branch 7053] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7054] 4 == 2
(push) ; 3454
; [else-branch 7054] 4 != 2
(pop) ; 3454
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3454
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3454
; 0,00s
; (get-info :all-statistics)
(push) ; 3454
; [then-branch 7055] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7056] 4 == 2
(push) ; 3455
; [else-branch 7056] 4 != 2
(pop) ; 3455
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3455
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3455
; 0,00s
; (get-info :all-statistics)
(push) ; 3455
; [then-branch 7057] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7058] 4 == 2
(push) ; 3456
; [else-branch 7058] 4 != 2
(pop) ; 3456
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3456
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3456
; 0,00s
; (get-info :all-statistics)
(push) ; 3456
; [then-branch 7059] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7060] 4 == 2
(push) ; 3457
; [else-branch 7060] 4 != 2
(pop) ; 3457
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3457
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3457
; 0,00s
; (get-info :all-statistics)
(push) ; 3457
; [then-branch 7061] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7062] 4 == 2
(push) ; 3458
; [else-branch 7062] 4 != 2
(pop) ; 3458
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3458
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3458
; 0,00s
; (get-info :all-statistics)
(push) ; 3458
; [then-branch 7063] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7064] 4 == 2
(push) ; 3459
; [else-branch 7064] 4 != 2
(pop) ; 3459
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3459
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3459
; 0,00s
; (get-info :all-statistics)
(push) ; 3459
; [then-branch 7065] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7066] 4 == 2
(push) ; 3460
; [else-branch 7066] 4 != 2
(pop) ; 3460
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3460
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3460
; 0,00s
; (get-info :all-statistics)
(push) ; 3460
; [then-branch 7067] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7068] 4 == 2
(push) ; 3461
; [else-branch 7068] 4 != 2
(pop) ; 3461
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3461
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3461
; 0,00s
; (get-info :all-statistics)
(push) ; 3461
; [then-branch 7069] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7070] 4 == 2
(push) ; 3462
; [else-branch 7070] 4 != 2
(pop) ; 3462
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3462
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3462
; 0,00s
; (get-info :all-statistics)
(push) ; 3462
; [then-branch 7071] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7072] 4 == 2
(push) ; 3463
; [else-branch 7072] 4 != 2
(pop) ; 3463
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3463
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3463
; 0,00s
; (get-info :all-statistics)
(push) ; 3463
; [then-branch 7073] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7074] 4 == 2
(push) ; 3464
; [else-branch 7074] 4 != 2
(pop) ; 3464
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3464
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3464
; 0,00s
; (get-info :all-statistics)
(push) ; 3464
; [then-branch 7075] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7076] 4 == 2
(push) ; 3465
; [else-branch 7076] 4 != 2
(pop) ; 3465
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3465
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3465
; 0,00s
; (get-info :all-statistics)
(push) ; 3465
; [then-branch 7077] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7078] 4 == 2
(push) ; 3466
; [else-branch 7078] 4 != 2
(pop) ; 3466
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3466
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3466
; 0,00s
; (get-info :all-statistics)
(push) ; 3466
; [then-branch 7079] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7080] 4 == 2
(push) ; 3467
; [else-branch 7080] 4 != 2
(pop) ; 3467
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3467
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3467
; 0,00s
; (get-info :all-statistics)
(push) ; 3467
; [then-branch 7081] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7082] 4 == 2
(push) ; 3468
; [else-branch 7082] 4 != 2
(pop) ; 3468
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3468
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3468
; 0,00s
; (get-info :all-statistics)
(push) ; 3468
; [then-branch 7083] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7084] 4 == 2
(push) ; 3469
; [else-branch 7084] 4 != 2
(pop) ; 3469
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3469
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3469
; 0,00s
; (get-info :all-statistics)
(push) ; 3469
; [then-branch 7085] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7086] 4 == 2
(push) ; 3470
; [else-branch 7086] 4 != 2
(pop) ; 3470
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3470
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3470
; 0,00s
; (get-info :all-statistics)
(push) ; 3470
; [then-branch 7087] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7088] 4 == 2
(push) ; 3471
; [else-branch 7088] 4 != 2
(pop) ; 3471
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3471
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3471
; 0,00s
; (get-info :all-statistics)
(push) ; 3471
; [then-branch 7089] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7090] 4 == 2
(push) ; 3472
; [else-branch 7090] 4 != 2
(pop) ; 3472
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3472
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3472
; 0,00s
; (get-info :all-statistics)
(push) ; 3472
; [then-branch 7091] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7092] 4 == 2
(push) ; 3473
; [else-branch 7092] 4 != 2
(pop) ; 3473
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3473
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3473
; 0,00s
; (get-info :all-statistics)
(push) ; 3473
; [then-branch 7093] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7094] 4 == 2
(push) ; 3474
; [else-branch 7094] 4 != 2
(pop) ; 3474
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3474
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3474
; 0,00s
; (get-info :all-statistics)
(push) ; 3474
; [then-branch 7095] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7096] 4 == 2
(push) ; 3475
; [else-branch 7096] 4 != 2
(pop) ; 3475
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3475
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3475
; 0,00s
; (get-info :all-statistics)
(push) ; 3475
; [then-branch 7097] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7098] 4 == 2
(push) ; 3476
; [else-branch 7098] 4 != 2
(pop) ; 3476
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3476
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3476
; 0,00s
; (get-info :all-statistics)
(push) ; 3476
; [then-branch 7099] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7100] 4 == 2
(push) ; 3477
; [else-branch 7100] 4 != 2
(pop) ; 3477
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3477
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3477
; 0,00s
; (get-info :all-statistics)
(push) ; 3477
; [then-branch 7101] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7102] 4 == 2
(push) ; 3478
; [else-branch 7102] 4 != 2
(pop) ; 3478
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3478
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3478
; 0,00s
; (get-info :all-statistics)
(push) ; 3478
; [then-branch 7103] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7104] 4 == 2
(push) ; 3479
; [else-branch 7104] 4 != 2
(pop) ; 3479
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3479
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3479
; 0,00s
; (get-info :all-statistics)
(push) ; 3479
; [then-branch 7105] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7106] 4 == 2
(push) ; 3480
; [else-branch 7106] 4 != 2
(pop) ; 3480
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3480
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3480
; 0,00s
; (get-info :all-statistics)
(push) ; 3480
; [then-branch 7107] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7108] 4 == 2
(push) ; 3481
; [else-branch 7108] 4 != 2
(pop) ; 3481
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3481
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3481
; 0,00s
; (get-info :all-statistics)
(push) ; 3481
; [then-branch 7109] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7110] 4 == 2
(push) ; 3482
; [else-branch 7110] 4 != 2
(pop) ; 3482
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3482
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3482
; 0,00s
; (get-info :all-statistics)
(push) ; 3482
; [then-branch 7111] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7112] 4 == 2
(push) ; 3483
; [else-branch 7112] 4 != 2
(pop) ; 3483
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3483
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3483
; 0,00s
; (get-info :all-statistics)
(push) ; 3483
; [then-branch 7113] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7114] 4 == 2
(push) ; 3484
; [else-branch 7114] 4 != 2
(pop) ; 3484
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3484
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3484
; 0,00s
; (get-info :all-statistics)
(push) ; 3484
; [then-branch 7115] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7116] 4 == 2
(push) ; 3485
; [else-branch 7116] 4 != 2
(pop) ; 3485
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3485
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3485
; 0,00s
; (get-info :all-statistics)
(push) ; 3485
; [then-branch 7117] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7118] 4 == 2
(push) ; 3486
; [else-branch 7118] 4 != 2
(pop) ; 3486
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3486
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3486
; 0,00s
; (get-info :all-statistics)
(push) ; 3486
; [then-branch 7119] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7120] 4 == 2
(push) ; 3487
; [else-branch 7120] 4 != 2
(pop) ; 3487
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3487
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3487
; 0,00s
; (get-info :all-statistics)
(push) ; 3487
; [then-branch 7121] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7122] 4 == 2
(push) ; 3488
; [else-branch 7122] 4 != 2
(pop) ; 3488
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3488
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3488
; 0,00s
; (get-info :all-statistics)
(push) ; 3488
; [then-branch 7123] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7124] 4 == 2
(push) ; 3489
; [else-branch 7124] 4 != 2
(pop) ; 3489
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3489
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3489
; 0,00s
; (get-info :all-statistics)
(push) ; 3489
; [then-branch 7125] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7126] 4 == 2
(push) ; 3490
; [else-branch 7126] 4 != 2
(pop) ; 3490
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3490
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3490
; 0,00s
; (get-info :all-statistics)
(push) ; 3490
; [then-branch 7127] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7128] 4 == 2
(push) ; 3491
; [else-branch 7128] 4 != 2
(pop) ; 3491
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3491
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3491
; 0,00s
; (get-info :all-statistics)
(push) ; 3491
; [then-branch 7129] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7130] 4 == 2
(push) ; 3492
; [else-branch 7130] 4 != 2
(pop) ; 3492
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3492
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3492
; 0,00s
; (get-info :all-statistics)
(push) ; 3492
; [then-branch 7131] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7132] 4 == 2
(push) ; 3493
; [else-branch 7132] 4 != 2
(pop) ; 3493
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3493
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3493
; 0,00s
; (get-info :all-statistics)
(push) ; 3493
; [then-branch 7133] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7134] 4 == 2
(push) ; 3494
; [else-branch 7134] 4 != 2
(pop) ; 3494
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3494
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3494
; 0,00s
; (get-info :all-statistics)
(push) ; 3494
; [then-branch 7135] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7136] 4 == 2
(push) ; 3495
; [else-branch 7136] 4 != 2
(pop) ; 3495
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3495
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3495
; 0,00s
; (get-info :all-statistics)
(push) ; 3495
; [then-branch 7137] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7138] 4 == 2
(push) ; 3496
; [else-branch 7138] 4 != 2
(pop) ; 3496
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3496
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3496
; 0,00s
; (get-info :all-statistics)
(push) ; 3496
; [then-branch 7139] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7140] 4 == 2
(push) ; 3497
; [else-branch 7140] 4 != 2
(pop) ; 3497
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3497
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3497
; 0,00s
; (get-info :all-statistics)
(push) ; 3497
; [then-branch 7141] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7142] 4 == 2
(push) ; 3498
; [else-branch 7142] 4 != 2
(pop) ; 3498
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3498
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3498
; 0,00s
; (get-info :all-statistics)
(push) ; 3498
; [then-branch 7143] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7144] 4 == 2
(push) ; 3499
; [else-branch 7144] 4 != 2
(pop) ; 3499
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3499
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3499
; 0,00s
; (get-info :all-statistics)
(push) ; 3499
; [then-branch 7145] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7146] 4 == 2
(push) ; 3500
; [else-branch 7146] 4 != 2
(pop) ; 3500
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3500
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3500
; 0,00s
; (get-info :all-statistics)
(push) ; 3500
; [then-branch 7147] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7148] 4 == 2
(push) ; 3501
; [else-branch 7148] 4 != 2
(pop) ; 3501
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3501
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3501
; 0,00s
; (get-info :all-statistics)
(push) ; 3501
; [then-branch 7149] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7150] 4 == 2
(push) ; 3502
; [else-branch 7150] 4 != 2
(pop) ; 3502
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3502
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3502
; 0,00s
; (get-info :all-statistics)
(push) ; 3502
; [then-branch 7151] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7152] 4 == 2
(push) ; 3503
; [else-branch 7152] 4 != 2
(pop) ; 3503
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3503
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3503
; 0,00s
; (get-info :all-statistics)
(push) ; 3503
; [then-branch 7153] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7154] 4 == 2
(push) ; 3504
; [else-branch 7154] 4 != 2
(pop) ; 3504
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3504
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3504
; 0,00s
; (get-info :all-statistics)
(push) ; 3504
; [then-branch 7155] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7156] 4 == 2
(push) ; 3505
; [else-branch 7156] 4 != 2
(pop) ; 3505
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3505
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3505
; 0,00s
; (get-info :all-statistics)
(push) ; 3505
; [then-branch 7157] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7158] 4 == 2
(push) ; 3506
; [else-branch 7158] 4 != 2
(pop) ; 3506
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3506
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3506
; 0,00s
; (get-info :all-statistics)
(push) ; 3506
; [then-branch 7159] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7160] 4 == 2
(push) ; 3507
; [else-branch 7160] 4 != 2
(pop) ; 3507
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3507
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3507
; 0,00s
; (get-info :all-statistics)
(push) ; 3507
; [then-branch 7161] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7162] 4 == 2
(push) ; 3508
; [else-branch 7162] 4 != 2
(pop) ; 3508
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3508
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3508
; 0,00s
; (get-info :all-statistics)
(push) ; 3508
; [then-branch 7163] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7164] 4 == 2
(push) ; 3509
; [else-branch 7164] 4 != 2
(pop) ; 3509
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3509
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3509
; 0,00s
; (get-info :all-statistics)
(push) ; 3509
; [then-branch 7165] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7166] 4 == 2
(push) ; 3510
; [else-branch 7166] 4 != 2
(pop) ; 3510
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3510
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3510
; 0,00s
; (get-info :all-statistics)
(push) ; 3510
; [then-branch 7167] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7168] 4 == 2
(push) ; 3511
; [else-branch 7168] 4 != 2
(pop) ; 3511
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3511
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3511
; 0,00s
; (get-info :all-statistics)
(push) ; 3511
; [then-branch 7169] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7170] 4 == 2
(push) ; 3512
; [else-branch 7170] 4 != 2
(pop) ; 3512
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3512
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3512
; 0,00s
; (get-info :all-statistics)
(push) ; 3512
; [then-branch 7171] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7172] 4 == 2
(push) ; 3513
; [else-branch 7172] 4 != 2
(pop) ; 3513
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3513
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3513
; 0,00s
; (get-info :all-statistics)
(push) ; 3513
; [then-branch 7173] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7174] 4 == 2
(push) ; 3514
; [else-branch 7174] 4 != 2
(pop) ; 3514
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3514
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3514
; 0,00s
; (get-info :all-statistics)
(push) ; 3514
; [then-branch 7175] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7176] 4 == 2
(push) ; 3515
; [else-branch 7176] 4 != 2
(pop) ; 3515
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3515
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3515
; 0,00s
; (get-info :all-statistics)
(push) ; 3515
; [then-branch 7177] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7178] 4 == 2
(push) ; 3516
; [else-branch 7178] 4 != 2
(pop) ; 3516
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3516
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3516
; 0,00s
; (get-info :all-statistics)
(push) ; 3516
; [then-branch 7179] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7180] 4 == 2
(push) ; 3517
; [else-branch 7180] 4 != 2
(pop) ; 3517
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3517
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3517
; 0,00s
; (get-info :all-statistics)
(push) ; 3517
; [then-branch 7181] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7182] 4 == 2
(push) ; 3518
; [else-branch 7182] 4 != 2
(pop) ; 3518
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3518
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3518
; 0,00s
; (get-info :all-statistics)
(push) ; 3518
; [then-branch 7183] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7184] 4 == 2
(push) ; 3519
; [else-branch 7184] 4 != 2
(pop) ; 3519
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3519
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3519
; 0,00s
; (get-info :all-statistics)
(push) ; 3519
; [then-branch 7185] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7186] 4 == 2
(push) ; 3520
; [else-branch 7186] 4 != 2
(pop) ; 3520
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3520
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3520
; 0,00s
; (get-info :all-statistics)
(push) ; 3520
; [then-branch 7187] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7188] 4 == 2
(push) ; 3521
; [else-branch 7188] 4 != 2
(pop) ; 3521
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3521
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3521
; 0,00s
; (get-info :all-statistics)
(push) ; 3521
; [then-branch 7189] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7190] 4 == 2
(push) ; 3522
; [else-branch 7190] 4 != 2
(pop) ; 3522
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3522
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3522
; 0,00s
; (get-info :all-statistics)
(push) ; 3522
; [then-branch 7191] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7192] 4 == 2
(push) ; 3523
; [else-branch 7192] 4 != 2
(pop) ; 3523
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3523
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3523
; 0,00s
; (get-info :all-statistics)
(push) ; 3523
; [then-branch 7193] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7194] 4 == 2
(push) ; 3524
; [else-branch 7194] 4 != 2
(pop) ; 3524
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3524
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3524
; 0,00s
; (get-info :all-statistics)
(push) ; 3524
; [then-branch 7195] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7196] 4 == 2
(push) ; 3525
; [else-branch 7196] 4 != 2
(pop) ; 3525
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3525
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3525
; 0,00s
; (get-info :all-statistics)
(push) ; 3525
; [then-branch 7197] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7198] 4 == 2
(push) ; 3526
; [else-branch 7198] 4 != 2
(pop) ; 3526
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3526
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3526
; 0,00s
; (get-info :all-statistics)
(push) ; 3526
; [then-branch 7199] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7200] 4 == 2
(push) ; 3527
; [else-branch 7200] 4 != 2
(pop) ; 3527
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3527
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3527
; 0,00s
; (get-info :all-statistics)
(push) ; 3527
; [then-branch 7201] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7202] 4 == 2
(push) ; 3528
; [else-branch 7202] 4 != 2
(pop) ; 3528
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3528
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3528
; 0,00s
; (get-info :all-statistics)
(push) ; 3528
; [then-branch 7203] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7204] 4 == 2
(push) ; 3529
; [else-branch 7204] 4 != 2
(pop) ; 3529
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3529
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3529
; 0,00s
; (get-info :all-statistics)
(push) ; 3529
; [then-branch 7205] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7206] 4 == 2
(push) ; 3530
; [else-branch 7206] 4 != 2
(pop) ; 3530
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3530
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3530
; 0,00s
; (get-info :all-statistics)
(push) ; 3530
; [then-branch 7207] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7208] 4 == 2
(push) ; 3531
; [else-branch 7208] 4 != 2
(pop) ; 3531
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3531
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3531
; 0,00s
; (get-info :all-statistics)
(push) ; 3531
; [then-branch 7209] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7210] 4 == 2
(push) ; 3532
; [else-branch 7210] 4 != 2
(pop) ; 3532
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3532
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3532
; 0,00s
; (get-info :all-statistics)
(push) ; 3532
; [then-branch 7211] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7212] 4 == 2
(push) ; 3533
; [else-branch 7212] 4 != 2
(pop) ; 3533
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3533
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3533
; 0,00s
; (get-info :all-statistics)
(push) ; 3533
; [then-branch 7213] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7214] 4 == 2
(push) ; 3534
; [else-branch 7214] 4 != 2
(pop) ; 3534
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3534
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3534
; 0,00s
; (get-info :all-statistics)
(push) ; 3534
; [then-branch 7215] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7216] 4 == 2
(push) ; 3535
; [else-branch 7216] 4 != 2
(pop) ; 3535
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3535
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3535
; 0,00s
; (get-info :all-statistics)
(push) ; 3535
; [then-branch 7217] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7218] 4 == 2
(push) ; 3536
; [else-branch 7218] 4 != 2
(pop) ; 3536
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3536
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3536
; 0,00s
; (get-info :all-statistics)
(push) ; 3536
; [then-branch 7219] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7220] 4 == 2
(push) ; 3537
; [else-branch 7220] 4 != 2
(pop) ; 3537
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3537
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3537
; 0,00s
; (get-info :all-statistics)
(push) ; 3537
; [then-branch 7221] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7222] 4 == 2
(push) ; 3538
; [else-branch 7222] 4 != 2
(pop) ; 3538
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3538
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3538
; 0,00s
; (get-info :all-statistics)
(push) ; 3538
; [then-branch 7223] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7224] 4 == 2
(push) ; 3539
; [else-branch 7224] 4 != 2
(pop) ; 3539
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3539
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3539
; 0,00s
; (get-info :all-statistics)
(push) ; 3539
; [then-branch 7225] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7226] 4 == 2
(push) ; 3540
; [else-branch 7226] 4 != 2
(pop) ; 3540
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3540
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3540
; 0,00s
; (get-info :all-statistics)
(push) ; 3540
; [then-branch 7227] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7228] 4 == 2
(push) ; 3541
; [else-branch 7228] 4 != 2
(pop) ; 3541
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3541
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3541
; 0,00s
; (get-info :all-statistics)
(push) ; 3541
; [then-branch 7229] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7230] 4 == 2
(push) ; 3542
; [else-branch 7230] 4 != 2
(pop) ; 3542
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3542
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3542
; 0,00s
; (get-info :all-statistics)
(push) ; 3542
; [then-branch 7231] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7232] 4 == 2
(push) ; 3543
; [else-branch 7232] 4 != 2
(pop) ; 3543
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3543
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3543
; 0,00s
; (get-info :all-statistics)
(push) ; 3543
; [then-branch 7233] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7234] 4 == 2
(push) ; 3544
; [else-branch 7234] 4 != 2
(pop) ; 3544
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3544
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3544
; 0,00s
; (get-info :all-statistics)
(push) ; 3544
; [then-branch 7235] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7236] 4 == 2
(push) ; 3545
; [else-branch 7236] 4 != 2
(pop) ; 3545
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3545
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3545
; 0,00s
; (get-info :all-statistics)
(push) ; 3545
; [then-branch 7237] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7238] 4 == 2
(push) ; 3546
; [else-branch 7238] 4 != 2
(pop) ; 3546
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3546
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3546
; 0,00s
; (get-info :all-statistics)
(push) ; 3546
; [then-branch 7239] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7240] 4 == 2
(push) ; 3547
; [else-branch 7240] 4 != 2
(pop) ; 3547
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3547
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3547
; 0,00s
; (get-info :all-statistics)
(push) ; 3547
; [then-branch 7241] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7242] 4 == 2
(push) ; 3548
; [else-branch 7242] 4 != 2
(pop) ; 3548
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3548
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3548
; 0,00s
; (get-info :all-statistics)
(push) ; 3548
; [then-branch 7243] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7244] 4 == 2
(push) ; 3549
; [else-branch 7244] 4 != 2
(pop) ; 3549
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3549
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3549
; 0,00s
; (get-info :all-statistics)
(push) ; 3549
; [then-branch 7245] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7246] 4 == 2
(push) ; 3550
; [else-branch 7246] 4 != 2
(pop) ; 3550
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3550
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3550
; 0,00s
; (get-info :all-statistics)
(push) ; 3550
; [then-branch 7247] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7248] 4 == 2
(push) ; 3551
; [else-branch 7248] 4 != 2
(pop) ; 3551
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3551
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3551
; 0,00s
; (get-info :all-statistics)
(push) ; 3551
; [then-branch 7249] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7250] 4 == 2
(push) ; 3552
; [else-branch 7250] 4 != 2
(pop) ; 3552
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3552
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3552
; 0,00s
; (get-info :all-statistics)
(push) ; 3552
; [then-branch 7251] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7252] 4 == 2
(push) ; 3553
; [else-branch 7252] 4 != 2
(pop) ; 3553
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3553
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3553
; 0,00s
; (get-info :all-statistics)
(push) ; 3553
; [then-branch 7253] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7254] 4 == 2
(push) ; 3554
; [else-branch 7254] 4 != 2
(pop) ; 3554
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3554
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3554
; 0,00s
; (get-info :all-statistics)
(push) ; 3554
; [then-branch 7255] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7256] 4 == 2
(push) ; 3555
; [else-branch 7256] 4 != 2
(pop) ; 3555
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3555
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3555
; 0,00s
; (get-info :all-statistics)
(push) ; 3555
; [then-branch 7257] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7258] 4 == 2
(push) ; 3556
; [else-branch 7258] 4 != 2
(pop) ; 3556
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3556
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3556
; 0,00s
; (get-info :all-statistics)
(push) ; 3556
; [then-branch 7259] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7260] 4 == 2
(push) ; 3557
; [else-branch 7260] 4 != 2
(pop) ; 3557
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3557
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3557
; 0,00s
; (get-info :all-statistics)
(push) ; 3557
; [then-branch 7261] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7262] 4 == 2
(push) ; 3558
; [else-branch 7262] 4 != 2
(pop) ; 3558
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3558
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3558
; 0,00s
; (get-info :all-statistics)
(push) ; 3558
; [then-branch 7263] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7264] 4 == 2
(push) ; 3559
; [else-branch 7264] 4 != 2
(pop) ; 3559
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3559
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3559
; 0,00s
; (get-info :all-statistics)
(push) ; 3559
; [then-branch 7265] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7266] 4 == 2
(push) ; 3560
; [else-branch 7266] 4 != 2
(pop) ; 3560
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3560
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3560
; 0,00s
; (get-info :all-statistics)
(push) ; 3560
; [then-branch 7267] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7268] 4 == 2
(push) ; 3561
; [else-branch 7268] 4 != 2
(pop) ; 3561
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3561
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3561
; 0,00s
; (get-info :all-statistics)
(push) ; 3561
; [then-branch 7269] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7270] 4 == 2
(push) ; 3562
; [else-branch 7270] 4 != 2
(pop) ; 3562
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3562
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3562
; 0,00s
; (get-info :all-statistics)
(push) ; 3562
; [then-branch 7271] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7272] 4 == 2
(push) ; 3563
; [else-branch 7272] 4 != 2
(pop) ; 3563
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3563
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3563
; 0,00s
; (get-info :all-statistics)
(push) ; 3563
; [then-branch 7273] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7274] 4 == 2
(push) ; 3564
; [else-branch 7274] 4 != 2
(pop) ; 3564
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3564
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3564
; 0,00s
; (get-info :all-statistics)
(push) ; 3564
; [then-branch 7275] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7276] 4 == 2
(push) ; 3565
; [else-branch 7276] 4 != 2
(pop) ; 3565
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3565
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3565
; 0,00s
; (get-info :all-statistics)
(push) ; 3565
; [then-branch 7277] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7278] 4 == 2
(push) ; 3566
; [else-branch 7278] 4 != 2
(pop) ; 3566
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3566
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3566
; 0,00s
; (get-info :all-statistics)
(push) ; 3566
; [then-branch 7279] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7280] 4 == 2
(push) ; 3567
; [else-branch 7280] 4 != 2
(pop) ; 3567
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3567
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3567
; 0,00s
; (get-info :all-statistics)
(push) ; 3567
; [then-branch 7281] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7282] 4 == 2
(push) ; 3568
; [else-branch 7282] 4 != 2
(pop) ; 3568
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3568
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3568
; 0,00s
; (get-info :all-statistics)
(push) ; 3568
; [then-branch 7283] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7284] 4 == 2
(push) ; 3569
; [else-branch 7284] 4 != 2
(pop) ; 3569
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3569
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3569
; 0,00s
; (get-info :all-statistics)
(push) ; 3569
; [then-branch 7285] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7286] 4 == 2
(push) ; 3570
; [else-branch 7286] 4 != 2
(pop) ; 3570
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3570
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3570
; 0,00s
; (get-info :all-statistics)
(push) ; 3570
; [then-branch 7287] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7288] 4 == 2
(push) ; 3571
; [else-branch 7288] 4 != 2
(pop) ; 3571
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3571
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3571
; 0,00s
; (get-info :all-statistics)
(push) ; 3571
; [then-branch 7289] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7290] 4 == 2
(push) ; 3572
; [else-branch 7290] 4 != 2
(pop) ; 3572
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3572
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3572
; 0,00s
; (get-info :all-statistics)
(push) ; 3572
; [then-branch 7291] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7292] 4 == 2
(push) ; 3573
; [else-branch 7292] 4 != 2
(pop) ; 3573
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3573
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3573
; 0,00s
; (get-info :all-statistics)
(push) ; 3573
; [then-branch 7293] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7294] 4 == 2
(push) ; 3574
; [else-branch 7294] 4 != 2
(pop) ; 3574
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3574
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3574
; 0,00s
; (get-info :all-statistics)
(push) ; 3574
; [then-branch 7295] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7296] 4 == 2
(push) ; 3575
; [else-branch 7296] 4 != 2
(pop) ; 3575
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3575
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3575
; 0,00s
; (get-info :all-statistics)
(push) ; 3575
; [then-branch 7297] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7298] 4 == 2
(push) ; 3576
; [else-branch 7298] 4 != 2
(pop) ; 3576
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3576
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3576
; 0,00s
; (get-info :all-statistics)
(push) ; 3576
; [then-branch 7299] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7300] 4 == 2
(push) ; 3577
; [else-branch 7300] 4 != 2
(pop) ; 3577
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3577
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3577
; 0,00s
; (get-info :all-statistics)
(push) ; 3577
; [then-branch 7301] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7302] 4 == 2
(push) ; 3578
; [else-branch 7302] 4 != 2
(pop) ; 3578
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3578
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3578
; 0,00s
; (get-info :all-statistics)
(push) ; 3578
; [then-branch 7303] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7304] 4 == 2
(push) ; 3579
; [else-branch 7304] 4 != 2
(pop) ; 3579
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3579
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3579
; 0,00s
; (get-info :all-statistics)
(push) ; 3579
; [then-branch 7305] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7306] 4 == 2
(push) ; 3580
; [else-branch 7306] 4 != 2
(pop) ; 3580
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3580
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3580
; 0,00s
; (get-info :all-statistics)
(push) ; 3580
; [then-branch 7307] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7308] 4 == 2
(push) ; 3581
; [else-branch 7308] 4 != 2
(pop) ; 3581
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3581
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3581
; 0,00s
; (get-info :all-statistics)
(push) ; 3581
; [then-branch 7309] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7310] 4 == 2
(push) ; 3582
; [else-branch 7310] 4 != 2
(pop) ; 3582
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3582
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3582
; 0,00s
; (get-info :all-statistics)
(push) ; 3582
; [then-branch 7311] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7312] 4 == 2
(push) ; 3583
; [else-branch 7312] 4 != 2
(pop) ; 3583
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3583
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3583
; 0,00s
; (get-info :all-statistics)
(push) ; 3583
; [then-branch 7313] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7314] 4 == 2
(push) ; 3584
; [else-branch 7314] 4 != 2
(pop) ; 3584
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3584
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3584
; 0,00s
; (get-info :all-statistics)
(push) ; 3584
; [then-branch 7315] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7316] 4 == 2
(push) ; 3585
; [else-branch 7316] 4 != 2
(pop) ; 3585
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3585
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3585
; 0,00s
; (get-info :all-statistics)
(push) ; 3585
; [then-branch 7317] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7318] 4 == 2
(push) ; 3586
; [else-branch 7318] 4 != 2
(pop) ; 3586
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3586
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3586
; 0,00s
; (get-info :all-statistics)
(push) ; 3586
; [then-branch 7319] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7320] 4 == 2
(push) ; 3587
; [else-branch 7320] 4 != 2
(pop) ; 3587
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3587
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3587
; 0,00s
; (get-info :all-statistics)
(push) ; 3587
; [then-branch 7321] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7322] 4 == 2
(push) ; 3588
; [else-branch 7322] 4 != 2
(pop) ; 3588
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3588
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3588
; 0,00s
; (get-info :all-statistics)
(push) ; 3588
; [then-branch 7323] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7324] 4 == 2
(push) ; 3589
; [else-branch 7324] 4 != 2
(pop) ; 3589
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3589
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3589
; 0,00s
; (get-info :all-statistics)
(push) ; 3589
; [then-branch 7325] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7326] 4 == 2
(push) ; 3590
; [else-branch 7326] 4 != 2
(pop) ; 3590
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3590
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3590
; 0,00s
; (get-info :all-statistics)
(push) ; 3590
; [then-branch 7327] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7328] 4 == 2
(push) ; 3591
; [else-branch 7328] 4 != 2
(pop) ; 3591
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3591
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3591
; 0,00s
; (get-info :all-statistics)
(push) ; 3591
; [then-branch 7329] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7330] 4 == 2
(push) ; 3592
; [else-branch 7330] 4 != 2
(pop) ; 3592
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3592
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3592
; 0,00s
; (get-info :all-statistics)
(push) ; 3592
; [then-branch 7331] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7332] 4 == 2
(push) ; 3593
; [else-branch 7332] 4 != 2
(pop) ; 3593
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3593
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3593
; 0,00s
; (get-info :all-statistics)
(push) ; 3593
; [then-branch 7333] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7334] 4 == 2
(push) ; 3594
; [else-branch 7334] 4 != 2
(pop) ; 3594
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3594
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3594
; 0,00s
; (get-info :all-statistics)
(push) ; 3594
; [then-branch 7335] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7336] 4 == 2
(push) ; 3595
; [else-branch 7336] 4 != 2
(pop) ; 3595
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3595
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3595
; 0,00s
; (get-info :all-statistics)
(push) ; 3595
; [then-branch 7337] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7338] 4 == 2
(push) ; 3596
; [else-branch 7338] 4 != 2
(pop) ; 3596
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3596
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3596
; 0,00s
; (get-info :all-statistics)
(push) ; 3596
; [then-branch 7339] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7340] 4 == 2
(push) ; 3597
; [else-branch 7340] 4 != 2
(pop) ; 3597
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3597
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3597
; 0,00s
; (get-info :all-statistics)
(push) ; 3597
; [then-branch 7341] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7342] 4 == 2
(push) ; 3598
; [else-branch 7342] 4 != 2
(pop) ; 3598
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3598
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3598
; 0,00s
; (get-info :all-statistics)
(push) ; 3598
; [then-branch 7343] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7344] 4 == 2
(push) ; 3599
; [else-branch 7344] 4 != 2
(pop) ; 3599
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3599
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3599
; 0,00s
; (get-info :all-statistics)
(push) ; 3599
; [then-branch 7345] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7346] 4 == 2
(push) ; 3600
; [else-branch 7346] 4 != 2
(pop) ; 3600
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3600
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3600
; 0,00s
; (get-info :all-statistics)
(push) ; 3600
; [then-branch 7347] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7348] 4 == 2
(push) ; 3601
; [else-branch 7348] 4 != 2
(pop) ; 3601
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3601
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3601
; 0,00s
; (get-info :all-statistics)
(push) ; 3601
; [then-branch 7349] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7350] 4 == 2
(push) ; 3602
; [else-branch 7350] 4 != 2
(pop) ; 3602
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3602
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3602
; 0,00s
; (get-info :all-statistics)
(push) ; 3602
; [then-branch 7351] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7352] 4 == 2
(push) ; 3603
; [else-branch 7352] 4 != 2
(pop) ; 3603
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3603
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3603
; 0,00s
; (get-info :all-statistics)
(push) ; 3603
; [then-branch 7353] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7354] 4 == 2
(push) ; 3604
; [else-branch 7354] 4 != 2
(pop) ; 3604
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3604
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3604
; 0,00s
; (get-info :all-statistics)
(push) ; 3604
; [then-branch 7355] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7356] 4 == 2
(push) ; 3605
; [else-branch 7356] 4 != 2
(pop) ; 3605
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3605
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3605
; 0,00s
; (get-info :all-statistics)
(push) ; 3605
; [then-branch 7357] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7358] 4 == 2
(push) ; 3606
; [else-branch 7358] 4 != 2
(pop) ; 3606
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3606
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3606
; 0,00s
; (get-info :all-statistics)
(push) ; 3606
; [then-branch 7359] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7360] 4 == 2
(push) ; 3607
; [else-branch 7360] 4 != 2
(pop) ; 3607
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3607
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3607
; 0,00s
; (get-info :all-statistics)
(push) ; 3607
; [then-branch 7361] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7362] 4 == 2
(push) ; 3608
; [else-branch 7362] 4 != 2
(pop) ; 3608
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3608
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3608
; 0,00s
; (get-info :all-statistics)
(push) ; 3608
; [then-branch 7363] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7364] 4 == 2
(push) ; 3609
; [else-branch 7364] 4 != 2
(pop) ; 3609
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3609
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3609
; 0,00s
; (get-info :all-statistics)
(push) ; 3609
; [then-branch 7365] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7366] 4 == 2
(push) ; 3610
; [else-branch 7366] 4 != 2
(pop) ; 3610
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3610
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3610
; 0,00s
; (get-info :all-statistics)
(push) ; 3610
; [then-branch 7367] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7368] 4 == 2
(push) ; 3611
; [else-branch 7368] 4 != 2
(pop) ; 3611
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3611
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3611
; 0,00s
; (get-info :all-statistics)
(push) ; 3611
; [then-branch 7369] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7370] 4 == 2
(push) ; 3612
; [else-branch 7370] 4 != 2
(pop) ; 3612
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3612
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3612
; 0,00s
; (get-info :all-statistics)
(push) ; 3612
; [then-branch 7371] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7372] 4 == 2
(push) ; 3613
; [else-branch 7372] 4 != 2
(pop) ; 3613
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3613
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3613
; 0,00s
; (get-info :all-statistics)
(push) ; 3613
; [then-branch 7373] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7374] 4 == 2
(push) ; 3614
; [else-branch 7374] 4 != 2
(pop) ; 3614
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3614
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3614
; 0,00s
; (get-info :all-statistics)
(push) ; 3614
; [then-branch 7375] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7376] 4 == 2
(push) ; 3615
; [else-branch 7376] 4 != 2
(pop) ; 3615
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3615
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3615
; 0,00s
; (get-info :all-statistics)
(push) ; 3615
; [then-branch 7377] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7378] 4 == 2
(push) ; 3616
; [else-branch 7378] 4 != 2
(pop) ; 3616
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3616
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3616
; 0,00s
; (get-info :all-statistics)
(push) ; 3616
; [then-branch 7379] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7380] 4 == 2
(push) ; 3617
; [else-branch 7380] 4 != 2
(pop) ; 3617
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3617
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3617
; 0,00s
; (get-info :all-statistics)
(push) ; 3617
; [then-branch 7381] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7382] 4 == 2
(push) ; 3618
; [else-branch 7382] 4 != 2
(pop) ; 3618
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3618
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3618
; 0,00s
; (get-info :all-statistics)
(push) ; 3618
; [then-branch 7383] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7384] 4 == 2
(push) ; 3619
; [else-branch 7384] 4 != 2
(pop) ; 3619
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3619
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3619
; 0,00s
; (get-info :all-statistics)
(push) ; 3619
; [then-branch 7385] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7386] 4 == 2
(push) ; 3620
; [else-branch 7386] 4 != 2
(pop) ; 3620
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3620
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3620
; 0,00s
; (get-info :all-statistics)
(push) ; 3620
; [then-branch 7387] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7388] 4 == 2
(push) ; 3621
; [else-branch 7388] 4 != 2
(pop) ; 3621
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3621
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3621
; 0,00s
; (get-info :all-statistics)
(push) ; 3621
; [then-branch 7389] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7390] 4 == 2
(push) ; 3622
; [else-branch 7390] 4 != 2
(pop) ; 3622
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3622
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3622
; 0,00s
; (get-info :all-statistics)
(push) ; 3622
; [then-branch 7391] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7392] 4 == 2
(push) ; 3623
; [else-branch 7392] 4 != 2
(pop) ; 3623
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3623
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3623
; 0,00s
; (get-info :all-statistics)
(push) ; 3623
; [then-branch 7393] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7394] 4 == 2
(push) ; 3624
; [else-branch 7394] 4 != 2
(pop) ; 3624
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3624
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3624
; 0,00s
; (get-info :all-statistics)
(push) ; 3624
; [then-branch 7395] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7396] 4 == 2
(push) ; 3625
; [else-branch 7396] 4 != 2
(pop) ; 3625
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3625
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3625
; 0,00s
; (get-info :all-statistics)
(push) ; 3625
; [then-branch 7397] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7398] 4 == 2
(push) ; 3626
; [else-branch 7398] 4 != 2
(pop) ; 3626
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3626
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3626
; 0,00s
; (get-info :all-statistics)
(push) ; 3626
; [then-branch 7399] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7400] 4 == 2
(push) ; 3627
; [else-branch 7400] 4 != 2
(pop) ; 3627
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3627
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3627
; 0,00s
; (get-info :all-statistics)
(push) ; 3627
; [then-branch 7401] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7402] 4 == 2
(push) ; 3628
; [else-branch 7402] 4 != 2
(pop) ; 3628
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3628
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3628
; 0,00s
; (get-info :all-statistics)
(push) ; 3628
; [then-branch 7403] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7404] 4 == 2
(push) ; 3629
; [else-branch 7404] 4 != 2
(pop) ; 3629
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3629
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3629
; 0,00s
; (get-info :all-statistics)
(push) ; 3629
; [then-branch 7405] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7406] 4 == 2
(push) ; 3630
; [else-branch 7406] 4 != 2
(pop) ; 3630
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3630
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3630
; 0,00s
; (get-info :all-statistics)
(push) ; 3630
; [then-branch 7407] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7408] 4 == 2
(push) ; 3631
; [else-branch 7408] 4 != 2
(pop) ; 3631
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3631
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3631
; 0,00s
; (get-info :all-statistics)
(push) ; 3631
; [then-branch 7409] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7410] 4 == 2
(push) ; 3632
; [else-branch 7410] 4 != 2
(pop) ; 3632
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3632
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3632
; 0,00s
; (get-info :all-statistics)
(push) ; 3632
; [then-branch 7411] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7412] 4 == 2
(push) ; 3633
; [else-branch 7412] 4 != 2
(pop) ; 3633
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3633
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3633
; 0,00s
; (get-info :all-statistics)
(push) ; 3633
; [then-branch 7413] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7414] 4 == 2
(push) ; 3634
; [else-branch 7414] 4 != 2
(pop) ; 3634
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3634
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3634
; 0,00s
; (get-info :all-statistics)
(push) ; 3634
; [then-branch 7415] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7416] 4 == 2
(push) ; 3635
; [else-branch 7416] 4 != 2
(pop) ; 3635
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3635
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3635
; 0,00s
; (get-info :all-statistics)
(push) ; 3635
; [then-branch 7417] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7418] 4 == 2
(push) ; 3636
; [else-branch 7418] 4 != 2
(pop) ; 3636
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3636
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3636
; 0,00s
; (get-info :all-statistics)
(push) ; 3636
; [then-branch 7419] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7420] 4 == 2
(push) ; 3637
; [else-branch 7420] 4 != 2
(pop) ; 3637
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3637
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3637
; 0,00s
; (get-info :all-statistics)
(push) ; 3637
; [then-branch 7421] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7422] 4 == 2
(push) ; 3638
; [else-branch 7422] 4 != 2
(pop) ; 3638
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3638
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3638
; 0,00s
; (get-info :all-statistics)
(push) ; 3638
; [then-branch 7423] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7424] 4 == 2
(push) ; 3639
; [else-branch 7424] 4 != 2
(pop) ; 3639
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3639
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3639
; 0,00s
; (get-info :all-statistics)
(push) ; 3639
; [then-branch 7425] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7426] 4 == 2
(push) ; 3640
; [else-branch 7426] 4 != 2
(pop) ; 3640
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3640
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3640
; 0,00s
; (get-info :all-statistics)
(push) ; 3640
; [then-branch 7427] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7428] 4 == 2
(push) ; 3641
; [else-branch 7428] 4 != 2
(pop) ; 3641
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3641
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3641
; 0,00s
; (get-info :all-statistics)
(push) ; 3641
; [then-branch 7429] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7430] 4 == 2
(push) ; 3642
; [else-branch 7430] 4 != 2
(pop) ; 3642
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3642
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3642
; 0,00s
; (get-info :all-statistics)
(push) ; 3642
; [then-branch 7431] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7432] 4 == 2
(push) ; 3643
; [else-branch 7432] 4 != 2
(pop) ; 3643
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3643
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3643
; 0,00s
; (get-info :all-statistics)
(push) ; 3643
; [then-branch 7433] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7434] 4 == 2
(push) ; 3644
; [else-branch 7434] 4 != 2
(pop) ; 3644
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3644
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3644
; 0,00s
; (get-info :all-statistics)
(push) ; 3644
; [then-branch 7435] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7436] 4 == 2
(push) ; 3645
; [else-branch 7436] 4 != 2
(pop) ; 3645
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3645
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3645
; 0,00s
; (get-info :all-statistics)
(push) ; 3645
; [then-branch 7437] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7438] 4 == 2
(push) ; 3646
; [else-branch 7438] 4 != 2
(pop) ; 3646
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3646
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3646
; 0,00s
; (get-info :all-statistics)
(push) ; 3646
; [then-branch 7439] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7440] 4 == 2
(push) ; 3647
; [else-branch 7440] 4 != 2
(pop) ; 3647
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3647
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3647
; 0,00s
; (get-info :all-statistics)
(push) ; 3647
; [then-branch 7441] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7442] 4 == 2
(push) ; 3648
; [else-branch 7442] 4 != 2
(pop) ; 3648
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3648
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3648
; 0,00s
; (get-info :all-statistics)
(push) ; 3648
; [then-branch 7443] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7444] 4 == 2
(push) ; 3649
; [else-branch 7444] 4 != 2
(pop) ; 3649
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3649
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3649
; 0,00s
; (get-info :all-statistics)
(push) ; 3649
; [then-branch 7445] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7446] 4 == 2
(push) ; 3650
; [else-branch 7446] 4 != 2
(pop) ; 3650
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3650
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3650
; 0,00s
; (get-info :all-statistics)
(push) ; 3650
; [then-branch 7447] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7448] 4 == 2
(push) ; 3651
; [else-branch 7448] 4 != 2
(pop) ; 3651
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3651
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3651
; 0,00s
; (get-info :all-statistics)
(push) ; 3651
; [then-branch 7449] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7450] 4 == 2
(push) ; 3652
; [else-branch 7450] 4 != 2
(pop) ; 3652
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3652
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3652
; 0,00s
; (get-info :all-statistics)
(push) ; 3652
; [then-branch 7451] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7452] 4 == 2
(push) ; 3653
; [else-branch 7452] 4 != 2
(pop) ; 3653
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3653
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3653
; 0,00s
; (get-info :all-statistics)
(push) ; 3653
; [then-branch 7453] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7454] 4 == 2
(push) ; 3654
; [else-branch 7454] 4 != 2
(pop) ; 3654
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3654
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3654
; 0,00s
; (get-info :all-statistics)
(push) ; 3654
; [then-branch 7455] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7456] 4 == 2
(push) ; 3655
; [else-branch 7456] 4 != 2
(pop) ; 3655
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3655
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3655
; 0,00s
; (get-info :all-statistics)
(push) ; 3655
; [then-branch 7457] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7458] 4 == 2
(push) ; 3656
; [else-branch 7458] 4 != 2
(pop) ; 3656
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3656
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3656
; 0,00s
; (get-info :all-statistics)
(push) ; 3656
; [then-branch 7459] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7460] 4 == 2
(push) ; 3657
; [else-branch 7460] 4 != 2
(pop) ; 3657
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3657
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3657
; 0,00s
; (get-info :all-statistics)
(push) ; 3657
; [then-branch 7461] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7462] 4 == 2
(push) ; 3658
; [else-branch 7462] 4 != 2
(pop) ; 3658
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3658
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3658
; 0,00s
; (get-info :all-statistics)
(push) ; 3658
; [then-branch 7463] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7464] 4 == 2
(push) ; 3659
; [else-branch 7464] 4 != 2
(pop) ; 3659
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3659
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3659
; 0,00s
; (get-info :all-statistics)
(push) ; 3659
; [then-branch 7465] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7466] 4 == 2
(push) ; 3660
; [else-branch 7466] 4 != 2
(pop) ; 3660
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3660
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3660
; 0,00s
; (get-info :all-statistics)
(push) ; 3660
; [then-branch 7467] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7468] 4 == 2
(push) ; 3661
; [else-branch 7468] 4 != 2
(pop) ; 3661
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3661
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3661
; 0,00s
; (get-info :all-statistics)
(push) ; 3661
; [then-branch 7469] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7470] 4 == 2
(push) ; 3662
; [else-branch 7470] 4 != 2
(pop) ; 3662
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3662
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3662
; 0,00s
; (get-info :all-statistics)
(push) ; 3662
; [then-branch 7471] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7472] 4 == 2
(push) ; 3663
; [else-branch 7472] 4 != 2
(pop) ; 3663
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3663
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3663
; 0,00s
; (get-info :all-statistics)
(push) ; 3663
; [then-branch 7473] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7474] 4 == 2
(push) ; 3664
; [else-branch 7474] 4 != 2
(pop) ; 3664
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3664
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3664
; 0,00s
; (get-info :all-statistics)
(push) ; 3664
; [then-branch 7475] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7476] 4 == 2
(push) ; 3665
; [else-branch 7476] 4 != 2
(pop) ; 3665
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3665
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3665
; 0,00s
; (get-info :all-statistics)
(push) ; 3665
; [then-branch 7477] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7478] 4 == 2
(push) ; 3666
; [else-branch 7478] 4 != 2
(pop) ; 3666
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3666
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3666
; 0,00s
; (get-info :all-statistics)
(push) ; 3666
; [then-branch 7479] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7480] 4 == 2
(push) ; 3667
; [else-branch 7480] 4 != 2
(pop) ; 3667
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3667
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3667
; 0,00s
; (get-info :all-statistics)
(push) ; 3667
; [then-branch 7481] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7482] 4 == 2
(push) ; 3668
; [else-branch 7482] 4 != 2
(pop) ; 3668
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3668
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3668
; 0,00s
; (get-info :all-statistics)
(push) ; 3668
; [then-branch 7483] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7484] 4 == 2
(push) ; 3669
; [else-branch 7484] 4 != 2
(pop) ; 3669
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3669
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3669
; 0,00s
; (get-info :all-statistics)
(push) ; 3669
; [then-branch 7485] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7486] 4 == 2
(push) ; 3670
; [else-branch 7486] 4 != 2
(pop) ; 3670
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3670
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3670
; 0,00s
; (get-info :all-statistics)
(push) ; 3670
; [then-branch 7487] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7488] 4 == 2
(push) ; 3671
; [else-branch 7488] 4 != 2
(pop) ; 3671
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3671
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3671
; 0,00s
; (get-info :all-statistics)
(push) ; 3671
; [then-branch 7489] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7490] 4 == 2
(push) ; 3672
; [else-branch 7490] 4 != 2
(pop) ; 3672
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3672
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3672
; 0,00s
; (get-info :all-statistics)
(push) ; 3672
; [then-branch 7491] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7492] 4 == 2
(push) ; 3673
; [else-branch 7492] 4 != 2
(pop) ; 3673
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3673
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3673
; 0,00s
; (get-info :all-statistics)
(push) ; 3673
; [then-branch 7493] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7494] 4 == 2
(push) ; 3674
; [else-branch 7494] 4 != 2
(pop) ; 3674
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3674
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3674
; 0,00s
; (get-info :all-statistics)
(push) ; 3674
; [then-branch 7495] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7496] 4 == 2
(push) ; 3675
; [else-branch 7496] 4 != 2
(pop) ; 3675
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3675
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3675
; 0,00s
; (get-info :all-statistics)
(push) ; 3675
; [then-branch 7497] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7498] 4 == 2
(push) ; 3676
; [else-branch 7498] 4 != 2
(pop) ; 3676
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3676
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3676
; 0,00s
; (get-info :all-statistics)
(push) ; 3676
; [then-branch 7499] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7500] 4 == 2
(push) ; 3677
; [else-branch 7500] 4 != 2
(pop) ; 3677
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3677
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3677
; 0,00s
; (get-info :all-statistics)
(push) ; 3677
; [then-branch 7501] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7502] 4 == 2
(push) ; 3678
; [else-branch 7502] 4 != 2
(pop) ; 3678
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3678
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3678
; 0,00s
; (get-info :all-statistics)
(push) ; 3678
; [then-branch 7503] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7504] 4 == 2
(push) ; 3679
; [else-branch 7504] 4 != 2
(pop) ; 3679
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3679
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3679
; 0,00s
; (get-info :all-statistics)
(push) ; 3679
; [then-branch 7505] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7506] 4 == 2
(push) ; 3680
; [else-branch 7506] 4 != 2
(pop) ; 3680
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3680
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3680
; 0,00s
; (get-info :all-statistics)
(push) ; 3680
; [then-branch 7507] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7508] 4 == 2
(push) ; 3681
; [else-branch 7508] 4 != 2
(pop) ; 3681
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3681
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3681
; 0,00s
; (get-info :all-statistics)
(push) ; 3681
; [then-branch 7509] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7510] 4 == 2
(push) ; 3682
; [else-branch 7510] 4 != 2
(pop) ; 3682
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3682
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3682
; 0,00s
; (get-info :all-statistics)
(push) ; 3682
; [then-branch 7511] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7512] 4 == 2
(push) ; 3683
; [else-branch 7512] 4 != 2
(pop) ; 3683
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3683
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3683
; 0,00s
; (get-info :all-statistics)
(push) ; 3683
; [then-branch 7513] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7514] 4 == 2
(push) ; 3684
; [else-branch 7514] 4 != 2
(pop) ; 3684
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3684
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3684
; 0,00s
; (get-info :all-statistics)
(push) ; 3684
; [then-branch 7515] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7516] 4 == 2
(push) ; 3685
; [else-branch 7516] 4 != 2
(pop) ; 3685
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3685
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3685
; 0,00s
; (get-info :all-statistics)
(push) ; 3685
; [then-branch 7517] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7518] 4 == 2
(push) ; 3686
; [else-branch 7518] 4 != 2
(pop) ; 3686
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3686
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3686
; 0,00s
; (get-info :all-statistics)
(push) ; 3686
; [then-branch 7519] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7520] 4 == 2
(push) ; 3687
; [else-branch 7520] 4 != 2
(pop) ; 3687
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3687
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3687
; 0,00s
; (get-info :all-statistics)
(push) ; 3687
; [then-branch 7521] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7522] 4 == 2
(push) ; 3688
; [else-branch 7522] 4 != 2
(pop) ; 3688
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3688
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3688
; 0,00s
; (get-info :all-statistics)
(push) ; 3688
; [then-branch 7523] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7524] 4 == 2
(push) ; 3689
; [else-branch 7524] 4 != 2
(pop) ; 3689
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3689
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3689
; 0,00s
; (get-info :all-statistics)
(push) ; 3689
; [then-branch 7525] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7526] 4 == 2
(push) ; 3690
; [else-branch 7526] 4 != 2
(pop) ; 3690
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3690
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3690
; 0,00s
; (get-info :all-statistics)
(push) ; 3690
; [then-branch 7527] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7528] 4 == 2
(push) ; 3691
; [else-branch 7528] 4 != 2
(pop) ; 3691
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3691
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3691
; 0,00s
; (get-info :all-statistics)
(push) ; 3691
; [then-branch 7529] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7530] 4 == 2
(push) ; 3692
; [else-branch 7530] 4 != 2
(pop) ; 3692
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3692
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3692
; 0,00s
; (get-info :all-statistics)
(push) ; 3692
; [then-branch 7531] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7532] 4 == 2
(push) ; 3693
; [else-branch 7532] 4 != 2
(pop) ; 3693
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3693
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3693
; 0,00s
; (get-info :all-statistics)
(push) ; 3693
; [then-branch 7533] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7534] 4 == 2
(push) ; 3694
; [else-branch 7534] 4 != 2
(pop) ; 3694
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3694
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3694
; 0,00s
; (get-info :all-statistics)
(push) ; 3694
; [then-branch 7535] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7536] 4 == 2
(push) ; 3695
; [else-branch 7536] 4 != 2
(pop) ; 3695
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3695
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3695
; 0,00s
; (get-info :all-statistics)
(push) ; 3695
; [then-branch 7537] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7538] 4 == 2
(push) ; 3696
; [else-branch 7538] 4 != 2
(pop) ; 3696
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3696
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3696
; 0,00s
; (get-info :all-statistics)
(push) ; 3696
; [then-branch 7539] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7540] 4 == 2
(push) ; 3697
; [else-branch 7540] 4 != 2
(pop) ; 3697
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3697
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3697
; 0,00s
; (get-info :all-statistics)
(push) ; 3697
; [then-branch 7541] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7542] 4 == 2
(push) ; 3698
; [else-branch 7542] 4 != 2
(pop) ; 3698
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3698
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3698
; 0,00s
; (get-info :all-statistics)
(push) ; 3698
; [then-branch 7543] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7544] 4 == 2
(push) ; 3699
; [else-branch 7544] 4 != 2
(pop) ; 3699
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3699
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3699
; 0,00s
; (get-info :all-statistics)
(push) ; 3699
; [then-branch 7545] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7546] 4 == 2
(push) ; 3700
; [else-branch 7546] 4 != 2
(pop) ; 3700
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3700
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3700
; 0,00s
; (get-info :all-statistics)
(push) ; 3700
; [then-branch 7547] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7548] 4 == 2
(push) ; 3701
; [else-branch 7548] 4 != 2
(pop) ; 3701
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3701
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3701
; 0,00s
; (get-info :all-statistics)
(push) ; 3701
; [then-branch 7549] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7550] 4 == 2
(push) ; 3702
; [else-branch 7550] 4 != 2
(pop) ; 3702
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3702
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3702
; 0,00s
; (get-info :all-statistics)
(push) ; 3702
; [then-branch 7551] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7552] 4 == 2
(push) ; 3703
; [else-branch 7552] 4 != 2
(pop) ; 3703
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3703
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3703
; 0,00s
; (get-info :all-statistics)
(push) ; 3703
; [then-branch 7553] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7554] 4 == 2
(push) ; 3704
; [else-branch 7554] 4 != 2
(pop) ; 3704
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3704
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3704
; 0,00s
; (get-info :all-statistics)
(push) ; 3704
; [then-branch 7555] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7556] 4 == 2
(push) ; 3705
; [else-branch 7556] 4 != 2
(pop) ; 3705
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3705
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3705
; 0,00s
; (get-info :all-statistics)
(push) ; 3705
; [then-branch 7557] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7558] 4 == 2
(push) ; 3706
; [else-branch 7558] 4 != 2
(pop) ; 3706
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3706
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3706
; 0,00s
; (get-info :all-statistics)
(push) ; 3706
; [then-branch 7559] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7560] 4 == 2
(push) ; 3707
; [else-branch 7560] 4 != 2
(pop) ; 3707
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3707
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3707
; 0,00s
; (get-info :all-statistics)
(push) ; 3707
; [then-branch 7561] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7562] 4 == 2
(push) ; 3708
; [else-branch 7562] 4 != 2
(pop) ; 3708
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3708
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3708
; 0,00s
; (get-info :all-statistics)
(push) ; 3708
; [then-branch 7563] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7564] 4 == 2
(push) ; 3709
; [else-branch 7564] 4 != 2
(pop) ; 3709
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3709
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3709
; 0,00s
; (get-info :all-statistics)
(push) ; 3709
; [then-branch 7565] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7566] 4 == 2
(push) ; 3710
; [else-branch 7566] 4 != 2
(pop) ; 3710
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3710
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3710
; 0,00s
; (get-info :all-statistics)
(push) ; 3710
; [then-branch 7567] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7568] 4 == 2
(push) ; 3711
; [else-branch 7568] 4 != 2
(pop) ; 3711
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3711
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3711
; 0,00s
; (get-info :all-statistics)
(push) ; 3711
; [then-branch 7569] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7570] 4 == 2
(push) ; 3712
; [else-branch 7570] 4 != 2
(pop) ; 3712
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3712
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3712
; 0,00s
; (get-info :all-statistics)
(push) ; 3712
; [then-branch 7571] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7572] 4 == 2
(push) ; 3713
; [else-branch 7572] 4 != 2
(pop) ; 3713
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3713
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3713
; 0,00s
; (get-info :all-statistics)
(push) ; 3713
; [then-branch 7573] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7574] 4 == 2
(push) ; 3714
; [else-branch 7574] 4 != 2
(pop) ; 3714
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3714
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3714
; 0,00s
; (get-info :all-statistics)
(push) ; 3714
; [then-branch 7575] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7576] 4 == 2
(push) ; 3715
; [else-branch 7576] 4 != 2
(pop) ; 3715
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3715
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3715
; 0,00s
; (get-info :all-statistics)
(push) ; 3715
; [then-branch 7577] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7578] 4 == 2
(push) ; 3716
; [else-branch 7578] 4 != 2
(pop) ; 3716
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3716
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3716
; 0,00s
; (get-info :all-statistics)
(push) ; 3716
; [then-branch 7579] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7580] 4 == 2
(push) ; 3717
; [else-branch 7580] 4 != 2
(pop) ; 3717
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3717
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3717
; 0,00s
; (get-info :all-statistics)
(push) ; 3717
; [then-branch 7581] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7582] 4 == 2
(push) ; 3718
; [else-branch 7582] 4 != 2
(pop) ; 3718
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3718
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3718
; 0,00s
; (get-info :all-statistics)
(push) ; 3718
; [then-branch 7583] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7584] 4 == 2
(push) ; 3719
; [else-branch 7584] 4 != 2
(pop) ; 3719
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3719
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3719
; 0,00s
; (get-info :all-statistics)
(push) ; 3719
; [then-branch 7585] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7586] 4 == 2
(push) ; 3720
; [else-branch 7586] 4 != 2
(pop) ; 3720
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3720
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3720
; 0,00s
; (get-info :all-statistics)
(push) ; 3720
; [then-branch 7587] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7588] 4 == 2
(push) ; 3721
; [else-branch 7588] 4 != 2
(pop) ; 3721
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3721
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3721
; 0,00s
; (get-info :all-statistics)
(push) ; 3721
; [then-branch 7589] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7590] 4 == 2
(push) ; 3722
; [else-branch 7590] 4 != 2
(pop) ; 3722
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3722
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3722
; 0,00s
; (get-info :all-statistics)
(push) ; 3722
; [then-branch 7591] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7592] 4 == 2
(push) ; 3723
; [else-branch 7592] 4 != 2
(pop) ; 3723
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3723
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3723
; 0,00s
; (get-info :all-statistics)
(push) ; 3723
; [then-branch 7593] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7594] 4 == 2
(push) ; 3724
; [else-branch 7594] 4 != 2
(pop) ; 3724
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3724
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3724
; 0,00s
; (get-info :all-statistics)
(push) ; 3724
; [then-branch 7595] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7596] 4 == 2
(push) ; 3725
; [else-branch 7596] 4 != 2
(pop) ; 3725
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3725
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3725
; 0,00s
; (get-info :all-statistics)
(push) ; 3725
; [then-branch 7597] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7598] 4 == 2
(push) ; 3726
; [else-branch 7598] 4 != 2
(pop) ; 3726
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3726
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3726
; 0,00s
; (get-info :all-statistics)
(push) ; 3726
; [then-branch 7599] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7600] 4 == 2
(push) ; 3727
; [else-branch 7600] 4 != 2
(pop) ; 3727
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3727
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3727
; 0,00s
; (get-info :all-statistics)
(push) ; 3727
; [then-branch 7601] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7602] 4 == 2
(push) ; 3728
; [else-branch 7602] 4 != 2
(pop) ; 3728
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3728
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3728
; 0,00s
; (get-info :all-statistics)
(push) ; 3728
; [then-branch 7603] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7604] 4 == 2
(push) ; 3729
; [else-branch 7604] 4 != 2
(pop) ; 3729
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3729
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3729
; 0,00s
; (get-info :all-statistics)
(push) ; 3729
; [then-branch 7605] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7606] 4 == 2
(push) ; 3730
; [else-branch 7606] 4 != 2
(pop) ; 3730
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3730
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3730
; 0,00s
; (get-info :all-statistics)
(push) ; 3730
; [then-branch 7607] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7608] 4 == 2
(push) ; 3731
; [else-branch 7608] 4 != 2
(pop) ; 3731
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3731
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3731
; 0,00s
; (get-info :all-statistics)
(push) ; 3731
; [then-branch 7609] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7610] 4 == 2
(push) ; 3732
; [else-branch 7610] 4 != 2
(pop) ; 3732
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3732
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3732
; 0,00s
; (get-info :all-statistics)
(push) ; 3732
; [then-branch 7611] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7612] 4 == 2
(push) ; 3733
; [else-branch 7612] 4 != 2
(pop) ; 3733
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3733
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3733
; 0,00s
; (get-info :all-statistics)
(push) ; 3733
; [then-branch 7613] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7614] 4 == 2
(push) ; 3734
; [else-branch 7614] 4 != 2
(pop) ; 3734
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3734
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3734
; 0,00s
; (get-info :all-statistics)
(push) ; 3734
; [then-branch 7615] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7616] 4 == 2
(push) ; 3735
; [else-branch 7616] 4 != 2
(pop) ; 3735
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3735
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3735
; 0,00s
; (get-info :all-statistics)
(push) ; 3735
; [then-branch 7617] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7618] 4 == 2
(push) ; 3736
; [else-branch 7618] 4 != 2
(pop) ; 3736
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3736
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3736
; 0,00s
; (get-info :all-statistics)
(push) ; 3736
; [then-branch 7619] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7620] 4 == 2
(push) ; 3737
; [else-branch 7620] 4 != 2
(pop) ; 3737
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3737
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3737
; 0,00s
; (get-info :all-statistics)
(push) ; 3737
; [then-branch 7621] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7622] 4 == 2
(push) ; 3738
; [else-branch 7622] 4 != 2
(pop) ; 3738
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3738
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3738
; 0,00s
; (get-info :all-statistics)
(push) ; 3738
; [then-branch 7623] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7624] 4 == 2
(push) ; 3739
; [else-branch 7624] 4 != 2
(pop) ; 3739
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3739
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3739
; 0,00s
; (get-info :all-statistics)
(push) ; 3739
; [then-branch 7625] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7626] 4 == 2
(push) ; 3740
; [else-branch 7626] 4 != 2
(pop) ; 3740
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3740
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3740
; 0,00s
; (get-info :all-statistics)
(push) ; 3740
; [then-branch 7627] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7628] 4 == 2
(push) ; 3741
; [else-branch 7628] 4 != 2
(pop) ; 3741
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3741
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3741
; 0,00s
; (get-info :all-statistics)
(push) ; 3741
; [then-branch 7629] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7630] 4 == 2
(push) ; 3742
; [else-branch 7630] 4 != 2
(pop) ; 3742
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3742
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3742
; 0,00s
; (get-info :all-statistics)
(push) ; 3742
; [then-branch 7631] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7632] 4 == 2
(push) ; 3743
; [else-branch 7632] 4 != 2
(pop) ; 3743
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3743
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3743
; 0,00s
; (get-info :all-statistics)
(push) ; 3743
; [then-branch 7633] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7634] 4 == 2
(push) ; 3744
; [else-branch 7634] 4 != 2
(pop) ; 3744
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3744
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3744
; 0,00s
; (get-info :all-statistics)
(push) ; 3744
; [then-branch 7635] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7636] 4 == 2
(push) ; 3745
; [else-branch 7636] 4 != 2
(pop) ; 3745
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3745
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3745
; 0,00s
; (get-info :all-statistics)
(push) ; 3745
; [then-branch 7637] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7638] 4 == 2
(push) ; 3746
; [else-branch 7638] 4 != 2
(pop) ; 3746
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3746
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3746
; 0,00s
; (get-info :all-statistics)
(push) ; 3746
; [then-branch 7639] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7640] 4 == 2
(push) ; 3747
; [else-branch 7640] 4 != 2
(pop) ; 3747
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3747
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3747
; 0,00s
; (get-info :all-statistics)
(push) ; 3747
; [then-branch 7641] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7642] 4 == 2
(push) ; 3748
; [else-branch 7642] 4 != 2
(pop) ; 3748
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3748
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3748
; 0,00s
; (get-info :all-statistics)
(push) ; 3748
; [then-branch 7643] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7644] 4 == 2
(push) ; 3749
; [else-branch 7644] 4 != 2
(pop) ; 3749
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3749
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3749
; 0,00s
; (get-info :all-statistics)
(push) ; 3749
; [then-branch 7645] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7646] 4 == 2
(push) ; 3750
; [else-branch 7646] 4 != 2
(pop) ; 3750
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3750
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3750
; 0,00s
; (get-info :all-statistics)
(push) ; 3750
; [then-branch 7647] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7648] 4 == 2
(push) ; 3751
; [else-branch 7648] 4 != 2
(pop) ; 3751
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3751
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3751
; 0,00s
; (get-info :all-statistics)
(push) ; 3751
; [then-branch 7649] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7650] 4 == 2
(push) ; 3752
; [else-branch 7650] 4 != 2
(pop) ; 3752
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3752
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3752
; 0,00s
; (get-info :all-statistics)
(push) ; 3752
; [then-branch 7651] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7652] 4 == 2
(push) ; 3753
; [else-branch 7652] 4 != 2
(pop) ; 3753
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3753
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3753
; 0,00s
; (get-info :all-statistics)
(push) ; 3753
; [then-branch 7653] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7654] 4 == 2
(push) ; 3754
; [else-branch 7654] 4 != 2
(pop) ; 3754
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3754
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3754
; 0,00s
; (get-info :all-statistics)
(push) ; 3754
; [then-branch 7655] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7656] 4 == 2
(push) ; 3755
; [else-branch 7656] 4 != 2
(pop) ; 3755
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3755
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3755
; 0,00s
; (get-info :all-statistics)
(push) ; 3755
; [then-branch 7657] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7658] 4 == 2
(push) ; 3756
; [else-branch 7658] 4 != 2
(pop) ; 3756
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3756
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3756
; 0,00s
; (get-info :all-statistics)
(push) ; 3756
; [then-branch 7659] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7660] 4 == 2
(push) ; 3757
; [else-branch 7660] 4 != 2
(pop) ; 3757
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3757
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3757
; 0,00s
; (get-info :all-statistics)
(push) ; 3757
; [then-branch 7661] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7662] 4 == 2
(push) ; 3758
; [else-branch 7662] 4 != 2
(pop) ; 3758
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3758
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3758
; 0,00s
; (get-info :all-statistics)
(push) ; 3758
; [then-branch 7663] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7664] 4 == 2
(push) ; 3759
; [else-branch 7664] 4 != 2
(pop) ; 3759
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3759
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3759
; 0,00s
; (get-info :all-statistics)
(push) ; 3759
; [then-branch 7665] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7666] 4 == 2
(push) ; 3760
; [else-branch 7666] 4 != 2
(pop) ; 3760
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3760
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3760
; 0,00s
; (get-info :all-statistics)
(push) ; 3760
; [then-branch 7667] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7668] 4 == 2
(push) ; 3761
; [else-branch 7668] 4 != 2
(pop) ; 3761
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3761
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3761
; 0,00s
; (get-info :all-statistics)
(push) ; 3761
; [then-branch 7669] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7670] 4 == 2
(push) ; 3762
; [else-branch 7670] 4 != 2
(pop) ; 3762
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3762
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3762
; 0,00s
; (get-info :all-statistics)
(push) ; 3762
; [then-branch 7671] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7672] 4 == 2
(push) ; 3763
; [else-branch 7672] 4 != 2
(pop) ; 3763
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3763
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3763
; 0,00s
; (get-info :all-statistics)
(push) ; 3763
; [then-branch 7673] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7674] 4 == 2
(push) ; 3764
; [else-branch 7674] 4 != 2
(pop) ; 3764
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3764
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3764
; 0,00s
; (get-info :all-statistics)
(push) ; 3764
; [then-branch 7675] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7676] 4 == 2
(push) ; 3765
; [else-branch 7676] 4 != 2
(pop) ; 3765
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3765
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3765
; 0,00s
; (get-info :all-statistics)
(push) ; 3765
; [then-branch 7677] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7678] 4 == 2
(push) ; 3766
; [else-branch 7678] 4 != 2
(pop) ; 3766
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3766
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3766
; 0,00s
; (get-info :all-statistics)
(push) ; 3766
; [then-branch 7679] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7680] 4 == 2
(push) ; 3767
; [else-branch 7680] 4 != 2
(pop) ; 3767
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3767
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3767
; 0,00s
; (get-info :all-statistics)
(push) ; 3767
; [then-branch 7681] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7682] 4 == 2
(push) ; 3768
; [else-branch 7682] 4 != 2
(pop) ; 3768
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3768
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3768
; 0,00s
; (get-info :all-statistics)
(push) ; 3768
; [then-branch 7683] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7684] 4 == 2
(push) ; 3769
; [else-branch 7684] 4 != 2
(pop) ; 3769
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3769
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3769
; 0,00s
; (get-info :all-statistics)
(push) ; 3769
; [then-branch 7685] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7686] 4 == 2
(push) ; 3770
; [else-branch 7686] 4 != 2
(pop) ; 3770
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3770
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3770
; 0,00s
; (get-info :all-statistics)
(push) ; 3770
; [then-branch 7687] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7688] 4 == 2
(push) ; 3771
; [else-branch 7688] 4 != 2
(pop) ; 3771
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3771
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3771
; 0,00s
; (get-info :all-statistics)
(push) ; 3771
; [then-branch 7689] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7690] 4 == 2
(push) ; 3772
; [else-branch 7690] 4 != 2
(pop) ; 3772
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3772
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3772
; 0,00s
; (get-info :all-statistics)
(push) ; 3772
; [then-branch 7691] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7692] 4 == 2
(push) ; 3773
; [else-branch 7692] 4 != 2
(pop) ; 3773
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3773
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3773
; 0,00s
; (get-info :all-statistics)
(push) ; 3773
; [then-branch 7693] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7694] 4 == 2
(push) ; 3774
; [else-branch 7694] 4 != 2
(pop) ; 3774
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3774
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3774
; 0,00s
; (get-info :all-statistics)
(push) ; 3774
; [then-branch 7695] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7696] 4 == 2
(push) ; 3775
; [else-branch 7696] 4 != 2
(pop) ; 3775
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3775
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3775
; 0,00s
; (get-info :all-statistics)
(push) ; 3775
; [then-branch 7697] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7698] 4 == 2
(push) ; 3776
; [else-branch 7698] 4 != 2
(pop) ; 3776
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3776
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3776
; 0,00s
; (get-info :all-statistics)
(push) ; 3776
; [then-branch 7699] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7700] 4 == 2
(push) ; 3777
; [else-branch 7700] 4 != 2
(pop) ; 3777
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3777
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3777
; 0,00s
; (get-info :all-statistics)
(push) ; 3777
; [then-branch 7701] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7702] 4 == 2
(push) ; 3778
; [else-branch 7702] 4 != 2
(pop) ; 3778
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3778
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3778
; 0,00s
; (get-info :all-statistics)
(push) ; 3778
; [then-branch 7703] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7704] 4 == 2
(push) ; 3779
; [else-branch 7704] 4 != 2
(pop) ; 3779
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3779
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3779
; 0,00s
; (get-info :all-statistics)
(push) ; 3779
; [then-branch 7705] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7706] 4 == 2
(push) ; 3780
; [else-branch 7706] 4 != 2
(pop) ; 3780
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3780
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3780
; 0,00s
; (get-info :all-statistics)
(push) ; 3780
; [then-branch 7707] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7708] 4 == 2
(push) ; 3781
; [else-branch 7708] 4 != 2
(pop) ; 3781
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3781
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3781
; 0,00s
; (get-info :all-statistics)
(push) ; 3781
; [then-branch 7709] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7710] 4 == 2
(push) ; 3782
; [else-branch 7710] 4 != 2
(pop) ; 3782
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3782
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3782
; 0,00s
; (get-info :all-statistics)
(push) ; 3782
; [then-branch 7711] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7712] 4 == 2
(push) ; 3783
; [else-branch 7712] 4 != 2
(pop) ; 3783
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3783
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3783
; 0,00s
; (get-info :all-statistics)
(push) ; 3783
; [then-branch 7713] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7714] 4 == 2
(push) ; 3784
; [else-branch 7714] 4 != 2
(pop) ; 3784
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3784
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3784
; 0,00s
; (get-info :all-statistics)
(push) ; 3784
; [then-branch 7715] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7716] 4 == 2
(push) ; 3785
; [else-branch 7716] 4 != 2
(pop) ; 3785
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3785
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3785
; 0,00s
; (get-info :all-statistics)
(push) ; 3785
; [then-branch 7717] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7718] 4 == 2
(push) ; 3786
; [else-branch 7718] 4 != 2
(pop) ; 3786
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3786
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3786
; 0,00s
; (get-info :all-statistics)
(push) ; 3786
; [then-branch 7719] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7720] 4 == 2
(push) ; 3787
; [else-branch 7720] 4 != 2
(pop) ; 3787
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3787
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3787
; 0,00s
; (get-info :all-statistics)
(push) ; 3787
; [then-branch 7721] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7722] 4 == 2
(push) ; 3788
; [else-branch 7722] 4 != 2
(pop) ; 3788
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3788
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3788
; 0,00s
; (get-info :all-statistics)
(push) ; 3788
; [then-branch 7723] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7724] 4 == 2
(push) ; 3789
; [else-branch 7724] 4 != 2
(pop) ; 3789
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3789
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3789
; 0,00s
; (get-info :all-statistics)
(push) ; 3789
; [then-branch 7725] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7726] 4 == 2
(push) ; 3790
; [else-branch 7726] 4 != 2
(pop) ; 3790
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3790
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3790
; 0,00s
; (get-info :all-statistics)
(push) ; 3790
; [then-branch 7727] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7728] 4 == 2
(push) ; 3791
; [else-branch 7728] 4 != 2
(pop) ; 3791
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3791
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3791
; 0,00s
; (get-info :all-statistics)
(push) ; 3791
; [then-branch 7729] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7730] 4 == 2
(push) ; 3792
; [else-branch 7730] 4 != 2
(pop) ; 3792
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3792
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3792
; 0,00s
; (get-info :all-statistics)
(push) ; 3792
; [then-branch 7731] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7732] 4 == 2
(push) ; 3793
; [else-branch 7732] 4 != 2
(pop) ; 3793
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3793
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3793
; 0,00s
; (get-info :all-statistics)
(push) ; 3793
; [then-branch 7733] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7734] 4 == 2
(push) ; 3794
; [else-branch 7734] 4 != 2
(pop) ; 3794
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3794
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3794
; 0,00s
; (get-info :all-statistics)
(push) ; 3794
; [then-branch 7735] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7736] 4 == 2
(push) ; 3795
; [else-branch 7736] 4 != 2
(pop) ; 3795
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3795
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3795
; 0,00s
; (get-info :all-statistics)
(push) ; 3795
; [then-branch 7737] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7738] 4 == 2
(push) ; 3796
; [else-branch 7738] 4 != 2
(pop) ; 3796
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3796
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3796
; 0,00s
; (get-info :all-statistics)
(push) ; 3796
; [then-branch 7739] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7740] 4 == 2
(push) ; 3797
; [else-branch 7740] 4 != 2
(pop) ; 3797
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3797
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3797
; 0,00s
; (get-info :all-statistics)
(push) ; 3797
; [then-branch 7741] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7742] 4 == 2
(push) ; 3798
; [else-branch 7742] 4 != 2
(pop) ; 3798
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3798
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3798
; 0,00s
; (get-info :all-statistics)
(push) ; 3798
; [then-branch 7743] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7744] 4 == 2
(push) ; 3799
; [else-branch 7744] 4 != 2
(pop) ; 3799
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3799
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3799
; 0,00s
; (get-info :all-statistics)
(push) ; 3799
; [then-branch 7745] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7746] 4 == 2
(push) ; 3800
; [else-branch 7746] 4 != 2
(pop) ; 3800
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3800
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3800
; 0,00s
; (get-info :all-statistics)
(push) ; 3800
; [then-branch 7747] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7748] 4 == 2
(push) ; 3801
; [else-branch 7748] 4 != 2
(pop) ; 3801
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3801
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3801
; 0,00s
; (get-info :all-statistics)
(push) ; 3801
; [then-branch 7749] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7750] 4 == 2
(push) ; 3802
; [else-branch 7750] 4 != 2
(pop) ; 3802
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3802
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3802
; 0,00s
; (get-info :all-statistics)
(push) ; 3802
; [then-branch 7751] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7752] 4 == 2
(push) ; 3803
; [else-branch 7752] 4 != 2
(pop) ; 3803
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3803
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3803
; 0,00s
; (get-info :all-statistics)
(push) ; 3803
; [then-branch 7753] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7754] 4 == 2
(push) ; 3804
; [else-branch 7754] 4 != 2
(pop) ; 3804
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3804
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3804
; 0,00s
; (get-info :all-statistics)
(push) ; 3804
; [then-branch 7755] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7756] 4 == 2
(push) ; 3805
; [else-branch 7756] 4 != 2
(pop) ; 3805
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3805
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3805
; 0,00s
; (get-info :all-statistics)
(push) ; 3805
; [then-branch 7757] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7758] 4 == 2
(push) ; 3806
; [else-branch 7758] 4 != 2
(pop) ; 3806
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3806
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3806
; 0,00s
; (get-info :all-statistics)
(push) ; 3806
; [then-branch 7759] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7760] 4 == 2
(push) ; 3807
; [else-branch 7760] 4 != 2
(pop) ; 3807
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3807
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3807
; 0,00s
; (get-info :all-statistics)
(push) ; 3807
; [then-branch 7761] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7762] 4 == 2
(push) ; 3808
; [else-branch 7762] 4 != 2
(pop) ; 3808
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3808
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3808
; 0,00s
; (get-info :all-statistics)
(push) ; 3808
; [then-branch 7763] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7764] 4 == 2
(push) ; 3809
; [else-branch 7764] 4 != 2
(pop) ; 3809
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3809
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3809
; 0,00s
; (get-info :all-statistics)
(push) ; 3809
; [then-branch 7765] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7766] 4 == 2
(push) ; 3810
; [else-branch 7766] 4 != 2
(pop) ; 3810
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3810
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3810
; 0,00s
; (get-info :all-statistics)
(push) ; 3810
; [then-branch 7767] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7768] 4 == 2
(push) ; 3811
; [else-branch 7768] 4 != 2
(pop) ; 3811
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3811
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3811
; 0,00s
; (get-info :all-statistics)
(push) ; 3811
; [then-branch 7769] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7770] 4 == 2
(push) ; 3812
; [else-branch 7770] 4 != 2
(pop) ; 3812
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3812
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3812
; 0,00s
; (get-info :all-statistics)
(push) ; 3812
; [then-branch 7771] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7772] 4 == 2
(push) ; 3813
; [else-branch 7772] 4 != 2
(pop) ; 3813
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3813
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3813
; 0,00s
; (get-info :all-statistics)
(push) ; 3813
; [then-branch 7773] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7774] 4 == 2
(push) ; 3814
; [else-branch 7774] 4 != 2
(pop) ; 3814
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3814
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3814
; 0,00s
; (get-info :all-statistics)
(push) ; 3814
; [then-branch 7775] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7776] 4 == 2
(push) ; 3815
; [else-branch 7776] 4 != 2
(pop) ; 3815
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3815
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3815
; 0,00s
; (get-info :all-statistics)
(push) ; 3815
; [then-branch 7777] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7778] 4 == 2
(push) ; 3816
; [else-branch 7778] 4 != 2
(pop) ; 3816
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3816
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3816
; 0,00s
; (get-info :all-statistics)
(push) ; 3816
; [then-branch 7779] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7780] 4 == 2
(push) ; 3817
; [else-branch 7780] 4 != 2
(pop) ; 3817
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3817
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3817
; 0,00s
; (get-info :all-statistics)
(push) ; 3817
; [then-branch 7781] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7782] 4 == 2
(push) ; 3818
; [else-branch 7782] 4 != 2
(pop) ; 3818
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3818
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3818
; 0,00s
; (get-info :all-statistics)
(push) ; 3818
; [then-branch 7783] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7784] 4 == 2
(push) ; 3819
; [else-branch 7784] 4 != 2
(pop) ; 3819
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3819
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3819
; 0,00s
; (get-info :all-statistics)
(push) ; 3819
; [then-branch 7785] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7786] 4 == 2
(push) ; 3820
; [else-branch 7786] 4 != 2
(pop) ; 3820
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3820
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3820
; 0,00s
; (get-info :all-statistics)
(push) ; 3820
; [then-branch 7787] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7788] 4 == 2
(push) ; 3821
; [else-branch 7788] 4 != 2
(pop) ; 3821
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3821
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3821
; 0,00s
; (get-info :all-statistics)
(push) ; 3821
; [then-branch 7789] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7790] 4 == 2
(push) ; 3822
; [else-branch 7790] 4 != 2
(pop) ; 3822
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3822
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3822
; 0,00s
; (get-info :all-statistics)
(push) ; 3822
; [then-branch 7791] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7792] 4 == 2
(push) ; 3823
; [else-branch 7792] 4 != 2
(pop) ; 3823
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3823
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3823
; 0,00s
; (get-info :all-statistics)
(push) ; 3823
; [then-branch 7793] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7794] 4 == 2
(push) ; 3824
; [else-branch 7794] 4 != 2
(pop) ; 3824
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3824
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3824
; 0,00s
; (get-info :all-statistics)
(push) ; 3824
; [then-branch 7795] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7796] 4 == 2
(push) ; 3825
; [else-branch 7796] 4 != 2
(pop) ; 3825
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3825
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3825
; 0,00s
; (get-info :all-statistics)
(push) ; 3825
; [then-branch 7797] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7798] 4 == 2
(push) ; 3826
; [else-branch 7798] 4 != 2
(pop) ; 3826
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3826
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3826
; 0,00s
; (get-info :all-statistics)
(push) ; 3826
; [then-branch 7799] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7800] 4 == 2
(push) ; 3827
; [else-branch 7800] 4 != 2
(pop) ; 3827
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3827
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3827
; 0,00s
; (get-info :all-statistics)
(push) ; 3827
; [then-branch 7801] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7802] 4 == 2
(push) ; 3828
; [else-branch 7802] 4 != 2
(pop) ; 3828
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3828
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3828
; 0,00s
; (get-info :all-statistics)
(push) ; 3828
; [then-branch 7803] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7804] 4 == 2
(push) ; 3829
; [else-branch 7804] 4 != 2
(pop) ; 3829
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3829
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3829
; 0,00s
; (get-info :all-statistics)
(push) ; 3829
; [then-branch 7805] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7806] 4 == 2
(push) ; 3830
; [else-branch 7806] 4 != 2
(pop) ; 3830
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3830
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3830
; 0,00s
; (get-info :all-statistics)
(push) ; 3830
; [then-branch 7807] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7808] 4 == 2
(push) ; 3831
; [else-branch 7808] 4 != 2
(pop) ; 3831
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3831
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3831
; 0,00s
; (get-info :all-statistics)
(push) ; 3831
; [then-branch 7809] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7810] 4 == 2
(push) ; 3832
; [else-branch 7810] 4 != 2
(pop) ; 3832
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3832
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3832
; 0,00s
; (get-info :all-statistics)
(push) ; 3832
; [then-branch 7811] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7812] 4 == 2
(push) ; 3833
; [else-branch 7812] 4 != 2
(pop) ; 3833
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3833
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3833
; 0,00s
; (get-info :all-statistics)
(push) ; 3833
; [then-branch 7813] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7814] 4 == 2
(push) ; 3834
; [else-branch 7814] 4 != 2
(pop) ; 3834
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3834
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3834
; 0,00s
; (get-info :all-statistics)
(push) ; 3834
; [then-branch 7815] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7816] 4 == 2
(push) ; 3835
; [else-branch 7816] 4 != 2
(pop) ; 3835
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3835
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3835
; 0,00s
; (get-info :all-statistics)
(push) ; 3835
; [then-branch 7817] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7818] 4 == 2
(push) ; 3836
; [else-branch 7818] 4 != 2
(pop) ; 3836
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3836
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3836
; 0,00s
; (get-info :all-statistics)
(push) ; 3836
; [then-branch 7819] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7820] 4 == 2
(push) ; 3837
; [else-branch 7820] 4 != 2
(pop) ; 3837
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3837
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3837
; 0,00s
; (get-info :all-statistics)
(push) ; 3837
; [then-branch 7821] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7822] 4 == 2
(push) ; 3838
; [else-branch 7822] 4 != 2
(pop) ; 3838
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3838
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3838
; 0,00s
; (get-info :all-statistics)
(push) ; 3838
; [then-branch 7823] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7824] 4 == 2
(push) ; 3839
; [else-branch 7824] 4 != 2
(pop) ; 3839
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3839
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3839
; 0,00s
; (get-info :all-statistics)
(push) ; 3839
; [then-branch 7825] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7826] 4 == 2
(push) ; 3840
; [else-branch 7826] 4 != 2
(pop) ; 3840
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3840
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3840
; 0,00s
; (get-info :all-statistics)
(push) ; 3840
; [then-branch 7827] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7828] 4 == 2
(push) ; 3841
; [else-branch 7828] 4 != 2
(pop) ; 3841
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3841
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3841
; 0,00s
; (get-info :all-statistics)
(push) ; 3841
; [then-branch 7829] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7830] 4 == 2
(push) ; 3842
; [else-branch 7830] 4 != 2
(pop) ; 3842
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3842
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3842
; 0,00s
; (get-info :all-statistics)
(push) ; 3842
; [then-branch 7831] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7832] 4 == 2
(push) ; 3843
; [else-branch 7832] 4 != 2
(pop) ; 3843
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3843
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3843
; 0,00s
; (get-info :all-statistics)
(push) ; 3843
; [then-branch 7833] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7834] 4 == 2
(push) ; 3844
; [else-branch 7834] 4 != 2
(pop) ; 3844
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3844
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3844
; 0,00s
; (get-info :all-statistics)
(push) ; 3844
; [then-branch 7835] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7836] 4 == 2
(push) ; 3845
; [else-branch 7836] 4 != 2
(pop) ; 3845
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3845
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3845
; 0,00s
; (get-info :all-statistics)
(push) ; 3845
; [then-branch 7837] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7838] 4 == 2
(push) ; 3846
; [else-branch 7838] 4 != 2
(pop) ; 3846
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3846
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3846
; 0,00s
; (get-info :all-statistics)
(push) ; 3846
; [then-branch 7839] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7840] 4 == 2
(push) ; 3847
; [else-branch 7840] 4 != 2
(pop) ; 3847
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3847
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3847
; 0,00s
; (get-info :all-statistics)
(push) ; 3847
; [then-branch 7841] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7842] 4 == 2
(push) ; 3848
; [else-branch 7842] 4 != 2
(pop) ; 3848
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3848
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3848
; 0,00s
; (get-info :all-statistics)
(push) ; 3848
; [then-branch 7843] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7844] 4 == 2
(push) ; 3849
; [else-branch 7844] 4 != 2
(pop) ; 3849
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3849
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3849
; 0,00s
; (get-info :all-statistics)
(push) ; 3849
; [then-branch 7845] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7846] 4 == 2
(push) ; 3850
; [else-branch 7846] 4 != 2
(pop) ; 3850
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3850
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3850
; 0,00s
; (get-info :all-statistics)
(push) ; 3850
; [then-branch 7847] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7848] 4 == 2
(push) ; 3851
; [else-branch 7848] 4 != 2
(pop) ; 3851
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3851
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3851
; 0,00s
; (get-info :all-statistics)
(push) ; 3851
; [then-branch 7849] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7850] 4 == 2
(push) ; 3852
; [else-branch 7850] 4 != 2
(pop) ; 3852
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3852
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3852
; 0,00s
; (get-info :all-statistics)
(push) ; 3852
; [then-branch 7851] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7852] 4 == 2
(push) ; 3853
; [else-branch 7852] 4 != 2
(pop) ; 3853
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3853
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3853
; 0,00s
; (get-info :all-statistics)
(push) ; 3853
; [then-branch 7853] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7854] 4 == 2
(push) ; 3854
; [else-branch 7854] 4 != 2
(pop) ; 3854
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3854
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3854
; 0,00s
; (get-info :all-statistics)
(push) ; 3854
; [then-branch 7855] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7856] 4 == 2
(push) ; 3855
; [else-branch 7856] 4 != 2
(pop) ; 3855
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3855
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3855
; 0,00s
; (get-info :all-statistics)
(push) ; 3855
; [then-branch 7857] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7858] 4 == 2
(push) ; 3856
; [else-branch 7858] 4 != 2
(pop) ; 3856
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3856
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3856
; 0,00s
; (get-info :all-statistics)
(push) ; 3856
; [then-branch 7859] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7860] 4 == 2
(push) ; 3857
; [else-branch 7860] 4 != 2
(pop) ; 3857
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3857
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3857
; 0,00s
; (get-info :all-statistics)
(push) ; 3857
; [then-branch 7861] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7862] 4 == 2
(push) ; 3858
; [else-branch 7862] 4 != 2
(pop) ; 3858
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3858
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3858
; 0,00s
; (get-info :all-statistics)
(push) ; 3858
; [then-branch 7863] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7864] 4 == 2
(push) ; 3859
; [else-branch 7864] 4 != 2
(pop) ; 3859
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3859
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3859
; 0,00s
; (get-info :all-statistics)
(push) ; 3859
; [then-branch 7865] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7866] 4 == 2
(push) ; 3860
; [else-branch 7866] 4 != 2
(pop) ; 3860
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3860
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3860
; 0,00s
; (get-info :all-statistics)
(push) ; 3860
; [then-branch 7867] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7868] 4 == 2
(push) ; 3861
; [else-branch 7868] 4 != 2
(pop) ; 3861
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3861
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3861
; 0,00s
; (get-info :all-statistics)
(push) ; 3861
; [then-branch 7869] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7870] 4 == 2
(push) ; 3862
; [else-branch 7870] 4 != 2
(pop) ; 3862
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3862
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3862
; 0,00s
; (get-info :all-statistics)
(push) ; 3862
; [then-branch 7871] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7872] 4 == 2
(push) ; 3863
; [else-branch 7872] 4 != 2
(pop) ; 3863
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3863
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3863
; 0,00s
; (get-info :all-statistics)
(push) ; 3863
; [then-branch 7873] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7874] 4 == 2
(push) ; 3864
; [else-branch 7874] 4 != 2
(pop) ; 3864
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3864
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3864
; 0,00s
; (get-info :all-statistics)
(push) ; 3864
; [then-branch 7875] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7876] 4 == 2
(push) ; 3865
; [else-branch 7876] 4 != 2
(pop) ; 3865
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3865
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3865
; 0,00s
; (get-info :all-statistics)
(push) ; 3865
; [then-branch 7877] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7878] 4 == 2
(push) ; 3866
; [else-branch 7878] 4 != 2
(pop) ; 3866
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3866
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3866
; 0,00s
; (get-info :all-statistics)
(push) ; 3866
; [then-branch 7879] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7880] 4 == 2
(push) ; 3867
; [else-branch 7880] 4 != 2
(pop) ; 3867
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3867
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3867
; 0,00s
; (get-info :all-statistics)
(push) ; 3867
; [then-branch 7881] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7882] 4 == 2
(push) ; 3868
; [else-branch 7882] 4 != 2
(pop) ; 3868
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3868
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3868
; 0,00s
; (get-info :all-statistics)
(push) ; 3868
; [then-branch 7883] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7884] 4 == 2
(push) ; 3869
; [else-branch 7884] 4 != 2
(pop) ; 3869
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3869
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3869
; 0,00s
; (get-info :all-statistics)
(push) ; 3869
; [then-branch 7885] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7886] 4 == 2
(push) ; 3870
; [else-branch 7886] 4 != 2
(pop) ; 3870
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3870
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3870
; 0,00s
; (get-info :all-statistics)
(push) ; 3870
; [then-branch 7887] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7888] 4 == 2
(push) ; 3871
; [else-branch 7888] 4 != 2
(pop) ; 3871
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3871
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3871
; 0,00s
; (get-info :all-statistics)
(push) ; 3871
; [then-branch 7889] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7890] 4 == 2
(push) ; 3872
; [else-branch 7890] 4 != 2
(pop) ; 3872
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3872
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3872
; 0,00s
; (get-info :all-statistics)
(push) ; 3872
; [then-branch 7891] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7892] 4 == 2
(push) ; 3873
; [else-branch 7892] 4 != 2
(pop) ; 3873
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3873
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3873
; 0,00s
; (get-info :all-statistics)
(push) ; 3873
; [then-branch 7893] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7894] 4 == 2
(push) ; 3874
; [else-branch 7894] 4 != 2
(pop) ; 3874
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3874
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3874
; 0,00s
; (get-info :all-statistics)
(push) ; 3874
; [then-branch 7895] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7896] 4 == 2
(push) ; 3875
; [else-branch 7896] 4 != 2
(pop) ; 3875
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3875
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3875
; 0,00s
; (get-info :all-statistics)
(push) ; 3875
; [then-branch 7897] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7898] 4 == 2
(push) ; 3876
; [else-branch 7898] 4 != 2
(pop) ; 3876
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3876
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3876
; 0,00s
; (get-info :all-statistics)
(push) ; 3876
; [then-branch 7899] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7900] 4 == 2
(push) ; 3877
; [else-branch 7900] 4 != 2
(pop) ; 3877
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3877
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3877
; 0,00s
; (get-info :all-statistics)
(push) ; 3877
; [then-branch 7901] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7902] 4 == 2
(push) ; 3878
; [else-branch 7902] 4 != 2
(pop) ; 3878
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3878
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3878
; 0,00s
; (get-info :all-statistics)
(push) ; 3878
; [then-branch 7903] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7904] 4 == 2
(push) ; 3879
; [else-branch 7904] 4 != 2
(pop) ; 3879
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3879
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3879
; 0,00s
; (get-info :all-statistics)
(push) ; 3879
; [then-branch 7905] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7906] 4 == 2
(push) ; 3880
; [else-branch 7906] 4 != 2
(pop) ; 3880
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3880
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3880
; 0,00s
; (get-info :all-statistics)
(push) ; 3880
; [then-branch 7907] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7908] 4 == 2
(push) ; 3881
; [else-branch 7908] 4 != 2
(pop) ; 3881
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3881
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3881
; 0,00s
; (get-info :all-statistics)
(push) ; 3881
; [then-branch 7909] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7910] 4 == 2
(push) ; 3882
; [else-branch 7910] 4 != 2
(pop) ; 3882
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3882
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3882
; 0,00s
; (get-info :all-statistics)
(push) ; 3882
; [then-branch 7911] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7912] 4 == 2
(push) ; 3883
; [else-branch 7912] 4 != 2
(pop) ; 3883
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3883
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3883
; 0,00s
; (get-info :all-statistics)
(push) ; 3883
; [then-branch 7913] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7914] 4 == 2
(push) ; 3884
; [else-branch 7914] 4 != 2
(pop) ; 3884
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3884
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3884
; 0,00s
; (get-info :all-statistics)
(push) ; 3884
; [then-branch 7915] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7916] 4 == 2
(push) ; 3885
; [else-branch 7916] 4 != 2
(pop) ; 3885
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3885
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3885
; 0,00s
; (get-info :all-statistics)
(push) ; 3885
; [then-branch 7917] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7918] 4 == 2
(push) ; 3886
; [else-branch 7918] 4 != 2
(pop) ; 3886
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3886
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3886
; 0,00s
; (get-info :all-statistics)
(push) ; 3886
; [then-branch 7919] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7920] 4 == 2
(push) ; 3887
; [else-branch 7920] 4 != 2
(pop) ; 3887
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3887
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3887
; 0,00s
; (get-info :all-statistics)
(push) ; 3887
; [then-branch 7921] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7922] 4 == 2
(push) ; 3888
; [else-branch 7922] 4 != 2
(pop) ; 3888
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3888
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3888
; 0,00s
; (get-info :all-statistics)
(push) ; 3888
; [then-branch 7923] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7924] 4 == 2
(push) ; 3889
; [else-branch 7924] 4 != 2
(pop) ; 3889
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3889
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3889
; 0,00s
; (get-info :all-statistics)
(push) ; 3889
; [then-branch 7925] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7926] 4 == 2
(push) ; 3890
; [else-branch 7926] 4 != 2
(pop) ; 3890
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3890
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3890
; 0,00s
; (get-info :all-statistics)
(push) ; 3890
; [then-branch 7927] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7928] 4 == 2
(push) ; 3891
; [else-branch 7928] 4 != 2
(pop) ; 3891
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3891
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3891
; 0,00s
; (get-info :all-statistics)
(push) ; 3891
; [then-branch 7929] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7930] 4 == 2
(push) ; 3892
; [else-branch 7930] 4 != 2
(pop) ; 3892
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3892
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3892
; 0,00s
; (get-info :all-statistics)
(push) ; 3892
; [then-branch 7931] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7932] 4 == 2
(push) ; 3893
; [else-branch 7932] 4 != 2
(pop) ; 3893
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3893
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3893
; 0,00s
; (get-info :all-statistics)
(push) ; 3893
; [then-branch 7933] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7934] 4 == 2
(push) ; 3894
; [else-branch 7934] 4 != 2
(pop) ; 3894
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3894
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3894
; 0,00s
; (get-info :all-statistics)
(push) ; 3894
; [then-branch 7935] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7936] 4 == 2
(push) ; 3895
; [else-branch 7936] 4 != 2
(pop) ; 3895
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3895
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3895
; 0,00s
; (get-info :all-statistics)
(push) ; 3895
; [then-branch 7937] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7938] 4 == 2
(push) ; 3896
; [else-branch 7938] 4 != 2
(pop) ; 3896
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3896
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3896
; 0,00s
; (get-info :all-statistics)
(push) ; 3896
; [then-branch 7939] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7940] 4 == 2
(push) ; 3897
; [else-branch 7940] 4 != 2
(pop) ; 3897
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3897
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3897
; 0,00s
; (get-info :all-statistics)
(push) ; 3897
; [then-branch 7941] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7942] 4 == 2
(push) ; 3898
; [else-branch 7942] 4 != 2
(pop) ; 3898
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3898
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3898
; 0,00s
; (get-info :all-statistics)
(push) ; 3898
; [then-branch 7943] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7944] 4 == 2
(push) ; 3899
; [else-branch 7944] 4 != 2
(pop) ; 3899
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3899
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3899
; 0,00s
; (get-info :all-statistics)
(push) ; 3899
; [then-branch 7945] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7946] 4 == 2
(push) ; 3900
; [else-branch 7946] 4 != 2
(pop) ; 3900
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3900
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3900
; 0,00s
; (get-info :all-statistics)
(push) ; 3900
; [then-branch 7947] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7948] 4 == 2
(push) ; 3901
; [else-branch 7948] 4 != 2
(pop) ; 3901
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3901
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3901
; 0,00s
; (get-info :all-statistics)
(push) ; 3901
; [then-branch 7949] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7950] 4 == 2
(push) ; 3902
; [else-branch 7950] 4 != 2
(pop) ; 3902
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3902
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3902
; 0,00s
; (get-info :all-statistics)
(push) ; 3902
; [then-branch 7951] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7952] 4 == 2
(push) ; 3903
; [else-branch 7952] 4 != 2
(pop) ; 3903
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3903
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3903
; 0,00s
; (get-info :all-statistics)
(push) ; 3903
; [then-branch 7953] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7954] 4 == 2
(push) ; 3904
; [else-branch 7954] 4 != 2
(pop) ; 3904
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3904
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3904
; 0,00s
; (get-info :all-statistics)
(push) ; 3904
; [then-branch 7955] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7956] 4 == 2
(push) ; 3905
; [else-branch 7956] 4 != 2
(pop) ; 3905
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3905
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3905
; 0,00s
; (get-info :all-statistics)
(push) ; 3905
; [then-branch 7957] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7958] 4 == 2
(push) ; 3906
; [else-branch 7958] 4 != 2
(pop) ; 3906
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3906
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3906
; 0,00s
; (get-info :all-statistics)
(push) ; 3906
; [then-branch 7959] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7960] 4 == 2
(push) ; 3907
; [else-branch 7960] 4 != 2
(pop) ; 3907
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3907
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3907
; 0,00s
; (get-info :all-statistics)
(push) ; 3907
; [then-branch 7961] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7962] 4 == 2
(push) ; 3908
; [else-branch 7962] 4 != 2
(pop) ; 3908
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3908
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3908
; 0,00s
; (get-info :all-statistics)
(push) ; 3908
; [then-branch 7963] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7964] 4 == 2
(push) ; 3909
; [else-branch 7964] 4 != 2
(pop) ; 3909
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3909
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3909
; 0,00s
; (get-info :all-statistics)
(push) ; 3909
; [then-branch 7965] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7966] 4 == 2
(push) ; 3910
; [else-branch 7966] 4 != 2
(pop) ; 3910
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3910
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3910
; 0,00s
; (get-info :all-statistics)
(push) ; 3910
; [then-branch 7967] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7968] 4 == 2
(push) ; 3911
; [else-branch 7968] 4 != 2
(pop) ; 3911
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3911
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3911
; 0,00s
; (get-info :all-statistics)
(push) ; 3911
; [then-branch 7969] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7970] 4 == 2
(push) ; 3912
; [else-branch 7970] 4 != 2
(pop) ; 3912
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3912
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3912
; 0,00s
; (get-info :all-statistics)
(push) ; 3912
; [then-branch 7971] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7972] 4 == 2
(push) ; 3913
; [else-branch 7972] 4 != 2
(pop) ; 3913
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3913
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3913
; 0,00s
; (get-info :all-statistics)
(push) ; 3913
; [then-branch 7973] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7974] 4 == 2
(push) ; 3914
; [else-branch 7974] 4 != 2
(pop) ; 3914
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3914
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3914
; 0,00s
; (get-info :all-statistics)
(push) ; 3914
; [then-branch 7975] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7976] 4 == 2
(push) ; 3915
; [else-branch 7976] 4 != 2
(pop) ; 3915
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3915
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3915
; 0,00s
; (get-info :all-statistics)
(push) ; 3915
; [then-branch 7977] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7978] 4 == 2
(push) ; 3916
; [else-branch 7978] 4 != 2
(pop) ; 3916
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3916
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3916
; 0,00s
; (get-info :all-statistics)
(push) ; 3916
; [then-branch 7979] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7980] 4 == 2
(push) ; 3917
; [else-branch 7980] 4 != 2
(pop) ; 3917
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3917
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3917
; 0,00s
; (get-info :all-statistics)
(push) ; 3917
; [then-branch 7981] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7982] 4 == 2
(push) ; 3918
; [else-branch 7982] 4 != 2
(pop) ; 3918
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3918
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3918
; 0,00s
; (get-info :all-statistics)
(push) ; 3918
; [then-branch 7983] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7984] 4 == 2
(push) ; 3919
; [else-branch 7984] 4 != 2
(pop) ; 3919
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3919
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3919
; 0,00s
; (get-info :all-statistics)
(push) ; 3919
; [then-branch 7985] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7986] 4 == 2
(push) ; 3920
; [else-branch 7986] 4 != 2
(pop) ; 3920
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3920
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3920
; 0,00s
; (get-info :all-statistics)
(push) ; 3920
; [then-branch 7987] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7988] 4 == 2
(push) ; 3921
; [else-branch 7988] 4 != 2
(pop) ; 3921
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3921
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3921
; 0,00s
; (get-info :all-statistics)
(push) ; 3921
; [then-branch 7989] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7990] 4 == 2
(push) ; 3922
; [else-branch 7990] 4 != 2
(pop) ; 3922
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3922
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3922
; 0,00s
; (get-info :all-statistics)
(push) ; 3922
; [then-branch 7991] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7992] 4 == 2
(push) ; 3923
; [else-branch 7992] 4 != 2
(pop) ; 3923
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3923
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3923
; 0,00s
; (get-info :all-statistics)
(push) ; 3923
; [then-branch 7993] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7994] 4 == 2
(push) ; 3924
; [else-branch 7994] 4 != 2
(pop) ; 3924
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3924
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3924
; 0,00s
; (get-info :all-statistics)
(push) ; 3924
; [then-branch 7995] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7996] 4 == 2
(push) ; 3925
; [else-branch 7996] 4 != 2
(pop) ; 3925
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3925
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3925
; 0,00s
; (get-info :all-statistics)
(push) ; 3925
; [then-branch 7997] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 7998] 4 == 2
(push) ; 3926
; [else-branch 7998] 4 != 2
(pop) ; 3926
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3926
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3926
; 0,00s
; (get-info :all-statistics)
(push) ; 3926
; [then-branch 7999] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8000] 4 == 2
(push) ; 3927
; [else-branch 8000] 4 != 2
(pop) ; 3927
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3927
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3927
; 0,00s
; (get-info :all-statistics)
(push) ; 3927
; [then-branch 8001] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8002] 4 == 2
(push) ; 3928
; [else-branch 8002] 4 != 2
(pop) ; 3928
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3928
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3928
; 0,00s
; (get-info :all-statistics)
(push) ; 3928
; [then-branch 8003] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8004] 4 == 2
(push) ; 3929
; [else-branch 8004] 4 != 2
(pop) ; 3929
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3929
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3929
; 0,00s
; (get-info :all-statistics)
(push) ; 3929
; [then-branch 8005] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8006] 4 == 2
(push) ; 3930
; [else-branch 8006] 4 != 2
(pop) ; 3930
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3930
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3930
; 0,00s
; (get-info :all-statistics)
(push) ; 3930
; [then-branch 8007] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8008] 4 == 2
(push) ; 3931
; [else-branch 8008] 4 != 2
(pop) ; 3931
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3931
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3931
; 0,00s
; (get-info :all-statistics)
(push) ; 3931
; [then-branch 8009] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8010] 4 == 2
(push) ; 3932
; [else-branch 8010] 4 != 2
(pop) ; 3932
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3932
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3932
; 0,00s
; (get-info :all-statistics)
(push) ; 3932
; [then-branch 8011] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8012] 4 == 2
(push) ; 3933
; [else-branch 8012] 4 != 2
(pop) ; 3933
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3933
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3933
; 0,00s
; (get-info :all-statistics)
(push) ; 3933
; [then-branch 8013] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8014] 4 == 2
(push) ; 3934
; [else-branch 8014] 4 != 2
(pop) ; 3934
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3934
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3934
; 0,00s
; (get-info :all-statistics)
(push) ; 3934
; [then-branch 8015] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8016] 4 == 2
(push) ; 3935
; [else-branch 8016] 4 != 2
(pop) ; 3935
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3935
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3935
; 0,00s
; (get-info :all-statistics)
(push) ; 3935
; [then-branch 8017] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8018] 4 == 2
(push) ; 3936
; [else-branch 8018] 4 != 2
(pop) ; 3936
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3936
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3936
; 0,00s
; (get-info :all-statistics)
(push) ; 3936
; [then-branch 8019] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8020] 4 == 2
(push) ; 3937
; [else-branch 8020] 4 != 2
(pop) ; 3937
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3937
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3937
; 0,00s
; (get-info :all-statistics)
(push) ; 3937
; [then-branch 8021] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8022] 4 == 2
(push) ; 3938
; [else-branch 8022] 4 != 2
(pop) ; 3938
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3938
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3938
; 0,00s
; (get-info :all-statistics)
(push) ; 3938
; [then-branch 8023] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8024] 4 == 2
(push) ; 3939
; [else-branch 8024] 4 != 2
(pop) ; 3939
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3939
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3939
; 0,00s
; (get-info :all-statistics)
(push) ; 3939
; [then-branch 8025] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8026] 4 == 2
(push) ; 3940
; [else-branch 8026] 4 != 2
(pop) ; 3940
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3940
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3940
; 0,00s
; (get-info :all-statistics)
(push) ; 3940
; [then-branch 8027] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8028] 4 == 2
(push) ; 3941
; [else-branch 8028] 4 != 2
(pop) ; 3941
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3941
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3941
; 0,00s
; (get-info :all-statistics)
(push) ; 3941
; [then-branch 8029] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8030] 4 == 2
(push) ; 3942
; [else-branch 8030] 4 != 2
(pop) ; 3942
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3942
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3942
; 0,00s
; (get-info :all-statistics)
(push) ; 3942
; [then-branch 8031] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8032] 4 == 2
(push) ; 3943
; [else-branch 8032] 4 != 2
(pop) ; 3943
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3943
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3943
; 0,00s
; (get-info :all-statistics)
(push) ; 3943
; [then-branch 8033] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8034] 4 == 2
(push) ; 3944
; [else-branch 8034] 4 != 2
(pop) ; 3944
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3944
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3944
; 0,00s
; (get-info :all-statistics)
(push) ; 3944
; [then-branch 8035] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8036] 4 == 2
(push) ; 3945
; [else-branch 8036] 4 != 2
(pop) ; 3945
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3945
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3945
; 0,00s
; (get-info :all-statistics)
(push) ; 3945
; [then-branch 8037] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8038] 4 == 2
(push) ; 3946
; [else-branch 8038] 4 != 2
(pop) ; 3946
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3946
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3946
; 0,00s
; (get-info :all-statistics)
(push) ; 3946
; [then-branch 8039] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8040] 4 == 2
(push) ; 3947
; [else-branch 8040] 4 != 2
(pop) ; 3947
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3947
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3947
; 0,00s
; (get-info :all-statistics)
(push) ; 3947
; [then-branch 8041] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8042] 4 == 2
(push) ; 3948
; [else-branch 8042] 4 != 2
(pop) ; 3948
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3948
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3948
; 0,00s
; (get-info :all-statistics)
(push) ; 3948
; [then-branch 8043] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8044] 4 == 2
(push) ; 3949
; [else-branch 8044] 4 != 2
(pop) ; 3949
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3949
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3949
; 0,00s
; (get-info :all-statistics)
(push) ; 3949
; [then-branch 8045] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8046] 4 == 2
(push) ; 3950
; [else-branch 8046] 4 != 2
(pop) ; 3950
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3950
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3950
; 0,00s
; (get-info :all-statistics)
(push) ; 3950
; [then-branch 8047] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8048] 4 == 2
(push) ; 3951
; [else-branch 8048] 4 != 2
(pop) ; 3951
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3951
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3951
; 0,00s
; (get-info :all-statistics)
(push) ; 3951
; [then-branch 8049] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8050] 4 == 2
(push) ; 3952
; [else-branch 8050] 4 != 2
(pop) ; 3952
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3952
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3952
; 0,00s
; (get-info :all-statistics)
(push) ; 3952
; [then-branch 8051] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8052] 4 == 2
(push) ; 3953
; [else-branch 8052] 4 != 2
(pop) ; 3953
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3953
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3953
; 0,00s
; (get-info :all-statistics)
(push) ; 3953
; [then-branch 8053] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8054] 4 == 2
(push) ; 3954
; [else-branch 8054] 4 != 2
(pop) ; 3954
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3954
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3954
; 0,00s
; (get-info :all-statistics)
(push) ; 3954
; [then-branch 8055] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8056] 4 == 2
(push) ; 3955
; [else-branch 8056] 4 != 2
(pop) ; 3955
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3955
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3955
; 0,00s
; (get-info :all-statistics)
(push) ; 3955
; [then-branch 8057] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8058] 4 == 2
(push) ; 3956
; [else-branch 8058] 4 != 2
(pop) ; 3956
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3956
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3956
; 0,00s
; (get-info :all-statistics)
(push) ; 3956
; [then-branch 8059] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8060] 4 == 2
(push) ; 3957
; [else-branch 8060] 4 != 2
(pop) ; 3957
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3957
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3957
; 0,00s
; (get-info :all-statistics)
(push) ; 3957
; [then-branch 8061] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8062] 4 == 2
(push) ; 3958
; [else-branch 8062] 4 != 2
(pop) ; 3958
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3958
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3958
; 0,00s
; (get-info :all-statistics)
(push) ; 3958
; [then-branch 8063] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8064] 4 == 2
(push) ; 3959
; [else-branch 8064] 4 != 2
(pop) ; 3959
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3959
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3959
; 0,00s
; (get-info :all-statistics)
(push) ; 3959
; [then-branch 8065] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8066] 4 == 2
(push) ; 3960
; [else-branch 8066] 4 != 2
(pop) ; 3960
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3960
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3960
; 0,00s
; (get-info :all-statistics)
(push) ; 3960
; [then-branch 8067] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8068] 4 == 2
(push) ; 3961
; [else-branch 8068] 4 != 2
(pop) ; 3961
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3961
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3961
; 0,00s
; (get-info :all-statistics)
(push) ; 3961
; [then-branch 8069] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8070] 4 == 2
(push) ; 3962
; [else-branch 8070] 4 != 2
(pop) ; 3962
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3962
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3962
; 0,00s
; (get-info :all-statistics)
(push) ; 3962
; [then-branch 8071] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8072] 4 == 2
(push) ; 3963
; [else-branch 8072] 4 != 2
(pop) ; 3963
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3963
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3963
; 0,00s
; (get-info :all-statistics)
(push) ; 3963
; [then-branch 8073] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8074] 4 == 2
(push) ; 3964
; [else-branch 8074] 4 != 2
(pop) ; 3964
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3964
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3964
; 0,00s
; (get-info :all-statistics)
(push) ; 3964
; [then-branch 8075] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8076] 4 == 2
(push) ; 3965
; [else-branch 8076] 4 != 2
(pop) ; 3965
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3965
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3965
; 0,00s
; (get-info :all-statistics)
(push) ; 3965
; [then-branch 8077] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8078] 4 == 2
(push) ; 3966
; [else-branch 8078] 4 != 2
(pop) ; 3966
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3966
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3966
; 0,00s
; (get-info :all-statistics)
(push) ; 3966
; [then-branch 8079] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8080] 4 == 2
(push) ; 3967
; [else-branch 8080] 4 != 2
(pop) ; 3967
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3967
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3967
; 0,00s
; (get-info :all-statistics)
(push) ; 3967
; [then-branch 8081] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8082] 4 == 2
(push) ; 3968
; [else-branch 8082] 4 != 2
(pop) ; 3968
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3968
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3968
; 0,00s
; (get-info :all-statistics)
(push) ; 3968
; [then-branch 8083] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8084] 4 == 2
(push) ; 3969
; [else-branch 8084] 4 != 2
(pop) ; 3969
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3969
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3969
; 0,00s
; (get-info :all-statistics)
(push) ; 3969
; [then-branch 8085] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8086] 4 == 2
(push) ; 3970
; [else-branch 8086] 4 != 2
(pop) ; 3970
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3970
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3970
; 0,00s
; (get-info :all-statistics)
(push) ; 3970
; [then-branch 8087] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8088] 4 == 2
(push) ; 3971
; [else-branch 8088] 4 != 2
(pop) ; 3971
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3971
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3971
; 0,00s
; (get-info :all-statistics)
(push) ; 3971
; [then-branch 8089] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8090] 4 == 2
(push) ; 3972
; [else-branch 8090] 4 != 2
(pop) ; 3972
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3972
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3972
; 0,00s
; (get-info :all-statistics)
(push) ; 3972
; [then-branch 8091] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8092] 4 == 2
(push) ; 3973
; [else-branch 8092] 4 != 2
(pop) ; 3973
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3973
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3973
; 0,00s
; (get-info :all-statistics)
(push) ; 3973
; [then-branch 8093] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8094] 4 == 2
(push) ; 3974
; [else-branch 8094] 4 != 2
(pop) ; 3974
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3974
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3974
; 0,00s
; (get-info :all-statistics)
(push) ; 3974
; [then-branch 8095] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8096] 4 == 2
(push) ; 3975
; [else-branch 8096] 4 != 2
(pop) ; 3975
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3975
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3975
; 0,00s
; (get-info :all-statistics)
(push) ; 3975
; [then-branch 8097] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8098] 4 == 2
(push) ; 3976
; [else-branch 8098] 4 != 2
(pop) ; 3976
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3976
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3976
; 0,00s
; (get-info :all-statistics)
(push) ; 3976
; [then-branch 8099] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8100] 4 == 2
(push) ; 3977
; [else-branch 8100] 4 != 2
(pop) ; 3977
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3977
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3977
; 0,00s
; (get-info :all-statistics)
(push) ; 3977
; [then-branch 8101] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8102] 4 == 2
(push) ; 3978
; [else-branch 8102] 4 != 2
(pop) ; 3978
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3978
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3978
; 0,00s
; (get-info :all-statistics)
(push) ; 3978
; [then-branch 8103] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8104] 4 == 2
(push) ; 3979
; [else-branch 8104] 4 != 2
(pop) ; 3979
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3979
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3979
; 0,00s
; (get-info :all-statistics)
(push) ; 3979
; [then-branch 8105] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8106] 4 == 2
(push) ; 3980
; [else-branch 8106] 4 != 2
(pop) ; 3980
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3980
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3980
; 0,00s
; (get-info :all-statistics)
(push) ; 3980
; [then-branch 8107] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8108] 4 == 2
(push) ; 3981
; [else-branch 8108] 4 != 2
(pop) ; 3981
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3981
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3981
; 0,00s
; (get-info :all-statistics)
(push) ; 3981
; [then-branch 8109] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8110] 4 == 2
(push) ; 3982
; [else-branch 8110] 4 != 2
(pop) ; 3982
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3982
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3982
; 0,00s
; (get-info :all-statistics)
(push) ; 3982
; [then-branch 8111] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8112] 4 == 2
(push) ; 3983
; [else-branch 8112] 4 != 2
(pop) ; 3983
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3983
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3983
; 0,00s
; (get-info :all-statistics)
(push) ; 3983
; [then-branch 8113] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8114] 4 == 2
(push) ; 3984
; [else-branch 8114] 4 != 2
(pop) ; 3984
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3984
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3984
; 0,00s
; (get-info :all-statistics)
(push) ; 3984
; [then-branch 8115] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8116] 4 == 2
(push) ; 3985
; [else-branch 8116] 4 != 2
(pop) ; 3985
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3985
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3985
; 0,00s
; (get-info :all-statistics)
(push) ; 3985
; [then-branch 8117] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8118] 4 == 2
(push) ; 3986
; [else-branch 8118] 4 != 2
(pop) ; 3986
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3986
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3986
; 0,00s
; (get-info :all-statistics)
(push) ; 3986
; [then-branch 8119] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8120] 4 == 2
(push) ; 3987
; [else-branch 8120] 4 != 2
(pop) ; 3987
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3987
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3987
; 0,00s
; (get-info :all-statistics)
(push) ; 3987
; [then-branch 8121] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8122] 4 == 2
(push) ; 3988
; [else-branch 8122] 4 != 2
(pop) ; 3988
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3988
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3988
; 0,00s
; (get-info :all-statistics)
(push) ; 3988
; [then-branch 8123] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8124] 4 == 2
(push) ; 3989
; [else-branch 8124] 4 != 2
(pop) ; 3989
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3989
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3989
; 0,00s
; (get-info :all-statistics)
(push) ; 3989
; [then-branch 8125] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8126] 4 == 2
(push) ; 3990
; [else-branch 8126] 4 != 2
(pop) ; 3990
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3990
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3990
; 0,00s
; (get-info :all-statistics)
(push) ; 3990
; [then-branch 8127] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8128] 4 == 2
(push) ; 3991
; [else-branch 8128] 4 != 2
(pop) ; 3991
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3991
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3991
; 0,00s
; (get-info :all-statistics)
(push) ; 3991
; [then-branch 8129] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8130] 4 == 2
(push) ; 3992
; [else-branch 8130] 4 != 2
(pop) ; 3992
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3992
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3992
; 0,00s
; (get-info :all-statistics)
(push) ; 3992
; [then-branch 8131] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8132] 4 == 2
(push) ; 3993
; [else-branch 8132] 4 != 2
(pop) ; 3993
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3993
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3993
; 0,00s
; (get-info :all-statistics)
(push) ; 3993
; [then-branch 8133] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8134] 4 == 2
(push) ; 3994
; [else-branch 8134] 4 != 2
(pop) ; 3994
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3994
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3994
; 0,00s
; (get-info :all-statistics)
(push) ; 3994
; [then-branch 8135] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8136] 4 == 2
(push) ; 3995
; [else-branch 8136] 4 != 2
(pop) ; 3995
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3995
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3995
; 0,00s
; (get-info :all-statistics)
(push) ; 3995
; [then-branch 8137] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8138] 4 == 2
(push) ; 3996
; [else-branch 8138] 4 != 2
(pop) ; 3996
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3996
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3996
; 0,00s
; (get-info :all-statistics)
(push) ; 3996
; [then-branch 8139] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8140] 4 == 2
(push) ; 3997
; [else-branch 8140] 4 != 2
(pop) ; 3997
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3997
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3997
; 0,00s
; (get-info :all-statistics)
(push) ; 3997
; [then-branch 8141] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8142] 4 == 2
(push) ; 3998
; [else-branch 8142] 4 != 2
(pop) ; 3998
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3998
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3998
; 0,00s
; (get-info :all-statistics)
(push) ; 3998
; [then-branch 8143] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8144] 4 == 2
(push) ; 3999
; [else-branch 8144] 4 != 2
(pop) ; 3999
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 3999
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 3999
; 0,00s
; (get-info :all-statistics)
(push) ; 3999
; [then-branch 8145] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8146] 4 == 2
(push) ; 4000
; [else-branch 8146] 4 != 2
(pop) ; 4000
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4000
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4000
; 0,00s
; (get-info :all-statistics)
(push) ; 4000
; [then-branch 8147] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8148] 4 == 2
(push) ; 4001
; [else-branch 8148] 4 != 2
(pop) ; 4001
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4001
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4001
; 0,00s
; (get-info :all-statistics)
(push) ; 4001
; [then-branch 8149] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8150] 4 == 2
(push) ; 4002
; [else-branch 8150] 4 != 2
(pop) ; 4002
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4002
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4002
; 0,00s
; (get-info :all-statistics)
(push) ; 4002
; [then-branch 8151] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8152] 4 == 2
(push) ; 4003
; [else-branch 8152] 4 != 2
(pop) ; 4003
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4003
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4003
; 0,00s
; (get-info :all-statistics)
(push) ; 4003
; [then-branch 8153] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8154] 4 == 2
(push) ; 4004
; [else-branch 8154] 4 != 2
(pop) ; 4004
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4004
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4004
; 0,00s
; (get-info :all-statistics)
(push) ; 4004
; [then-branch 8155] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8156] 4 == 2
(push) ; 4005
; [else-branch 8156] 4 != 2
(pop) ; 4005
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4005
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4005
; 0,00s
; (get-info :all-statistics)
(push) ; 4005
; [then-branch 8157] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8158] 4 == 2
(push) ; 4006
; [else-branch 8158] 4 != 2
(pop) ; 4006
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4006
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4006
; 0,00s
; (get-info :all-statistics)
(push) ; 4006
; [then-branch 8159] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8160] 4 == 2
(push) ; 4007
; [else-branch 8160] 4 != 2
(pop) ; 4007
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4007
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4007
; 0,00s
; (get-info :all-statistics)
(push) ; 4007
; [then-branch 8161] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8162] 4 == 2
(push) ; 4008
; [else-branch 8162] 4 != 2
(pop) ; 4008
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4008
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4008
; 0,00s
; (get-info :all-statistics)
(push) ; 4008
; [then-branch 8163] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8164] 4 == 2
(push) ; 4009
; [else-branch 8164] 4 != 2
(pop) ; 4009
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4009
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4009
; 0,00s
; (get-info :all-statistics)
(push) ; 4009
; [then-branch 8165] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8166] 4 == 2
(push) ; 4010
; [else-branch 8166] 4 != 2
(pop) ; 4010
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4010
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4010
; 0,00s
; (get-info :all-statistics)
(push) ; 4010
; [then-branch 8167] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8168] 4 == 2
(push) ; 4011
; [else-branch 8168] 4 != 2
(pop) ; 4011
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4011
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4011
; 0,00s
; (get-info :all-statistics)
(push) ; 4011
; [then-branch 8169] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8170] 4 == 2
(push) ; 4012
; [else-branch 8170] 4 != 2
(pop) ; 4012
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4012
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4012
; 0,00s
; (get-info :all-statistics)
(push) ; 4012
; [then-branch 8171] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8172] 4 == 2
(push) ; 4013
; [else-branch 8172] 4 != 2
(pop) ; 4013
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4013
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4013
; 0,00s
; (get-info :all-statistics)
(push) ; 4013
; [then-branch 8173] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8174] 4 == 2
(push) ; 4014
; [else-branch 8174] 4 != 2
(pop) ; 4014
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4014
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4014
; 0,00s
; (get-info :all-statistics)
(push) ; 4014
; [then-branch 8175] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8176] 4 == 2
(push) ; 4015
; [else-branch 8176] 4 != 2
(pop) ; 4015
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4015
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4015
; 0,00s
; (get-info :all-statistics)
(push) ; 4015
; [then-branch 8177] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8178] 4 == 2
(push) ; 4016
; [else-branch 8178] 4 != 2
(pop) ; 4016
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4016
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4016
; 0,00s
; (get-info :all-statistics)
(push) ; 4016
; [then-branch 8179] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8180] 4 == 2
(push) ; 4017
; [else-branch 8180] 4 != 2
(pop) ; 4017
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4017
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4017
; 0,00s
; (get-info :all-statistics)
(push) ; 4017
; [then-branch 8181] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8182] 4 == 2
(push) ; 4018
; [else-branch 8182] 4 != 2
(pop) ; 4018
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4018
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4018
; 0,00s
; (get-info :all-statistics)
(push) ; 4018
; [then-branch 8183] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8184] 4 == 2
(push) ; 4019
; [else-branch 8184] 4 != 2
(pop) ; 4019
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4019
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4019
; 0,00s
; (get-info :all-statistics)
(push) ; 4019
; [then-branch 8185] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8186] 4 == 2
(push) ; 4020
; [else-branch 8186] 4 != 2
(pop) ; 4020
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4020
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4020
; 0,00s
; (get-info :all-statistics)
(push) ; 4020
; [then-branch 8187] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8188] 4 == 2
(push) ; 4021
; [else-branch 8188] 4 != 2
(pop) ; 4021
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4021
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4021
; 0,00s
; (get-info :all-statistics)
(push) ; 4021
; [then-branch 8189] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8190] 4 == 2
(push) ; 4022
; [else-branch 8190] 4 != 2
(pop) ; 4022
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4022
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4022
; 0,00s
; (get-info :all-statistics)
(push) ; 4022
; [then-branch 8191] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8192] 4 == 2
(push) ; 4023
; [else-branch 8192] 4 != 2
(pop) ; 4023
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4023
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4023
; 0,00s
; (get-info :all-statistics)
(push) ; 4023
; [then-branch 8193] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8194] 4 == 2
(push) ; 4024
; [else-branch 8194] 4 != 2
(pop) ; 4024
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4024
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4024
; 0,00s
; (get-info :all-statistics)
(push) ; 4024
; [then-branch 8195] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8196] 4 == 2
(push) ; 4025
; [else-branch 8196] 4 != 2
(pop) ; 4025
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4025
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4025
; 0,00s
; (get-info :all-statistics)
(push) ; 4025
; [then-branch 8197] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8198] 4 == 2
(push) ; 4026
; [else-branch 8198] 4 != 2
(pop) ; 4026
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4026
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4026
; 0,00s
; (get-info :all-statistics)
(push) ; 4026
; [then-branch 8199] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8200] 4 == 2
(push) ; 4027
; [else-branch 8200] 4 != 2
(pop) ; 4027
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4027
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4027
; 0,00s
; (get-info :all-statistics)
(push) ; 4027
; [then-branch 8201] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8202] 4 == 2
(push) ; 4028
; [else-branch 8202] 4 != 2
(pop) ; 4028
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4028
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4028
; 0,00s
; (get-info :all-statistics)
(push) ; 4028
; [then-branch 8203] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8204] 4 == 2
(push) ; 4029
; [else-branch 8204] 4 != 2
(pop) ; 4029
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4029
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4029
; 0,00s
; (get-info :all-statistics)
(push) ; 4029
; [then-branch 8205] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8206] 4 == 2
(push) ; 4030
; [else-branch 8206] 4 != 2
(pop) ; 4030
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4030
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4030
; 0,00s
; (get-info :all-statistics)
(push) ; 4030
; [then-branch 8207] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8208] 4 == 2
(push) ; 4031
; [else-branch 8208] 4 != 2
(pop) ; 4031
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4031
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4031
; 0,00s
; (get-info :all-statistics)
(push) ; 4031
; [then-branch 8209] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8210] 4 == 2
(push) ; 4032
; [else-branch 8210] 4 != 2
(pop) ; 4032
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4032
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4032
; 0,00s
; (get-info :all-statistics)
(push) ; 4032
; [then-branch 8211] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8212] 4 == 2
(push) ; 4033
; [else-branch 8212] 4 != 2
(pop) ; 4033
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4033
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4033
; 0,00s
; (get-info :all-statistics)
(push) ; 4033
; [then-branch 8213] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8214] 4 == 2
(push) ; 4034
; [else-branch 8214] 4 != 2
(pop) ; 4034
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4034
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4034
; 0,00s
; (get-info :all-statistics)
(push) ; 4034
; [then-branch 8215] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8216] 4 == 2
(push) ; 4035
; [else-branch 8216] 4 != 2
(pop) ; 4035
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4035
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4035
; 0,00s
; (get-info :all-statistics)
(push) ; 4035
; [then-branch 8217] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8218] 4 == 2
(push) ; 4036
; [else-branch 8218] 4 != 2
(pop) ; 4036
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4036
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4036
; 0,00s
; (get-info :all-statistics)
(push) ; 4036
; [then-branch 8219] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8220] 4 == 2
(push) ; 4037
; [else-branch 8220] 4 != 2
(pop) ; 4037
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4037
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4037
; 0,00s
; (get-info :all-statistics)
(push) ; 4037
; [then-branch 8221] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8222] 4 == 2
(push) ; 4038
; [else-branch 8222] 4 != 2
(pop) ; 4038
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4038
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4038
; 0,00s
; (get-info :all-statistics)
(push) ; 4038
; [then-branch 8223] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8224] 4 == 2
(push) ; 4039
; [else-branch 8224] 4 != 2
(pop) ; 4039
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4039
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4039
; 0,00s
; (get-info :all-statistics)
(push) ; 4039
; [then-branch 8225] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8226] 4 == 2
(push) ; 4040
; [else-branch 8226] 4 != 2
(pop) ; 4040
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4040
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4040
; 0,00s
; (get-info :all-statistics)
(push) ; 4040
; [then-branch 8227] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8228] 4 == 2
(push) ; 4041
; [else-branch 8228] 4 != 2
(pop) ; 4041
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4041
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4041
; 0,00s
; (get-info :all-statistics)
(push) ; 4041
; [then-branch 8229] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8230] 4 == 2
(push) ; 4042
; [else-branch 8230] 4 != 2
(pop) ; 4042
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4042
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4042
; 0,00s
; (get-info :all-statistics)
(push) ; 4042
; [then-branch 8231] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8232] 4 == 2
(push) ; 4043
; [else-branch 8232] 4 != 2
(pop) ; 4043
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4043
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4043
; 0,00s
; (get-info :all-statistics)
(push) ; 4043
; [then-branch 8233] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8234] 4 == 2
(push) ; 4044
; [else-branch 8234] 4 != 2
(pop) ; 4044
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4044
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4044
; 0,00s
; (get-info :all-statistics)
(push) ; 4044
; [then-branch 8235] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8236] 4 == 2
(push) ; 4045
; [else-branch 8236] 4 != 2
(pop) ; 4045
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4045
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4045
; 0,00s
; (get-info :all-statistics)
(push) ; 4045
; [then-branch 8237] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8238] 4 == 2
(push) ; 4046
; [else-branch 8238] 4 != 2
(pop) ; 4046
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4046
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4046
; 0,00s
; (get-info :all-statistics)
(push) ; 4046
; [then-branch 8239] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8240] 4 == 2
(push) ; 4047
; [else-branch 8240] 4 != 2
(pop) ; 4047
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4047
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4047
; 0,00s
; (get-info :all-statistics)
(push) ; 4047
; [then-branch 8241] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8242] 4 == 2
(push) ; 4048
; [else-branch 8242] 4 != 2
(pop) ; 4048
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4048
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4048
; 0,00s
; (get-info :all-statistics)
(push) ; 4048
; [then-branch 8243] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8244] 4 == 2
(push) ; 4049
; [else-branch 8244] 4 != 2
(pop) ; 4049
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4049
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4049
; 0,00s
; (get-info :all-statistics)
(push) ; 4049
; [then-branch 8245] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8246] 4 == 2
(push) ; 4050
; [else-branch 8246] 4 != 2
(pop) ; 4050
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4050
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4050
; 0,00s
; (get-info :all-statistics)
(push) ; 4050
; [then-branch 8247] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8248] 4 == 2
(push) ; 4051
; [else-branch 8248] 4 != 2
(pop) ; 4051
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4051
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4051
; 0,00s
; (get-info :all-statistics)
(push) ; 4051
; [then-branch 8249] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8250] 4 == 2
(push) ; 4052
; [else-branch 8250] 4 != 2
(pop) ; 4052
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4052
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4052
; 0,00s
; (get-info :all-statistics)
(push) ; 4052
; [then-branch 8251] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8252] 4 == 2
(push) ; 4053
; [else-branch 8252] 4 != 2
(pop) ; 4053
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4053
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4053
; 0,00s
; (get-info :all-statistics)
(push) ; 4053
; [then-branch 8253] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8254] 4 == 2
(push) ; 4054
; [else-branch 8254] 4 != 2
(pop) ; 4054
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4054
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4054
; 0,00s
; (get-info :all-statistics)
(push) ; 4054
; [then-branch 8255] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8256] 4 == 2
(push) ; 4055
; [else-branch 8256] 4 != 2
(pop) ; 4055
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4055
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4055
; 0,00s
; (get-info :all-statistics)
(push) ; 4055
; [then-branch 8257] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8258] 4 == 2
(push) ; 4056
; [else-branch 8258] 4 != 2
(pop) ; 4056
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4056
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4056
; 0,00s
; (get-info :all-statistics)
(push) ; 4056
; [then-branch 8259] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8260] 4 == 2
(push) ; 4057
; [else-branch 8260] 4 != 2
(pop) ; 4057
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4057
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4057
; 0,00s
; (get-info :all-statistics)
(push) ; 4057
; [then-branch 8261] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8262] 4 == 2
(push) ; 4058
; [else-branch 8262] 4 != 2
(pop) ; 4058
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4058
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4058
; 0,00s
; (get-info :all-statistics)
(push) ; 4058
; [then-branch 8263] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8264] 4 == 2
(push) ; 4059
; [else-branch 8264] 4 != 2
(pop) ; 4059
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4059
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4059
; 0,00s
; (get-info :all-statistics)
(push) ; 4059
; [then-branch 8265] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8266] 4 == 2
(push) ; 4060
; [else-branch 8266] 4 != 2
(pop) ; 4060
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4060
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4060
; 0,00s
; (get-info :all-statistics)
(push) ; 4060
; [then-branch 8267] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8268] 4 == 2
(push) ; 4061
; [else-branch 8268] 4 != 2
(pop) ; 4061
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4061
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4061
; 0,00s
; (get-info :all-statistics)
(push) ; 4061
; [then-branch 8269] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8270] 4 == 2
(push) ; 4062
; [else-branch 8270] 4 != 2
(pop) ; 4062
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4062
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4062
; 0,00s
; (get-info :all-statistics)
(push) ; 4062
; [then-branch 8271] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8272] 4 == 2
(push) ; 4063
; [else-branch 8272] 4 != 2
(pop) ; 4063
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4063
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4063
; 0,00s
; (get-info :all-statistics)
(push) ; 4063
; [then-branch 8273] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8274] 4 == 2
(push) ; 4064
; [else-branch 8274] 4 != 2
(pop) ; 4064
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4064
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4064
; 0,00s
; (get-info :all-statistics)
(push) ; 4064
; [then-branch 8275] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8276] 4 == 2
(push) ; 4065
; [else-branch 8276] 4 != 2
(pop) ; 4065
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4065
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4065
; 0,00s
; (get-info :all-statistics)
(push) ; 4065
; [then-branch 8277] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8278] 4 == 2
(push) ; 4066
; [else-branch 8278] 4 != 2
(pop) ; 4066
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4066
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4066
; 0,00s
; (get-info :all-statistics)
(push) ; 4066
; [then-branch 8279] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8280] 4 == 2
(push) ; 4067
; [else-branch 8280] 4 != 2
(pop) ; 4067
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4067
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4067
; 0,00s
; (get-info :all-statistics)
(push) ; 4067
; [then-branch 8281] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8282] 4 == 2
(push) ; 4068
; [else-branch 8282] 4 != 2
(pop) ; 4068
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4068
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4068
; 0,00s
; (get-info :all-statistics)
(push) ; 4068
; [then-branch 8283] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8284] 4 == 2
(push) ; 4069
; [else-branch 8284] 4 != 2
(pop) ; 4069
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4069
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4069
; 0,00s
; (get-info :all-statistics)
(push) ; 4069
; [then-branch 8285] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8286] 4 == 2
(push) ; 4070
; [else-branch 8286] 4 != 2
(pop) ; 4070
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4070
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4070
; 0,00s
; (get-info :all-statistics)
(push) ; 4070
; [then-branch 8287] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8288] 4 == 2
(push) ; 4071
; [else-branch 8288] 4 != 2
(pop) ; 4071
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4071
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4071
; 0,00s
; (get-info :all-statistics)
(push) ; 4071
; [then-branch 8289] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8290] 4 == 2
(push) ; 4072
; [else-branch 8290] 4 != 2
(pop) ; 4072
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4072
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4072
; 0,00s
; (get-info :all-statistics)
(push) ; 4072
; [then-branch 8291] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8292] 4 == 2
(push) ; 4073
; [else-branch 8292] 4 != 2
(pop) ; 4073
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4073
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4073
; 0,00s
; (get-info :all-statistics)
(push) ; 4073
; [then-branch 8293] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8294] 4 == 2
(push) ; 4074
; [else-branch 8294] 4 != 2
(pop) ; 4074
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4074
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4074
; 0,00s
; (get-info :all-statistics)
(push) ; 4074
; [then-branch 8295] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8296] 4 == 2
(push) ; 4075
; [else-branch 8296] 4 != 2
(pop) ; 4075
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4075
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4075
; 0,00s
; (get-info :all-statistics)
(push) ; 4075
; [then-branch 8297] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8298] 4 == 2
(push) ; 4076
; [else-branch 8298] 4 != 2
(pop) ; 4076
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4076
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4076
; 0,00s
; (get-info :all-statistics)
(push) ; 4076
; [then-branch 8299] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8300] 4 == 2
(push) ; 4077
; [else-branch 8300] 4 != 2
(pop) ; 4077
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4077
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4077
; 0,00s
; (get-info :all-statistics)
(push) ; 4077
; [then-branch 8301] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8302] 4 == 2
(push) ; 4078
; [else-branch 8302] 4 != 2
(pop) ; 4078
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4078
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4078
; 0,00s
; (get-info :all-statistics)
(push) ; 4078
; [then-branch 8303] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8304] 4 == 2
(push) ; 4079
; [else-branch 8304] 4 != 2
(pop) ; 4079
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4079
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4079
; 0,00s
; (get-info :all-statistics)
(push) ; 4079
; [then-branch 8305] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8306] 4 == 2
(push) ; 4080
; [else-branch 8306] 4 != 2
(pop) ; 4080
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4080
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4080
; 0,00s
; (get-info :all-statistics)
(push) ; 4080
; [then-branch 8307] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8308] 4 == 2
(push) ; 4081
; [else-branch 8308] 4 != 2
(pop) ; 4081
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4081
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4081
; 0,00s
; (get-info :all-statistics)
(push) ; 4081
; [then-branch 8309] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8310] 4 == 2
(push) ; 4082
; [else-branch 8310] 4 != 2
(pop) ; 4082
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4082
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4082
; 0,00s
; (get-info :all-statistics)
(push) ; 4082
; [then-branch 8311] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8312] 4 == 2
(push) ; 4083
; [else-branch 8312] 4 != 2
(pop) ; 4083
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4083
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4083
; 0,00s
; (get-info :all-statistics)
(push) ; 4083
; [then-branch 8313] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8314] 4 == 2
(push) ; 4084
; [else-branch 8314] 4 != 2
(pop) ; 4084
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4084
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4084
; 0,00s
; (get-info :all-statistics)
(push) ; 4084
; [then-branch 8315] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8316] 4 == 2
(push) ; 4085
; [else-branch 8316] 4 != 2
(pop) ; 4085
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4085
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4085
; 0,00s
; (get-info :all-statistics)
(push) ; 4085
; [then-branch 8317] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8318] 4 == 2
(push) ; 4086
; [else-branch 8318] 4 != 2
(pop) ; 4086
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4086
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4086
; 0,00s
; (get-info :all-statistics)
(push) ; 4086
; [then-branch 8319] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8320] 4 == 2
(push) ; 4087
; [else-branch 8320] 4 != 2
(pop) ; 4087
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4087
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4087
; 0,00s
; (get-info :all-statistics)
(push) ; 4087
; [then-branch 8321] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8322] 4 == 2
(push) ; 4088
; [else-branch 8322] 4 != 2
(pop) ; 4088
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4088
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4088
; 0,00s
; (get-info :all-statistics)
(push) ; 4088
; [then-branch 8323] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8324] 4 == 2
(push) ; 4089
; [else-branch 8324] 4 != 2
(pop) ; 4089
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4089
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4089
; 0,00s
; (get-info :all-statistics)
(push) ; 4089
; [then-branch 8325] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8326] 4 == 2
(push) ; 4090
; [else-branch 8326] 4 != 2
(pop) ; 4090
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4090
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4090
; 0,00s
; (get-info :all-statistics)
(push) ; 4090
; [then-branch 8327] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8328] 4 == 2
(push) ; 4091
; [else-branch 8328] 4 != 2
(pop) ; 4091
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4091
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4091
; 0,00s
; (get-info :all-statistics)
(push) ; 4091
; [then-branch 8329] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8330] 4 == 2
(push) ; 4092
; [else-branch 8330] 4 != 2
(pop) ; 4092
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4092
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4092
; 0,00s
; (get-info :all-statistics)
(push) ; 4092
; [then-branch 8331] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8332] 4 == 2
(push) ; 4093
; [else-branch 8332] 4 != 2
(pop) ; 4093
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4093
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4093
; 0,00s
; (get-info :all-statistics)
(push) ; 4093
; [then-branch 8333] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8334] 4 == 2
(push) ; 4094
; [else-branch 8334] 4 != 2
(pop) ; 4094
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4094
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4094
; 0,00s
; (get-info :all-statistics)
(push) ; 4094
; [then-branch 8335] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8336] 4 == 2
(push) ; 4095
; [else-branch 8336] 4 != 2
(pop) ; 4095
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4095
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4095
; 0,00s
; (get-info :all-statistics)
(push) ; 4095
; [then-branch 8337] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8338] 4 == 2
(push) ; 4096
; [else-branch 8338] 4 != 2
(pop) ; 4096
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4096
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4096
; 0,00s
; (get-info :all-statistics)
(push) ; 4096
; [then-branch 8339] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8340] 4 == 2
(push) ; 4097
; [else-branch 8340] 4 != 2
(pop) ; 4097
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4097
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4097
; 0,00s
; (get-info :all-statistics)
(push) ; 4097
; [then-branch 8341] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8342] 4 == 2
(push) ; 4098
; [else-branch 8342] 4 != 2
(pop) ; 4098
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4098
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4098
; 0,00s
; (get-info :all-statistics)
(push) ; 4098
; [then-branch 8343] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8344] 4 == 2
(push) ; 4099
; [else-branch 8344] 4 != 2
(pop) ; 4099
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4099
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4099
; 0,00s
; (get-info :all-statistics)
(push) ; 4099
; [then-branch 8345] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8346] 4 == 2
(push) ; 4100
; [else-branch 8346] 4 != 2
(pop) ; 4100
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4100
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4100
; 0,00s
; (get-info :all-statistics)
(push) ; 4100
; [then-branch 8347] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8348] 4 == 2
(push) ; 4101
; [else-branch 8348] 4 != 2
(pop) ; 4101
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4101
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4101
; 0,00s
; (get-info :all-statistics)
(push) ; 4101
; [then-branch 8349] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8350] 4 == 2
(push) ; 4102
; [else-branch 8350] 4 != 2
(pop) ; 4102
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4102
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4102
; 0,00s
; (get-info :all-statistics)
(push) ; 4102
; [then-branch 8351] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8352] 4 == 2
(push) ; 4103
; [else-branch 8352] 4 != 2
(pop) ; 4103
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4103
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4103
; 0,00s
; (get-info :all-statistics)
(push) ; 4103
; [then-branch 8353] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8354] 4 == 2
(push) ; 4104
; [else-branch 8354] 4 != 2
(pop) ; 4104
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4104
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4104
; 0,00s
; (get-info :all-statistics)
(push) ; 4104
; [then-branch 8355] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8356] 4 == 2
(push) ; 4105
; [else-branch 8356] 4 != 2
(pop) ; 4105
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4105
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4105
; 0,00s
; (get-info :all-statistics)
(push) ; 4105
; [then-branch 8357] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8358] 4 == 2
(push) ; 4106
; [else-branch 8358] 4 != 2
(pop) ; 4106
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4106
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4106
; 0,00s
; (get-info :all-statistics)
(push) ; 4106
; [then-branch 8359] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8360] 4 == 2
(push) ; 4107
; [else-branch 8360] 4 != 2
(pop) ; 4107
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4107
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4107
; 0,00s
; (get-info :all-statistics)
(push) ; 4107
; [then-branch 8361] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8362] 4 == 2
(push) ; 4108
; [else-branch 8362] 4 != 2
(pop) ; 4108
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4108
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4108
; 0,00s
; (get-info :all-statistics)
(push) ; 4108
; [then-branch 8363] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8364] 4 == 2
(push) ; 4109
; [else-branch 8364] 4 != 2
(pop) ; 4109
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4109
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4109
; 0,00s
; (get-info :all-statistics)
(push) ; 4109
; [then-branch 8365] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8366] 4 == 2
(push) ; 4110
; [else-branch 8366] 4 != 2
(pop) ; 4110
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4110
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4110
; 0,00s
; (get-info :all-statistics)
(push) ; 4110
; [then-branch 8367] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8368] 4 == 2
(push) ; 4111
; [else-branch 8368] 4 != 2
(pop) ; 4111
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4111
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4111
; 0,00s
; (get-info :all-statistics)
(push) ; 4111
; [then-branch 8369] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8370] 4 == 2
(push) ; 4112
; [else-branch 8370] 4 != 2
(pop) ; 4112
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4112
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4112
; 0,00s
; (get-info :all-statistics)
(push) ; 4112
; [then-branch 8371] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8372] 4 == 2
(push) ; 4113
; [else-branch 8372] 4 != 2
(pop) ; 4113
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4113
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4113
; 0,00s
; (get-info :all-statistics)
(push) ; 4113
; [then-branch 8373] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8374] 4 == 2
(push) ; 4114
; [else-branch 8374] 4 != 2
(pop) ; 4114
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4114
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4114
; 0,00s
; (get-info :all-statistics)
(push) ; 4114
; [then-branch 8375] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8376] 4 == 2
(push) ; 4115
; [else-branch 8376] 4 != 2
(pop) ; 4115
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4115
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4115
; 0,00s
; (get-info :all-statistics)
(push) ; 4115
; [then-branch 8377] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8378] 4 == 2
(push) ; 4116
; [else-branch 8378] 4 != 2
(pop) ; 4116
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4116
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4116
; 0,00s
; (get-info :all-statistics)
(push) ; 4116
; [then-branch 8379] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8380] 4 == 2
(push) ; 4117
; [else-branch 8380] 4 != 2
(pop) ; 4117
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4117
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4117
; 0,00s
; (get-info :all-statistics)
(push) ; 4117
; [then-branch 8381] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8382] 4 == 2
(push) ; 4118
; [else-branch 8382] 4 != 2
(pop) ; 4118
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4118
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4118
; 0,00s
; (get-info :all-statistics)
(push) ; 4118
; [then-branch 8383] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8384] 4 == 2
(push) ; 4119
; [else-branch 8384] 4 != 2
(pop) ; 4119
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4119
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4119
; 0,00s
; (get-info :all-statistics)
(push) ; 4119
; [then-branch 8385] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8386] 4 == 2
(push) ; 4120
; [else-branch 8386] 4 != 2
(pop) ; 4120
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4120
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4120
; 0,00s
; (get-info :all-statistics)
(push) ; 4120
; [then-branch 8387] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8388] 4 == 2
(push) ; 4121
; [else-branch 8388] 4 != 2
(pop) ; 4121
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4121
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4121
; 0,00s
; (get-info :all-statistics)
(push) ; 4121
; [then-branch 8389] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8390] 4 == 2
(push) ; 4122
; [else-branch 8390] 4 != 2
(pop) ; 4122
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4122
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4122
; 0,00s
; (get-info :all-statistics)
(push) ; 4122
; [then-branch 8391] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8392] 4 == 2
(push) ; 4123
; [else-branch 8392] 4 != 2
(pop) ; 4123
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4123
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4123
; 0,00s
; (get-info :all-statistics)
(push) ; 4123
; [then-branch 8393] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8394] 4 == 2
(push) ; 4124
; [else-branch 8394] 4 != 2
(pop) ; 4124
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4124
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4124
; 0,00s
; (get-info :all-statistics)
(push) ; 4124
; [then-branch 8395] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8396] 4 == 2
(push) ; 4125
; [else-branch 8396] 4 != 2
(pop) ; 4125
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4125
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4125
; 0,00s
; (get-info :all-statistics)
(push) ; 4125
; [then-branch 8397] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8398] 4 == 2
(push) ; 4126
; [else-branch 8398] 4 != 2
(pop) ; 4126
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4126
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4126
; 0,00s
; (get-info :all-statistics)
(push) ; 4126
; [then-branch 8399] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8400] 4 == 2
(push) ; 4127
; [else-branch 8400] 4 != 2
(pop) ; 4127
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4127
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4127
; 0,00s
; (get-info :all-statistics)
(push) ; 4127
; [then-branch 8401] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8402] 4 == 2
(push) ; 4128
; [else-branch 8402] 4 != 2
(pop) ; 4128
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4128
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4128
; 0,00s
; (get-info :all-statistics)
(push) ; 4128
; [then-branch 8403] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8404] 4 == 2
(push) ; 4129
; [else-branch 8404] 4 != 2
(pop) ; 4129
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4129
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4129
; 0,00s
; (get-info :all-statistics)
(push) ; 4129
; [then-branch 8405] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8406] 4 == 2
(push) ; 4130
; [else-branch 8406] 4 != 2
(pop) ; 4130
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4130
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4130
; 0,00s
; (get-info :all-statistics)
(push) ; 4130
; [then-branch 8407] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8408] 4 == 2
(push) ; 4131
; [else-branch 8408] 4 != 2
(pop) ; 4131
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4131
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4131
; 0,00s
; (get-info :all-statistics)
(push) ; 4131
; [then-branch 8409] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8410] 4 == 2
(push) ; 4132
; [else-branch 8410] 4 != 2
(pop) ; 4132
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4132
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4132
; 0,00s
; (get-info :all-statistics)
(push) ; 4132
; [then-branch 8411] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8412] 4 == 2
(push) ; 4133
; [else-branch 8412] 4 != 2
(pop) ; 4133
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4133
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4133
; 0,00s
; (get-info :all-statistics)
(push) ; 4133
; [then-branch 8413] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8414] 4 == 2
(push) ; 4134
; [else-branch 8414] 4 != 2
(pop) ; 4134
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4134
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4134
; 0,00s
; (get-info :all-statistics)
(push) ; 4134
; [then-branch 8415] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8416] 4 == 2
(push) ; 4135
; [else-branch 8416] 4 != 2
(pop) ; 4135
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4135
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4135
; 0,00s
; (get-info :all-statistics)
(push) ; 4135
; [then-branch 8417] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8418] 4 == 2
(push) ; 4136
; [else-branch 8418] 4 != 2
(pop) ; 4136
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4136
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4136
; 0,00s
; (get-info :all-statistics)
(push) ; 4136
; [then-branch 8419] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8420] 4 == 2
(push) ; 4137
; [else-branch 8420] 4 != 2
(pop) ; 4137
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4137
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4137
; 0,00s
; (get-info :all-statistics)
(push) ; 4137
; [then-branch 8421] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8422] 4 == 2
(push) ; 4138
; [else-branch 8422] 4 != 2
(pop) ; 4138
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4138
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4138
; 0,00s
; (get-info :all-statistics)
(push) ; 4138
; [then-branch 8423] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8424] 4 == 2
(push) ; 4139
; [else-branch 8424] 4 != 2
(pop) ; 4139
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4139
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4139
; 0,00s
; (get-info :all-statistics)
(push) ; 4139
; [then-branch 8425] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8426] 4 == 2
(push) ; 4140
; [else-branch 8426] 4 != 2
(pop) ; 4140
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4140
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4140
; 0,00s
; (get-info :all-statistics)
(push) ; 4140
; [then-branch 8427] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8428] 4 == 2
(push) ; 4141
; [else-branch 8428] 4 != 2
(pop) ; 4141
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4141
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4141
; 0,00s
; (get-info :all-statistics)
(push) ; 4141
; [then-branch 8429] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8430] 4 == 2
(push) ; 4142
; [else-branch 8430] 4 != 2
(pop) ; 4142
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4142
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4142
; 0,00s
; (get-info :all-statistics)
(push) ; 4142
; [then-branch 8431] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8432] 4 == 2
(push) ; 4143
; [else-branch 8432] 4 != 2
(pop) ; 4143
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4143
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4143
; 0,00s
; (get-info :all-statistics)
(push) ; 4143
; [then-branch 8433] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8434] 4 == 2
(push) ; 4144
; [else-branch 8434] 4 != 2
(pop) ; 4144
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4144
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4144
; 0,00s
; (get-info :all-statistics)
(push) ; 4144
; [then-branch 8435] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8436] 4 == 2
(push) ; 4145
; [else-branch 8436] 4 != 2
(pop) ; 4145
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4145
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4145
; 0,00s
; (get-info :all-statistics)
(push) ; 4145
; [then-branch 8437] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8438] 4 == 2
(push) ; 4146
; [else-branch 8438] 4 != 2
(pop) ; 4146
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4146
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4146
; 0,00s
; (get-info :all-statistics)
(push) ; 4146
; [then-branch 8439] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8440] 4 == 2
(push) ; 4147
; [else-branch 8440] 4 != 2
(pop) ; 4147
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4147
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4147
; 0,00s
; (get-info :all-statistics)
(push) ; 4147
; [then-branch 8441] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8442] 4 == 2
(push) ; 4148
; [else-branch 8442] 4 != 2
(pop) ; 4148
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4148
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4148
; 0,00s
; (get-info :all-statistics)
(push) ; 4148
; [then-branch 8443] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8444] 4 == 2
(push) ; 4149
; [else-branch 8444] 4 != 2
(pop) ; 4149
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4149
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4149
; 0,00s
; (get-info :all-statistics)
(push) ; 4149
; [then-branch 8445] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8446] 4 == 2
(push) ; 4150
; [else-branch 8446] 4 != 2
(pop) ; 4150
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4150
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4150
; 0,00s
; (get-info :all-statistics)
(push) ; 4150
; [then-branch 8447] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8448] 4 == 2
(push) ; 4151
; [else-branch 8448] 4 != 2
(pop) ; 4151
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4151
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4151
; 0,00s
; (get-info :all-statistics)
(push) ; 4151
; [then-branch 8449] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8450] 4 == 2
(push) ; 4152
; [else-branch 8450] 4 != 2
(pop) ; 4152
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4152
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4152
; 0,00s
; (get-info :all-statistics)
(push) ; 4152
; [then-branch 8451] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8452] 4 == 2
(push) ; 4153
; [else-branch 8452] 4 != 2
(pop) ; 4153
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4153
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4153
; 0,00s
; (get-info :all-statistics)
(push) ; 4153
; [then-branch 8453] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8454] 4 == 2
(push) ; 4154
; [else-branch 8454] 4 != 2
(pop) ; 4154
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4154
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4154
; 0,00s
; (get-info :all-statistics)
(push) ; 4154
; [then-branch 8455] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8456] 4 == 2
(push) ; 4155
; [else-branch 8456] 4 != 2
(pop) ; 4155
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4155
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4155
; 0,00s
; (get-info :all-statistics)
(push) ; 4155
; [then-branch 8457] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8458] 4 == 2
(push) ; 4156
; [else-branch 8458] 4 != 2
(pop) ; 4156
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4156
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4156
; 0,00s
; (get-info :all-statistics)
(push) ; 4156
; [then-branch 8459] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8460] 4 == 2
(push) ; 4157
; [else-branch 8460] 4 != 2
(pop) ; 4157
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4157
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4157
; 0,00s
; (get-info :all-statistics)
(push) ; 4157
; [then-branch 8461] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8462] 4 == 2
(push) ; 4158
; [else-branch 8462] 4 != 2
(pop) ; 4158
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4158
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4158
; 0,00s
; (get-info :all-statistics)
(push) ; 4158
; [then-branch 8463] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8464] 4 == 2
(push) ; 4159
; [else-branch 8464] 4 != 2
(pop) ; 4159
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4159
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4159
; 0,00s
; (get-info :all-statistics)
(push) ; 4159
; [then-branch 8465] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8466] 4 == 2
(push) ; 4160
; [else-branch 8466] 4 != 2
(pop) ; 4160
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4160
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4160
; 0,00s
; (get-info :all-statistics)
(push) ; 4160
; [then-branch 8467] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8468] 4 == 2
(push) ; 4161
; [else-branch 8468] 4 != 2
(pop) ; 4161
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4161
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4161
; 0,00s
; (get-info :all-statistics)
(push) ; 4161
; [then-branch 8469] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8470] 4 == 2
(push) ; 4162
; [else-branch 8470] 4 != 2
(pop) ; 4162
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4162
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4162
; 0,00s
; (get-info :all-statistics)
(push) ; 4162
; [then-branch 8471] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8472] 4 == 2
(push) ; 4163
; [else-branch 8472] 4 != 2
(pop) ; 4163
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4163
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4163
; 0,00s
; (get-info :all-statistics)
(push) ; 4163
; [then-branch 8473] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8474] 4 == 2
(push) ; 4164
; [else-branch 8474] 4 != 2
(pop) ; 4164
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4164
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4164
; 0,00s
; (get-info :all-statistics)
(push) ; 4164
; [then-branch 8475] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8476] 4 == 2
(push) ; 4165
; [else-branch 8476] 4 != 2
(pop) ; 4165
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4165
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4165
; 0,00s
; (get-info :all-statistics)
(push) ; 4165
; [then-branch 8477] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8478] 4 == 2
(push) ; 4166
; [else-branch 8478] 4 != 2
(pop) ; 4166
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4166
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4166
; 0,00s
; (get-info :all-statistics)
(push) ; 4166
; [then-branch 8479] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8480] 4 == 2
(push) ; 4167
; [else-branch 8480] 4 != 2
(pop) ; 4167
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4167
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4167
; 0,00s
; (get-info :all-statistics)
(push) ; 4167
; [then-branch 8481] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8482] 4 == 2
(push) ; 4168
; [else-branch 8482] 4 != 2
(pop) ; 4168
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4168
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4168
; 0,00s
; (get-info :all-statistics)
(push) ; 4168
; [then-branch 8483] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8484] 4 == 2
(push) ; 4169
; [else-branch 8484] 4 != 2
(pop) ; 4169
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4169
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4169
; 0,00s
; (get-info :all-statistics)
(push) ; 4169
; [then-branch 8485] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8486] 4 == 2
(push) ; 4170
; [else-branch 8486] 4 != 2
(pop) ; 4170
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4170
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4170
; 0,00s
; (get-info :all-statistics)
(push) ; 4170
; [then-branch 8487] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8488] 4 == 2
(push) ; 4171
; [else-branch 8488] 4 != 2
(pop) ; 4171
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4171
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4171
; 0,00s
; (get-info :all-statistics)
(push) ; 4171
; [then-branch 8489] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8490] 4 == 2
(push) ; 4172
; [else-branch 8490] 4 != 2
(pop) ; 4172
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4172
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4172
; 0,00s
; (get-info :all-statistics)
(push) ; 4172
; [then-branch 8491] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8492] 4 == 2
(push) ; 4173
; [else-branch 8492] 4 != 2
(pop) ; 4173
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4173
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4173
; 0,00s
; (get-info :all-statistics)
(push) ; 4173
; [then-branch 8493] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8494] 4 == 2
(push) ; 4174
; [else-branch 8494] 4 != 2
(pop) ; 4174
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4174
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4174
; 0,00s
; (get-info :all-statistics)
(push) ; 4174
; [then-branch 8495] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8496] 4 == 2
(push) ; 4175
; [else-branch 8496] 4 != 2
(pop) ; 4175
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4175
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4175
; 0,00s
; (get-info :all-statistics)
(push) ; 4175
; [then-branch 8497] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8498] 4 == 2
(push) ; 4176
; [else-branch 8498] 4 != 2
(pop) ; 4176
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4176
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4176
; 0,00s
; (get-info :all-statistics)
(push) ; 4176
; [then-branch 8499] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8500] 4 == 2
(push) ; 4177
; [else-branch 8500] 4 != 2
(pop) ; 4177
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4177
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4177
; 0,00s
; (get-info :all-statistics)
(push) ; 4177
; [then-branch 8501] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8502] 4 == 2
(push) ; 4178
; [else-branch 8502] 4 != 2
(pop) ; 4178
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4178
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4178
; 0,00s
; (get-info :all-statistics)
(push) ; 4178
; [then-branch 8503] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8504] 4 == 2
(push) ; 4179
; [else-branch 8504] 4 != 2
(pop) ; 4179
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4179
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4179
; 0,00s
; (get-info :all-statistics)
(push) ; 4179
; [then-branch 8505] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8506] 4 == 2
(push) ; 4180
; [else-branch 8506] 4 != 2
(pop) ; 4180
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4180
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4180
; 0,00s
; (get-info :all-statistics)
(push) ; 4180
; [then-branch 8507] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8508] 4 == 2
(push) ; 4181
; [else-branch 8508] 4 != 2
(pop) ; 4181
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4181
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4181
; 0,00s
; (get-info :all-statistics)
(push) ; 4181
; [then-branch 8509] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8510] 4 == 2
(push) ; 4182
; [else-branch 8510] 4 != 2
(pop) ; 4182
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4182
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4182
; 0,00s
; (get-info :all-statistics)
(push) ; 4182
; [then-branch 8511] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8512] 4 == 2
(push) ; 4183
; [else-branch 8512] 4 != 2
(pop) ; 4183
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4183
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4183
; 0,00s
; (get-info :all-statistics)
(push) ; 4183
; [then-branch 8513] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8514] 4 == 2
(push) ; 4184
; [else-branch 8514] 4 != 2
(pop) ; 4184
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4184
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4184
; 0,00s
; (get-info :all-statistics)
(push) ; 4184
; [then-branch 8515] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8516] 4 == 2
(push) ; 4185
; [else-branch 8516] 4 != 2
(pop) ; 4185
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4185
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4185
; 0,00s
; (get-info :all-statistics)
(push) ; 4185
; [then-branch 8517] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8518] 4 == 2
(push) ; 4186
; [else-branch 8518] 4 != 2
(pop) ; 4186
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4186
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4186
; 0,00s
; (get-info :all-statistics)
(push) ; 4186
; [then-branch 8519] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8520] 4 == 2
(push) ; 4187
; [else-branch 8520] 4 != 2
(pop) ; 4187
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4187
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4187
; 0,00s
; (get-info :all-statistics)
(push) ; 4187
; [then-branch 8521] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8522] 4 == 2
(push) ; 4188
; [else-branch 8522] 4 != 2
(pop) ; 4188
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4188
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4188
; 0,00s
; (get-info :all-statistics)
(push) ; 4188
; [then-branch 8523] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8524] 4 == 2
(push) ; 4189
; [else-branch 8524] 4 != 2
(pop) ; 4189
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4189
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4189
; 0,00s
; (get-info :all-statistics)
(push) ; 4189
; [then-branch 8525] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8526] 4 == 2
(push) ; 4190
; [else-branch 8526] 4 != 2
(pop) ; 4190
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4190
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4190
; 0,00s
; (get-info :all-statistics)
(push) ; 4190
; [then-branch 8527] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8528] 4 == 2
(push) ; 4191
; [else-branch 8528] 4 != 2
(pop) ; 4191
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4191
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4191
; 0,00s
; (get-info :all-statistics)
(push) ; 4191
; [then-branch 8529] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8530] 4 == 2
(push) ; 4192
; [else-branch 8530] 4 != 2
(pop) ; 4192
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4192
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4192
; 0,00s
; (get-info :all-statistics)
(push) ; 4192
; [then-branch 8531] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8532] 4 == 2
(push) ; 4193
; [else-branch 8532] 4 != 2
(pop) ; 4193
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4193
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4193
; 0,00s
; (get-info :all-statistics)
(push) ; 4193
; [then-branch 8533] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8534] 4 == 2
(push) ; 4194
; [else-branch 8534] 4 != 2
(pop) ; 4194
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4194
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4194
; 0,00s
; (get-info :all-statistics)
(push) ; 4194
; [then-branch 8535] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8536] 4 == 2
(push) ; 4195
; [else-branch 8536] 4 != 2
(pop) ; 4195
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4195
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4195
; 0,00s
; (get-info :all-statistics)
(push) ; 4195
; [then-branch 8537] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8538] 4 == 2
(push) ; 4196
; [else-branch 8538] 4 != 2
(pop) ; 4196
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4196
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4196
; 0,00s
; (get-info :all-statistics)
(push) ; 4196
; [then-branch 8539] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8540] 4 == 2
(push) ; 4197
; [else-branch 8540] 4 != 2
(pop) ; 4197
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4197
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4197
; 0,00s
; (get-info :all-statistics)
(push) ; 4197
; [then-branch 8541] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8542] 4 == 2
(push) ; 4198
; [else-branch 8542] 4 != 2
(pop) ; 4198
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4198
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4198
; 0,00s
; (get-info :all-statistics)
(push) ; 4198
; [then-branch 8543] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8544] 4 == 2
(push) ; 4199
; [else-branch 8544] 4 != 2
(pop) ; 4199
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4199
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4199
; 0,00s
; (get-info :all-statistics)
(push) ; 4199
; [then-branch 8545] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8546] 4 == 2
(push) ; 4200
; [else-branch 8546] 4 != 2
(pop) ; 4200
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4200
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4200
; 0,00s
; (get-info :all-statistics)
(push) ; 4200
; [then-branch 8547] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8548] 4 == 2
(push) ; 4201
; [else-branch 8548] 4 != 2
(pop) ; 4201
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4201
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4201
; 0,00s
; (get-info :all-statistics)
(push) ; 4201
; [then-branch 8549] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8550] 4 == 2
(push) ; 4202
; [else-branch 8550] 4 != 2
(pop) ; 4202
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4202
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4202
; 0,00s
; (get-info :all-statistics)
(push) ; 4202
; [then-branch 8551] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8552] 4 == 2
(push) ; 4203
; [else-branch 8552] 4 != 2
(pop) ; 4203
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4203
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4203
; 0,00s
; (get-info :all-statistics)
(push) ; 4203
; [then-branch 8553] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8554] 4 == 2
(push) ; 4204
; [else-branch 8554] 4 != 2
(pop) ; 4204
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4204
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4204
; 0,00s
; (get-info :all-statistics)
(push) ; 4204
; [then-branch 8555] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8556] 4 == 2
(push) ; 4205
; [else-branch 8556] 4 != 2
(pop) ; 4205
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4205
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4205
; 0,00s
; (get-info :all-statistics)
(push) ; 4205
; [then-branch 8557] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8558] 4 == 2
(push) ; 4206
; [else-branch 8558] 4 != 2
(pop) ; 4206
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4206
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4206
; 0,00s
; (get-info :all-statistics)
(push) ; 4206
; [then-branch 8559] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8560] 4 == 2
(push) ; 4207
; [else-branch 8560] 4 != 2
(pop) ; 4207
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4207
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4207
; 0,00s
; (get-info :all-statistics)
(push) ; 4207
; [then-branch 8561] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8562] 4 == 2
(push) ; 4208
; [else-branch 8562] 4 != 2
(pop) ; 4208
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4208
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4208
; 0,00s
; (get-info :all-statistics)
(push) ; 4208
; [then-branch 8563] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8564] 4 == 2
(push) ; 4209
; [else-branch 8564] 4 != 2
(pop) ; 4209
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4209
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4209
; 0,00s
; (get-info :all-statistics)
(push) ; 4209
; [then-branch 8565] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8566] 4 == 2
(push) ; 4210
; [else-branch 8566] 4 != 2
(pop) ; 4210
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4210
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4210
; 0,00s
; (get-info :all-statistics)
(push) ; 4210
; [then-branch 8567] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8568] 4 == 2
(push) ; 4211
; [else-branch 8568] 4 != 2
(pop) ; 4211
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4211
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4211
; 0,00s
; (get-info :all-statistics)
(push) ; 4211
; [then-branch 8569] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8570] 4 == 2
(push) ; 4212
; [else-branch 8570] 4 != 2
(pop) ; 4212
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4212
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4212
; 0,00s
; (get-info :all-statistics)
(push) ; 4212
; [then-branch 8571] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8572] 4 == 2
(push) ; 4213
; [else-branch 8572] 4 != 2
(pop) ; 4213
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4213
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4213
; 0,00s
; (get-info :all-statistics)
(push) ; 4213
; [then-branch 8573] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8574] 4 == 2
(push) ; 4214
; [else-branch 8574] 4 != 2
(pop) ; 4214
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4214
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4214
; 0,00s
; (get-info :all-statistics)
(push) ; 4214
; [then-branch 8575] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8576] 4 == 2
(push) ; 4215
; [else-branch 8576] 4 != 2
(pop) ; 4215
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4215
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4215
; 0,00s
; (get-info :all-statistics)
(push) ; 4215
; [then-branch 8577] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8578] 4 == 2
(push) ; 4216
; [else-branch 8578] 4 != 2
(pop) ; 4216
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4216
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4216
; 0,00s
; (get-info :all-statistics)
(push) ; 4216
; [then-branch 8579] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8580] 4 == 2
(push) ; 4217
; [else-branch 8580] 4 != 2
(pop) ; 4217
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4217
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4217
; 0,00s
; (get-info :all-statistics)
(push) ; 4217
; [then-branch 8581] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8582] 4 == 2
(push) ; 4218
; [else-branch 8582] 4 != 2
(pop) ; 4218
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4218
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4218
; 0,00s
; (get-info :all-statistics)
(push) ; 4218
; [then-branch 8583] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8584] 4 == 2
(push) ; 4219
; [else-branch 8584] 4 != 2
(pop) ; 4219
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4219
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4219
; 0,00s
; (get-info :all-statistics)
(push) ; 4219
; [then-branch 8585] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8586] 4 == 2
(push) ; 4220
; [else-branch 8586] 4 != 2
(pop) ; 4220
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4220
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4220
; 0,00s
; (get-info :all-statistics)
(push) ; 4220
; [then-branch 8587] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8588] 4 == 2
(push) ; 4221
; [else-branch 8588] 4 != 2
(pop) ; 4221
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4221
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4221
; 0,00s
; (get-info :all-statistics)
(push) ; 4221
; [then-branch 8589] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8590] 4 == 2
(push) ; 4222
; [else-branch 8590] 4 != 2
(pop) ; 4222
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4222
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4222
; 0,00s
; (get-info :all-statistics)
(push) ; 4222
; [then-branch 8591] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8592] 4 == 2
(push) ; 4223
; [else-branch 8592] 4 != 2
(pop) ; 4223
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4223
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4223
; 0,00s
; (get-info :all-statistics)
(push) ; 4223
; [then-branch 8593] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8594] 4 == 2
(push) ; 4224
; [else-branch 8594] 4 != 2
(pop) ; 4224
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4224
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4224
; 0,00s
; (get-info :all-statistics)
(push) ; 4224
; [then-branch 8595] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8596] 4 == 2
(push) ; 4225
; [else-branch 8596] 4 != 2
(pop) ; 4225
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4225
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4225
; 0,00s
; (get-info :all-statistics)
(push) ; 4225
; [then-branch 8597] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8598] 4 == 2
(push) ; 4226
; [else-branch 8598] 4 != 2
(pop) ; 4226
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4226
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4226
; 0,00s
; (get-info :all-statistics)
(push) ; 4226
; [then-branch 8599] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8600] 4 == 2
(push) ; 4227
; [else-branch 8600] 4 != 2
(pop) ; 4227
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4227
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4227
; 0,00s
; (get-info :all-statistics)
(push) ; 4227
; [then-branch 8601] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8602] 4 == 2
(push) ; 4228
; [else-branch 8602] 4 != 2
(pop) ; 4228
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4228
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4228
; 0,00s
; (get-info :all-statistics)
(push) ; 4228
; [then-branch 8603] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8604] 4 == 2
(push) ; 4229
; [else-branch 8604] 4 != 2
(pop) ; 4229
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4229
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4229
; 0,00s
; (get-info :all-statistics)
(push) ; 4229
; [then-branch 8605] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8606] 4 == 2
(push) ; 4230
; [else-branch 8606] 4 != 2
(pop) ; 4230
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4230
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4230
; 0,00s
; (get-info :all-statistics)
(push) ; 4230
; [then-branch 8607] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8608] 4 == 2
(push) ; 4231
; [else-branch 8608] 4 != 2
(pop) ; 4231
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4231
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4231
; 0,00s
; (get-info :all-statistics)
(push) ; 4231
; [then-branch 8609] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8610] 4 == 2
(push) ; 4232
; [else-branch 8610] 4 != 2
(pop) ; 4232
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4232
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4232
; 0,00s
; (get-info :all-statistics)
(push) ; 4232
; [then-branch 8611] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8612] 4 == 2
(push) ; 4233
; [else-branch 8612] 4 != 2
(pop) ; 4233
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4233
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4233
; 0,00s
; (get-info :all-statistics)
(push) ; 4233
; [then-branch 8613] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8614] 4 == 2
(push) ; 4234
; [else-branch 8614] 4 != 2
(pop) ; 4234
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4234
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4234
; 0,00s
; (get-info :all-statistics)
(push) ; 4234
; [then-branch 8615] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8616] 4 == 2
(push) ; 4235
; [else-branch 8616] 4 != 2
(pop) ; 4235
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4235
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4235
; 0,00s
; (get-info :all-statistics)
(push) ; 4235
; [then-branch 8617] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8618] 4 == 2
(push) ; 4236
; [else-branch 8618] 4 != 2
(pop) ; 4236
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4236
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4236
; 0,00s
; (get-info :all-statistics)
(push) ; 4236
; [then-branch 8619] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8620] 4 == 2
(push) ; 4237
; [else-branch 8620] 4 != 2
(pop) ; 4237
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4237
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4237
; 0,00s
; (get-info :all-statistics)
(push) ; 4237
; [then-branch 8621] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8622] 4 == 2
(push) ; 4238
; [else-branch 8622] 4 != 2
(pop) ; 4238
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4238
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4238
; 0,00s
; (get-info :all-statistics)
(push) ; 4238
; [then-branch 8623] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8624] 4 == 2
(push) ; 4239
; [else-branch 8624] 4 != 2
(pop) ; 4239
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4239
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4239
; 0,00s
; (get-info :all-statistics)
(push) ; 4239
; [then-branch 8625] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8626] 4 == 2
(push) ; 4240
; [else-branch 8626] 4 != 2
(pop) ; 4240
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4240
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4240
; 0,00s
; (get-info :all-statistics)
(push) ; 4240
; [then-branch 8627] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8628] 4 == 2
(push) ; 4241
; [else-branch 8628] 4 != 2
(pop) ; 4241
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4241
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4241
; 0,00s
; (get-info :all-statistics)
(push) ; 4241
; [then-branch 8629] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8630] 4 == 2
(push) ; 4242
; [else-branch 8630] 4 != 2
(pop) ; 4242
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4242
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4242
; 0,00s
; (get-info :all-statistics)
(push) ; 4242
; [then-branch 8631] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8632] 4 == 2
(push) ; 4243
; [else-branch 8632] 4 != 2
(pop) ; 4243
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4243
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4243
; 0,00s
; (get-info :all-statistics)
(push) ; 4243
; [then-branch 8633] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8634] 4 == 2
(push) ; 4244
; [else-branch 8634] 4 != 2
(pop) ; 4244
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4244
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4244
; 0,00s
; (get-info :all-statistics)
(push) ; 4244
; [then-branch 8635] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8636] 4 == 2
(push) ; 4245
; [else-branch 8636] 4 != 2
(pop) ; 4245
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4245
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4245
; 0,00s
; (get-info :all-statistics)
(push) ; 4245
; [then-branch 8637] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8638] 4 == 2
(push) ; 4246
; [else-branch 8638] 4 != 2
(pop) ; 4246
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4246
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4246
; 0,00s
; (get-info :all-statistics)
(push) ; 4246
; [then-branch 8639] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8640] 4 == 2
(push) ; 4247
; [else-branch 8640] 4 != 2
(pop) ; 4247
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4247
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4247
; 0,00s
; (get-info :all-statistics)
(push) ; 4247
; [then-branch 8641] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8642] 4 == 2
(push) ; 4248
; [else-branch 8642] 4 != 2
(pop) ; 4248
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4248
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4248
; 0,00s
; (get-info :all-statistics)
(push) ; 4248
; [then-branch 8643] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8644] 4 == 2
(push) ; 4249
; [else-branch 8644] 4 != 2
(pop) ; 4249
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4249
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4249
; 0,00s
; (get-info :all-statistics)
(push) ; 4249
; [then-branch 8645] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8646] 4 == 2
(push) ; 4250
; [else-branch 8646] 4 != 2
(pop) ; 4250
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4250
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4250
; 0,00s
; (get-info :all-statistics)
(push) ; 4250
; [then-branch 8647] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8648] 4 == 2
(push) ; 4251
; [else-branch 8648] 4 != 2
(pop) ; 4251
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4251
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4251
; 0,00s
; (get-info :all-statistics)
(push) ; 4251
; [then-branch 8649] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8650] 4 == 2
(push) ; 4252
; [else-branch 8650] 4 != 2
(pop) ; 4252
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4252
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4252
; 0,00s
; (get-info :all-statistics)
(push) ; 4252
; [then-branch 8651] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8652] 4 == 2
(push) ; 4253
; [else-branch 8652] 4 != 2
(pop) ; 4253
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4253
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4253
; 0,00s
; (get-info :all-statistics)
(push) ; 4253
; [then-branch 8653] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8654] 4 == 2
(push) ; 4254
; [else-branch 8654] 4 != 2
(pop) ; 4254
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4254
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4254
; 0,00s
; (get-info :all-statistics)
(push) ; 4254
; [then-branch 8655] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8656] 4 == 2
(push) ; 4255
; [else-branch 8656] 4 != 2
(pop) ; 4255
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4255
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4255
; 0,00s
; (get-info :all-statistics)
(push) ; 4255
; [then-branch 8657] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8658] 4 == 2
(push) ; 4256
; [else-branch 8658] 4 != 2
(pop) ; 4256
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4256
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4256
; 0,00s
; (get-info :all-statistics)
(push) ; 4256
; [then-branch 8659] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8660] 4 == 2
(push) ; 4257
; [else-branch 8660] 4 != 2
(pop) ; 4257
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4257
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4257
; 0,00s
; (get-info :all-statistics)
(push) ; 4257
; [then-branch 8661] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8662] 4 == 2
(push) ; 4258
; [else-branch 8662] 4 != 2
(pop) ; 4258
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4258
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4258
; 0,00s
; (get-info :all-statistics)
(push) ; 4258
; [then-branch 8663] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8664] 4 == 2
(push) ; 4259
; [else-branch 8664] 4 != 2
(pop) ; 4259
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4259
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4259
; 0,00s
; (get-info :all-statistics)
(push) ; 4259
; [then-branch 8665] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8666] 4 == 2
(push) ; 4260
; [else-branch 8666] 4 != 2
(pop) ; 4260
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4260
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4260
; 0,00s
; (get-info :all-statistics)
(push) ; 4260
; [then-branch 8667] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8668] 4 == 2
(push) ; 4261
; [else-branch 8668] 4 != 2
(pop) ; 4261
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4261
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4261
; 0,00s
; (get-info :all-statistics)
(push) ; 4261
; [then-branch 8669] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8670] 4 == 2
(push) ; 4262
; [else-branch 8670] 4 != 2
(pop) ; 4262
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4262
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4262
; 0,00s
; (get-info :all-statistics)
(push) ; 4262
; [then-branch 8671] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8672] 4 == 2
(push) ; 4263
; [else-branch 8672] 4 != 2
(pop) ; 4263
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4263
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4263
; 0,00s
; (get-info :all-statistics)
(push) ; 4263
; [then-branch 8673] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8674] 4 == 2
(push) ; 4264
; [else-branch 8674] 4 != 2
(pop) ; 4264
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4264
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4264
; 0,00s
; (get-info :all-statistics)
(push) ; 4264
; [then-branch 8675] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8676] 4 == 2
(push) ; 4265
; [else-branch 8676] 4 != 2
(pop) ; 4265
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4265
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4265
; 0,00s
; (get-info :all-statistics)
(push) ; 4265
; [then-branch 8677] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8678] 4 == 2
(push) ; 4266
; [else-branch 8678] 4 != 2
(pop) ; 4266
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4266
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4266
; 0,00s
; (get-info :all-statistics)
(push) ; 4266
; [then-branch 8679] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8680] 4 == 2
(push) ; 4267
; [else-branch 8680] 4 != 2
(pop) ; 4267
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4267
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4267
; 0,00s
; (get-info :all-statistics)
(push) ; 4267
; [then-branch 8681] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8682] 4 == 2
(push) ; 4268
; [else-branch 8682] 4 != 2
(pop) ; 4268
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4268
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4268
; 0,00s
; (get-info :all-statistics)
(push) ; 4268
; [then-branch 8683] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8684] 4 == 2
(push) ; 4269
; [else-branch 8684] 4 != 2
(pop) ; 4269
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4269
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4269
; 0,00s
; (get-info :all-statistics)
(push) ; 4269
; [then-branch 8685] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8686] 4 == 2
(push) ; 4270
; [else-branch 8686] 4 != 2
(pop) ; 4270
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4270
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4270
; 0,00s
; (get-info :all-statistics)
(push) ; 4270
; [then-branch 8687] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8688] 4 == 2
(push) ; 4271
; [else-branch 8688] 4 != 2
(pop) ; 4271
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4271
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4271
; 0,00s
; (get-info :all-statistics)
(push) ; 4271
; [then-branch 8689] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8690] 4 == 2
(push) ; 4272
; [else-branch 8690] 4 != 2
(pop) ; 4272
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4272
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4272
; 0,00s
; (get-info :all-statistics)
(push) ; 4272
; [then-branch 8691] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8692] 4 == 2
(push) ; 4273
; [else-branch 8692] 4 != 2
(pop) ; 4273
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4273
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4273
; 0,00s
; (get-info :all-statistics)
(push) ; 4273
; [then-branch 8693] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8694] 4 == 2
(push) ; 4274
; [else-branch 8694] 4 != 2
(pop) ; 4274
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4274
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4274
; 0,00s
; (get-info :all-statistics)
(push) ; 4274
; [then-branch 8695] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8696] 4 == 2
(push) ; 4275
; [else-branch 8696] 4 != 2
(pop) ; 4275
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4275
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4275
; 0,00s
; (get-info :all-statistics)
(push) ; 4275
; [then-branch 8697] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8698] 4 == 2
(push) ; 4276
; [else-branch 8698] 4 != 2
(pop) ; 4276
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4276
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4276
; 0,00s
; (get-info :all-statistics)
(push) ; 4276
; [then-branch 8699] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8700] 4 == 2
(push) ; 4277
; [else-branch 8700] 4 != 2
(pop) ; 4277
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4277
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4277
; 0,00s
; (get-info :all-statistics)
(push) ; 4277
; [then-branch 8701] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8702] 4 == 2
(push) ; 4278
; [else-branch 8702] 4 != 2
(pop) ; 4278
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4278
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4278
; 0,00s
; (get-info :all-statistics)
(push) ; 4278
; [then-branch 8703] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8704] 4 == 2
(push) ; 4279
; [else-branch 8704] 4 != 2
(pop) ; 4279
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4279
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4279
; 0,00s
; (get-info :all-statistics)
(push) ; 4279
; [then-branch 8705] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8706] 4 == 2
(push) ; 4280
; [else-branch 8706] 4 != 2
(pop) ; 4280
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4280
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4280
; 0,00s
; (get-info :all-statistics)
(push) ; 4280
; [then-branch 8707] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8708] 4 == 2
(push) ; 4281
; [else-branch 8708] 4 != 2
(pop) ; 4281
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4281
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4281
; 0,00s
; (get-info :all-statistics)
(push) ; 4281
; [then-branch 8709] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8710] 4 == 2
(push) ; 4282
; [else-branch 8710] 4 != 2
(pop) ; 4282
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4282
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4282
; 0,00s
; (get-info :all-statistics)
(push) ; 4282
; [then-branch 8711] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8712] 4 == 2
(push) ; 4283
; [else-branch 8712] 4 != 2
(pop) ; 4283
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4283
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4283
; 0,00s
; (get-info :all-statistics)
(push) ; 4283
; [then-branch 8713] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8714] 4 == 2
(push) ; 4284
; [else-branch 8714] 4 != 2
(pop) ; 4284
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4284
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4284
; 0,00s
; (get-info :all-statistics)
(push) ; 4284
; [then-branch 8715] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8716] 4 == 2
(push) ; 4285
; [else-branch 8716] 4 != 2
(pop) ; 4285
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4285
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4285
; 0,00s
; (get-info :all-statistics)
(push) ; 4285
; [then-branch 8717] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8718] 4 == 2
(push) ; 4286
; [else-branch 8718] 4 != 2
(pop) ; 4286
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4286
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4286
; 0,00s
; (get-info :all-statistics)
(push) ; 4286
; [then-branch 8719] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8720] 4 == 2
(push) ; 4287
; [else-branch 8720] 4 != 2
(pop) ; 4287
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4287
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4287
; 0,00s
; (get-info :all-statistics)
(push) ; 4287
; [then-branch 8721] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8722] 4 == 2
(push) ; 4288
; [else-branch 8722] 4 != 2
(pop) ; 4288
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4288
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4288
; 0,00s
; (get-info :all-statistics)
(push) ; 4288
; [then-branch 8723] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8724] 4 == 2
(push) ; 4289
; [else-branch 8724] 4 != 2
(pop) ; 4289
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4289
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4289
; 0,00s
; (get-info :all-statistics)
(push) ; 4289
; [then-branch 8725] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8726] 4 == 2
(push) ; 4290
; [else-branch 8726] 4 != 2
(pop) ; 4290
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4290
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4290
; 0,00s
; (get-info :all-statistics)
(push) ; 4290
; [then-branch 8727] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8728] 4 == 2
(push) ; 4291
; [else-branch 8728] 4 != 2
(pop) ; 4291
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4291
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4291
; 0,00s
; (get-info :all-statistics)
(push) ; 4291
; [then-branch 8729] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8730] 4 == 2
(push) ; 4292
; [else-branch 8730] 4 != 2
(pop) ; 4292
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4292
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4292
; 0,00s
; (get-info :all-statistics)
(push) ; 4292
; [then-branch 8731] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8732] 4 == 2
(push) ; 4293
; [else-branch 8732] 4 != 2
(pop) ; 4293
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4293
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4293
; 0,00s
; (get-info :all-statistics)
(push) ; 4293
; [then-branch 8733] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8734] 4 == 2
(push) ; 4294
; [else-branch 8734] 4 != 2
(pop) ; 4294
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4294
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4294
; 0,00s
; (get-info :all-statistics)
(push) ; 4294
; [then-branch 8735] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8736] 4 == 2
(push) ; 4295
; [else-branch 8736] 4 != 2
(pop) ; 4295
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4295
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4295
; 0,00s
; (get-info :all-statistics)
(push) ; 4295
; [then-branch 8737] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8738] 4 == 2
(push) ; 4296
; [else-branch 8738] 4 != 2
(pop) ; 4296
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4296
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4296
; 0,00s
; (get-info :all-statistics)
(push) ; 4296
; [then-branch 8739] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8740] 4 == 2
(push) ; 4297
; [else-branch 8740] 4 != 2
(pop) ; 4297
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4297
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4297
; 0,00s
; (get-info :all-statistics)
(push) ; 4297
; [then-branch 8741] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8742] 4 == 2
(push) ; 4298
; [else-branch 8742] 4 != 2
(pop) ; 4298
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4298
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4298
; 0,00s
; (get-info :all-statistics)
(push) ; 4298
; [then-branch 8743] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8744] 4 == 2
(push) ; 4299
; [else-branch 8744] 4 != 2
(pop) ; 4299
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4299
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4299
; 0,00s
; (get-info :all-statistics)
(push) ; 4299
; [then-branch 8745] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8746] 4 == 2
(push) ; 4300
; [else-branch 8746] 4 != 2
(pop) ; 4300
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4300
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4300
; 0,00s
; (get-info :all-statistics)
(push) ; 4300
; [then-branch 8747] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8748] 4 == 2
(push) ; 4301
; [else-branch 8748] 4 != 2
(pop) ; 4301
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4301
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4301
; 0,00s
; (get-info :all-statistics)
(push) ; 4301
; [then-branch 8749] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8750] 4 == 2
(push) ; 4302
; [else-branch 8750] 4 != 2
(pop) ; 4302
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4302
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4302
; 0,00s
; (get-info :all-statistics)
(push) ; 4302
; [then-branch 8751] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8752] 4 == 2
(push) ; 4303
; [else-branch 8752] 4 != 2
(pop) ; 4303
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4303
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4303
; 0,00s
; (get-info :all-statistics)
(push) ; 4303
; [then-branch 8753] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8754] 4 == 2
(push) ; 4304
; [else-branch 8754] 4 != 2
(pop) ; 4304
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4304
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4304
; 0,00s
; (get-info :all-statistics)
(push) ; 4304
; [then-branch 8755] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8756] 4 == 2
(push) ; 4305
; [else-branch 8756] 4 != 2
(pop) ; 4305
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4305
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4305
; 0,00s
; (get-info :all-statistics)
(push) ; 4305
; [then-branch 8757] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8758] 4 == 2
(push) ; 4306
; [else-branch 8758] 4 != 2
(pop) ; 4306
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4306
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4306
; 0,00s
; (get-info :all-statistics)
(push) ; 4306
; [then-branch 8759] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8760] 4 == 2
(push) ; 4307
; [else-branch 8760] 4 != 2
(pop) ; 4307
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4307
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4307
; 0,00s
; (get-info :all-statistics)
(push) ; 4307
; [then-branch 8761] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8762] 4 == 2
(push) ; 4308
; [else-branch 8762] 4 != 2
(pop) ; 4308
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4308
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4308
; 0,00s
; (get-info :all-statistics)
(push) ; 4308
; [then-branch 8763] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8764] 4 == 2
(push) ; 4309
; [else-branch 8764] 4 != 2
(pop) ; 4309
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4309
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4309
; 0,00s
; (get-info :all-statistics)
(push) ; 4309
; [then-branch 8765] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8766] 4 == 2
(push) ; 4310
; [else-branch 8766] 4 != 2
(pop) ; 4310
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4310
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4310
; 0,00s
; (get-info :all-statistics)
(push) ; 4310
; [then-branch 8767] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8768] 4 == 2
(push) ; 4311
; [else-branch 8768] 4 != 2
(pop) ; 4311
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4311
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4311
; 0,00s
; (get-info :all-statistics)
(push) ; 4311
; [then-branch 8769] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8770] 4 == 2
(push) ; 4312
; [else-branch 8770] 4 != 2
(pop) ; 4312
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4312
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4312
; 0,00s
; (get-info :all-statistics)
(push) ; 4312
; [then-branch 8771] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8772] 4 == 2
(push) ; 4313
; [else-branch 8772] 4 != 2
(pop) ; 4313
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4313
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4313
; 0,00s
; (get-info :all-statistics)
(push) ; 4313
; [then-branch 8773] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8774] 4 == 2
(push) ; 4314
; [else-branch 8774] 4 != 2
(pop) ; 4314
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4314
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4314
; 0,00s
; (get-info :all-statistics)
(push) ; 4314
; [then-branch 8775] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8776] 4 == 2
(push) ; 4315
; [else-branch 8776] 4 != 2
(pop) ; 4315
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4315
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4315
; 0,00s
; (get-info :all-statistics)
(push) ; 4315
; [then-branch 8777] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8778] 4 == 2
(push) ; 4316
; [else-branch 8778] 4 != 2
(pop) ; 4316
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4316
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4316
; 0,00s
; (get-info :all-statistics)
(push) ; 4316
; [then-branch 8779] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8780] 4 == 2
(push) ; 4317
; [else-branch 8780] 4 != 2
(pop) ; 4317
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4317
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4317
; 0,00s
; (get-info :all-statistics)
(push) ; 4317
; [then-branch 8781] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8782] 4 == 2
(push) ; 4318
; [else-branch 8782] 4 != 2
(pop) ; 4318
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4318
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4318
; 0,00s
; (get-info :all-statistics)
(push) ; 4318
; [then-branch 8783] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8784] 4 == 2
(push) ; 4319
; [else-branch 8784] 4 != 2
(pop) ; 4319
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4319
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4319
; 0,00s
; (get-info :all-statistics)
(push) ; 4319
; [then-branch 8785] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8786] 4 == 2
(push) ; 4320
; [else-branch 8786] 4 != 2
(pop) ; 4320
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4320
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4320
; 0,00s
; (get-info :all-statistics)
(push) ; 4320
; [then-branch 8787] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8788] 4 == 2
(push) ; 4321
; [else-branch 8788] 4 != 2
(pop) ; 4321
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4321
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4321
; 0,00s
; (get-info :all-statistics)
(push) ; 4321
; [then-branch 8789] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8790] 4 == 2
(push) ; 4322
; [else-branch 8790] 4 != 2
(pop) ; 4322
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4322
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4322
; 0,00s
; (get-info :all-statistics)
(push) ; 4322
; [then-branch 8791] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8792] 4 == 2
(push) ; 4323
; [else-branch 8792] 4 != 2
(pop) ; 4323
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4323
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4323
; 0,00s
; (get-info :all-statistics)
(push) ; 4323
; [then-branch 8793] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8794] 4 == 2
(push) ; 4324
; [else-branch 8794] 4 != 2
(pop) ; 4324
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4324
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4324
; 0,00s
; (get-info :all-statistics)
(push) ; 4324
; [then-branch 8795] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8796] 4 == 2
(push) ; 4325
; [else-branch 8796] 4 != 2
(pop) ; 4325
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4325
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4325
; 0,00s
; (get-info :all-statistics)
(push) ; 4325
; [then-branch 8797] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8798] 4 == 2
(push) ; 4326
; [else-branch 8798] 4 != 2
(pop) ; 4326
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4326
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4326
; 0,00s
; (get-info :all-statistics)
(push) ; 4326
; [then-branch 8799] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8800] 4 == 2
(push) ; 4327
; [else-branch 8800] 4 != 2
(pop) ; 4327
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4327
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4327
; 0,00s
; (get-info :all-statistics)
(push) ; 4327
; [then-branch 8801] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8802] 4 == 2
(push) ; 4328
; [else-branch 8802] 4 != 2
(pop) ; 4328
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4328
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4328
; 0,00s
; (get-info :all-statistics)
(push) ; 4328
; [then-branch 8803] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8804] 4 == 2
(push) ; 4329
; [else-branch 8804] 4 != 2
(pop) ; 4329
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4329
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4329
; 0,00s
; (get-info :all-statistics)
(push) ; 4329
; [then-branch 8805] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8806] 4 == 2
(push) ; 4330
; [else-branch 8806] 4 != 2
(pop) ; 4330
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4330
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4330
; 0,00s
; (get-info :all-statistics)
(push) ; 4330
; [then-branch 8807] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8808] 4 == 2
(push) ; 4331
; [else-branch 8808] 4 != 2
(pop) ; 4331
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4331
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4331
; 0,00s
; (get-info :all-statistics)
(push) ; 4331
; [then-branch 8809] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8810] 4 == 2
(push) ; 4332
; [else-branch 8810] 4 != 2
(pop) ; 4332
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4332
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4332
; 0,00s
; (get-info :all-statistics)
(push) ; 4332
; [then-branch 8811] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8812] 4 == 2
(push) ; 4333
; [else-branch 8812] 4 != 2
(pop) ; 4333
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4333
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4333
; 0,00s
; (get-info :all-statistics)
(push) ; 4333
; [then-branch 8813] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8814] 4 == 2
(push) ; 4334
; [else-branch 8814] 4 != 2
(pop) ; 4334
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4334
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4334
; 0,00s
; (get-info :all-statistics)
(push) ; 4334
; [then-branch 8815] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8816] 4 == 2
(push) ; 4335
; [else-branch 8816] 4 != 2
(pop) ; 4335
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4335
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4335
; 0,00s
; (get-info :all-statistics)
(push) ; 4335
; [then-branch 8817] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8818] 4 == 2
(push) ; 4336
; [else-branch 8818] 4 != 2
(pop) ; 4336
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4336
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4336
; 0,00s
; (get-info :all-statistics)
(push) ; 4336
; [then-branch 8819] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8820] 4 == 2
(push) ; 4337
; [else-branch 8820] 4 != 2
(pop) ; 4337
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4337
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4337
; 0,00s
; (get-info :all-statistics)
(push) ; 4337
; [then-branch 8821] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8822] 4 == 2
(push) ; 4338
; [else-branch 8822] 4 != 2
(pop) ; 4338
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4338
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4338
; 0,00s
; (get-info :all-statistics)
(push) ; 4338
; [then-branch 8823] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8824] 4 == 2
(push) ; 4339
; [else-branch 8824] 4 != 2
(pop) ; 4339
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4339
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4339
; 0,00s
; (get-info :all-statistics)
(push) ; 4339
; [then-branch 8825] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8826] 4 == 2
(push) ; 4340
; [else-branch 8826] 4 != 2
(pop) ; 4340
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4340
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4340
; 0,00s
; (get-info :all-statistics)
(push) ; 4340
; [then-branch 8827] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8828] 4 == 2
(push) ; 4341
; [else-branch 8828] 4 != 2
(pop) ; 4341
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4341
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4341
; 0,00s
; (get-info :all-statistics)
(push) ; 4341
; [then-branch 8829] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8830] 4 == 2
(push) ; 4342
; [else-branch 8830] 4 != 2
(pop) ; 4342
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4342
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4342
; 0,00s
; (get-info :all-statistics)
(push) ; 4342
; [then-branch 8831] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8832] 4 == 2
(push) ; 4343
; [else-branch 8832] 4 != 2
(pop) ; 4343
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4343
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4343
; 0,00s
; (get-info :all-statistics)
(push) ; 4343
; [then-branch 8833] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8834] 4 == 2
(push) ; 4344
; [else-branch 8834] 4 != 2
(pop) ; 4344
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4344
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4344
; 0,00s
; (get-info :all-statistics)
(push) ; 4344
; [then-branch 8835] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8836] 4 == 2
(push) ; 4345
; [else-branch 8836] 4 != 2
(pop) ; 4345
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4345
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4345
; 0,00s
; (get-info :all-statistics)
(push) ; 4345
; [then-branch 8837] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8838] 4 == 2
(push) ; 4346
; [else-branch 8838] 4 != 2
(pop) ; 4346
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4346
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4346
; 0,00s
; (get-info :all-statistics)
(push) ; 4346
; [then-branch 8839] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8840] 4 == 2
(push) ; 4347
; [else-branch 8840] 4 != 2
(pop) ; 4347
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4347
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4347
; 0,00s
; (get-info :all-statistics)
(push) ; 4347
; [then-branch 8841] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8842] 4 == 2
(push) ; 4348
; [else-branch 8842] 4 != 2
(pop) ; 4348
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4348
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4348
; 0,00s
; (get-info :all-statistics)
(push) ; 4348
; [then-branch 8843] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8844] 4 == 2
(push) ; 4349
; [else-branch 8844] 4 != 2
(pop) ; 4349
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4349
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4349
; 0,00s
; (get-info :all-statistics)
(push) ; 4349
; [then-branch 8845] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8846] 4 == 2
(push) ; 4350
; [else-branch 8846] 4 != 2
(pop) ; 4350
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4350
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4350
; 0,00s
; (get-info :all-statistics)
(push) ; 4350
; [then-branch 8847] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8848] 4 == 2
(push) ; 4351
; [else-branch 8848] 4 != 2
(pop) ; 4351
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4351
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4351
; 0,00s
; (get-info :all-statistics)
(push) ; 4351
; [then-branch 8849] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8850] 4 == 2
(push) ; 4352
; [else-branch 8850] 4 != 2
(pop) ; 4352
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4352
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4352
; 0,00s
; (get-info :all-statistics)
(push) ; 4352
; [then-branch 8851] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8852] 4 == 2
(push) ; 4353
; [else-branch 8852] 4 != 2
(pop) ; 4353
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4353
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4353
; 0,00s
; (get-info :all-statistics)
(push) ; 4353
; [then-branch 8853] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8854] 4 == 2
(push) ; 4354
; [else-branch 8854] 4 != 2
(pop) ; 4354
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4354
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4354
; 0,00s
; (get-info :all-statistics)
(push) ; 4354
; [then-branch 8855] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8856] 4 == 2
(push) ; 4355
; [else-branch 8856] 4 != 2
(pop) ; 4355
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4355
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4355
; 0,00s
; (get-info :all-statistics)
(push) ; 4355
; [then-branch 8857] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8858] 4 == 2
(push) ; 4356
; [else-branch 8858] 4 != 2
(pop) ; 4356
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4356
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4356
; 0,00s
; (get-info :all-statistics)
(push) ; 4356
; [then-branch 8859] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8860] 4 == 2
(push) ; 4357
; [else-branch 8860] 4 != 2
(pop) ; 4357
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4357
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4357
; 0,00s
; (get-info :all-statistics)
(push) ; 4357
; [then-branch 8861] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8862] 4 == 2
(push) ; 4358
; [else-branch 8862] 4 != 2
(pop) ; 4358
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4358
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4358
; 0,00s
; (get-info :all-statistics)
(push) ; 4358
; [then-branch 8863] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8864] 4 == 2
(push) ; 4359
; [else-branch 8864] 4 != 2
(pop) ; 4359
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4359
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4359
; 0,00s
; (get-info :all-statistics)
(push) ; 4359
; [then-branch 8865] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8866] 4 == 2
(push) ; 4360
; [else-branch 8866] 4 != 2
(pop) ; 4360
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4360
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4360
; 0,00s
; (get-info :all-statistics)
(push) ; 4360
; [then-branch 8867] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8868] 4 == 2
(push) ; 4361
; [else-branch 8868] 4 != 2
(pop) ; 4361
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4361
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4361
; 0,00s
; (get-info :all-statistics)
(push) ; 4361
; [then-branch 8869] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8870] 4 == 2
(push) ; 4362
; [else-branch 8870] 4 != 2
(pop) ; 4362
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4362
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4362
; 0,00s
; (get-info :all-statistics)
(push) ; 4362
; [then-branch 8871] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8872] 4 == 2
(push) ; 4363
; [else-branch 8872] 4 != 2
(pop) ; 4363
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4363
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4363
; 0,00s
; (get-info :all-statistics)
(push) ; 4363
; [then-branch 8873] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8874] 4 == 2
(push) ; 4364
; [else-branch 8874] 4 != 2
(pop) ; 4364
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4364
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4364
; 0,00s
; (get-info :all-statistics)
(push) ; 4364
; [then-branch 8875] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8876] 4 == 2
(push) ; 4365
; [else-branch 8876] 4 != 2
(pop) ; 4365
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4365
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4365
; 0,00s
; (get-info :all-statistics)
(push) ; 4365
; [then-branch 8877] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8878] 4 == 2
(push) ; 4366
; [else-branch 8878] 4 != 2
(pop) ; 4366
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4366
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4366
; 0,00s
; (get-info :all-statistics)
(push) ; 4366
; [then-branch 8879] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8880] 4 == 2
(push) ; 4367
; [else-branch 8880] 4 != 2
(pop) ; 4367
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4367
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4367
; 0,00s
; (get-info :all-statistics)
(push) ; 4367
; [then-branch 8881] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8882] 4 == 2
(push) ; 4368
; [else-branch 8882] 4 != 2
(pop) ; 4368
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4368
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4368
; 0,00s
; (get-info :all-statistics)
(push) ; 4368
; [then-branch 8883] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8884] 4 == 2
(push) ; 4369
; [else-branch 8884] 4 != 2
(pop) ; 4369
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4369
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4369
; 0,00s
; (get-info :all-statistics)
(push) ; 4369
; [then-branch 8885] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8886] 4 == 2
(push) ; 4370
; [else-branch 8886] 4 != 2
(pop) ; 4370
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4370
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4370
; 0,00s
; (get-info :all-statistics)
(push) ; 4370
; [then-branch 8887] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8888] 4 == 2
(push) ; 4371
; [else-branch 8888] 4 != 2
(pop) ; 4371
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4371
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4371
; 0,00s
; (get-info :all-statistics)
(push) ; 4371
; [then-branch 8889] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8890] 4 == 2
(push) ; 4372
; [else-branch 8890] 4 != 2
(pop) ; 4372
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4372
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4372
; 0,00s
; (get-info :all-statistics)
(push) ; 4372
; [then-branch 8891] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8892] 4 == 2
(push) ; 4373
; [else-branch 8892] 4 != 2
(pop) ; 4373
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4373
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4373
; 0,00s
; (get-info :all-statistics)
(push) ; 4373
; [then-branch 8893] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8894] 4 == 2
(push) ; 4374
; [else-branch 8894] 4 != 2
(pop) ; 4374
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4374
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4374
; 0,00s
; (get-info :all-statistics)
(push) ; 4374
; [then-branch 8895] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8896] 4 == 2
(push) ; 4375
; [else-branch 8896] 4 != 2
(pop) ; 4375
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4375
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4375
; 0,00s
; (get-info :all-statistics)
(push) ; 4375
; [then-branch 8897] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8898] 4 == 2
(push) ; 4376
; [else-branch 8898] 4 != 2
(pop) ; 4376
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4376
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4376
; 0,00s
; (get-info :all-statistics)
(push) ; 4376
; [then-branch 8899] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8900] 4 == 2
(push) ; 4377
; [else-branch 8900] 4 != 2
(pop) ; 4377
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4377
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4377
; 0,00s
; (get-info :all-statistics)
(push) ; 4377
; [then-branch 8901] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8902] 4 == 2
(push) ; 4378
; [else-branch 8902] 4 != 2
(pop) ; 4378
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4378
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4378
; 0,00s
; (get-info :all-statistics)
(push) ; 4378
; [then-branch 8903] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8904] 4 == 2
(push) ; 4379
; [else-branch 8904] 4 != 2
(pop) ; 4379
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4379
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4379
; 0,00s
; (get-info :all-statistics)
(push) ; 4379
; [then-branch 8905] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8906] 4 == 2
(push) ; 4380
; [else-branch 8906] 4 != 2
(pop) ; 4380
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4380
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4380
; 0,00s
; (get-info :all-statistics)
(push) ; 4380
; [then-branch 8907] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8908] 4 == 2
(push) ; 4381
; [else-branch 8908] 4 != 2
(pop) ; 4381
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4381
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4381
; 0,00s
; (get-info :all-statistics)
(push) ; 4381
; [then-branch 8909] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8910] 4 == 2
(push) ; 4382
; [else-branch 8910] 4 != 2
(pop) ; 4382
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4382
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4382
; 0,00s
; (get-info :all-statistics)
(push) ; 4382
; [then-branch 8911] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8912] 4 == 2
(push) ; 4383
; [else-branch 8912] 4 != 2
(pop) ; 4383
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4383
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4383
; 0,00s
; (get-info :all-statistics)
(push) ; 4383
; [then-branch 8913] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8914] 4 == 2
(push) ; 4384
; [else-branch 8914] 4 != 2
(pop) ; 4384
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4384
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4384
; 0,00s
; (get-info :all-statistics)
(push) ; 4384
; [then-branch 8915] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8916] 4 == 2
(push) ; 4385
; [else-branch 8916] 4 != 2
(pop) ; 4385
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4385
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4385
; 0,00s
; (get-info :all-statistics)
(push) ; 4385
; [then-branch 8917] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8918] 4 == 2
(push) ; 4386
; [else-branch 8918] 4 != 2
(pop) ; 4386
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4386
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4386
; 0,00s
; (get-info :all-statistics)
(push) ; 4386
; [then-branch 8919] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8920] 4 == 2
(push) ; 4387
; [else-branch 8920] 4 != 2
(pop) ; 4387
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4387
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4387
; 0,00s
; (get-info :all-statistics)
(push) ; 4387
; [then-branch 8921] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8922] 4 == 2
(push) ; 4388
; [else-branch 8922] 4 != 2
(pop) ; 4388
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4388
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4388
; 0,00s
; (get-info :all-statistics)
(push) ; 4388
; [then-branch 8923] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8924] 4 == 2
(push) ; 4389
; [else-branch 8924] 4 != 2
(pop) ; 4389
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4389
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4389
; 0,00s
; (get-info :all-statistics)
(push) ; 4389
; [then-branch 8925] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8926] 4 == 2
(push) ; 4390
; [else-branch 8926] 4 != 2
(pop) ; 4390
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4390
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4390
; 0,00s
; (get-info :all-statistics)
(push) ; 4390
; [then-branch 8927] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8928] 4 == 2
(push) ; 4391
; [else-branch 8928] 4 != 2
(pop) ; 4391
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4391
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4391
; 0,00s
; (get-info :all-statistics)
(push) ; 4391
; [then-branch 8929] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8930] 4 == 2
(push) ; 4392
; [else-branch 8930] 4 != 2
(pop) ; 4392
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4392
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4392
; 0,00s
; (get-info :all-statistics)
(push) ; 4392
; [then-branch 8931] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8932] 4 == 2
(push) ; 4393
; [else-branch 8932] 4 != 2
(pop) ; 4393
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4393
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4393
; 0,00s
; (get-info :all-statistics)
(push) ; 4393
; [then-branch 8933] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8934] 4 == 2
(push) ; 4394
; [else-branch 8934] 4 != 2
(pop) ; 4394
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4394
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4394
; 0,00s
; (get-info :all-statistics)
(push) ; 4394
; [then-branch 8935] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8936] 4 == 2
(push) ; 4395
; [else-branch 8936] 4 != 2
(pop) ; 4395
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4395
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4395
; 0,00s
; (get-info :all-statistics)
(push) ; 4395
; [then-branch 8937] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8938] 4 == 2
(push) ; 4396
; [else-branch 8938] 4 != 2
(pop) ; 4396
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4396
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4396
; 0,00s
; (get-info :all-statistics)
(push) ; 4396
; [then-branch 8939] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8940] 4 == 2
(push) ; 4397
; [else-branch 8940] 4 != 2
(pop) ; 4397
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4397
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4397
; 0,00s
; (get-info :all-statistics)
(push) ; 4397
; [then-branch 8941] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8942] 4 == 2
(push) ; 4398
; [else-branch 8942] 4 != 2
(pop) ; 4398
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4398
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4398
; 0,00s
; (get-info :all-statistics)
(push) ; 4398
; [then-branch 8943] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8944] 4 == 2
(push) ; 4399
; [else-branch 8944] 4 != 2
(pop) ; 4399
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4399
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4399
; 0,00s
; (get-info :all-statistics)
(push) ; 4399
; [then-branch 8945] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8946] 4 == 2
(push) ; 4400
; [else-branch 8946] 4 != 2
(pop) ; 4400
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4400
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4400
; 0,00s
; (get-info :all-statistics)
(push) ; 4400
; [then-branch 8947] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8948] 4 == 2
(push) ; 4401
; [else-branch 8948] 4 != 2
(pop) ; 4401
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4401
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4401
; 0,00s
; (get-info :all-statistics)
(push) ; 4401
; [then-branch 8949] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8950] 4 == 2
(push) ; 4402
; [else-branch 8950] 4 != 2
(pop) ; 4402
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4402
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4402
; 0,00s
; (get-info :all-statistics)
(push) ; 4402
; [then-branch 8951] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8952] 4 == 2
(push) ; 4403
; [else-branch 8952] 4 != 2
(pop) ; 4403
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4403
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4403
; 0,00s
; (get-info :all-statistics)
(push) ; 4403
; [then-branch 8953] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8954] 4 == 2
(push) ; 4404
; [else-branch 8954] 4 != 2
(pop) ; 4404
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4404
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4404
; 0,00s
; (get-info :all-statistics)
(push) ; 4404
; [then-branch 8955] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8956] 4 == 2
(push) ; 4405
; [else-branch 8956] 4 != 2
(pop) ; 4405
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4405
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4405
; 0,00s
; (get-info :all-statistics)
(push) ; 4405
; [then-branch 8957] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8958] 4 == 2
(push) ; 4406
; [else-branch 8958] 4 != 2
(pop) ; 4406
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4406
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4406
; 0,00s
; (get-info :all-statistics)
(push) ; 4406
; [then-branch 8959] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8960] 4 == 2
(push) ; 4407
; [else-branch 8960] 4 != 2
(pop) ; 4407
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4407
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4407
; 0,00s
; (get-info :all-statistics)
(push) ; 4407
; [then-branch 8961] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8962] 4 == 2
(push) ; 4408
; [else-branch 8962] 4 != 2
(pop) ; 4408
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4408
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4408
; 0,00s
; (get-info :all-statistics)
(push) ; 4408
; [then-branch 8963] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8964] 4 == 2
(push) ; 4409
; [else-branch 8964] 4 != 2
(pop) ; 4409
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4409
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4409
; 0,00s
; (get-info :all-statistics)
(push) ; 4409
; [then-branch 8965] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8966] 4 == 2
(push) ; 4410
; [else-branch 8966] 4 != 2
(pop) ; 4410
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4410
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4410
; 0,00s
; (get-info :all-statistics)
(push) ; 4410
; [then-branch 8967] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8968] 4 == 2
(push) ; 4411
; [else-branch 8968] 4 != 2
(pop) ; 4411
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4411
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4411
; 0,00s
; (get-info :all-statistics)
(push) ; 4411
; [then-branch 8969] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8970] 4 == 2
(push) ; 4412
; [else-branch 8970] 4 != 2
(pop) ; 4412
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4412
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4412
; 0,00s
; (get-info :all-statistics)
(push) ; 4412
; [then-branch 8971] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8972] 4 == 2
(push) ; 4413
; [else-branch 8972] 4 != 2
(pop) ; 4413
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4413
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4413
; 0,00s
; (get-info :all-statistics)
(push) ; 4413
; [then-branch 8973] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8974] 4 == 2
(push) ; 4414
; [else-branch 8974] 4 != 2
(pop) ; 4414
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4414
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4414
; 0,00s
; (get-info :all-statistics)
(push) ; 4414
; [then-branch 8975] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8976] 4 == 2
(push) ; 4415
; [else-branch 8976] 4 != 2
(pop) ; 4415
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4415
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4415
; 0,00s
; (get-info :all-statistics)
(push) ; 4415
; [then-branch 8977] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8978] 4 == 2
(push) ; 4416
; [else-branch 8978] 4 != 2
(pop) ; 4416
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4416
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4416
; 0,00s
; (get-info :all-statistics)
(push) ; 4416
; [then-branch 8979] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8980] 4 == 2
(push) ; 4417
; [else-branch 8980] 4 != 2
(pop) ; 4417
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4417
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4417
; 0,00s
; (get-info :all-statistics)
(push) ; 4417
; [then-branch 8981] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8982] 4 == 2
(push) ; 4418
; [else-branch 8982] 4 != 2
(pop) ; 4418
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4418
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4418
; 0,00s
; (get-info :all-statistics)
(push) ; 4418
; [then-branch 8983] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8984] 4 == 2
(push) ; 4419
; [else-branch 8984] 4 != 2
(pop) ; 4419
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4419
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4419
; 0,00s
; (get-info :all-statistics)
(push) ; 4419
; [then-branch 8985] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8986] 4 == 2
(push) ; 4420
; [else-branch 8986] 4 != 2
(pop) ; 4420
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4420
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4420
; 0,00s
; (get-info :all-statistics)
(push) ; 4420
; [then-branch 8987] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8988] 4 == 2
(push) ; 4421
; [else-branch 8988] 4 != 2
(pop) ; 4421
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4421
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4421
; 0,00s
; (get-info :all-statistics)
(push) ; 4421
; [then-branch 8989] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8990] 4 == 2
(push) ; 4422
; [else-branch 8990] 4 != 2
(pop) ; 4422
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4422
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4422
; 0,00s
; (get-info :all-statistics)
(push) ; 4422
; [then-branch 8991] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8992] 4 == 2
(push) ; 4423
; [else-branch 8992] 4 != 2
(pop) ; 4423
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4423
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4423
; 0,00s
; (get-info :all-statistics)
(push) ; 4423
; [then-branch 8993] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8994] 4 == 2
(push) ; 4424
; [else-branch 8994] 4 != 2
(pop) ; 4424
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4424
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4424
; 0,00s
; (get-info :all-statistics)
(push) ; 4424
; [then-branch 8995] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8996] 4 == 2
(push) ; 4425
; [else-branch 8996] 4 != 2
(pop) ; 4425
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4425
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4425
; 0,00s
; (get-info :all-statistics)
(push) ; 4425
; [then-branch 8997] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 8998] 4 == 2
(push) ; 4426
; [else-branch 8998] 4 != 2
(pop) ; 4426
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4426
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4426
; 0,00s
; (get-info :all-statistics)
(push) ; 4426
; [then-branch 8999] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9000] 4 == 2
(push) ; 4427
; [else-branch 9000] 4 != 2
(pop) ; 4427
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4427
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4427
; 0,00s
; (get-info :all-statistics)
(push) ; 4427
; [then-branch 9001] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9002] 4 == 2
(push) ; 4428
; [else-branch 9002] 4 != 2
(pop) ; 4428
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4428
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4428
; 0,00s
; (get-info :all-statistics)
(push) ; 4428
; [then-branch 9003] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9004] 4 == 2
(push) ; 4429
; [else-branch 9004] 4 != 2
(pop) ; 4429
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4429
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4429
; 0,00s
; (get-info :all-statistics)
(push) ; 4429
; [then-branch 9005] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9006] 4 == 2
(push) ; 4430
; [else-branch 9006] 4 != 2
(pop) ; 4430
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4430
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4430
; 0,00s
; (get-info :all-statistics)
(push) ; 4430
; [then-branch 9007] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9008] 4 == 2
(push) ; 4431
; [else-branch 9008] 4 != 2
(pop) ; 4431
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4431
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4431
; 0,00s
; (get-info :all-statistics)
(push) ; 4431
; [then-branch 9009] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9010] 4 == 2
(push) ; 4432
; [else-branch 9010] 4 != 2
(pop) ; 4432
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4432
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4432
; 0,00s
; (get-info :all-statistics)
(push) ; 4432
; [then-branch 9011] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9012] 4 == 2
(push) ; 4433
; [else-branch 9012] 4 != 2
(pop) ; 4433
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4433
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4433
; 0,00s
; (get-info :all-statistics)
(push) ; 4433
; [then-branch 9013] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9014] 4 == 2
(push) ; 4434
; [else-branch 9014] 4 != 2
(pop) ; 4434
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4434
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4434
; 0,00s
; (get-info :all-statistics)
(push) ; 4434
; [then-branch 9015] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9016] 4 == 2
(push) ; 4435
; [else-branch 9016] 4 != 2
(pop) ; 4435
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4435
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4435
; 0,00s
; (get-info :all-statistics)
(push) ; 4435
; [then-branch 9017] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9018] 4 == 2
(push) ; 4436
; [else-branch 9018] 4 != 2
(pop) ; 4436
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4436
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4436
; 0,00s
; (get-info :all-statistics)
(push) ; 4436
; [then-branch 9019] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9020] 4 == 2
(push) ; 4437
; [else-branch 9020] 4 != 2
(pop) ; 4437
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4437
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4437
; 0,00s
; (get-info :all-statistics)
(push) ; 4437
; [then-branch 9021] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9022] 4 == 2
(push) ; 4438
; [else-branch 9022] 4 != 2
(pop) ; 4438
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4438
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4438
; 0,00s
; (get-info :all-statistics)
(push) ; 4438
; [then-branch 9023] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9024] 4 == 2
(push) ; 4439
; [else-branch 9024] 4 != 2
(pop) ; 4439
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4439
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4439
; 0,00s
; (get-info :all-statistics)
(push) ; 4439
; [then-branch 9025] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9026] 4 == 2
(push) ; 4440
; [else-branch 9026] 4 != 2
(pop) ; 4440
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4440
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4440
; 0,00s
; (get-info :all-statistics)
(push) ; 4440
; [then-branch 9027] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9028] 4 == 2
(push) ; 4441
; [else-branch 9028] 4 != 2
(pop) ; 4441
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4441
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4441
; 0,00s
; (get-info :all-statistics)
(push) ; 4441
; [then-branch 9029] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9030] 4 == 2
(push) ; 4442
; [else-branch 9030] 4 != 2
(pop) ; 4442
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4442
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4442
; 0,00s
; (get-info :all-statistics)
(push) ; 4442
; [then-branch 9031] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9032] 4 == 2
(push) ; 4443
; [else-branch 9032] 4 != 2
(pop) ; 4443
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4443
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4443
; 0,00s
; (get-info :all-statistics)
(push) ; 4443
; [then-branch 9033] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9034] 4 == 2
(push) ; 4444
; [else-branch 9034] 4 != 2
(pop) ; 4444
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4444
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4444
; 0,00s
; (get-info :all-statistics)
(push) ; 4444
; [then-branch 9035] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9036] 4 == 2
(push) ; 4445
; [else-branch 9036] 4 != 2
(pop) ; 4445
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4445
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4445
; 0,00s
; (get-info :all-statistics)
(push) ; 4445
; [then-branch 9037] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9038] 4 == 2
(push) ; 4446
; [else-branch 9038] 4 != 2
(pop) ; 4446
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4446
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4446
; 0,00s
; (get-info :all-statistics)
(push) ; 4446
; [then-branch 9039] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9040] 4 == 2
(push) ; 4447
; [else-branch 9040] 4 != 2
(pop) ; 4447
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4447
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4447
; 0,00s
; (get-info :all-statistics)
(push) ; 4447
; [then-branch 9041] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9042] 4 == 2
(push) ; 4448
; [else-branch 9042] 4 != 2
(pop) ; 4448
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4448
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4448
; 0,00s
; (get-info :all-statistics)
(push) ; 4448
; [then-branch 9043] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9044] 4 == 2
(push) ; 4449
; [else-branch 9044] 4 != 2
(pop) ; 4449
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4449
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4449
; 0,00s
; (get-info :all-statistics)
(push) ; 4449
; [then-branch 9045] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9046] 4 == 2
(push) ; 4450
; [else-branch 9046] 4 != 2
(pop) ; 4450
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4450
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4450
; 0,00s
; (get-info :all-statistics)
(push) ; 4450
; [then-branch 9047] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9048] 4 == 2
(push) ; 4451
; [else-branch 9048] 4 != 2
(pop) ; 4451
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4451
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4451
; 0,00s
; (get-info :all-statistics)
(push) ; 4451
; [then-branch 9049] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9050] 4 == 2
(push) ; 4452
; [else-branch 9050] 4 != 2
(pop) ; 4452
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4452
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4452
; 0,00s
; (get-info :all-statistics)
(push) ; 4452
; [then-branch 9051] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9052] 4 == 2
(push) ; 4453
; [else-branch 9052] 4 != 2
(pop) ; 4453
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4453
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4453
; 0,00s
; (get-info :all-statistics)
(push) ; 4453
; [then-branch 9053] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9054] 4 == 2
(push) ; 4454
; [else-branch 9054] 4 != 2
(pop) ; 4454
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4454
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4454
; 0,00s
; (get-info :all-statistics)
(push) ; 4454
; [then-branch 9055] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9056] 4 == 2
(push) ; 4455
; [else-branch 9056] 4 != 2
(pop) ; 4455
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4455
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4455
; 0,00s
; (get-info :all-statistics)
(push) ; 4455
; [then-branch 9057] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9058] 4 == 2
(push) ; 4456
; [else-branch 9058] 4 != 2
(pop) ; 4456
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4456
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4456
; 0,00s
; (get-info :all-statistics)
(push) ; 4456
; [then-branch 9059] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9060] 4 == 2
(push) ; 4457
; [else-branch 9060] 4 != 2
(pop) ; 4457
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4457
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4457
; 0,00s
; (get-info :all-statistics)
(push) ; 4457
; [then-branch 9061] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9062] 4 == 2
(push) ; 4458
; [else-branch 9062] 4 != 2
(pop) ; 4458
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4458
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4458
; 0,00s
; (get-info :all-statistics)
(push) ; 4458
; [then-branch 9063] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9064] 4 == 2
(push) ; 4459
; [else-branch 9064] 4 != 2
(pop) ; 4459
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4459
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4459
; 0,00s
; (get-info :all-statistics)
(push) ; 4459
; [then-branch 9065] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9066] 4 == 2
(push) ; 4460
; [else-branch 9066] 4 != 2
(pop) ; 4460
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4460
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4460
; 0,00s
; (get-info :all-statistics)
(push) ; 4460
; [then-branch 9067] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9068] 4 == 2
(push) ; 4461
; [else-branch 9068] 4 != 2
(pop) ; 4461
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4461
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4461
; 0,00s
; (get-info :all-statistics)
(push) ; 4461
; [then-branch 9069] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9070] 4 == 2
(push) ; 4462
; [else-branch 9070] 4 != 2
(pop) ; 4462
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4462
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4462
; 0,00s
; (get-info :all-statistics)
(push) ; 4462
; [then-branch 9071] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9072] 4 == 2
(push) ; 4463
; [else-branch 9072] 4 != 2
(pop) ; 4463
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4463
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4463
; 0,00s
; (get-info :all-statistics)
(push) ; 4463
; [then-branch 9073] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9074] 4 == 2
(push) ; 4464
; [else-branch 9074] 4 != 2
(pop) ; 4464
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4464
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4464
; 0,00s
; (get-info :all-statistics)
(push) ; 4464
; [then-branch 9075] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9076] 4 == 2
(push) ; 4465
; [else-branch 9076] 4 != 2
(pop) ; 4465
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4465
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4465
; 0,00s
; (get-info :all-statistics)
(push) ; 4465
; [then-branch 9077] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9078] 4 == 2
(push) ; 4466
; [else-branch 9078] 4 != 2
(pop) ; 4466
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4466
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4466
; 0,00s
; (get-info :all-statistics)
(push) ; 4466
; [then-branch 9079] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9080] 4 == 2
(push) ; 4467
; [else-branch 9080] 4 != 2
(pop) ; 4467
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4467
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4467
; 0,00s
; (get-info :all-statistics)
(push) ; 4467
; [then-branch 9081] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9082] 4 == 2
(push) ; 4468
; [else-branch 9082] 4 != 2
(pop) ; 4468
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4468
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4468
; 0,00s
; (get-info :all-statistics)
(push) ; 4468
; [then-branch 9083] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9084] 4 == 2
(push) ; 4469
; [else-branch 9084] 4 != 2
(pop) ; 4469
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4469
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4469
; 0,00s
; (get-info :all-statistics)
(push) ; 4469
; [then-branch 9085] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9086] 4 == 2
(push) ; 4470
; [else-branch 9086] 4 != 2
(pop) ; 4470
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4470
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4470
; 0,00s
; (get-info :all-statistics)
(push) ; 4470
; [then-branch 9087] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9088] 4 == 2
(push) ; 4471
; [else-branch 9088] 4 != 2
(pop) ; 4471
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4471
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4471
; 0,00s
; (get-info :all-statistics)
(push) ; 4471
; [then-branch 9089] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9090] 4 == 2
(push) ; 4472
; [else-branch 9090] 4 != 2
(pop) ; 4472
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4472
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4472
; 0,00s
; (get-info :all-statistics)
(push) ; 4472
; [then-branch 9091] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9092] 4 == 2
(push) ; 4473
; [else-branch 9092] 4 != 2
(pop) ; 4473
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4473
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4473
; 0,00s
; (get-info :all-statistics)
(push) ; 4473
; [then-branch 9093] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9094] 4 == 2
(push) ; 4474
; [else-branch 9094] 4 != 2
(pop) ; 4474
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4474
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4474
; 0,00s
; (get-info :all-statistics)
(push) ; 4474
; [then-branch 9095] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9096] 4 == 2
(push) ; 4475
; [else-branch 9096] 4 != 2
(pop) ; 4475
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4475
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4475
; 0,00s
; (get-info :all-statistics)
(push) ; 4475
; [then-branch 9097] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9098] 4 == 2
(push) ; 4476
; [else-branch 9098] 4 != 2
(pop) ; 4476
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4476
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4476
; 0,00s
; (get-info :all-statistics)
(push) ; 4476
; [then-branch 9099] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9100] 4 == 2
(push) ; 4477
; [else-branch 9100] 4 != 2
(pop) ; 4477
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4477
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4477
; 0,00s
; (get-info :all-statistics)
(push) ; 4477
; [then-branch 9101] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9102] 4 == 2
(push) ; 4478
; [else-branch 9102] 4 != 2
(pop) ; 4478
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4478
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4478
; 0,00s
; (get-info :all-statistics)
(push) ; 4478
; [then-branch 9103] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9104] 4 == 2
(push) ; 4479
; [else-branch 9104] 4 != 2
(pop) ; 4479
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4479
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4479
; 0,00s
; (get-info :all-statistics)
(push) ; 4479
; [then-branch 9105] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9106] 4 == 2
(push) ; 4480
; [else-branch 9106] 4 != 2
(pop) ; 4480
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4480
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4480
; 0,00s
; (get-info :all-statistics)
(push) ; 4480
; [then-branch 9107] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9108] 4 == 2
(push) ; 4481
; [else-branch 9108] 4 != 2
(pop) ; 4481
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4481
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4481
; 0,00s
; (get-info :all-statistics)
(push) ; 4481
; [then-branch 9109] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9110] 4 == 2
(push) ; 4482
; [else-branch 9110] 4 != 2
(pop) ; 4482
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4482
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4482
; 0,00s
; (get-info :all-statistics)
(push) ; 4482
; [then-branch 9111] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9112] 4 == 2
(push) ; 4483
; [else-branch 9112] 4 != 2
(pop) ; 4483
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4483
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4483
; 0,00s
; (get-info :all-statistics)
(push) ; 4483
; [then-branch 9113] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9114] 4 == 2
(push) ; 4484
; [else-branch 9114] 4 != 2
(pop) ; 4484
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4484
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4484
; 0,00s
; (get-info :all-statistics)
(push) ; 4484
; [then-branch 9115] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9116] 4 == 2
(push) ; 4485
; [else-branch 9116] 4 != 2
(pop) ; 4485
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4485
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4485
; 0,00s
; (get-info :all-statistics)
(push) ; 4485
; [then-branch 9117] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9118] 4 == 2
(push) ; 4486
; [else-branch 9118] 4 != 2
(pop) ; 4486
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4486
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4486
; 0,00s
; (get-info :all-statistics)
(push) ; 4486
; [then-branch 9119] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9120] 4 == 2
(push) ; 4487
; [else-branch 9120] 4 != 2
(pop) ; 4487
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4487
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4487
; 0,00s
; (get-info :all-statistics)
(push) ; 4487
; [then-branch 9121] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9122] 4 == 2
(push) ; 4488
; [else-branch 9122] 4 != 2
(pop) ; 4488
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4488
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4488
; 0,00s
; (get-info :all-statistics)
(push) ; 4488
; [then-branch 9123] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9124] 4 == 2
(push) ; 4489
; [else-branch 9124] 4 != 2
(pop) ; 4489
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4489
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4489
; 0,00s
; (get-info :all-statistics)
(push) ; 4489
; [then-branch 9125] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9126] 4 == 2
(push) ; 4490
; [else-branch 9126] 4 != 2
(pop) ; 4490
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4490
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4490
; 0,00s
; (get-info :all-statistics)
(push) ; 4490
; [then-branch 9127] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9128] 4 == 2
(push) ; 4491
; [else-branch 9128] 4 != 2
(pop) ; 4491
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4491
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4491
; 0,00s
; (get-info :all-statistics)
(push) ; 4491
; [then-branch 9129] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9130] 4 == 2
(push) ; 4492
; [else-branch 9130] 4 != 2
(pop) ; 4492
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4492
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4492
; 0,00s
; (get-info :all-statistics)
(push) ; 4492
; [then-branch 9131] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9132] 4 == 2
(push) ; 4493
; [else-branch 9132] 4 != 2
(pop) ; 4493
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4493
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4493
; 0,00s
; (get-info :all-statistics)
(push) ; 4493
; [then-branch 9133] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9134] 4 == 2
(push) ; 4494
; [else-branch 9134] 4 != 2
(pop) ; 4494
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4494
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4494
; 0,00s
; (get-info :all-statistics)
(push) ; 4494
; [then-branch 9135] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9136] 4 == 2
(push) ; 4495
; [else-branch 9136] 4 != 2
(pop) ; 4495
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4495
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4495
; 0,00s
; (get-info :all-statistics)
(push) ; 4495
; [then-branch 9137] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9138] 4 == 2
(push) ; 4496
; [else-branch 9138] 4 != 2
(pop) ; 4496
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4496
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4496
; 0,00s
; (get-info :all-statistics)
(push) ; 4496
; [then-branch 9139] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9140] 4 == 2
(push) ; 4497
; [else-branch 9140] 4 != 2
(pop) ; 4497
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4497
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4497
; 0,00s
; (get-info :all-statistics)
(push) ; 4497
; [then-branch 9141] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9142] 4 == 2
(push) ; 4498
; [else-branch 9142] 4 != 2
(pop) ; 4498
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4498
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4498
; 0,00s
; (get-info :all-statistics)
(push) ; 4498
; [then-branch 9143] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9144] 4 == 2
(push) ; 4499
; [else-branch 9144] 4 != 2
(pop) ; 4499
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4499
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4499
; 0,00s
; (get-info :all-statistics)
(push) ; 4499
; [then-branch 9145] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9146] 4 == 2
(push) ; 4500
; [else-branch 9146] 4 != 2
(pop) ; 4500
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4500
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4500
; 0,00s
; (get-info :all-statistics)
(push) ; 4500
; [then-branch 9147] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9148] 4 == 2
(push) ; 4501
; [else-branch 9148] 4 != 2
(pop) ; 4501
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4501
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4501
; 0,00s
; (get-info :all-statistics)
(push) ; 4501
; [then-branch 9149] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9150] 4 == 2
(push) ; 4502
; [else-branch 9150] 4 != 2
(pop) ; 4502
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4502
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4502
; 0,00s
; (get-info :all-statistics)
(push) ; 4502
; [then-branch 9151] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9152] 4 == 2
(push) ; 4503
; [else-branch 9152] 4 != 2
(pop) ; 4503
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4503
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4503
; 0,00s
; (get-info :all-statistics)
(push) ; 4503
; [then-branch 9153] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9154] 4 == 2
(push) ; 4504
; [else-branch 9154] 4 != 2
(pop) ; 4504
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4504
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4504
; 0,00s
; (get-info :all-statistics)
(push) ; 4504
; [then-branch 9155] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9156] 4 == 2
(push) ; 4505
; [else-branch 9156] 4 != 2
(pop) ; 4505
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4505
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4505
; 0,00s
; (get-info :all-statistics)
(push) ; 4505
; [then-branch 9157] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9158] 4 == 2
(push) ; 4506
; [else-branch 9158] 4 != 2
(pop) ; 4506
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4506
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4506
; 0,00s
; (get-info :all-statistics)
(push) ; 4506
; [then-branch 9159] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9160] 4 == 2
(push) ; 4507
; [else-branch 9160] 4 != 2
(pop) ; 4507
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4507
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4507
; 0,00s
; (get-info :all-statistics)
(push) ; 4507
; [then-branch 9161] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9162] 4 == 2
(push) ; 4508
; [else-branch 9162] 4 != 2
(pop) ; 4508
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4508
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4508
; 0,00s
; (get-info :all-statistics)
(push) ; 4508
; [then-branch 9163] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9164] 4 == 2
(push) ; 4509
; [else-branch 9164] 4 != 2
(pop) ; 4509
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4509
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4509
; 0,00s
; (get-info :all-statistics)
(push) ; 4509
; [then-branch 9165] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9166] 4 == 2
(push) ; 4510
; [else-branch 9166] 4 != 2
(pop) ; 4510
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4510
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4510
; 0,00s
; (get-info :all-statistics)
(push) ; 4510
; [then-branch 9167] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9168] 4 == 2
(push) ; 4511
; [else-branch 9168] 4 != 2
(pop) ; 4511
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4511
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4511
; 0,00s
; (get-info :all-statistics)
(push) ; 4511
; [then-branch 9169] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9170] 4 == 2
(push) ; 4512
; [else-branch 9170] 4 != 2
(pop) ; 4512
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4512
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4512
; 0,00s
; (get-info :all-statistics)
(push) ; 4512
; [then-branch 9171] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9172] 4 == 2
(push) ; 4513
; [else-branch 9172] 4 != 2
(pop) ; 4513
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4513
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4513
; 0,00s
; (get-info :all-statistics)
(push) ; 4513
; [then-branch 9173] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9174] 4 == 2
(push) ; 4514
; [else-branch 9174] 4 != 2
(pop) ; 4514
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4514
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4514
; 0,00s
; (get-info :all-statistics)
(push) ; 4514
; [then-branch 9175] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9176] 4 == 2
(push) ; 4515
; [else-branch 9176] 4 != 2
(pop) ; 4515
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4515
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4515
; 0,00s
; (get-info :all-statistics)
(push) ; 4515
; [then-branch 9177] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9178] 4 == 2
(push) ; 4516
; [else-branch 9178] 4 != 2
(pop) ; 4516
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4516
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4516
; 0,00s
; (get-info :all-statistics)
(push) ; 4516
; [then-branch 9179] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9180] 4 == 2
(push) ; 4517
; [else-branch 9180] 4 != 2
(pop) ; 4517
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4517
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4517
; 0,00s
; (get-info :all-statistics)
(push) ; 4517
; [then-branch 9181] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9182] 4 == 2
(push) ; 4518
; [else-branch 9182] 4 != 2
(pop) ; 4518
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4518
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4518
; 0,00s
; (get-info :all-statistics)
(push) ; 4518
; [then-branch 9183] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9184] 4 == 2
(push) ; 4519
; [else-branch 9184] 4 != 2
(pop) ; 4519
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4519
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4519
; 0,00s
; (get-info :all-statistics)
(push) ; 4519
; [then-branch 9185] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9186] 4 == 2
(push) ; 4520
; [else-branch 9186] 4 != 2
(pop) ; 4520
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4520
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4520
; 0,00s
; (get-info :all-statistics)
(push) ; 4520
; [then-branch 9187] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9188] 4 == 2
(push) ; 4521
; [else-branch 9188] 4 != 2
(pop) ; 4521
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4521
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4521
; 0,00s
; (get-info :all-statistics)
(push) ; 4521
; [then-branch 9189] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9190] 4 == 2
(push) ; 4522
; [else-branch 9190] 4 != 2
(pop) ; 4522
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4522
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4522
; 0,00s
; (get-info :all-statistics)
(push) ; 4522
; [then-branch 9191] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9192] 4 == 2
(push) ; 4523
; [else-branch 9192] 4 != 2
(pop) ; 4523
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4523
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4523
; 0,00s
; (get-info :all-statistics)
(push) ; 4523
; [then-branch 9193] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9194] 4 == 2
(push) ; 4524
; [else-branch 9194] 4 != 2
(pop) ; 4524
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4524
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4524
; 0,00s
; (get-info :all-statistics)
(push) ; 4524
; [then-branch 9195] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9196] 4 == 2
(push) ; 4525
; [else-branch 9196] 4 != 2
(pop) ; 4525
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4525
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4525
; 0,00s
; (get-info :all-statistics)
(push) ; 4525
; [then-branch 9197] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9198] 4 == 2
(push) ; 4526
; [else-branch 9198] 4 != 2
(pop) ; 4526
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4526
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4526
; 0,00s
; (get-info :all-statistics)
(push) ; 4526
; [then-branch 9199] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9200] 4 == 2
(push) ; 4527
; [else-branch 9200] 4 != 2
(pop) ; 4527
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4527
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4527
; 0,00s
; (get-info :all-statistics)
(push) ; 4527
; [then-branch 9201] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9202] 4 == 2
(push) ; 4528
; [else-branch 9202] 4 != 2
(pop) ; 4528
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4528
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4528
; 0,00s
; (get-info :all-statistics)
(push) ; 4528
; [then-branch 9203] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9204] 4 == 2
(push) ; 4529
; [else-branch 9204] 4 != 2
(pop) ; 4529
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4529
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4529
; 0,00s
; (get-info :all-statistics)
(push) ; 4529
; [then-branch 9205] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9206] 4 == 2
(push) ; 4530
; [else-branch 9206] 4 != 2
(pop) ; 4530
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4530
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4530
; 0,00s
; (get-info :all-statistics)
(push) ; 4530
; [then-branch 9207] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9208] 4 == 2
(push) ; 4531
; [else-branch 9208] 4 != 2
(pop) ; 4531
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4531
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4531
; 0,00s
; (get-info :all-statistics)
(push) ; 4531
; [then-branch 9209] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9210] 4 == 2
(push) ; 4532
; [else-branch 9210] 4 != 2
(pop) ; 4532
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4532
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4532
; 0,00s
; (get-info :all-statistics)
(push) ; 4532
; [then-branch 9211] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9212] 4 == 2
(push) ; 4533
; [else-branch 9212] 4 != 2
(pop) ; 4533
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4533
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4533
; 0,00s
; (get-info :all-statistics)
(push) ; 4533
; [then-branch 9213] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9214] 4 == 2
(push) ; 4534
; [else-branch 9214] 4 != 2
(pop) ; 4534
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4534
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4534
; 0,00s
; (get-info :all-statistics)
(push) ; 4534
; [then-branch 9215] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9216] 4 == 2
(push) ; 4535
; [else-branch 9216] 4 != 2
(pop) ; 4535
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4535
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4535
; 0,00s
; (get-info :all-statistics)
(push) ; 4535
; [then-branch 9217] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9218] 4 == 2
(push) ; 4536
; [else-branch 9218] 4 != 2
(pop) ; 4536
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4536
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4536
; 0,00s
; (get-info :all-statistics)
(push) ; 4536
; [then-branch 9219] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9220] 4 == 2
(push) ; 4537
; [else-branch 9220] 4 != 2
(pop) ; 4537
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4537
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4537
; 0,00s
; (get-info :all-statistics)
(push) ; 4537
; [then-branch 9221] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9222] 4 == 2
(push) ; 4538
; [else-branch 9222] 4 != 2
(pop) ; 4538
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4538
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4538
; 0,00s
; (get-info :all-statistics)
(push) ; 4538
; [then-branch 9223] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9224] 4 == 2
(push) ; 4539
; [else-branch 9224] 4 != 2
(pop) ; 4539
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4539
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4539
; 0,00s
; (get-info :all-statistics)
(push) ; 4539
; [then-branch 9225] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9226] 4 == 2
(push) ; 4540
; [else-branch 9226] 4 != 2
(pop) ; 4540
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4540
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4540
; 0,00s
; (get-info :all-statistics)
(push) ; 4540
; [then-branch 9227] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9228] 4 == 2
(push) ; 4541
; [else-branch 9228] 4 != 2
(pop) ; 4541
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4541
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4541
; 0,00s
; (get-info :all-statistics)
(push) ; 4541
; [then-branch 9229] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9230] 4 == 2
(push) ; 4542
; [else-branch 9230] 4 != 2
(pop) ; 4542
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4542
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4542
; 0,00s
; (get-info :all-statistics)
(push) ; 4542
; [then-branch 9231] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9232] 4 == 2
(push) ; 4543
; [else-branch 9232] 4 != 2
(pop) ; 4543
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4543
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4543
; 0,00s
; (get-info :all-statistics)
(push) ; 4543
; [then-branch 9233] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9234] 4 == 2
(push) ; 4544
; [else-branch 9234] 4 != 2
(pop) ; 4544
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4544
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4544
; 0,00s
; (get-info :all-statistics)
(push) ; 4544
; [then-branch 9235] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9236] 4 == 2
(push) ; 4545
; [else-branch 9236] 4 != 2
(pop) ; 4545
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4545
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4545
; 0,00s
; (get-info :all-statistics)
(push) ; 4545
; [then-branch 9237] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9238] 4 == 2
(push) ; 4546
; [else-branch 9238] 4 != 2
(pop) ; 4546
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4546
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4546
; 0,00s
; (get-info :all-statistics)
(push) ; 4546
; [then-branch 9239] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9240] 4 == 2
(push) ; 4547
; [else-branch 9240] 4 != 2
(pop) ; 4547
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4547
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4547
; 0,00s
; (get-info :all-statistics)
(push) ; 4547
; [then-branch 9241] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9242] 4 == 2
(push) ; 4548
; [else-branch 9242] 4 != 2
(pop) ; 4548
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4548
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4548
; 0,00s
; (get-info :all-statistics)
(push) ; 4548
; [then-branch 9243] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9244] 4 == 2
(push) ; 4549
; [else-branch 9244] 4 != 2
(pop) ; 4549
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4549
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4549
; 0,00s
; (get-info :all-statistics)
(push) ; 4549
; [then-branch 9245] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9246] 4 == 2
(push) ; 4550
; [else-branch 9246] 4 != 2
(pop) ; 4550
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4550
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4550
; 0,00s
; (get-info :all-statistics)
(push) ; 4550
; [then-branch 9247] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9248] 4 == 2
(push) ; 4551
; [else-branch 9248] 4 != 2
(pop) ; 4551
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4551
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4551
; 0,00s
; (get-info :all-statistics)
(push) ; 4551
; [then-branch 9249] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9250] 4 == 2
(push) ; 4552
; [else-branch 9250] 4 != 2
(pop) ; 4552
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4552
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4552
; 0,00s
; (get-info :all-statistics)
(push) ; 4552
; [then-branch 9251] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9252] 4 == 2
(push) ; 4553
; [else-branch 9252] 4 != 2
(pop) ; 4553
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4553
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4553
; 0,00s
; (get-info :all-statistics)
(push) ; 4553
; [then-branch 9253] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9254] 4 == 2
(push) ; 4554
; [else-branch 9254] 4 != 2
(pop) ; 4554
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4554
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4554
; 0,00s
; (get-info :all-statistics)
(push) ; 4554
; [then-branch 9255] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9256] 4 == 2
(push) ; 4555
; [else-branch 9256] 4 != 2
(pop) ; 4555
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4555
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4555
; 0,00s
; (get-info :all-statistics)
(push) ; 4555
; [then-branch 9257] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9258] 4 == 2
(push) ; 4556
; [else-branch 9258] 4 != 2
(pop) ; 4556
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4556
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4556
; 0,00s
; (get-info :all-statistics)
(push) ; 4556
; [then-branch 9259] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9260] 4 == 2
(push) ; 4557
; [else-branch 9260] 4 != 2
(pop) ; 4557
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4557
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4557
; 0,00s
; (get-info :all-statistics)
(push) ; 4557
; [then-branch 9261] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9262] 4 == 2
(push) ; 4558
; [else-branch 9262] 4 != 2
(pop) ; 4558
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4558
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4558
; 0,00s
; (get-info :all-statistics)
(push) ; 4558
; [then-branch 9263] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9264] 4 == 2
(push) ; 4559
; [else-branch 9264] 4 != 2
(pop) ; 4559
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4559
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4559
; 0,00s
; (get-info :all-statistics)
(push) ; 4559
; [then-branch 9265] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9266] 4 == 2
(push) ; 4560
; [else-branch 9266] 4 != 2
(pop) ; 4560
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4560
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4560
; 0,00s
; (get-info :all-statistics)
(push) ; 4560
; [then-branch 9267] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9268] 4 == 2
(push) ; 4561
; [else-branch 9268] 4 != 2
(pop) ; 4561
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4561
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4561
; 0,00s
; (get-info :all-statistics)
(push) ; 4561
; [then-branch 9269] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9270] 4 == 2
(push) ; 4562
; [else-branch 9270] 4 != 2
(pop) ; 4562
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4562
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4562
; 0,00s
; (get-info :all-statistics)
(push) ; 4562
; [then-branch 9271] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9272] 4 == 2
(push) ; 4563
; [else-branch 9272] 4 != 2
(pop) ; 4563
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4563
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4563
; 0,00s
; (get-info :all-statistics)
(push) ; 4563
; [then-branch 9273] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9274] 4 == 2
(push) ; 4564
; [else-branch 9274] 4 != 2
(pop) ; 4564
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4564
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4564
; 0,00s
; (get-info :all-statistics)
(push) ; 4564
; [then-branch 9275] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9276] 4 == 2
(push) ; 4565
; [else-branch 9276] 4 != 2
(pop) ; 4565
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4565
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4565
; 0,00s
; (get-info :all-statistics)
(push) ; 4565
; [then-branch 9277] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9278] 4 == 2
(push) ; 4566
; [else-branch 9278] 4 != 2
(pop) ; 4566
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4566
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4566
; 0,00s
; (get-info :all-statistics)
(push) ; 4566
; [then-branch 9279] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9280] 4 == 2
(push) ; 4567
; [else-branch 9280] 4 != 2
(pop) ; 4567
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4567
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4567
; 0,00s
; (get-info :all-statistics)
(push) ; 4567
; [then-branch 9281] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9282] 4 == 2
(push) ; 4568
; [else-branch 9282] 4 != 2
(pop) ; 4568
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4568
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4568
; 0,00s
; (get-info :all-statistics)
(push) ; 4568
; [then-branch 9283] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9284] 4 == 2
(push) ; 4569
; [else-branch 9284] 4 != 2
(pop) ; 4569
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4569
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4569
; 0,00s
; (get-info :all-statistics)
(push) ; 4569
; [then-branch 9285] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9286] 4 == 2
(push) ; 4570
; [else-branch 9286] 4 != 2
(pop) ; 4570
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4570
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4570
; 0,00s
; (get-info :all-statistics)
(push) ; 4570
; [then-branch 9287] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9288] 4 == 2
(push) ; 4571
; [else-branch 9288] 4 != 2
(pop) ; 4571
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4571
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4571
; 0,00s
; (get-info :all-statistics)
(push) ; 4571
; [then-branch 9289] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9290] 4 == 2
(push) ; 4572
; [else-branch 9290] 4 != 2
(pop) ; 4572
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4572
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4572
; 0,00s
; (get-info :all-statistics)
(push) ; 4572
; [then-branch 9291] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9292] 4 == 2
(push) ; 4573
; [else-branch 9292] 4 != 2
(pop) ; 4573
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4573
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4573
; 0,00s
; (get-info :all-statistics)
(push) ; 4573
; [then-branch 9293] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9294] 4 == 2
(push) ; 4574
; [else-branch 9294] 4 != 2
(pop) ; 4574
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4574
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4574
; 0,00s
; (get-info :all-statistics)
(push) ; 4574
; [then-branch 9295] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9296] 4 == 2
(push) ; 4575
; [else-branch 9296] 4 != 2
(pop) ; 4575
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4575
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4575
; 0,00s
; (get-info :all-statistics)
(push) ; 4575
; [then-branch 9297] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9298] 4 == 2
(push) ; 4576
; [else-branch 9298] 4 != 2
(pop) ; 4576
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4576
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4576
; 0,00s
; (get-info :all-statistics)
(push) ; 4576
; [then-branch 9299] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9300] 4 == 2
(push) ; 4577
; [else-branch 9300] 4 != 2
(pop) ; 4577
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4577
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4577
; 0,00s
; (get-info :all-statistics)
(push) ; 4577
; [then-branch 9301] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9302] 4 == 2
(push) ; 4578
; [else-branch 9302] 4 != 2
(pop) ; 4578
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4578
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4578
; 0,00s
; (get-info :all-statistics)
(push) ; 4578
; [then-branch 9303] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9304] 4 == 2
(push) ; 4579
; [else-branch 9304] 4 != 2
(pop) ; 4579
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4579
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4579
; 0,00s
; (get-info :all-statistics)
(push) ; 4579
; [then-branch 9305] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9306] 4 == 2
(push) ; 4580
; [else-branch 9306] 4 != 2
(pop) ; 4580
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4580
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4580
; 0,00s
; (get-info :all-statistics)
(push) ; 4580
; [then-branch 9307] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9308] 4 == 2
(push) ; 4581
; [else-branch 9308] 4 != 2
(pop) ; 4581
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4581
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4581
; 0,00s
; (get-info :all-statistics)
(push) ; 4581
; [then-branch 9309] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9310] 4 == 2
(push) ; 4582
; [else-branch 9310] 4 != 2
(pop) ; 4582
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4582
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4582
; 0,00s
; (get-info :all-statistics)
(push) ; 4582
; [then-branch 9311] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9312] 4 == 2
(push) ; 4583
; [else-branch 9312] 4 != 2
(pop) ; 4583
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4583
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4583
; 0,00s
; (get-info :all-statistics)
(push) ; 4583
; [then-branch 9313] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9314] 4 == 2
(push) ; 4584
; [else-branch 9314] 4 != 2
(pop) ; 4584
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4584
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4584
; 0,00s
; (get-info :all-statistics)
(push) ; 4584
; [then-branch 9315] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9316] 4 == 2
(push) ; 4585
; [else-branch 9316] 4 != 2
(pop) ; 4585
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4585
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4585
; 0,00s
; (get-info :all-statistics)
(push) ; 4585
; [then-branch 9317] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9318] 4 == 2
(push) ; 4586
; [else-branch 9318] 4 != 2
(pop) ; 4586
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4586
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4586
; 0,00s
; (get-info :all-statistics)
(push) ; 4586
; [then-branch 9319] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9320] 4 == 2
(push) ; 4587
; [else-branch 9320] 4 != 2
(pop) ; 4587
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4587
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4587
; 0,00s
; (get-info :all-statistics)
(push) ; 4587
; [then-branch 9321] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9322] 4 == 2
(push) ; 4588
; [else-branch 9322] 4 != 2
(pop) ; 4588
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4588
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4588
; 0,00s
; (get-info :all-statistics)
(push) ; 4588
; [then-branch 9323] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9324] 4 == 2
(push) ; 4589
; [else-branch 9324] 4 != 2
(pop) ; 4589
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4589
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4589
; 0,00s
; (get-info :all-statistics)
(push) ; 4589
; [then-branch 9325] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9326] 4 == 2
(push) ; 4590
; [else-branch 9326] 4 != 2
(pop) ; 4590
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4590
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4590
; 0,00s
; (get-info :all-statistics)
(push) ; 4590
; [then-branch 9327] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9328] 4 == 2
(push) ; 4591
; [else-branch 9328] 4 != 2
(pop) ; 4591
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4591
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4591
; 0,00s
; (get-info :all-statistics)
(push) ; 4591
; [then-branch 9329] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9330] 4 == 2
(push) ; 4592
; [else-branch 9330] 4 != 2
(pop) ; 4592
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4592
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4592
; 0,00s
; (get-info :all-statistics)
(push) ; 4592
; [then-branch 9331] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9332] 4 == 2
(push) ; 4593
; [else-branch 9332] 4 != 2
(pop) ; 4593
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4593
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4593
; 0,00s
; (get-info :all-statistics)
(push) ; 4593
; [then-branch 9333] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9334] 4 == 2
(push) ; 4594
; [else-branch 9334] 4 != 2
(pop) ; 4594
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4594
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4594
; 0,00s
; (get-info :all-statistics)
(push) ; 4594
; [then-branch 9335] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9336] 4 == 2
(push) ; 4595
; [else-branch 9336] 4 != 2
(pop) ; 4595
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4595
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4595
; 0,00s
; (get-info :all-statistics)
(push) ; 4595
; [then-branch 9337] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9338] 4 == 2
(push) ; 4596
; [else-branch 9338] 4 != 2
(pop) ; 4596
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4596
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4596
; 0,00s
; (get-info :all-statistics)
(push) ; 4596
; [then-branch 9339] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9340] 4 == 2
(push) ; 4597
; [else-branch 9340] 4 != 2
(pop) ; 4597
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4597
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4597
; 0,00s
; (get-info :all-statistics)
(push) ; 4597
; [then-branch 9341] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9342] 4 == 2
(push) ; 4598
; [else-branch 9342] 4 != 2
(pop) ; 4598
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4598
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4598
; 0,00s
; (get-info :all-statistics)
(push) ; 4598
; [then-branch 9343] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9344] 4 == 2
(push) ; 4599
; [else-branch 9344] 4 != 2
(pop) ; 4599
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4599
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4599
; 0,00s
; (get-info :all-statistics)
(push) ; 4599
; [then-branch 9345] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9346] 4 == 2
(push) ; 4600
; [else-branch 9346] 4 != 2
(pop) ; 4600
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4600
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4600
; 0,00s
; (get-info :all-statistics)
(push) ; 4600
; [then-branch 9347] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9348] 4 == 2
(push) ; 4601
; [else-branch 9348] 4 != 2
(pop) ; 4601
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4601
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4601
; 0,00s
; (get-info :all-statistics)
(push) ; 4601
; [then-branch 9349] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9350] 4 == 2
(push) ; 4602
; [else-branch 9350] 4 != 2
(pop) ; 4602
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4602
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4602
; 0,00s
; (get-info :all-statistics)
(push) ; 4602
; [then-branch 9351] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9352] 4 == 2
(push) ; 4603
; [else-branch 9352] 4 != 2
(pop) ; 4603
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4603
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4603
; 0,00s
; (get-info :all-statistics)
(push) ; 4603
; [then-branch 9353] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9354] 4 == 2
(push) ; 4604
; [else-branch 9354] 4 != 2
(pop) ; 4604
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4604
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4604
; 0,00s
; (get-info :all-statistics)
(push) ; 4604
; [then-branch 9355] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9356] 4 == 2
(push) ; 4605
; [else-branch 9356] 4 != 2
(pop) ; 4605
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4605
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4605
; 0,00s
; (get-info :all-statistics)
(push) ; 4605
; [then-branch 9357] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9358] 4 == 2
(push) ; 4606
; [else-branch 9358] 4 != 2
(pop) ; 4606
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4606
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4606
; 0,00s
; (get-info :all-statistics)
(push) ; 4606
; [then-branch 9359] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9360] 4 == 2
(push) ; 4607
; [else-branch 9360] 4 != 2
(pop) ; 4607
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4607
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4607
; 0,00s
; (get-info :all-statistics)
(push) ; 4607
; [then-branch 9361] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9362] 4 == 2
(push) ; 4608
; [else-branch 9362] 4 != 2
(pop) ; 4608
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4608
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4608
; 0,00s
; (get-info :all-statistics)
(push) ; 4608
; [then-branch 9363] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9364] 4 == 2
(push) ; 4609
; [else-branch 9364] 4 != 2
(pop) ; 4609
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4609
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4609
; 0,00s
; (get-info :all-statistics)
(push) ; 4609
; [then-branch 9365] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9366] 4 == 2
(push) ; 4610
; [else-branch 9366] 4 != 2
(pop) ; 4610
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4610
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4610
; 0,00s
; (get-info :all-statistics)
(push) ; 4610
; [then-branch 9367] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9368] 4 == 2
(push) ; 4611
; [else-branch 9368] 4 != 2
(pop) ; 4611
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4611
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4611
; 0,00s
; (get-info :all-statistics)
(push) ; 4611
; [then-branch 9369] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9370] 4 == 2
(push) ; 4612
; [else-branch 9370] 4 != 2
(pop) ; 4612
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4612
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4612
; 0,00s
; (get-info :all-statistics)
(push) ; 4612
; [then-branch 9371] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9372] 4 == 2
(push) ; 4613
; [else-branch 9372] 4 != 2
(pop) ; 4613
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4613
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4613
; 0,00s
; (get-info :all-statistics)
(push) ; 4613
; [then-branch 9373] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9374] 4 == 2
(push) ; 4614
; [else-branch 9374] 4 != 2
(pop) ; 4614
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4614
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4614
; 0,00s
; (get-info :all-statistics)
(push) ; 4614
; [then-branch 9375] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9376] 4 == 2
(push) ; 4615
; [else-branch 9376] 4 != 2
(pop) ; 4615
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4615
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4615
; 0,00s
; (get-info :all-statistics)
(push) ; 4615
; [then-branch 9377] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9378] 4 == 2
(push) ; 4616
; [else-branch 9378] 4 != 2
(pop) ; 4616
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4616
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4616
; 0,00s
; (get-info :all-statistics)
(push) ; 4616
; [then-branch 9379] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9380] 4 == 2
(push) ; 4617
; [else-branch 9380] 4 != 2
(pop) ; 4617
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4617
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4617
; 0,00s
; (get-info :all-statistics)
(push) ; 4617
; [then-branch 9381] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9382] 4 == 2
(push) ; 4618
; [else-branch 9382] 4 != 2
(pop) ; 4618
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4618
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4618
; 0,00s
; (get-info :all-statistics)
(push) ; 4618
; [then-branch 9383] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9384] 4 == 2
(push) ; 4619
; [else-branch 9384] 4 != 2
(pop) ; 4619
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4619
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4619
; 0,00s
; (get-info :all-statistics)
(push) ; 4619
; [then-branch 9385] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9386] 4 == 2
(push) ; 4620
; [else-branch 9386] 4 != 2
(pop) ; 4620
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4620
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4620
; 0,00s
; (get-info :all-statistics)
(push) ; 4620
; [then-branch 9387] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9388] 4 == 2
(push) ; 4621
; [else-branch 9388] 4 != 2
(pop) ; 4621
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4621
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4621
; 0,00s
; (get-info :all-statistics)
(push) ; 4621
; [then-branch 9389] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9390] 4 == 2
(push) ; 4622
; [else-branch 9390] 4 != 2
(pop) ; 4622
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4622
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4622
; 0,00s
; (get-info :all-statistics)
(push) ; 4622
; [then-branch 9391] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9392] 4 == 2
(push) ; 4623
; [else-branch 9392] 4 != 2
(pop) ; 4623
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4623
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4623
; 0,00s
; (get-info :all-statistics)
(push) ; 4623
; [then-branch 9393] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9394] 4 == 2
(push) ; 4624
; [else-branch 9394] 4 != 2
(pop) ; 4624
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4624
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4624
; 0,00s
; (get-info :all-statistics)
(push) ; 4624
; [then-branch 9395] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9396] 4 == 2
(push) ; 4625
; [else-branch 9396] 4 != 2
(pop) ; 4625
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4625
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4625
; 0,00s
; (get-info :all-statistics)
(push) ; 4625
; [then-branch 9397] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9398] 4 == 2
(push) ; 4626
; [else-branch 9398] 4 != 2
(pop) ; 4626
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4626
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4626
; 0,00s
; (get-info :all-statistics)
(push) ; 4626
; [then-branch 9399] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9400] 4 == 2
(push) ; 4627
; [else-branch 9400] 4 != 2
(pop) ; 4627
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4627
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4627
; 0,00s
; (get-info :all-statistics)
(push) ; 4627
; [then-branch 9401] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9402] 4 == 2
(push) ; 4628
; [else-branch 9402] 4 != 2
(pop) ; 4628
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4628
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4628
; 0,00s
; (get-info :all-statistics)
(push) ; 4628
; [then-branch 9403] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9404] 4 == 2
(push) ; 4629
; [else-branch 9404] 4 != 2
(pop) ; 4629
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4629
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4629
; 0,00s
; (get-info :all-statistics)
(push) ; 4629
; [then-branch 9405] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9406] 4 == 2
(push) ; 4630
; [else-branch 9406] 4 != 2
(pop) ; 4630
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4630
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4630
; 0,00s
; (get-info :all-statistics)
(push) ; 4630
; [then-branch 9407] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9408] 4 == 2
(push) ; 4631
; [else-branch 9408] 4 != 2
(pop) ; 4631
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4631
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4631
; 0,00s
; (get-info :all-statistics)
(push) ; 4631
; [then-branch 9409] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9410] 4 == 2
(push) ; 4632
; [else-branch 9410] 4 != 2
(pop) ; 4632
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4632
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4632
; 0,00s
; (get-info :all-statistics)
(push) ; 4632
; [then-branch 9411] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9412] 4 == 2
(push) ; 4633
; [else-branch 9412] 4 != 2
(pop) ; 4633
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4633
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4633
; 0,00s
; (get-info :all-statistics)
(push) ; 4633
; [then-branch 9413] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9414] 4 == 2
(push) ; 4634
; [else-branch 9414] 4 != 2
(pop) ; 4634
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4634
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4634
; 0,00s
; (get-info :all-statistics)
(push) ; 4634
; [then-branch 9415] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9416] 4 == 2
(push) ; 4635
; [else-branch 9416] 4 != 2
(pop) ; 4635
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4635
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4635
; 0,00s
; (get-info :all-statistics)
(push) ; 4635
; [then-branch 9417] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9418] 4 == 2
(push) ; 4636
; [else-branch 9418] 4 != 2
(pop) ; 4636
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4636
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4636
; 0,00s
; (get-info :all-statistics)
(push) ; 4636
; [then-branch 9419] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9420] 4 == 2
(push) ; 4637
; [else-branch 9420] 4 != 2
(pop) ; 4637
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4637
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4637
; 0,00s
; (get-info :all-statistics)
(push) ; 4637
; [then-branch 9421] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9422] 4 == 2
(push) ; 4638
; [else-branch 9422] 4 != 2
(pop) ; 4638
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4638
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4638
; 0,00s
; (get-info :all-statistics)
(push) ; 4638
; [then-branch 9423] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9424] 4 == 2
(push) ; 4639
; [else-branch 9424] 4 != 2
(pop) ; 4639
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4639
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4639
; 0,00s
; (get-info :all-statistics)
(push) ; 4639
; [then-branch 9425] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9426] 4 == 2
(push) ; 4640
; [else-branch 9426] 4 != 2
(pop) ; 4640
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4640
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4640
; 0,00s
; (get-info :all-statistics)
(push) ; 4640
; [then-branch 9427] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9428] 4 == 2
(push) ; 4641
; [else-branch 9428] 4 != 2
(pop) ; 4641
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4641
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4641
; 0,00s
; (get-info :all-statistics)
(push) ; 4641
; [then-branch 9429] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9430] 4 == 2
(push) ; 4642
; [else-branch 9430] 4 != 2
(pop) ; 4642
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4642
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4642
; 0,00s
; (get-info :all-statistics)
(push) ; 4642
; [then-branch 9431] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9432] 4 == 2
(push) ; 4643
; [else-branch 9432] 4 != 2
(pop) ; 4643
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4643
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4643
; 0,00s
; (get-info :all-statistics)
(push) ; 4643
; [then-branch 9433] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9434] 4 == 2
(push) ; 4644
; [else-branch 9434] 4 != 2
(pop) ; 4644
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4644
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4644
; 0,00s
; (get-info :all-statistics)
(push) ; 4644
; [then-branch 9435] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9436] 4 == 2
(push) ; 4645
; [else-branch 9436] 4 != 2
(pop) ; 4645
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4645
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4645
; 0,00s
; (get-info :all-statistics)
(push) ; 4645
; [then-branch 9437] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9438] 4 == 2
(push) ; 4646
; [else-branch 9438] 4 != 2
(pop) ; 4646
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4646
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4646
; 0,00s
; (get-info :all-statistics)
(push) ; 4646
; [then-branch 9439] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9440] 4 == 2
(push) ; 4647
; [else-branch 9440] 4 != 2
(pop) ; 4647
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4647
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4647
; 0,00s
; (get-info :all-statistics)
(push) ; 4647
; [then-branch 9441] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9442] 4 == 2
(push) ; 4648
; [else-branch 9442] 4 != 2
(pop) ; 4648
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4648
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4648
; 0,00s
; (get-info :all-statistics)
(push) ; 4648
; [then-branch 9443] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9444] 4 == 2
(push) ; 4649
; [else-branch 9444] 4 != 2
(pop) ; 4649
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4649
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4649
; 0,00s
; (get-info :all-statistics)
(push) ; 4649
; [then-branch 9445] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9446] 4 == 2
(push) ; 4650
; [else-branch 9446] 4 != 2
(pop) ; 4650
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4650
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4650
; 0,00s
; (get-info :all-statistics)
(push) ; 4650
; [then-branch 9447] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9448] 4 == 2
(push) ; 4651
; [else-branch 9448] 4 != 2
(pop) ; 4651
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4651
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4651
; 0,00s
; (get-info :all-statistics)
(push) ; 4651
; [then-branch 9449] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9450] 4 == 2
(push) ; 4652
; [else-branch 9450] 4 != 2
(pop) ; 4652
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4652
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4652
; 0,00s
; (get-info :all-statistics)
(push) ; 4652
; [then-branch 9451] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9452] 4 == 2
(push) ; 4653
; [else-branch 9452] 4 != 2
(pop) ; 4653
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4653
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4653
; 0,00s
; (get-info :all-statistics)
(push) ; 4653
; [then-branch 9453] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9454] 4 == 2
(push) ; 4654
; [else-branch 9454] 4 != 2
(pop) ; 4654
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4654
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4654
; 0,00s
; (get-info :all-statistics)
(push) ; 4654
; [then-branch 9455] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9456] 4 == 2
(push) ; 4655
; [else-branch 9456] 4 != 2
(pop) ; 4655
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4655
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4655
; 0,00s
; (get-info :all-statistics)
(push) ; 4655
; [then-branch 9457] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9458] 4 == 2
(push) ; 4656
; [else-branch 9458] 4 != 2
(pop) ; 4656
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4656
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4656
; 0,00s
; (get-info :all-statistics)
(push) ; 4656
; [then-branch 9459] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9460] 4 == 2
(push) ; 4657
; [else-branch 9460] 4 != 2
(pop) ; 4657
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4657
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4657
; 0,00s
; (get-info :all-statistics)
(push) ; 4657
; [then-branch 9461] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9462] 4 == 2
(push) ; 4658
; [else-branch 9462] 4 != 2
(pop) ; 4658
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4658
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4658
; 0,00s
; (get-info :all-statistics)
(push) ; 4658
; [then-branch 9463] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9464] 4 == 2
(push) ; 4659
; [else-branch 9464] 4 != 2
(pop) ; 4659
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4659
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4659
; 0,00s
; (get-info :all-statistics)
(push) ; 4659
; [then-branch 9465] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9466] 4 == 2
(push) ; 4660
; [else-branch 9466] 4 != 2
(pop) ; 4660
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4660
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4660
; 0,00s
; (get-info :all-statistics)
(push) ; 4660
; [then-branch 9467] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9468] 4 == 2
(push) ; 4661
; [else-branch 9468] 4 != 2
(pop) ; 4661
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4661
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4661
; 0,00s
; (get-info :all-statistics)
(push) ; 4661
; [then-branch 9469] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9470] 4 == 2
(push) ; 4662
; [else-branch 9470] 4 != 2
(pop) ; 4662
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4662
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4662
; 0,00s
; (get-info :all-statistics)
(push) ; 4662
; [then-branch 9471] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9472] 4 == 2
(push) ; 4663
; [else-branch 9472] 4 != 2
(pop) ; 4663
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4663
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4663
; 0,00s
; (get-info :all-statistics)
(push) ; 4663
; [then-branch 9473] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9474] 4 == 2
(push) ; 4664
; [else-branch 9474] 4 != 2
(pop) ; 4664
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4664
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4664
; 0,00s
; (get-info :all-statistics)
(push) ; 4664
; [then-branch 9475] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9476] 4 == 2
(push) ; 4665
; [else-branch 9476] 4 != 2
(pop) ; 4665
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4665
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4665
; 0,00s
; (get-info :all-statistics)
(push) ; 4665
; [then-branch 9477] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9478] 4 == 2
(push) ; 4666
; [else-branch 9478] 4 != 2
(pop) ; 4666
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4666
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4666
; 0,00s
; (get-info :all-statistics)
(push) ; 4666
; [then-branch 9479] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9480] 4 == 2
(push) ; 4667
; [else-branch 9480] 4 != 2
(pop) ; 4667
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4667
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4667
; 0,00s
; (get-info :all-statistics)
(push) ; 4667
; [then-branch 9481] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9482] 4 == 2
(push) ; 4668
; [else-branch 9482] 4 != 2
(pop) ; 4668
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4668
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4668
; 0,00s
; (get-info :all-statistics)
(push) ; 4668
; [then-branch 9483] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9484] 4 == 2
(push) ; 4669
; [else-branch 9484] 4 != 2
(pop) ; 4669
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4669
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4669
; 0,00s
; (get-info :all-statistics)
(push) ; 4669
; [then-branch 9485] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9486] 4 == 2
(push) ; 4670
; [else-branch 9486] 4 != 2
(pop) ; 4670
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4670
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4670
; 0,00s
; (get-info :all-statistics)
(push) ; 4670
; [then-branch 9487] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9488] 4 == 2
(push) ; 4671
; [else-branch 9488] 4 != 2
(pop) ; 4671
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4671
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4671
; 0,00s
; (get-info :all-statistics)
(push) ; 4671
; [then-branch 9489] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9490] 4 == 2
(push) ; 4672
; [else-branch 9490] 4 != 2
(pop) ; 4672
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4672
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4672
; 0,00s
; (get-info :all-statistics)
(push) ; 4672
; [then-branch 9491] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9492] 4 == 2
(push) ; 4673
; [else-branch 9492] 4 != 2
(pop) ; 4673
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4673
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4673
; 0,00s
; (get-info :all-statistics)
(push) ; 4673
; [then-branch 9493] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9494] 4 == 2
(push) ; 4674
; [else-branch 9494] 4 != 2
(pop) ; 4674
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4674
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4674
; 0,00s
; (get-info :all-statistics)
(push) ; 4674
; [then-branch 9495] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9496] 4 == 2
(push) ; 4675
; [else-branch 9496] 4 != 2
(pop) ; 4675
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4675
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4675
; 0,00s
; (get-info :all-statistics)
(push) ; 4675
; [then-branch 9497] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9498] 4 == 2
(push) ; 4676
; [else-branch 9498] 4 != 2
(pop) ; 4676
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4676
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4676
; 0,00s
; (get-info :all-statistics)
(push) ; 4676
; [then-branch 9499] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9500] 4 == 2
(push) ; 4677
; [else-branch 9500] 4 != 2
(pop) ; 4677
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4677
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4677
; 0,00s
; (get-info :all-statistics)
(push) ; 4677
; [then-branch 9501] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9502] 4 == 2
(push) ; 4678
; [else-branch 9502] 4 != 2
(pop) ; 4678
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4678
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4678
; 0,00s
; (get-info :all-statistics)
(push) ; 4678
; [then-branch 9503] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9504] 4 == 2
(push) ; 4679
; [else-branch 9504] 4 != 2
(pop) ; 4679
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4679
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4679
; 0,00s
; (get-info :all-statistics)
(push) ; 4679
; [then-branch 9505] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9506] 4 == 2
(push) ; 4680
; [else-branch 9506] 4 != 2
(pop) ; 4680
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4680
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4680
; 0,00s
; (get-info :all-statistics)
(push) ; 4680
; [then-branch 9507] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9508] 4 == 2
(push) ; 4681
; [else-branch 9508] 4 != 2
(pop) ; 4681
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4681
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4681
; 0,00s
; (get-info :all-statistics)
(push) ; 4681
; [then-branch 9509] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9510] 4 == 2
(push) ; 4682
; [else-branch 9510] 4 != 2
(pop) ; 4682
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4682
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4682
; 0,00s
; (get-info :all-statistics)
(push) ; 4682
; [then-branch 9511] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9512] 4 == 2
(push) ; 4683
; [else-branch 9512] 4 != 2
(pop) ; 4683
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4683
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4683
; 0,00s
; (get-info :all-statistics)
(push) ; 4683
; [then-branch 9513] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9514] 4 == 2
(push) ; 4684
; [else-branch 9514] 4 != 2
(pop) ; 4684
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4684
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4684
; 0,00s
; (get-info :all-statistics)
(push) ; 4684
; [then-branch 9515] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9516] 4 == 2
(push) ; 4685
; [else-branch 9516] 4 != 2
(pop) ; 4685
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4685
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4685
; 0,00s
; (get-info :all-statistics)
(push) ; 4685
; [then-branch 9517] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9518] 4 == 2
(push) ; 4686
; [else-branch 9518] 4 != 2
(pop) ; 4686
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4686
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4686
; 0,00s
; (get-info :all-statistics)
(push) ; 4686
; [then-branch 9519] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9520] 4 == 2
(push) ; 4687
; [else-branch 9520] 4 != 2
(pop) ; 4687
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4687
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4687
; 0,00s
; (get-info :all-statistics)
(push) ; 4687
; [then-branch 9521] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9522] 4 == 2
(push) ; 4688
; [else-branch 9522] 4 != 2
(pop) ; 4688
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4688
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4688
; 0,00s
; (get-info :all-statistics)
(push) ; 4688
; [then-branch 9523] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9524] 4 == 2
(push) ; 4689
; [else-branch 9524] 4 != 2
(pop) ; 4689
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4689
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4689
; 0,00s
; (get-info :all-statistics)
(push) ; 4689
; [then-branch 9525] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9526] 4 == 2
(push) ; 4690
; [else-branch 9526] 4 != 2
(pop) ; 4690
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4690
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4690
; 0,00s
; (get-info :all-statistics)
(push) ; 4690
; [then-branch 9527] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9528] 4 == 2
(push) ; 4691
; [else-branch 9528] 4 != 2
(pop) ; 4691
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4691
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4691
; 0,00s
; (get-info :all-statistics)
(push) ; 4691
; [then-branch 9529] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9530] 4 == 2
(push) ; 4692
; [else-branch 9530] 4 != 2
(pop) ; 4692
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4692
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4692
; 0,00s
; (get-info :all-statistics)
(push) ; 4692
; [then-branch 9531] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9532] 4 == 2
(push) ; 4693
; [else-branch 9532] 4 != 2
(pop) ; 4693
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4693
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4693
; 0,00s
; (get-info :all-statistics)
(push) ; 4693
; [then-branch 9533] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9534] 4 == 2
(push) ; 4694
; [else-branch 9534] 4 != 2
(pop) ; 4694
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4694
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4694
; 0,00s
; (get-info :all-statistics)
(push) ; 4694
; [then-branch 9535] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9536] 4 == 2
(push) ; 4695
; [else-branch 9536] 4 != 2
(pop) ; 4695
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4695
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4695
; 0,00s
; (get-info :all-statistics)
(push) ; 4695
; [then-branch 9537] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9538] 4 == 2
(push) ; 4696
; [else-branch 9538] 4 != 2
(pop) ; 4696
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4696
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4696
; 0,00s
; (get-info :all-statistics)
(push) ; 4696
; [then-branch 9539] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9540] 4 == 2
(push) ; 4697
; [else-branch 9540] 4 != 2
(pop) ; 4697
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4697
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4697
; 0,00s
; (get-info :all-statistics)
(push) ; 4697
; [then-branch 9541] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9542] 4 == 2
(push) ; 4698
; [else-branch 9542] 4 != 2
(pop) ; 4698
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4698
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4698
; 0,00s
; (get-info :all-statistics)
(push) ; 4698
; [then-branch 9543] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9544] 4 == 2
(push) ; 4699
; [else-branch 9544] 4 != 2
(pop) ; 4699
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4699
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4699
; 0,00s
; (get-info :all-statistics)
(push) ; 4699
; [then-branch 9545] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9546] 4 == 2
(push) ; 4700
; [else-branch 9546] 4 != 2
(pop) ; 4700
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4700
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4700
; 0,00s
; (get-info :all-statistics)
(push) ; 4700
; [then-branch 9547] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9548] 4 == 2
(push) ; 4701
; [else-branch 9548] 4 != 2
(pop) ; 4701
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4701
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4701
; 0,00s
; (get-info :all-statistics)
(push) ; 4701
; [then-branch 9549] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9550] 4 == 2
(push) ; 4702
; [else-branch 9550] 4 != 2
(pop) ; 4702
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4702
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4702
; 0,00s
; (get-info :all-statistics)
(push) ; 4702
; [then-branch 9551] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9552] 4 == 2
(push) ; 4703
; [else-branch 9552] 4 != 2
(pop) ; 4703
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4703
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4703
; 0,00s
; (get-info :all-statistics)
(push) ; 4703
; [then-branch 9553] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9554] 4 == 2
(push) ; 4704
; [else-branch 9554] 4 != 2
(pop) ; 4704
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4704
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4704
; 0,00s
; (get-info :all-statistics)
(push) ; 4704
; [then-branch 9555] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9556] 4 == 2
(push) ; 4705
; [else-branch 9556] 4 != 2
(pop) ; 4705
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4705
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4705
; 0,00s
; (get-info :all-statistics)
(push) ; 4705
; [then-branch 9557] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9558] 4 == 2
(push) ; 4706
; [else-branch 9558] 4 != 2
(pop) ; 4706
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4706
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4706
; 0,00s
; (get-info :all-statistics)
(push) ; 4706
; [then-branch 9559] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9560] 4 == 2
(push) ; 4707
; [else-branch 9560] 4 != 2
(pop) ; 4707
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4707
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4707
; 0,00s
; (get-info :all-statistics)
(push) ; 4707
; [then-branch 9561] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9562] 4 == 2
(push) ; 4708
; [else-branch 9562] 4 != 2
(pop) ; 4708
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4708
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4708
; 0,00s
; (get-info :all-statistics)
(push) ; 4708
; [then-branch 9563] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9564] 4 == 2
(push) ; 4709
; [else-branch 9564] 4 != 2
(pop) ; 4709
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4709
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4709
; 0,00s
; (get-info :all-statistics)
(push) ; 4709
; [then-branch 9565] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9566] 4 == 2
(push) ; 4710
; [else-branch 9566] 4 != 2
(pop) ; 4710
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4710
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4710
; 0,00s
; (get-info :all-statistics)
(push) ; 4710
; [then-branch 9567] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9568] 4 == 2
(push) ; 4711
; [else-branch 9568] 4 != 2
(pop) ; 4711
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4711
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4711
; 0,00s
; (get-info :all-statistics)
(push) ; 4711
; [then-branch 9569] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9570] 4 == 2
(push) ; 4712
; [else-branch 9570] 4 != 2
(pop) ; 4712
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4712
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4712
; 0,00s
; (get-info :all-statistics)
(push) ; 4712
; [then-branch 9571] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9572] 4 == 2
(push) ; 4713
; [else-branch 9572] 4 != 2
(pop) ; 4713
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4713
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4713
; 0,00s
; (get-info :all-statistics)
(push) ; 4713
; [then-branch 9573] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9574] 4 == 2
(push) ; 4714
; [else-branch 9574] 4 != 2
(pop) ; 4714
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4714
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4714
; 0,00s
; (get-info :all-statistics)
(push) ; 4714
; [then-branch 9575] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9576] 4 == 2
(push) ; 4715
; [else-branch 9576] 4 != 2
(pop) ; 4715
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4715
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4715
; 0,00s
; (get-info :all-statistics)
(push) ; 4715
; [then-branch 9577] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9578] 4 == 2
(push) ; 4716
; [else-branch 9578] 4 != 2
(pop) ; 4716
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4716
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4716
; 0,00s
; (get-info :all-statistics)
(push) ; 4716
; [then-branch 9579] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9580] 4 == 2
(push) ; 4717
; [else-branch 9580] 4 != 2
(pop) ; 4717
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4717
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4717
; 0,00s
; (get-info :all-statistics)
(push) ; 4717
; [then-branch 9581] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9582] 4 == 2
(push) ; 4718
; [else-branch 9582] 4 != 2
(pop) ; 4718
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4718
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4718
; 0,00s
; (get-info :all-statistics)
(push) ; 4718
; [then-branch 9583] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9584] 4 == 2
(push) ; 4719
; [else-branch 9584] 4 != 2
(pop) ; 4719
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4719
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4719
; 0,00s
; (get-info :all-statistics)
(push) ; 4719
; [then-branch 9585] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9586] 4 == 2
(push) ; 4720
; [else-branch 9586] 4 != 2
(pop) ; 4720
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4720
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4720
; 0,00s
; (get-info :all-statistics)
(push) ; 4720
; [then-branch 9587] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9588] 4 == 2
(push) ; 4721
; [else-branch 9588] 4 != 2
(pop) ; 4721
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4721
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4721
; 0,00s
; (get-info :all-statistics)
(push) ; 4721
; [then-branch 9589] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9590] 4 == 2
(push) ; 4722
; [else-branch 9590] 4 != 2
(pop) ; 4722
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4722
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4722
; 0,00s
; (get-info :all-statistics)
(push) ; 4722
; [then-branch 9591] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9592] 4 == 2
(push) ; 4723
; [else-branch 9592] 4 != 2
(pop) ; 4723
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4723
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4723
; 0,00s
; (get-info :all-statistics)
(push) ; 4723
; [then-branch 9593] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9594] 4 == 2
(push) ; 4724
; [else-branch 9594] 4 != 2
(pop) ; 4724
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4724
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4724
; 0,00s
; (get-info :all-statistics)
(push) ; 4724
; [then-branch 9595] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9596] 4 == 2
(push) ; 4725
; [else-branch 9596] 4 != 2
(pop) ; 4725
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4725
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4725
; 0,00s
; (get-info :all-statistics)
(push) ; 4725
; [then-branch 9597] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9598] 4 == 2
(push) ; 4726
; [else-branch 9598] 4 != 2
(pop) ; 4726
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4726
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4726
; 0,00s
; (get-info :all-statistics)
(push) ; 4726
; [then-branch 9599] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9600] 4 == 2
(push) ; 4727
; [else-branch 9600] 4 != 2
(pop) ; 4727
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4727
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4727
; 0,00s
; (get-info :all-statistics)
(push) ; 4727
; [then-branch 9601] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9602] 4 == 2
(push) ; 4728
; [else-branch 9602] 4 != 2
(pop) ; 4728
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4728
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4728
; 0,00s
; (get-info :all-statistics)
(push) ; 4728
; [then-branch 9603] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9604] 4 == 2
(push) ; 4729
; [else-branch 9604] 4 != 2
(pop) ; 4729
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4729
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4729
; 0,00s
; (get-info :all-statistics)
(push) ; 4729
; [then-branch 9605] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9606] 4 == 2
(push) ; 4730
; [else-branch 9606] 4 != 2
(pop) ; 4730
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4730
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4730
; 0,00s
; (get-info :all-statistics)
(push) ; 4730
; [then-branch 9607] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9608] 4 == 2
(push) ; 4731
; [else-branch 9608] 4 != 2
(pop) ; 4731
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4731
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4731
; 0,00s
; (get-info :all-statistics)
(push) ; 4731
; [then-branch 9609] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9610] 4 == 2
(push) ; 4732
; [else-branch 9610] 4 != 2
(pop) ; 4732
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4732
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4732
; 0,00s
; (get-info :all-statistics)
(push) ; 4732
; [then-branch 9611] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9612] 4 == 2
(push) ; 4733
; [else-branch 9612] 4 != 2
(pop) ; 4733
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4733
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4733
; 0,00s
; (get-info :all-statistics)
(push) ; 4733
; [then-branch 9613] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9614] 4 == 2
(push) ; 4734
; [else-branch 9614] 4 != 2
(pop) ; 4734
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4734
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4734
; 0,00s
; (get-info :all-statistics)
(push) ; 4734
; [then-branch 9615] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9616] 4 == 2
(push) ; 4735
; [else-branch 9616] 4 != 2
(pop) ; 4735
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4735
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4735
; 0,00s
; (get-info :all-statistics)
(push) ; 4735
; [then-branch 9617] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9618] 4 == 2
(push) ; 4736
; [else-branch 9618] 4 != 2
(pop) ; 4736
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4736
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4736
; 0,00s
; (get-info :all-statistics)
(push) ; 4736
; [then-branch 9619] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9620] 4 == 2
(push) ; 4737
; [else-branch 9620] 4 != 2
(pop) ; 4737
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4737
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4737
; 0,00s
; (get-info :all-statistics)
(push) ; 4737
; [then-branch 9621] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9622] 4 == 2
(push) ; 4738
; [else-branch 9622] 4 != 2
(pop) ; 4738
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4738
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4738
; 0,00s
; (get-info :all-statistics)
(push) ; 4738
; [then-branch 9623] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9624] 4 == 2
(push) ; 4739
; [else-branch 9624] 4 != 2
(pop) ; 4739
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4739
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4739
; 0,00s
; (get-info :all-statistics)
(push) ; 4739
; [then-branch 9625] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9626] 4 == 2
(push) ; 4740
; [else-branch 9626] 4 != 2
(pop) ; 4740
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4740
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4740
; 0,00s
; (get-info :all-statistics)
(push) ; 4740
; [then-branch 9627] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9628] 4 == 2
(push) ; 4741
; [else-branch 9628] 4 != 2
(pop) ; 4741
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4741
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4741
; 0,00s
; (get-info :all-statistics)
(push) ; 4741
; [then-branch 9629] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9630] 4 == 2
(push) ; 4742
; [else-branch 9630] 4 != 2
(pop) ; 4742
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4742
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4742
; 0,00s
; (get-info :all-statistics)
(push) ; 4742
; [then-branch 9631] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9632] 4 == 2
(push) ; 4743
; [else-branch 9632] 4 != 2
(pop) ; 4743
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4743
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4743
; 0,00s
; (get-info :all-statistics)
(push) ; 4743
; [then-branch 9633] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9634] 4 == 2
(push) ; 4744
; [else-branch 9634] 4 != 2
(pop) ; 4744
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4744
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4744
; 0,00s
; (get-info :all-statistics)
(push) ; 4744
; [then-branch 9635] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9636] 4 == 2
(push) ; 4745
; [else-branch 9636] 4 != 2
(pop) ; 4745
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4745
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4745
; 0,00s
; (get-info :all-statistics)
(push) ; 4745
; [then-branch 9637] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9638] 4 == 2
(push) ; 4746
; [else-branch 9638] 4 != 2
(pop) ; 4746
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4746
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4746
; 0,00s
; (get-info :all-statistics)
(push) ; 4746
; [then-branch 9639] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9640] 4 == 2
(push) ; 4747
; [else-branch 9640] 4 != 2
(pop) ; 4747
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4747
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4747
; 0,00s
; (get-info :all-statistics)
(push) ; 4747
; [then-branch 9641] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9642] 4 == 2
(push) ; 4748
; [else-branch 9642] 4 != 2
(pop) ; 4748
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4748
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4748
; 0,00s
; (get-info :all-statistics)
(push) ; 4748
; [then-branch 9643] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9644] 4 == 2
(push) ; 4749
; [else-branch 9644] 4 != 2
(pop) ; 4749
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4749
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4749
; 0,00s
; (get-info :all-statistics)
(push) ; 4749
; [then-branch 9645] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9646] 4 == 2
(push) ; 4750
; [else-branch 9646] 4 != 2
(pop) ; 4750
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4750
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4750
; 0,00s
; (get-info :all-statistics)
(push) ; 4750
; [then-branch 9647] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9648] 4 == 2
(push) ; 4751
; [else-branch 9648] 4 != 2
(pop) ; 4751
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4751
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4751
; 0,00s
; (get-info :all-statistics)
(push) ; 4751
; [then-branch 9649] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9650] 4 == 2
(push) ; 4752
; [else-branch 9650] 4 != 2
(pop) ; 4752
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4752
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4752
; 0,00s
; (get-info :all-statistics)
(push) ; 4752
; [then-branch 9651] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9652] 4 == 2
(push) ; 4753
; [else-branch 9652] 4 != 2
(pop) ; 4753
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4753
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4753
; 0,00s
; (get-info :all-statistics)
(push) ; 4753
; [then-branch 9653] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9654] 4 == 2
(push) ; 4754
; [else-branch 9654] 4 != 2
(pop) ; 4754
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4754
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4754
; 0,00s
; (get-info :all-statistics)
(push) ; 4754
; [then-branch 9655] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9656] 4 == 2
(push) ; 4755
; [else-branch 9656] 4 != 2
(pop) ; 4755
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4755
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4755
; 0,00s
; (get-info :all-statistics)
(push) ; 4755
; [then-branch 9657] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9658] 4 == 2
(push) ; 4756
; [else-branch 9658] 4 != 2
(pop) ; 4756
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4756
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4756
; 0,00s
; (get-info :all-statistics)
(push) ; 4756
; [then-branch 9659] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9660] 4 == 2
(push) ; 4757
; [else-branch 9660] 4 != 2
(pop) ; 4757
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4757
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4757
; 0,00s
; (get-info :all-statistics)
(push) ; 4757
; [then-branch 9661] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9662] 4 == 2
(push) ; 4758
; [else-branch 9662] 4 != 2
(pop) ; 4758
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4758
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4758
; 0,00s
; (get-info :all-statistics)
(push) ; 4758
; [then-branch 9663] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9664] 4 == 2
(push) ; 4759
; [else-branch 9664] 4 != 2
(pop) ; 4759
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4759
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4759
; 0,00s
; (get-info :all-statistics)
(push) ; 4759
; [then-branch 9665] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9666] 4 == 2
(push) ; 4760
; [else-branch 9666] 4 != 2
(pop) ; 4760
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4760
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4760
; 0,00s
; (get-info :all-statistics)
(push) ; 4760
; [then-branch 9667] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9668] 4 == 2
(push) ; 4761
; [else-branch 9668] 4 != 2
(pop) ; 4761
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4761
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4761
; 0,00s
; (get-info :all-statistics)
(push) ; 4761
; [then-branch 9669] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9670] 4 == 2
(push) ; 4762
; [else-branch 9670] 4 != 2
(pop) ; 4762
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4762
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4762
; 0,00s
; (get-info :all-statistics)
(push) ; 4762
; [then-branch 9671] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9672] 4 == 2
(push) ; 4763
; [else-branch 9672] 4 != 2
(pop) ; 4763
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4763
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4763
; 0,00s
; (get-info :all-statistics)
(push) ; 4763
; [then-branch 9673] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9674] 4 == 2
(push) ; 4764
; [else-branch 9674] 4 != 2
(pop) ; 4764
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4764
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4764
; 0,00s
; (get-info :all-statistics)
(push) ; 4764
; [then-branch 9675] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9676] 4 == 2
(push) ; 4765
; [else-branch 9676] 4 != 2
(pop) ; 4765
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4765
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4765
; 0,00s
; (get-info :all-statistics)
(push) ; 4765
; [then-branch 9677] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9678] 4 == 2
(push) ; 4766
; [else-branch 9678] 4 != 2
(pop) ; 4766
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4766
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4766
; 0,00s
; (get-info :all-statistics)
(push) ; 4766
; [then-branch 9679] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9680] 4 == 2
(push) ; 4767
; [else-branch 9680] 4 != 2
(pop) ; 4767
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4767
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4767
; 0,00s
; (get-info :all-statistics)
(push) ; 4767
; [then-branch 9681] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9682] 4 == 2
(push) ; 4768
; [else-branch 9682] 4 != 2
(pop) ; 4768
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4768
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4768
; 0,00s
; (get-info :all-statistics)
(push) ; 4768
; [then-branch 9683] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9684] 4 == 2
(push) ; 4769
; [else-branch 9684] 4 != 2
(pop) ; 4769
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4769
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4769
; 0,00s
; (get-info :all-statistics)
(push) ; 4769
; [then-branch 9685] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9686] 4 == 2
(push) ; 4770
; [else-branch 9686] 4 != 2
(pop) ; 4770
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4770
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4770
; 0,00s
; (get-info :all-statistics)
(push) ; 4770
; [then-branch 9687] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9688] 4 == 2
(push) ; 4771
; [else-branch 9688] 4 != 2
(pop) ; 4771
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4771
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4771
; 0,00s
; (get-info :all-statistics)
(push) ; 4771
; [then-branch 9689] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9690] 4 == 2
(push) ; 4772
; [else-branch 9690] 4 != 2
(pop) ; 4772
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4772
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4772
; 0,00s
; (get-info :all-statistics)
(push) ; 4772
; [then-branch 9691] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9692] 4 == 2
(push) ; 4773
; [else-branch 9692] 4 != 2
(pop) ; 4773
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4773
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4773
; 0,00s
; (get-info :all-statistics)
(push) ; 4773
; [then-branch 9693] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9694] 4 == 2
(push) ; 4774
; [else-branch 9694] 4 != 2
(pop) ; 4774
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4774
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4774
; 0,00s
; (get-info :all-statistics)
(push) ; 4774
; [then-branch 9695] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9696] 4 == 2
(push) ; 4775
; [else-branch 9696] 4 != 2
(pop) ; 4775
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4775
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4775
; 0,00s
; (get-info :all-statistics)
(push) ; 4775
; [then-branch 9697] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9698] 4 == 2
(push) ; 4776
; [else-branch 9698] 4 != 2
(pop) ; 4776
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4776
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4776
; 0,00s
; (get-info :all-statistics)
(push) ; 4776
; [then-branch 9699] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9700] 4 == 2
(push) ; 4777
; [else-branch 9700] 4 != 2
(pop) ; 4777
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4777
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4777
; 0,00s
; (get-info :all-statistics)
(push) ; 4777
; [then-branch 9701] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9702] 4 == 2
(push) ; 4778
; [else-branch 9702] 4 != 2
(pop) ; 4778
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4778
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4778
; 0,00s
; (get-info :all-statistics)
(push) ; 4778
; [then-branch 9703] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9704] 4 == 2
(push) ; 4779
; [else-branch 9704] 4 != 2
(pop) ; 4779
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4779
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4779
; 0,00s
; (get-info :all-statistics)
(push) ; 4779
; [then-branch 9705] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9706] 4 == 2
(push) ; 4780
; [else-branch 9706] 4 != 2
(pop) ; 4780
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4780
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4780
; 0,00s
; (get-info :all-statistics)
(push) ; 4780
; [then-branch 9707] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9708] 4 == 2
(push) ; 4781
; [else-branch 9708] 4 != 2
(pop) ; 4781
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4781
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4781
; 0,00s
; (get-info :all-statistics)
(push) ; 4781
; [then-branch 9709] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9710] 4 == 2
(push) ; 4782
; [else-branch 9710] 4 != 2
(pop) ; 4782
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4782
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4782
; 0,00s
; (get-info :all-statistics)
(push) ; 4782
; [then-branch 9711] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9712] 4 == 2
(push) ; 4783
; [else-branch 9712] 4 != 2
(pop) ; 4783
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4783
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4783
; 0,00s
; (get-info :all-statistics)
(push) ; 4783
; [then-branch 9713] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9714] 4 == 2
(push) ; 4784
; [else-branch 9714] 4 != 2
(pop) ; 4784
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4784
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4784
; 0,00s
; (get-info :all-statistics)
(push) ; 4784
; [then-branch 9715] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9716] 4 == 2
(push) ; 4785
; [else-branch 9716] 4 != 2
(pop) ; 4785
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4785
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4785
; 0,00s
; (get-info :all-statistics)
(push) ; 4785
; [then-branch 9717] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9718] 4 == 2
(push) ; 4786
; [else-branch 9718] 4 != 2
(pop) ; 4786
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4786
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4786
; 0,00s
; (get-info :all-statistics)
(push) ; 4786
; [then-branch 9719] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9720] 4 == 2
(push) ; 4787
; [else-branch 9720] 4 != 2
(pop) ; 4787
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4787
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4787
; 0,00s
; (get-info :all-statistics)
(push) ; 4787
; [then-branch 9721] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9722] 4 == 2
(push) ; 4788
; [else-branch 9722] 4 != 2
(pop) ; 4788
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4788
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4788
; 0,00s
; (get-info :all-statistics)
(push) ; 4788
; [then-branch 9723] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9724] 4 == 2
(push) ; 4789
; [else-branch 9724] 4 != 2
(pop) ; 4789
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4789
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4789
; 0,00s
; (get-info :all-statistics)
(push) ; 4789
; [then-branch 9725] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9726] 4 == 2
(push) ; 4790
; [else-branch 9726] 4 != 2
(pop) ; 4790
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4790
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4790
; 0,00s
; (get-info :all-statistics)
(push) ; 4790
; [then-branch 9727] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9728] 4 == 2
(push) ; 4791
; [else-branch 9728] 4 != 2
(pop) ; 4791
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4791
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4791
; 0,00s
; (get-info :all-statistics)
(push) ; 4791
; [then-branch 9729] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9730] 4 == 2
(push) ; 4792
; [else-branch 9730] 4 != 2
(pop) ; 4792
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4792
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4792
; 0,00s
; (get-info :all-statistics)
(push) ; 4792
; [then-branch 9731] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9732] 4 == 2
(push) ; 4793
; [else-branch 9732] 4 != 2
(pop) ; 4793
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4793
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4793
; 0,00s
; (get-info :all-statistics)
(push) ; 4793
; [then-branch 9733] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9734] 4 == 2
(push) ; 4794
; [else-branch 9734] 4 != 2
(pop) ; 4794
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4794
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4794
; 0,00s
; (get-info :all-statistics)
(push) ; 4794
; [then-branch 9735] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9736] 4 == 2
(push) ; 4795
; [else-branch 9736] 4 != 2
(pop) ; 4795
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4795
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4795
; 0,00s
; (get-info :all-statistics)
(push) ; 4795
; [then-branch 9737] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9738] 4 == 2
(push) ; 4796
; [else-branch 9738] 4 != 2
(pop) ; 4796
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4796
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4796
; 0,00s
; (get-info :all-statistics)
(push) ; 4796
; [then-branch 9739] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9740] 4 == 2
(push) ; 4797
; [else-branch 9740] 4 != 2
(pop) ; 4797
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4797
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4797
; 0,00s
; (get-info :all-statistics)
(push) ; 4797
; [then-branch 9741] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9742] 4 == 2
(push) ; 4798
; [else-branch 9742] 4 != 2
(pop) ; 4798
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4798
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4798
; 0,00s
; (get-info :all-statistics)
(push) ; 4798
; [then-branch 9743] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9744] 4 == 2
(push) ; 4799
; [else-branch 9744] 4 != 2
(pop) ; 4799
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4799
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4799
; 0,00s
; (get-info :all-statistics)
(push) ; 4799
; [then-branch 9745] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9746] 4 == 2
(push) ; 4800
; [else-branch 9746] 4 != 2
(pop) ; 4800
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4800
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4800
; 0,00s
; (get-info :all-statistics)
(push) ; 4800
; [then-branch 9747] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9748] 4 == 2
(push) ; 4801
; [else-branch 9748] 4 != 2
(pop) ; 4801
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4801
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4801
; 0,00s
; (get-info :all-statistics)
(push) ; 4801
; [then-branch 9749] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9750] 4 == 2
(push) ; 4802
; [else-branch 9750] 4 != 2
(pop) ; 4802
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4802
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4802
; 0,00s
; (get-info :all-statistics)
(push) ; 4802
; [then-branch 9751] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9752] 4 == 2
(push) ; 4803
; [else-branch 9752] 4 != 2
(pop) ; 4803
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4803
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4803
; 0,00s
; (get-info :all-statistics)
(push) ; 4803
; [then-branch 9753] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9754] 4 == 2
(push) ; 4804
; [else-branch 9754] 4 != 2
(pop) ; 4804
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4804
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4804
; 0,00s
; (get-info :all-statistics)
(push) ; 4804
; [then-branch 9755] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9756] 4 == 2
(push) ; 4805
; [else-branch 9756] 4 != 2
(pop) ; 4805
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4805
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4805
; 0,00s
; (get-info :all-statistics)
(push) ; 4805
; [then-branch 9757] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9758] 4 == 2
(push) ; 4806
; [else-branch 9758] 4 != 2
(pop) ; 4806
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4806
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4806
; 0,00s
; (get-info :all-statistics)
(push) ; 4806
; [then-branch 9759] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9760] 4 == 2
(push) ; 4807
; [else-branch 9760] 4 != 2
(pop) ; 4807
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4807
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4807
; 0,00s
; (get-info :all-statistics)
(push) ; 4807
; [then-branch 9761] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9762] 4 == 2
(push) ; 4808
; [else-branch 9762] 4 != 2
(pop) ; 4808
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4808
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4808
; 0,00s
; (get-info :all-statistics)
(push) ; 4808
; [then-branch 9763] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9764] 4 == 2
(push) ; 4809
; [else-branch 9764] 4 != 2
(pop) ; 4809
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4809
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4809
; 0,00s
; (get-info :all-statistics)
(push) ; 4809
; [then-branch 9765] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9766] 4 == 2
(push) ; 4810
; [else-branch 9766] 4 != 2
(pop) ; 4810
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4810
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4810
; 0,00s
; (get-info :all-statistics)
(push) ; 4810
; [then-branch 9767] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9768] 4 == 2
(push) ; 4811
; [else-branch 9768] 4 != 2
(pop) ; 4811
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4811
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4811
; 0,00s
; (get-info :all-statistics)
(push) ; 4811
; [then-branch 9769] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9770] 4 == 2
(push) ; 4812
; [else-branch 9770] 4 != 2
(pop) ; 4812
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4812
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4812
; 0,00s
; (get-info :all-statistics)
(push) ; 4812
; [then-branch 9771] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9772] 4 == 2
(push) ; 4813
; [else-branch 9772] 4 != 2
(pop) ; 4813
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4813
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4813
; 0,00s
; (get-info :all-statistics)
(push) ; 4813
; [then-branch 9773] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9774] 4 == 2
(push) ; 4814
; [else-branch 9774] 4 != 2
(pop) ; 4814
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4814
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4814
; 0,00s
; (get-info :all-statistics)
(push) ; 4814
; [then-branch 9775] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9776] 4 == 2
(push) ; 4815
; [else-branch 9776] 4 != 2
(pop) ; 4815
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4815
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4815
; 0,00s
; (get-info :all-statistics)
(push) ; 4815
; [then-branch 9777] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9778] 4 == 2
(push) ; 4816
; [else-branch 9778] 4 != 2
(pop) ; 4816
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4816
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4816
; 0,00s
; (get-info :all-statistics)
(push) ; 4816
; [then-branch 9779] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9780] 4 == 2
(push) ; 4817
; [else-branch 9780] 4 != 2
(pop) ; 4817
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4817
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4817
; 0,00s
; (get-info :all-statistics)
(push) ; 4817
; [then-branch 9781] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9782] 4 == 2
(push) ; 4818
; [else-branch 9782] 4 != 2
(pop) ; 4818
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4818
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4818
; 0,00s
; (get-info :all-statistics)
(push) ; 4818
; [then-branch 9783] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9784] 4 == 2
(push) ; 4819
; [else-branch 9784] 4 != 2
(pop) ; 4819
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4819
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4819
; 0,00s
; (get-info :all-statistics)
(push) ; 4819
; [then-branch 9785] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9786] 4 == 2
(push) ; 4820
; [else-branch 9786] 4 != 2
(pop) ; 4820
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4820
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4820
; 0,00s
; (get-info :all-statistics)
(push) ; 4820
; [then-branch 9787] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9788] 4 == 2
(push) ; 4821
; [else-branch 9788] 4 != 2
(pop) ; 4821
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4821
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4821
; 0,00s
; (get-info :all-statistics)
(push) ; 4821
; [then-branch 9789] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9790] 4 == 2
(push) ; 4822
; [else-branch 9790] 4 != 2
(pop) ; 4822
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4822
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4822
; 0,00s
; (get-info :all-statistics)
(push) ; 4822
; [then-branch 9791] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9792] 4 == 2
(push) ; 4823
; [else-branch 9792] 4 != 2
(pop) ; 4823
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4823
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4823
; 0,00s
; (get-info :all-statistics)
(push) ; 4823
; [then-branch 9793] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9794] 4 == 2
(push) ; 4824
; [else-branch 9794] 4 != 2
(pop) ; 4824
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4824
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4824
; 0,00s
; (get-info :all-statistics)
(push) ; 4824
; [then-branch 9795] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9796] 4 == 2
(push) ; 4825
; [else-branch 9796] 4 != 2
(pop) ; 4825
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4825
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4825
; 0,00s
; (get-info :all-statistics)
(push) ; 4825
; [then-branch 9797] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9798] 4 == 2
(push) ; 4826
; [else-branch 9798] 4 != 2
(pop) ; 4826
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4826
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4826
; 0,00s
; (get-info :all-statistics)
(push) ; 4826
; [then-branch 9799] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9800] 4 == 2
(push) ; 4827
; [else-branch 9800] 4 != 2
(pop) ; 4827
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4827
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4827
; 0,00s
; (get-info :all-statistics)
(push) ; 4827
; [then-branch 9801] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9802] 4 == 2
(push) ; 4828
; [else-branch 9802] 4 != 2
(pop) ; 4828
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4828
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4828
; 0,00s
; (get-info :all-statistics)
(push) ; 4828
; [then-branch 9803] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9804] 4 == 2
(push) ; 4829
; [else-branch 9804] 4 != 2
(pop) ; 4829
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4829
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4829
; 0,00s
; (get-info :all-statistics)
(push) ; 4829
; [then-branch 9805] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9806] 4 == 2
(push) ; 4830
; [else-branch 9806] 4 != 2
(pop) ; 4830
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4830
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4830
; 0,00s
; (get-info :all-statistics)
(push) ; 4830
; [then-branch 9807] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9808] 4 == 2
(push) ; 4831
; [else-branch 9808] 4 != 2
(pop) ; 4831
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4831
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4831
; 0,00s
; (get-info :all-statistics)
(push) ; 4831
; [then-branch 9809] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9810] 4 == 2
(push) ; 4832
; [else-branch 9810] 4 != 2
(pop) ; 4832
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4832
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4832
; 0,00s
; (get-info :all-statistics)
(push) ; 4832
; [then-branch 9811] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9812] 4 == 2
(push) ; 4833
; [else-branch 9812] 4 != 2
(pop) ; 4833
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4833
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4833
; 0,00s
; (get-info :all-statistics)
(push) ; 4833
; [then-branch 9813] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9814] 4 == 2
(push) ; 4834
; [else-branch 9814] 4 != 2
(pop) ; 4834
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4834
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4834
; 0,00s
; (get-info :all-statistics)
(push) ; 4834
; [then-branch 9815] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9816] 4 == 2
(push) ; 4835
; [else-branch 9816] 4 != 2
(pop) ; 4835
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4835
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4835
; 0,00s
; (get-info :all-statistics)
(push) ; 4835
; [then-branch 9817] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9818] 4 == 2
(push) ; 4836
; [else-branch 9818] 4 != 2
(pop) ; 4836
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4836
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4836
; 0,00s
; (get-info :all-statistics)
(push) ; 4836
; [then-branch 9819] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9820] 4 == 2
(push) ; 4837
; [else-branch 9820] 4 != 2
(pop) ; 4837
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4837
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4837
; 0,00s
; (get-info :all-statistics)
(push) ; 4837
; [then-branch 9821] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9822] 4 == 2
(push) ; 4838
; [else-branch 9822] 4 != 2
(pop) ; 4838
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4838
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4838
; 0,00s
; (get-info :all-statistics)
(push) ; 4838
; [then-branch 9823] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9824] 4 == 2
(push) ; 4839
; [else-branch 9824] 4 != 2
(pop) ; 4839
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4839
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4839
; 0,00s
; (get-info :all-statistics)
(push) ; 4839
; [then-branch 9825] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9826] 4 == 2
(push) ; 4840
; [else-branch 9826] 4 != 2
(pop) ; 4840
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4840
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4840
; 0,00s
; (get-info :all-statistics)
(push) ; 4840
; [then-branch 9827] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9828] 4 == 2
(push) ; 4841
; [else-branch 9828] 4 != 2
(pop) ; 4841
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4841
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4841
; 0,00s
; (get-info :all-statistics)
(push) ; 4841
; [then-branch 9829] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9830] 4 == 2
(push) ; 4842
; [else-branch 9830] 4 != 2
(pop) ; 4842
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4842
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4842
; 0,00s
; (get-info :all-statistics)
(push) ; 4842
; [then-branch 9831] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9832] 4 == 2
(push) ; 4843
; [else-branch 9832] 4 != 2
(pop) ; 4843
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4843
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4843
; 0,00s
; (get-info :all-statistics)
(push) ; 4843
; [then-branch 9833] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9834] 4 == 2
(push) ; 4844
; [else-branch 9834] 4 != 2
(pop) ; 4844
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4844
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4844
; 0,00s
; (get-info :all-statistics)
(push) ; 4844
; [then-branch 9835] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9836] 4 == 2
(push) ; 4845
; [else-branch 9836] 4 != 2
(pop) ; 4845
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4845
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4845
; 0,00s
; (get-info :all-statistics)
(push) ; 4845
; [then-branch 9837] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9838] 4 == 2
(push) ; 4846
; [else-branch 9838] 4 != 2
(pop) ; 4846
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4846
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4846
; 0,00s
; (get-info :all-statistics)
(push) ; 4846
; [then-branch 9839] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9840] 4 == 2
(push) ; 4847
; [else-branch 9840] 4 != 2
(pop) ; 4847
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4847
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4847
; 0,00s
; (get-info :all-statistics)
(push) ; 4847
; [then-branch 9841] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9842] 4 == 2
(push) ; 4848
; [else-branch 9842] 4 != 2
(pop) ; 4848
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4848
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4848
; 0,00s
; (get-info :all-statistics)
(push) ; 4848
; [then-branch 9843] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9844] 4 == 2
(push) ; 4849
; [else-branch 9844] 4 != 2
(pop) ; 4849
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4849
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4849
; 0,00s
; (get-info :all-statistics)
(push) ; 4849
; [then-branch 9845] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9846] 4 == 2
(push) ; 4850
; [else-branch 9846] 4 != 2
(pop) ; 4850
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4850
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4850
; 0,00s
; (get-info :all-statistics)
(push) ; 4850
; [then-branch 9847] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9848] 4 == 2
(push) ; 4851
; [else-branch 9848] 4 != 2
(pop) ; 4851
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4851
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4851
; 0,00s
; (get-info :all-statistics)
(push) ; 4851
; [then-branch 9849] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9850] 4 == 2
(push) ; 4852
; [else-branch 9850] 4 != 2
(pop) ; 4852
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4852
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4852
; 0,00s
; (get-info :all-statistics)
(push) ; 4852
; [then-branch 9851] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9852] 4 == 2
(push) ; 4853
; [else-branch 9852] 4 != 2
(pop) ; 4853
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4853
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4853
; 0,00s
; (get-info :all-statistics)
(push) ; 4853
; [then-branch 9853] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9854] 4 == 2
(push) ; 4854
; [else-branch 9854] 4 != 2
(pop) ; 4854
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4854
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4854
; 0,00s
; (get-info :all-statistics)
(push) ; 4854
; [then-branch 9855] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9856] 4 == 2
(push) ; 4855
; [else-branch 9856] 4 != 2
(pop) ; 4855
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4855
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4855
; 0,00s
; (get-info :all-statistics)
(push) ; 4855
; [then-branch 9857] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9858] 4 == 2
(push) ; 4856
; [else-branch 9858] 4 != 2
(pop) ; 4856
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4856
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4856
; 0,00s
; (get-info :all-statistics)
(push) ; 4856
; [then-branch 9859] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9860] 4 == 2
(push) ; 4857
; [else-branch 9860] 4 != 2
(pop) ; 4857
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4857
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4857
; 0,00s
; (get-info :all-statistics)
(push) ; 4857
; [then-branch 9861] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9862] 4 == 2
(push) ; 4858
; [else-branch 9862] 4 != 2
(pop) ; 4858
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4858
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4858
; 0,00s
; (get-info :all-statistics)
(push) ; 4858
; [then-branch 9863] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9864] 4 == 2
(push) ; 4859
; [else-branch 9864] 4 != 2
(pop) ; 4859
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4859
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4859
; 0,00s
; (get-info :all-statistics)
(push) ; 4859
; [then-branch 9865] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9866] 4 == 2
(push) ; 4860
; [else-branch 9866] 4 != 2
(pop) ; 4860
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4860
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4860
; 0,00s
; (get-info :all-statistics)
(push) ; 4860
; [then-branch 9867] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9868] 4 == 2
(push) ; 4861
; [else-branch 9868] 4 != 2
(pop) ; 4861
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4861
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4861
; 0,00s
; (get-info :all-statistics)
(push) ; 4861
; [then-branch 9869] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9870] 4 == 2
(push) ; 4862
; [else-branch 9870] 4 != 2
(pop) ; 4862
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4862
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4862
; 0,00s
; (get-info :all-statistics)
(push) ; 4862
; [then-branch 9871] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9872] 4 == 2
(push) ; 4863
; [else-branch 9872] 4 != 2
(pop) ; 4863
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4863
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4863
; 0,00s
; (get-info :all-statistics)
(push) ; 4863
; [then-branch 9873] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9874] 4 == 2
(push) ; 4864
; [else-branch 9874] 4 != 2
(pop) ; 4864
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4864
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4864
; 0,00s
; (get-info :all-statistics)
(push) ; 4864
; [then-branch 9875] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9876] 4 == 2
(push) ; 4865
; [else-branch 9876] 4 != 2
(pop) ; 4865
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4865
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4865
; 0,00s
; (get-info :all-statistics)
(push) ; 4865
; [then-branch 9877] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9878] 4 == 2
(push) ; 4866
; [else-branch 9878] 4 != 2
(pop) ; 4866
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4866
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4866
; 0,00s
; (get-info :all-statistics)
(push) ; 4866
; [then-branch 9879] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9880] 4 == 2
(push) ; 4867
; [else-branch 9880] 4 != 2
(pop) ; 4867
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4867
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4867
; 0,00s
; (get-info :all-statistics)
(push) ; 4867
; [then-branch 9881] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9882] 4 == 2
(push) ; 4868
; [else-branch 9882] 4 != 2
(pop) ; 4868
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4868
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4868
; 0,00s
; (get-info :all-statistics)
(push) ; 4868
; [then-branch 9883] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9884] 4 == 2
(push) ; 4869
; [else-branch 9884] 4 != 2
(pop) ; 4869
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4869
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4869
; 0,00s
; (get-info :all-statistics)
(push) ; 4869
; [then-branch 9885] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9886] 4 == 2
(push) ; 4870
; [else-branch 9886] 4 != 2
(pop) ; 4870
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4870
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4870
; 0,00s
; (get-info :all-statistics)
(push) ; 4870
; [then-branch 9887] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9888] 4 == 2
(push) ; 4871
; [else-branch 9888] 4 != 2
(pop) ; 4871
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4871
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4871
; 0,00s
; (get-info :all-statistics)
(push) ; 4871
; [then-branch 9889] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9890] 4 == 2
(push) ; 4872
; [else-branch 9890] 4 != 2
(pop) ; 4872
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4872
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4872
; 0,00s
; (get-info :all-statistics)
(push) ; 4872
; [then-branch 9891] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9892] 4 == 2
(push) ; 4873
; [else-branch 9892] 4 != 2
(pop) ; 4873
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4873
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4873
; 0,00s
; (get-info :all-statistics)
(push) ; 4873
; [then-branch 9893] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9894] 4 == 2
(push) ; 4874
; [else-branch 9894] 4 != 2
(pop) ; 4874
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4874
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4874
; 0,00s
; (get-info :all-statistics)
(push) ; 4874
; [then-branch 9895] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9896] 4 == 2
(push) ; 4875
; [else-branch 9896] 4 != 2
(pop) ; 4875
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4875
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4875
; 0,00s
; (get-info :all-statistics)
(push) ; 4875
; [then-branch 9897] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9898] 4 == 2
(push) ; 4876
; [else-branch 9898] 4 != 2
(pop) ; 4876
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4876
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4876
; 0,00s
; (get-info :all-statistics)
(push) ; 4876
; [then-branch 9899] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9900] 4 == 2
(push) ; 4877
; [else-branch 9900] 4 != 2
(pop) ; 4877
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4877
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4877
; 0,00s
; (get-info :all-statistics)
(push) ; 4877
; [then-branch 9901] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9902] 4 == 2
(push) ; 4878
; [else-branch 9902] 4 != 2
(pop) ; 4878
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4878
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4878
; 0,00s
; (get-info :all-statistics)
(push) ; 4878
; [then-branch 9903] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9904] 4 == 2
(push) ; 4879
; [else-branch 9904] 4 != 2
(pop) ; 4879
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4879
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4879
; 0,00s
; (get-info :all-statistics)
(push) ; 4879
; [then-branch 9905] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9906] 4 == 2
(push) ; 4880
; [else-branch 9906] 4 != 2
(pop) ; 4880
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4880
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4880
; 0,00s
; (get-info :all-statistics)
(push) ; 4880
; [then-branch 9907] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9908] 4 == 2
(push) ; 4881
; [else-branch 9908] 4 != 2
(pop) ; 4881
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4881
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4881
; 0,00s
; (get-info :all-statistics)
(push) ; 4881
; [then-branch 9909] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9910] 4 == 2
(push) ; 4882
; [else-branch 9910] 4 != 2
(pop) ; 4882
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4882
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4882
; 0,00s
; (get-info :all-statistics)
(push) ; 4882
; [then-branch 9911] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9912] 4 == 2
(push) ; 4883
; [else-branch 9912] 4 != 2
(pop) ; 4883
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4883
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4883
; 0,00s
; (get-info :all-statistics)
(push) ; 4883
; [then-branch 9913] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9914] 4 == 2
(push) ; 4884
; [else-branch 9914] 4 != 2
(pop) ; 4884
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4884
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4884
; 0,00s
; (get-info :all-statistics)
(push) ; 4884
; [then-branch 9915] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9916] 4 == 2
(push) ; 4885
; [else-branch 9916] 4 != 2
(pop) ; 4885
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4885
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4885
; 0,00s
; (get-info :all-statistics)
(push) ; 4885
; [then-branch 9917] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9918] 4 == 2
(push) ; 4886
; [else-branch 9918] 4 != 2
(pop) ; 4886
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4886
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4886
; 0,00s
; (get-info :all-statistics)
(push) ; 4886
; [then-branch 9919] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9920] 4 == 2
(push) ; 4887
; [else-branch 9920] 4 != 2
(pop) ; 4887
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4887
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4887
; 0,00s
; (get-info :all-statistics)
(push) ; 4887
; [then-branch 9921] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9922] 4 == 2
(push) ; 4888
; [else-branch 9922] 4 != 2
(pop) ; 4888
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4888
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4888
; 0,00s
; (get-info :all-statistics)
(push) ; 4888
; [then-branch 9923] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9924] 4 == 2
(push) ; 4889
; [else-branch 9924] 4 != 2
(pop) ; 4889
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4889
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4889
; 0,00s
; (get-info :all-statistics)
(push) ; 4889
; [then-branch 9925] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9926] 4 == 2
(push) ; 4890
; [else-branch 9926] 4 != 2
(pop) ; 4890
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4890
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4890
; 0,00s
; (get-info :all-statistics)
(push) ; 4890
; [then-branch 9927] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9928] 4 == 2
(push) ; 4891
; [else-branch 9928] 4 != 2
(pop) ; 4891
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4891
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4891
; 0,00s
; (get-info :all-statistics)
(push) ; 4891
; [then-branch 9929] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9930] 4 == 2
(push) ; 4892
; [else-branch 9930] 4 != 2
(pop) ; 4892
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4892
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4892
; 0,00s
; (get-info :all-statistics)
(push) ; 4892
; [then-branch 9931] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9932] 4 == 2
(push) ; 4893
; [else-branch 9932] 4 != 2
(pop) ; 4893
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4893
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4893
; 0,00s
; (get-info :all-statistics)
(push) ; 4893
; [then-branch 9933] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9934] 4 == 2
(push) ; 4894
; [else-branch 9934] 4 != 2
(pop) ; 4894
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4894
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4894
; 0,00s
; (get-info :all-statistics)
(push) ; 4894
; [then-branch 9935] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9936] 4 == 2
(push) ; 4895
; [else-branch 9936] 4 != 2
(pop) ; 4895
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4895
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4895
; 0,00s
; (get-info :all-statistics)
(push) ; 4895
; [then-branch 9937] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9938] 4 == 2
(push) ; 4896
; [else-branch 9938] 4 != 2
(pop) ; 4896
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4896
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4896
; 0,00s
; (get-info :all-statistics)
(push) ; 4896
; [then-branch 9939] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9940] 4 == 2
(push) ; 4897
; [else-branch 9940] 4 != 2
(pop) ; 4897
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4897
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4897
; 0,00s
; (get-info :all-statistics)
(push) ; 4897
; [then-branch 9941] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9942] 4 == 2
(push) ; 4898
; [else-branch 9942] 4 != 2
(pop) ; 4898
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4898
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4898
; 0,00s
; (get-info :all-statistics)
(push) ; 4898
; [then-branch 9943] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9944] 4 == 2
(push) ; 4899
; [else-branch 9944] 4 != 2
(pop) ; 4899
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4899
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4899
; 0,00s
; (get-info :all-statistics)
(push) ; 4899
; [then-branch 9945] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9946] 4 == 2
(push) ; 4900
; [else-branch 9946] 4 != 2
(pop) ; 4900
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4900
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4900
; 0,00s
; (get-info :all-statistics)
(push) ; 4900
; [then-branch 9947] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9948] 4 == 2
(push) ; 4901
; [else-branch 9948] 4 != 2
(pop) ; 4901
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4901
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4901
; 0,00s
; (get-info :all-statistics)
(push) ; 4901
; [then-branch 9949] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9950] 4 == 2
(push) ; 4902
; [else-branch 9950] 4 != 2
(pop) ; 4902
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4902
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4902
; 0,00s
; (get-info :all-statistics)
(push) ; 4902
; [then-branch 9951] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9952] 4 == 2
(push) ; 4903
; [else-branch 9952] 4 != 2
(pop) ; 4903
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4903
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4903
; 0,00s
; (get-info :all-statistics)
(push) ; 4903
; [then-branch 9953] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9954] 4 == 2
(push) ; 4904
; [else-branch 9954] 4 != 2
(pop) ; 4904
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4904
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4904
; 0,00s
; (get-info :all-statistics)
(push) ; 4904
; [then-branch 9955] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9956] 4 == 2
(push) ; 4905
; [else-branch 9956] 4 != 2
(pop) ; 4905
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4905
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4905
; 0,00s
; (get-info :all-statistics)
(push) ; 4905
; [then-branch 9957] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9958] 4 == 2
(push) ; 4906
; [else-branch 9958] 4 != 2
(pop) ; 4906
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4906
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4906
; 0,00s
; (get-info :all-statistics)
(push) ; 4906
; [then-branch 9959] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9960] 4 == 2
(push) ; 4907
; [else-branch 9960] 4 != 2
(pop) ; 4907
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4907
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4907
; 0,00s
; (get-info :all-statistics)
(push) ; 4907
; [then-branch 9961] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9962] 4 == 2
(push) ; 4908
; [else-branch 9962] 4 != 2
(pop) ; 4908
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4908
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4908
; 0,00s
; (get-info :all-statistics)
(push) ; 4908
; [then-branch 9963] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9964] 4 == 2
(push) ; 4909
; [else-branch 9964] 4 != 2
(pop) ; 4909
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4909
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4909
; 0,00s
; (get-info :all-statistics)
(push) ; 4909
; [then-branch 9965] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9966] 4 == 2
(push) ; 4910
; [else-branch 9966] 4 != 2
(pop) ; 4910
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4910
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4910
; 0,00s
; (get-info :all-statistics)
(push) ; 4910
; [then-branch 9967] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9968] 4 == 2
(push) ; 4911
; [else-branch 9968] 4 != 2
(pop) ; 4911
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4911
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4911
; 0,00s
; (get-info :all-statistics)
(push) ; 4911
; [then-branch 9969] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9970] 4 == 2
(push) ; 4912
; [else-branch 9970] 4 != 2
(pop) ; 4912
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4912
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4912
; 0,00s
; (get-info :all-statistics)
(push) ; 4912
; [then-branch 9971] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9972] 4 == 2
(push) ; 4913
; [else-branch 9972] 4 != 2
(pop) ; 4913
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4913
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4913
; 0,00s
; (get-info :all-statistics)
(push) ; 4913
; [then-branch 9973] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9974] 4 == 2
(push) ; 4914
; [else-branch 9974] 4 != 2
(pop) ; 4914
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4914
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4914
; 0,00s
; (get-info :all-statistics)
(push) ; 4914
; [then-branch 9975] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9976] 4 == 2
(push) ; 4915
; [else-branch 9976] 4 != 2
(pop) ; 4915
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4915
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4915
; 0,00s
; (get-info :all-statistics)
(push) ; 4915
; [then-branch 9977] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9978] 4 == 2
(push) ; 4916
; [else-branch 9978] 4 != 2
(pop) ; 4916
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4916
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4916
; 0,00s
; (get-info :all-statistics)
(push) ; 4916
; [then-branch 9979] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9980] 4 == 2
(push) ; 4917
; [else-branch 9980] 4 != 2
(pop) ; 4917
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4917
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4917
; 0,00s
; (get-info :all-statistics)
(push) ; 4917
; [then-branch 9981] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9982] 4 == 2
(push) ; 4918
; [else-branch 9982] 4 != 2
(pop) ; 4918
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4918
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4918
; 0,00s
; (get-info :all-statistics)
(push) ; 4918
; [then-branch 9983] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9984] 4 == 2
(push) ; 4919
; [else-branch 9984] 4 != 2
(pop) ; 4919
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4919
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4919
; 0,00s
; (get-info :all-statistics)
(push) ; 4919
; [then-branch 9985] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9986] 4 == 2
(push) ; 4920
; [else-branch 9986] 4 != 2
(pop) ; 4920
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4920
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4920
; 0,00s
; (get-info :all-statistics)
(push) ; 4920
; [then-branch 9987] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9988] 4 == 2
(push) ; 4921
; [else-branch 9988] 4 != 2
(pop) ; 4921
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4921
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4921
; 0,00s
; (get-info :all-statistics)
(push) ; 4921
; [then-branch 9989] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9990] 4 == 2
(push) ; 4922
; [else-branch 9990] 4 != 2
(pop) ; 4922
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4922
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4922
; 0,00s
; (get-info :all-statistics)
(push) ; 4922
; [then-branch 9991] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9992] 4 == 2
(push) ; 4923
; [else-branch 9992] 4 != 2
(pop) ; 4923
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4923
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4923
; 0,00s
; (get-info :all-statistics)
(push) ; 4923
; [then-branch 9993] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9994] 4 == 2
(push) ; 4924
; [else-branch 9994] 4 != 2
(pop) ; 4924
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4924
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4924
; 0,00s
; (get-info :all-statistics)
(push) ; 4924
; [then-branch 9995] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9996] 4 == 2
(push) ; 4925
; [else-branch 9996] 4 != 2
(pop) ; 4925
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4925
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4925
; 0,00s
; (get-info :all-statistics)
(push) ; 4925
; [then-branch 9997] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 9998] 4 == 2
(push) ; 4926
; [else-branch 9998] 4 != 2
(pop) ; 4926
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4926
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4926
; 0,00s
; (get-info :all-statistics)
(push) ; 4926
; [then-branch 9999] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10000] 4 == 2
(push) ; 4927
; [else-branch 10000] 4 != 2
(pop) ; 4927
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4927
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4927
; 0,00s
; (get-info :all-statistics)
(push) ; 4927
; [then-branch 10001] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10002] 4 == 2
(push) ; 4928
; [else-branch 10002] 4 != 2
(pop) ; 4928
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4928
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4928
; 0,00s
; (get-info :all-statistics)
(push) ; 4928
; [then-branch 10003] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10004] 4 == 2
(push) ; 4929
; [else-branch 10004] 4 != 2
(pop) ; 4929
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4929
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4929
; 0,00s
; (get-info :all-statistics)
(push) ; 4929
; [then-branch 10005] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10006] 4 == 2
(push) ; 4930
; [else-branch 10006] 4 != 2
(pop) ; 4930
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4930
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4930
; 0,00s
; (get-info :all-statistics)
(push) ; 4930
; [then-branch 10007] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10008] 4 == 2
(push) ; 4931
; [else-branch 10008] 4 != 2
(pop) ; 4931
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4931
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4931
; 0,00s
; (get-info :all-statistics)
(push) ; 4931
; [then-branch 10009] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10010] 4 == 2
(push) ; 4932
; [else-branch 10010] 4 != 2
(pop) ; 4932
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4932
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4932
; 0,00s
; (get-info :all-statistics)
(push) ; 4932
; [then-branch 10011] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10012] 4 == 2
(push) ; 4933
; [else-branch 10012] 4 != 2
(pop) ; 4933
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4933
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4933
; 0,00s
; (get-info :all-statistics)
(push) ; 4933
; [then-branch 10013] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10014] 4 == 2
(push) ; 4934
; [else-branch 10014] 4 != 2
(pop) ; 4934
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4934
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4934
; 0,00s
; (get-info :all-statistics)
(push) ; 4934
; [then-branch 10015] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10016] 4 == 2
(push) ; 4935
; [else-branch 10016] 4 != 2
(pop) ; 4935
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4935
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4935
; 0,00s
; (get-info :all-statistics)
(push) ; 4935
; [then-branch 10017] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10018] 4 == 2
(push) ; 4936
; [else-branch 10018] 4 != 2
(pop) ; 4936
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4936
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4936
; 0,00s
; (get-info :all-statistics)
(push) ; 4936
; [then-branch 10019] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10020] 4 == 2
(push) ; 4937
; [else-branch 10020] 4 != 2
(pop) ; 4937
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4937
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4937
; 0,00s
; (get-info :all-statistics)
(push) ; 4937
; [then-branch 10021] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10022] 4 == 2
(push) ; 4938
; [else-branch 10022] 4 != 2
(pop) ; 4938
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4938
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4938
; 0,00s
; (get-info :all-statistics)
(push) ; 4938
; [then-branch 10023] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10024] 4 == 2
(push) ; 4939
; [else-branch 10024] 4 != 2
(pop) ; 4939
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4939
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4939
; 0,00s
; (get-info :all-statistics)
(push) ; 4939
; [then-branch 10025] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10026] 4 == 2
(push) ; 4940
; [else-branch 10026] 4 != 2
(pop) ; 4940
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4940
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4940
; 0,00s
; (get-info :all-statistics)
(push) ; 4940
; [then-branch 10027] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10028] 4 == 2
(push) ; 4941
; [else-branch 10028] 4 != 2
(pop) ; 4941
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4941
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4941
; 0,00s
; (get-info :all-statistics)
(push) ; 4941
; [then-branch 10029] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10030] 4 == 2
(push) ; 4942
; [else-branch 10030] 4 != 2
(pop) ; 4942
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4942
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4942
; 0,00s
; (get-info :all-statistics)
(push) ; 4942
; [then-branch 10031] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10032] 4 == 2
(push) ; 4943
; [else-branch 10032] 4 != 2
(pop) ; 4943
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4943
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4943
; 0,00s
; (get-info :all-statistics)
(push) ; 4943
; [then-branch 10033] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10034] 4 == 2
(push) ; 4944
; [else-branch 10034] 4 != 2
(pop) ; 4944
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4944
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4944
; 0,00s
; (get-info :all-statistics)
(push) ; 4944
; [then-branch 10035] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10036] 4 == 2
(push) ; 4945
; [else-branch 10036] 4 != 2
(pop) ; 4945
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4945
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4945
; 0,00s
; (get-info :all-statistics)
(push) ; 4945
; [then-branch 10037] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10038] 4 == 2
(push) ; 4946
; [else-branch 10038] 4 != 2
(pop) ; 4946
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4946
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4946
; 0,00s
; (get-info :all-statistics)
(push) ; 4946
; [then-branch 10039] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10040] 4 == 2
(push) ; 4947
; [else-branch 10040] 4 != 2
(pop) ; 4947
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4947
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4947
; 0,00s
; (get-info :all-statistics)
(push) ; 4947
; [then-branch 10041] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10042] 4 == 2
(push) ; 4948
; [else-branch 10042] 4 != 2
(pop) ; 4948
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4948
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4948
; 0,00s
; (get-info :all-statistics)
(push) ; 4948
; [then-branch 10043] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10044] 4 == 2
(push) ; 4949
; [else-branch 10044] 4 != 2
(pop) ; 4949
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4949
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4949
; 0,00s
; (get-info :all-statistics)
(push) ; 4949
; [then-branch 10045] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10046] 4 == 2
(push) ; 4950
; [else-branch 10046] 4 != 2
(pop) ; 4950
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4950
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4950
; 0,00s
; (get-info :all-statistics)
(push) ; 4950
; [then-branch 10047] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10048] 4 == 2
(push) ; 4951
; [else-branch 10048] 4 != 2
(pop) ; 4951
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4951
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4951
; 0,00s
; (get-info :all-statistics)
(push) ; 4951
; [then-branch 10049] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10050] 4 == 2
(push) ; 4952
; [else-branch 10050] 4 != 2
(pop) ; 4952
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4952
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4952
; 0,00s
; (get-info :all-statistics)
(push) ; 4952
; [then-branch 10051] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10052] 4 == 2
(push) ; 4953
; [else-branch 10052] 4 != 2
(pop) ; 4953
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4953
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4953
; 0,00s
; (get-info :all-statistics)
(push) ; 4953
; [then-branch 10053] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10054] 4 == 2
(push) ; 4954
; [else-branch 10054] 4 != 2
(pop) ; 4954
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4954
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4954
; 0,00s
; (get-info :all-statistics)
(push) ; 4954
; [then-branch 10055] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10056] 4 == 2
(push) ; 4955
; [else-branch 10056] 4 != 2
(pop) ; 4955
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4955
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4955
; 0,00s
; (get-info :all-statistics)
(push) ; 4955
; [then-branch 10057] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10058] 4 == 2
(push) ; 4956
; [else-branch 10058] 4 != 2
(pop) ; 4956
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4956
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4956
; 0,00s
; (get-info :all-statistics)
(push) ; 4956
; [then-branch 10059] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10060] 4 == 2
(push) ; 4957
; [else-branch 10060] 4 != 2
(pop) ; 4957
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4957
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4957
; 0,00s
; (get-info :all-statistics)
(push) ; 4957
; [then-branch 10061] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10062] 4 == 2
(push) ; 4958
; [else-branch 10062] 4 != 2
(pop) ; 4958
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4958
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4958
; 0,00s
; (get-info :all-statistics)
(push) ; 4958
; [then-branch 10063] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10064] 4 == 2
(push) ; 4959
; [else-branch 10064] 4 != 2
(pop) ; 4959
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4959
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4959
; 0,00s
; (get-info :all-statistics)
(push) ; 4959
; [then-branch 10065] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10066] 4 == 2
(push) ; 4960
; [else-branch 10066] 4 != 2
(pop) ; 4960
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4960
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4960
; 0,00s
; (get-info :all-statistics)
(push) ; 4960
; [then-branch 10067] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10068] 4 == 2
(push) ; 4961
; [else-branch 10068] 4 != 2
(pop) ; 4961
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4961
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4961
; 0,00s
; (get-info :all-statistics)
(push) ; 4961
; [then-branch 10069] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10070] 4 == 2
(push) ; 4962
; [else-branch 10070] 4 != 2
(pop) ; 4962
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4962
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4962
; 0,00s
; (get-info :all-statistics)
(push) ; 4962
; [then-branch 10071] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10072] 4 == 2
(push) ; 4963
; [else-branch 10072] 4 != 2
(pop) ; 4963
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4963
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4963
; 0,00s
; (get-info :all-statistics)
(push) ; 4963
; [then-branch 10073] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10074] 4 == 2
(push) ; 4964
; [else-branch 10074] 4 != 2
(pop) ; 4964
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4964
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4964
; 0,00s
; (get-info :all-statistics)
(push) ; 4964
; [then-branch 10075] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10076] 4 == 2
(push) ; 4965
; [else-branch 10076] 4 != 2
(pop) ; 4965
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4965
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4965
; 0,00s
; (get-info :all-statistics)
(push) ; 4965
; [then-branch 10077] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10078] 4 == 2
(push) ; 4966
; [else-branch 10078] 4 != 2
(pop) ; 4966
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4966
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4966
; 0,00s
; (get-info :all-statistics)
(push) ; 4966
; [then-branch 10079] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10080] 4 == 2
(push) ; 4967
; [else-branch 10080] 4 != 2
(pop) ; 4967
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4967
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4967
; 0,00s
; (get-info :all-statistics)
(push) ; 4967
; [then-branch 10081] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10082] 4 == 2
(push) ; 4968
; [else-branch 10082] 4 != 2
(pop) ; 4968
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4968
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4968
; 0,00s
; (get-info :all-statistics)
(push) ; 4968
; [then-branch 10083] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10084] 4 == 2
(push) ; 4969
; [else-branch 10084] 4 != 2
(pop) ; 4969
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4969
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4969
; 0,00s
; (get-info :all-statistics)
(push) ; 4969
; [then-branch 10085] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10086] 4 == 2
(push) ; 4970
; [else-branch 10086] 4 != 2
(pop) ; 4970
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4970
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4970
; 0,00s
; (get-info :all-statistics)
(push) ; 4970
; [then-branch 10087] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10088] 4 == 2
(push) ; 4971
; [else-branch 10088] 4 != 2
(pop) ; 4971
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4971
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4971
; 0,00s
; (get-info :all-statistics)
(push) ; 4971
; [then-branch 10089] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10090] 4 == 2
(push) ; 4972
; [else-branch 10090] 4 != 2
(pop) ; 4972
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4972
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4972
; 0,00s
; (get-info :all-statistics)
(push) ; 4972
; [then-branch 10091] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10092] 4 == 2
(push) ; 4973
; [else-branch 10092] 4 != 2
(pop) ; 4973
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4973
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4973
; 0,00s
; (get-info :all-statistics)
(push) ; 4973
; [then-branch 10093] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10094] 4 == 2
(push) ; 4974
; [else-branch 10094] 4 != 2
(pop) ; 4974
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4974
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4974
; 0,00s
; (get-info :all-statistics)
(push) ; 4974
; [then-branch 10095] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10096] 4 == 2
(push) ; 4975
; [else-branch 10096] 4 != 2
(pop) ; 4975
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4975
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4975
; 0,00s
; (get-info :all-statistics)
(push) ; 4975
; [then-branch 10097] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10098] 4 == 2
(push) ; 4976
; [else-branch 10098] 4 != 2
(pop) ; 4976
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4976
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4976
; 0,00s
; (get-info :all-statistics)
(push) ; 4976
; [then-branch 10099] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10100] 4 == 2
(push) ; 4977
; [else-branch 10100] 4 != 2
(pop) ; 4977
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4977
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4977
; 0,00s
; (get-info :all-statistics)
(push) ; 4977
; [then-branch 10101] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10102] 4 == 2
(push) ; 4978
; [else-branch 10102] 4 != 2
(pop) ; 4978
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4978
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4978
; 0,00s
; (get-info :all-statistics)
(push) ; 4978
; [then-branch 10103] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10104] 4 == 2
(push) ; 4979
; [else-branch 10104] 4 != 2
(pop) ; 4979
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4979
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4979
; 0,00s
; (get-info :all-statistics)
(push) ; 4979
; [then-branch 10105] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10106] 4 == 2
(push) ; 4980
; [else-branch 10106] 4 != 2
(pop) ; 4980
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4980
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4980
; 0,00s
; (get-info :all-statistics)
(push) ; 4980
; [then-branch 10107] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10108] 4 == 2
(push) ; 4981
; [else-branch 10108] 4 != 2
(pop) ; 4981
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4981
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4981
; 0,00s
; (get-info :all-statistics)
(push) ; 4981
; [then-branch 10109] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10110] 4 == 2
(push) ; 4982
; [else-branch 10110] 4 != 2
(pop) ; 4982
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4982
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4982
; 0,00s
; (get-info :all-statistics)
(push) ; 4982
; [then-branch 10111] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10112] 4 == 2
(push) ; 4983
; [else-branch 10112] 4 != 2
(pop) ; 4983
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4983
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4983
; 0,00s
; (get-info :all-statistics)
(push) ; 4983
; [then-branch 10113] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10114] 4 == 2
(push) ; 4984
; [else-branch 10114] 4 != 2
(pop) ; 4984
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4984
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4984
; 0,00s
; (get-info :all-statistics)
(push) ; 4984
; [then-branch 10115] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10116] 4 == 2
(push) ; 4985
; [else-branch 10116] 4 != 2
(pop) ; 4985
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4985
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4985
; 0,00s
; (get-info :all-statistics)
(push) ; 4985
; [then-branch 10117] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10118] 4 == 2
(push) ; 4986
; [else-branch 10118] 4 != 2
(pop) ; 4986
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4986
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4986
; 0,00s
; (get-info :all-statistics)
(push) ; 4986
; [then-branch 10119] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10120] 4 == 2
(push) ; 4987
; [else-branch 10120] 4 != 2
(pop) ; 4987
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4987
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4987
; 0,00s
; (get-info :all-statistics)
(push) ; 4987
; [then-branch 10121] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10122] 4 == 2
(push) ; 4988
; [else-branch 10122] 4 != 2
(pop) ; 4988
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4988
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4988
; 0,00s
; (get-info :all-statistics)
(push) ; 4988
; [then-branch 10123] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10124] 4 == 2
(push) ; 4989
; [else-branch 10124] 4 != 2
(pop) ; 4989
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4989
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4989
; 0,00s
; (get-info :all-statistics)
(push) ; 4989
; [then-branch 10125] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10126] 4 == 2
(push) ; 4990
; [else-branch 10126] 4 != 2
(pop) ; 4990
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4990
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4990
; 0,00s
; (get-info :all-statistics)
(push) ; 4990
; [then-branch 10127] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10128] 4 == 2
(push) ; 4991
; [else-branch 10128] 4 != 2
(pop) ; 4991
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4991
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4991
; 0,00s
; (get-info :all-statistics)
(push) ; 4991
; [then-branch 10129] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10130] 4 == 2
(push) ; 4992
; [else-branch 10130] 4 != 2
(pop) ; 4992
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4992
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4992
; 0,00s
; (get-info :all-statistics)
(push) ; 4992
; [then-branch 10131] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10132] 4 == 2
(push) ; 4993
; [else-branch 10132] 4 != 2
(pop) ; 4993
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4993
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4993
; 0,00s
; (get-info :all-statistics)
(push) ; 4993
; [then-branch 10133] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10134] 4 == 2
(push) ; 4994
; [else-branch 10134] 4 != 2
(pop) ; 4994
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4994
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4994
; 0,00s
; (get-info :all-statistics)
(push) ; 4994
; [then-branch 10135] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10136] 4 == 2
(push) ; 4995
; [else-branch 10136] 4 != 2
(pop) ; 4995
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4995
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4995
; 0,00s
; (get-info :all-statistics)
(push) ; 4995
; [then-branch 10137] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10138] 4 == 2
(push) ; 4996
; [else-branch 10138] 4 != 2
(pop) ; 4996
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4996
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4996
; 0,00s
; (get-info :all-statistics)
(push) ; 4996
; [then-branch 10139] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10140] 4 == 2
(push) ; 4997
; [else-branch 10140] 4 != 2
(pop) ; 4997
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4997
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4997
; 0,00s
; (get-info :all-statistics)
(push) ; 4997
; [then-branch 10141] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10142] 4 == 2
(push) ; 4998
; [else-branch 10142] 4 != 2
(pop) ; 4998
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4998
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4998
; 0,00s
; (get-info :all-statistics)
(push) ; 4998
; [then-branch 10143] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10144] 4 == 2
(push) ; 4999
; [else-branch 10144] 4 != 2
(pop) ; 4999
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 4999
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 4999
; 0,00s
; (get-info :all-statistics)
(push) ; 4999
; [then-branch 10145] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10146] 4 == 2
(push) ; 5000
; [else-branch 10146] 4 != 2
(pop) ; 5000
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5000
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5000
; 0,00s
; (get-info :all-statistics)
(push) ; 5000
; [then-branch 10147] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10148] 4 == 2
(push) ; 5001
; [else-branch 10148] 4 != 2
(pop) ; 5001
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5001
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5001
; 0,00s
; (get-info :all-statistics)
(push) ; 5001
; [then-branch 10149] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10150] 4 == 2
(push) ; 5002
; [else-branch 10150] 4 != 2
(pop) ; 5002
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5002
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5002
; 0,00s
; (get-info :all-statistics)
(push) ; 5002
; [then-branch 10151] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10152] 4 == 2
(push) ; 5003
; [else-branch 10152] 4 != 2
(pop) ; 5003
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5003
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5003
; 0,00s
; (get-info :all-statistics)
(push) ; 5003
; [then-branch 10153] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10154] 4 == 2
(push) ; 5004
; [else-branch 10154] 4 != 2
(pop) ; 5004
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5004
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5004
; 0,00s
; (get-info :all-statistics)
(push) ; 5004
; [then-branch 10155] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10156] 4 == 2
(push) ; 5005
; [else-branch 10156] 4 != 2
(pop) ; 5005
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5005
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5005
; 0,00s
; (get-info :all-statistics)
(push) ; 5005
; [then-branch 10157] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10158] 4 == 2
(push) ; 5006
; [else-branch 10158] 4 != 2
(pop) ; 5006
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5006
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5006
; 0,00s
; (get-info :all-statistics)
(push) ; 5006
; [then-branch 10159] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10160] 4 == 2
(push) ; 5007
; [else-branch 10160] 4 != 2
(pop) ; 5007
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5007
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5007
; 0,00s
; (get-info :all-statistics)
(push) ; 5007
; [then-branch 10161] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10162] 4 == 2
(push) ; 5008
; [else-branch 10162] 4 != 2
(pop) ; 5008
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5008
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5008
; 0,00s
; (get-info :all-statistics)
(push) ; 5008
; [then-branch 10163] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10164] 4 == 2
(push) ; 5009
; [else-branch 10164] 4 != 2
(pop) ; 5009
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5009
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5009
; 0,00s
; (get-info :all-statistics)
(push) ; 5009
; [then-branch 10165] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10166] 4 == 2
(push) ; 5010
; [else-branch 10166] 4 != 2
(pop) ; 5010
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5010
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5010
; 0,00s
; (get-info :all-statistics)
(push) ; 5010
; [then-branch 10167] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10168] 4 == 2
(push) ; 5011
; [else-branch 10168] 4 != 2
(pop) ; 5011
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5011
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5011
; 0,00s
; (get-info :all-statistics)
(push) ; 5011
; [then-branch 10169] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10170] 4 == 2
(push) ; 5012
; [else-branch 10170] 4 != 2
(pop) ; 5012
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5012
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5012
; 0,00s
; (get-info :all-statistics)
(push) ; 5012
; [then-branch 10171] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10172] 4 == 2
(push) ; 5013
; [else-branch 10172] 4 != 2
(pop) ; 5013
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5013
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5013
; 0,00s
; (get-info :all-statistics)
(push) ; 5013
; [then-branch 10173] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10174] 4 == 2
(push) ; 5014
; [else-branch 10174] 4 != 2
(pop) ; 5014
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5014
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5014
; 0,00s
; (get-info :all-statistics)
(push) ; 5014
; [then-branch 10175] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10176] 4 == 2
(push) ; 5015
; [else-branch 10176] 4 != 2
(pop) ; 5015
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5015
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5015
; 0,00s
; (get-info :all-statistics)
(push) ; 5015
; [then-branch 10177] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10178] 4 == 2
(push) ; 5016
; [else-branch 10178] 4 != 2
(pop) ; 5016
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5016
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5016
; 0,00s
; (get-info :all-statistics)
(push) ; 5016
; [then-branch 10179] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10180] 4 == 2
(push) ; 5017
; [else-branch 10180] 4 != 2
(pop) ; 5017
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5017
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5017
; 0,00s
; (get-info :all-statistics)
(push) ; 5017
; [then-branch 10181] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10182] 4 == 2
(push) ; 5018
; [else-branch 10182] 4 != 2
(pop) ; 5018
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5018
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5018
; 0,00s
; (get-info :all-statistics)
(push) ; 5018
; [then-branch 10183] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10184] 4 == 2
(push) ; 5019
; [else-branch 10184] 4 != 2
(pop) ; 5019
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5019
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5019
; 0,00s
; (get-info :all-statistics)
(push) ; 5019
; [then-branch 10185] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10186] 4 == 2
(push) ; 5020
; [else-branch 10186] 4 != 2
(pop) ; 5020
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5020
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5020
; 0,00s
; (get-info :all-statistics)
(push) ; 5020
; [then-branch 10187] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10188] 4 == 2
(push) ; 5021
; [else-branch 10188] 4 != 2
(pop) ; 5021
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5021
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5021
; 0,00s
; (get-info :all-statistics)
(push) ; 5021
; [then-branch 10189] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10190] 4 == 2
(push) ; 5022
; [else-branch 10190] 4 != 2
(pop) ; 5022
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5022
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5022
; 0,00s
; (get-info :all-statistics)
(push) ; 5022
; [then-branch 10191] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10192] 4 == 2
(push) ; 5023
; [else-branch 10192] 4 != 2
(pop) ; 5023
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5023
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5023
; 0,00s
; (get-info :all-statistics)
(push) ; 5023
; [then-branch 10193] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10194] 4 == 2
(push) ; 5024
; [else-branch 10194] 4 != 2
(pop) ; 5024
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5024
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5024
; 0,00s
; (get-info :all-statistics)
(push) ; 5024
; [then-branch 10195] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10196] 4 == 2
(push) ; 5025
; [else-branch 10196] 4 != 2
(pop) ; 5025
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5025
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5025
; 0,00s
; (get-info :all-statistics)
(push) ; 5025
; [then-branch 10197] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10198] 4 == 2
(push) ; 5026
; [else-branch 10198] 4 != 2
(pop) ; 5026
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5026
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5026
; 0,00s
; (get-info :all-statistics)
(push) ; 5026
; [then-branch 10199] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10200] 4 == 2
(push) ; 5027
; [else-branch 10200] 4 != 2
(pop) ; 5027
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5027
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5027
; 0,00s
; (get-info :all-statistics)
(push) ; 5027
; [then-branch 10201] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10202] 4 == 2
(push) ; 5028
; [else-branch 10202] 4 != 2
(pop) ; 5028
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5028
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5028
; 0,00s
; (get-info :all-statistics)
(push) ; 5028
; [then-branch 10203] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10204] 4 == 2
(push) ; 5029
; [else-branch 10204] 4 != 2
(pop) ; 5029
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5029
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5029
; 0,00s
; (get-info :all-statistics)
(push) ; 5029
; [then-branch 10205] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10206] 4 == 2
(push) ; 5030
; [else-branch 10206] 4 != 2
(pop) ; 5030
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5030
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5030
; 0,00s
; (get-info :all-statistics)
(push) ; 5030
; [then-branch 10207] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10208] 4 == 2
(push) ; 5031
; [else-branch 10208] 4 != 2
(pop) ; 5031
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5031
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5031
; 0,00s
; (get-info :all-statistics)
(push) ; 5031
; [then-branch 10209] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10210] 4 == 2
(push) ; 5032
; [else-branch 10210] 4 != 2
(pop) ; 5032
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5032
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5032
; 0,00s
; (get-info :all-statistics)
(push) ; 5032
; [then-branch 10211] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10212] 4 == 2
(push) ; 5033
; [else-branch 10212] 4 != 2
(pop) ; 5033
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5033
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5033
; 0,00s
; (get-info :all-statistics)
(push) ; 5033
; [then-branch 10213] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10214] 4 == 2
(push) ; 5034
; [else-branch 10214] 4 != 2
(pop) ; 5034
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5034
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5034
; 0,00s
; (get-info :all-statistics)
(push) ; 5034
; [then-branch 10215] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10216] 4 == 2
(push) ; 5035
; [else-branch 10216] 4 != 2
(pop) ; 5035
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5035
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5035
; 0,00s
; (get-info :all-statistics)
(push) ; 5035
; [then-branch 10217] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10218] 4 == 2
(push) ; 5036
; [else-branch 10218] 4 != 2
(pop) ; 5036
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5036
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5036
; 0,00s
; (get-info :all-statistics)
(push) ; 5036
; [then-branch 10219] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10220] 4 == 2
(push) ; 5037
; [else-branch 10220] 4 != 2
(pop) ; 5037
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5037
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5037
; 0,00s
; (get-info :all-statistics)
(push) ; 5037
; [then-branch 10221] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10222] 4 == 2
(push) ; 5038
; [else-branch 10222] 4 != 2
(pop) ; 5038
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5038
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5038
; 0,00s
; (get-info :all-statistics)
(push) ; 5038
; [then-branch 10223] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10224] 4 == 2
(push) ; 5039
; [else-branch 10224] 4 != 2
(pop) ; 5039
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5039
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5039
; 0,00s
; (get-info :all-statistics)
(push) ; 5039
; [then-branch 10225] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10226] 4 == 2
(push) ; 5040
; [else-branch 10226] 4 != 2
(pop) ; 5040
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5040
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5040
; 0,00s
; (get-info :all-statistics)
(push) ; 5040
; [then-branch 10227] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10228] 4 == 2
(push) ; 5041
; [else-branch 10228] 4 != 2
(pop) ; 5041
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5041
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5041
; 0,00s
; (get-info :all-statistics)
(push) ; 5041
; [then-branch 10229] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10230] 4 == 2
(push) ; 5042
; [else-branch 10230] 4 != 2
(pop) ; 5042
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5042
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5042
; 0,00s
; (get-info :all-statistics)
(push) ; 5042
; [then-branch 10231] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10232] 4 == 2
(push) ; 5043
; [else-branch 10232] 4 != 2
(pop) ; 5043
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5043
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5043
; 0,00s
; (get-info :all-statistics)
(push) ; 5043
; [then-branch 10233] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10234] 4 == 2
(push) ; 5044
; [else-branch 10234] 4 != 2
(pop) ; 5044
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5044
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5044
; 0,00s
; (get-info :all-statistics)
(push) ; 5044
; [then-branch 10235] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10236] 4 == 2
(push) ; 5045
; [else-branch 10236] 4 != 2
(pop) ; 5045
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5045
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5045
; 0,00s
; (get-info :all-statistics)
(push) ; 5045
; [then-branch 10237] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10238] 4 == 2
(push) ; 5046
; [else-branch 10238] 4 != 2
(pop) ; 5046
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5046
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5046
; 0,00s
; (get-info :all-statistics)
(push) ; 5046
; [then-branch 10239] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10240] 4 == 2
(push) ; 5047
; [else-branch 10240] 4 != 2
(pop) ; 5047
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5047
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5047
; 0,00s
; (get-info :all-statistics)
(push) ; 5047
; [then-branch 10241] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10242] 4 == 2
(push) ; 5048
; [else-branch 10242] 4 != 2
(pop) ; 5048
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5048
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5048
; 0,00s
; (get-info :all-statistics)
(push) ; 5048
; [then-branch 10243] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10244] 4 == 2
(push) ; 5049
; [else-branch 10244] 4 != 2
(pop) ; 5049
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5049
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5049
; 0,00s
; (get-info :all-statistics)
(push) ; 5049
; [then-branch 10245] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10246] 4 == 2
(push) ; 5050
; [else-branch 10246] 4 != 2
(pop) ; 5050
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5050
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5050
; 0,00s
; (get-info :all-statistics)
(push) ; 5050
; [then-branch 10247] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10248] 4 == 2
(push) ; 5051
; [else-branch 10248] 4 != 2
(pop) ; 5051
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5051
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5051
; 0,00s
; (get-info :all-statistics)
(push) ; 5051
; [then-branch 10249] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10250] 4 == 2
(push) ; 5052
; [else-branch 10250] 4 != 2
(pop) ; 5052
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5052
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5052
; 0,00s
; (get-info :all-statistics)
(push) ; 5052
; [then-branch 10251] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10252] 4 == 2
(push) ; 5053
; [else-branch 10252] 4 != 2
(pop) ; 5053
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5053
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5053
; 0,00s
; (get-info :all-statistics)
(push) ; 5053
; [then-branch 10253] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10254] 4 == 2
(push) ; 5054
; [else-branch 10254] 4 != 2
(pop) ; 5054
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5054
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5054
; 0,00s
; (get-info :all-statistics)
(push) ; 5054
; [then-branch 10255] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10256] 4 == 2
(push) ; 5055
; [else-branch 10256] 4 != 2
(pop) ; 5055
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5055
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5055
; 0,00s
; (get-info :all-statistics)
(push) ; 5055
; [then-branch 10257] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10258] 4 == 2
(push) ; 5056
; [else-branch 10258] 4 != 2
(pop) ; 5056
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5056
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5056
; 0,00s
; (get-info :all-statistics)
(push) ; 5056
; [then-branch 10259] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10260] 4 == 2
(push) ; 5057
; [else-branch 10260] 4 != 2
(pop) ; 5057
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5057
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5057
; 0,00s
; (get-info :all-statistics)
(push) ; 5057
; [then-branch 10261] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10262] 4 == 2
(push) ; 5058
; [else-branch 10262] 4 != 2
(pop) ; 5058
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5058
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5058
; 0,00s
; (get-info :all-statistics)
(push) ; 5058
; [then-branch 10263] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10264] 4 == 2
(push) ; 5059
; [else-branch 10264] 4 != 2
(pop) ; 5059
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5059
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5059
; 0,00s
; (get-info :all-statistics)
(push) ; 5059
; [then-branch 10265] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10266] 4 == 2
(push) ; 5060
; [else-branch 10266] 4 != 2
(pop) ; 5060
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5060
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5060
; 0,00s
; (get-info :all-statistics)
(push) ; 5060
; [then-branch 10267] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10268] 4 == 2
(push) ; 5061
; [else-branch 10268] 4 != 2
(pop) ; 5061
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5061
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5061
; 0,00s
; (get-info :all-statistics)
(push) ; 5061
; [then-branch 10269] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10270] 4 == 2
(push) ; 5062
; [else-branch 10270] 4 != 2
(pop) ; 5062
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5062
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5062
; 0,00s
; (get-info :all-statistics)
(push) ; 5062
; [then-branch 10271] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10272] 4 == 2
(push) ; 5063
; [else-branch 10272] 4 != 2
(pop) ; 5063
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5063
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5063
; 0,00s
; (get-info :all-statistics)
(push) ; 5063
; [then-branch 10273] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10274] 4 == 2
(push) ; 5064
; [else-branch 10274] 4 != 2
(pop) ; 5064
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5064
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5064
; 0,00s
; (get-info :all-statistics)
(push) ; 5064
; [then-branch 10275] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10276] 4 == 2
(push) ; 5065
; [else-branch 10276] 4 != 2
(pop) ; 5065
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5065
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5065
; 0,00s
; (get-info :all-statistics)
(push) ; 5065
; [then-branch 10277] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10278] 4 == 2
(push) ; 5066
; [else-branch 10278] 4 != 2
(pop) ; 5066
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5066
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5066
; 0,00s
; (get-info :all-statistics)
(push) ; 5066
; [then-branch 10279] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10280] 4 == 2
(push) ; 5067
; [else-branch 10280] 4 != 2
(pop) ; 5067
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5067
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5067
; 0,00s
; (get-info :all-statistics)
(push) ; 5067
; [then-branch 10281] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10282] 4 == 2
(push) ; 5068
; [else-branch 10282] 4 != 2
(pop) ; 5068
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5068
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5068
; 0,00s
; (get-info :all-statistics)
(push) ; 5068
; [then-branch 10283] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10284] 4 == 2
(push) ; 5069
; [else-branch 10284] 4 != 2
(pop) ; 5069
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5069
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5069
; 0,00s
; (get-info :all-statistics)
(push) ; 5069
; [then-branch 10285] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10286] 4 == 2
(push) ; 5070
; [else-branch 10286] 4 != 2
(pop) ; 5070
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5070
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5070
; 0,00s
; (get-info :all-statistics)
(push) ; 5070
; [then-branch 10287] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10288] 4 == 2
(push) ; 5071
; [else-branch 10288] 4 != 2
(pop) ; 5071
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5071
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5071
; 0,00s
; (get-info :all-statistics)
(push) ; 5071
; [then-branch 10289] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10290] 4 == 2
(push) ; 5072
; [else-branch 10290] 4 != 2
(pop) ; 5072
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5072
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5072
; 0,00s
; (get-info :all-statistics)
(push) ; 5072
; [then-branch 10291] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10292] 4 == 2
(push) ; 5073
; [else-branch 10292] 4 != 2
(pop) ; 5073
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5073
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5073
; 0,00s
; (get-info :all-statistics)
(push) ; 5073
; [then-branch 10293] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10294] 4 == 2
(push) ; 5074
; [else-branch 10294] 4 != 2
(pop) ; 5074
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5074
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5074
; 0,00s
; (get-info :all-statistics)
(push) ; 5074
; [then-branch 10295] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10296] 4 == 2
(push) ; 5075
; [else-branch 10296] 4 != 2
(pop) ; 5075
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5075
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5075
; 0,00s
; (get-info :all-statistics)
(push) ; 5075
; [then-branch 10297] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10298] 4 == 2
(push) ; 5076
; [else-branch 10298] 4 != 2
(pop) ; 5076
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5076
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5076
; 0,00s
; (get-info :all-statistics)
(push) ; 5076
; [then-branch 10299] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10300] 4 == 2
(push) ; 5077
; [else-branch 10300] 4 != 2
(pop) ; 5077
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5077
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5077
; 0,00s
; (get-info :all-statistics)
(push) ; 5077
; [then-branch 10301] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10302] 4 == 2
(push) ; 5078
; [else-branch 10302] 4 != 2
(pop) ; 5078
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5078
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5078
; 0,00s
; (get-info :all-statistics)
(push) ; 5078
; [then-branch 10303] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10304] 4 == 2
(push) ; 5079
; [else-branch 10304] 4 != 2
(pop) ; 5079
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5079
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5079
; 0,00s
; (get-info :all-statistics)
(push) ; 5079
; [then-branch 10305] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10306] 4 == 2
(push) ; 5080
; [else-branch 10306] 4 != 2
(pop) ; 5080
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5080
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5080
; 0,00s
; (get-info :all-statistics)
(push) ; 5080
; [then-branch 10307] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10308] 4 == 2
(push) ; 5081
; [else-branch 10308] 4 != 2
(pop) ; 5081
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5081
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5081
; 0,00s
; (get-info :all-statistics)
(push) ; 5081
; [then-branch 10309] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10310] 4 == 2
(push) ; 5082
; [else-branch 10310] 4 != 2
(pop) ; 5082
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5082
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5082
; 0,00s
; (get-info :all-statistics)
(push) ; 5082
; [then-branch 10311] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10312] 4 == 2
(push) ; 5083
; [else-branch 10312] 4 != 2
(pop) ; 5083
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5083
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5083
; 0,00s
; (get-info :all-statistics)
(push) ; 5083
; [then-branch 10313] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10314] 4 == 2
(push) ; 5084
; [else-branch 10314] 4 != 2
(pop) ; 5084
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5084
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5084
; 0,00s
; (get-info :all-statistics)
(push) ; 5084
; [then-branch 10315] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10316] 4 == 2
(push) ; 5085
; [else-branch 10316] 4 != 2
(pop) ; 5085
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5085
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5085
; 0,00s
; (get-info :all-statistics)
(push) ; 5085
; [then-branch 10317] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10318] 4 == 2
(push) ; 5086
; [else-branch 10318] 4 != 2
(pop) ; 5086
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5086
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5086
; 0,00s
; (get-info :all-statistics)
(push) ; 5086
; [then-branch 10319] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10320] 4 == 2
(push) ; 5087
; [else-branch 10320] 4 != 2
(pop) ; 5087
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5087
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5087
; 0,00s
; (get-info :all-statistics)
(push) ; 5087
; [then-branch 10321] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10322] 4 == 2
(push) ; 5088
; [else-branch 10322] 4 != 2
(pop) ; 5088
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5088
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5088
; 0,00s
; (get-info :all-statistics)
(push) ; 5088
; [then-branch 10323] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10324] 4 == 2
(push) ; 5089
; [else-branch 10324] 4 != 2
(pop) ; 5089
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5089
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5089
; 0,00s
; (get-info :all-statistics)
(push) ; 5089
; [then-branch 10325] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10326] 4 == 2
(push) ; 5090
; [else-branch 10326] 4 != 2
(pop) ; 5090
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5090
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5090
; 0,00s
; (get-info :all-statistics)
(push) ; 5090
; [then-branch 10327] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10328] 4 == 2
(push) ; 5091
; [else-branch 10328] 4 != 2
(pop) ; 5091
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5091
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5091
; 0,00s
; (get-info :all-statistics)
(push) ; 5091
; [then-branch 10329] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10330] 4 == 2
(push) ; 5092
; [else-branch 10330] 4 != 2
(pop) ; 5092
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5092
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5092
; 0,00s
; (get-info :all-statistics)
(push) ; 5092
; [then-branch 10331] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10332] 4 == 2
(push) ; 5093
; [else-branch 10332] 4 != 2
(pop) ; 5093
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5093
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5093
; 0,00s
; (get-info :all-statistics)
(push) ; 5093
; [then-branch 10333] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10334] 4 == 2
(push) ; 5094
; [else-branch 10334] 4 != 2
(pop) ; 5094
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5094
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5094
; 0,00s
; (get-info :all-statistics)
(push) ; 5094
; [then-branch 10335] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10336] 4 == 2
(push) ; 5095
; [else-branch 10336] 4 != 2
(pop) ; 5095
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5095
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5095
; 0,00s
; (get-info :all-statistics)
(push) ; 5095
; [then-branch 10337] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10338] 4 == 2
(push) ; 5096
; [else-branch 10338] 4 != 2
(pop) ; 5096
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5096
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5096
; 0,00s
; (get-info :all-statistics)
(push) ; 5096
; [then-branch 10339] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10340] 4 == 2
(push) ; 5097
; [else-branch 10340] 4 != 2
(pop) ; 5097
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5097
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5097
; 0,00s
; (get-info :all-statistics)
(push) ; 5097
; [then-branch 10341] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10342] 4 == 2
(push) ; 5098
; [else-branch 10342] 4 != 2
(pop) ; 5098
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5098
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5098
; 0,00s
; (get-info :all-statistics)
(push) ; 5098
; [then-branch 10343] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10344] 4 == 2
(push) ; 5099
; [else-branch 10344] 4 != 2
(pop) ; 5099
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5099
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5099
; 0,00s
; (get-info :all-statistics)
(push) ; 5099
; [then-branch 10345] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10346] 4 == 2
(push) ; 5100
; [else-branch 10346] 4 != 2
(pop) ; 5100
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5100
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5100
; 0,00s
; (get-info :all-statistics)
(push) ; 5100
; [then-branch 10347] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10348] 4 == 2
(push) ; 5101
; [else-branch 10348] 4 != 2
(pop) ; 5101
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5101
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5101
; 0,00s
; (get-info :all-statistics)
(push) ; 5101
; [then-branch 10349] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10350] 4 == 2
(push) ; 5102
; [else-branch 10350] 4 != 2
(pop) ; 5102
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5102
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5102
; 0,00s
; (get-info :all-statistics)
(push) ; 5102
; [then-branch 10351] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10352] 4 == 2
(push) ; 5103
; [else-branch 10352] 4 != 2
(pop) ; 5103
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5103
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5103
; 0,00s
; (get-info :all-statistics)
(push) ; 5103
; [then-branch 10353] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10354] 4 == 2
(push) ; 5104
; [else-branch 10354] 4 != 2
(pop) ; 5104
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5104
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5104
; 0,00s
; (get-info :all-statistics)
(push) ; 5104
; [then-branch 10355] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10356] 4 == 2
(push) ; 5105
; [else-branch 10356] 4 != 2
(pop) ; 5105
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5105
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5105
; 0,00s
; (get-info :all-statistics)
(push) ; 5105
; [then-branch 10357] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10358] 4 == 2
(push) ; 5106
; [else-branch 10358] 4 != 2
(pop) ; 5106
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5106
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5106
; 0,00s
; (get-info :all-statistics)
(push) ; 5106
; [then-branch 10359] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10360] 4 == 2
(push) ; 5107
; [else-branch 10360] 4 != 2
(pop) ; 5107
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5107
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5107
; 0,00s
; (get-info :all-statistics)
(push) ; 5107
; [then-branch 10361] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10362] 4 == 2
(push) ; 5108
; [else-branch 10362] 4 != 2
(pop) ; 5108
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5108
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5108
; 0,00s
; (get-info :all-statistics)
(push) ; 5108
; [then-branch 10363] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10364] 4 == 2
(push) ; 5109
; [else-branch 10364] 4 != 2
(pop) ; 5109
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5109
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5109
; 0,00s
; (get-info :all-statistics)
(push) ; 5109
; [then-branch 10365] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10366] 4 == 2
(push) ; 5110
; [else-branch 10366] 4 != 2
(pop) ; 5110
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5110
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5110
; 0,00s
; (get-info :all-statistics)
(push) ; 5110
; [then-branch 10367] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10368] 4 == 2
(push) ; 5111
; [else-branch 10368] 4 != 2
(pop) ; 5111
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5111
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5111
; 0,00s
; (get-info :all-statistics)
(push) ; 5111
; [then-branch 10369] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10370] 4 == 2
(push) ; 5112
; [else-branch 10370] 4 != 2
(pop) ; 5112
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5112
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5112
; 0,00s
; (get-info :all-statistics)
(push) ; 5112
; [then-branch 10371] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10372] 4 == 2
(push) ; 5113
; [else-branch 10372] 4 != 2
(pop) ; 5113
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5113
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5113
; 0,00s
; (get-info :all-statistics)
(push) ; 5113
; [then-branch 10373] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10374] 4 == 2
(push) ; 5114
; [else-branch 10374] 4 != 2
(pop) ; 5114
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5114
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5114
; 0,00s
; (get-info :all-statistics)
(push) ; 5114
; [then-branch 10375] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10376] 4 == 2
(push) ; 5115
; [else-branch 10376] 4 != 2
(pop) ; 5115
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5115
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5115
; 0,00s
; (get-info :all-statistics)
(push) ; 5115
; [then-branch 10377] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10378] 4 == 2
(push) ; 5116
; [else-branch 10378] 4 != 2
(pop) ; 5116
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5116
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5116
; 0,00s
; (get-info :all-statistics)
(push) ; 5116
; [then-branch 10379] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10380] 4 == 2
(push) ; 5117
; [else-branch 10380] 4 != 2
(pop) ; 5117
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5117
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5117
; 0,00s
; (get-info :all-statistics)
(push) ; 5117
; [then-branch 10381] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10382] 4 == 2
(push) ; 5118
; [else-branch 10382] 4 != 2
(pop) ; 5118
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5118
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5118
; 0,00s
; (get-info :all-statistics)
(push) ; 5118
; [then-branch 10383] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10384] 4 == 2
(push) ; 5119
; [else-branch 10384] 4 != 2
(pop) ; 5119
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5119
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5119
; 0,00s
; (get-info :all-statistics)
(push) ; 5119
; [then-branch 10385] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10386] 4 == 2
(push) ; 5120
; [else-branch 10386] 4 != 2
(pop) ; 5120
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5120
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5120
; 0,00s
; (get-info :all-statistics)
(push) ; 5120
; [then-branch 10387] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10388] 4 == 2
(push) ; 5121
; [else-branch 10388] 4 != 2
(pop) ; 5121
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5121
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5121
; 0,00s
; (get-info :all-statistics)
(push) ; 5121
; [then-branch 10389] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10390] 4 == 2
(push) ; 5122
; [else-branch 10390] 4 != 2
(pop) ; 5122
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5122
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5122
; 0,00s
; (get-info :all-statistics)
(push) ; 5122
; [then-branch 10391] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10392] 4 == 2
(push) ; 5123
; [else-branch 10392] 4 != 2
(pop) ; 5123
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5123
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5123
; 0,00s
; (get-info :all-statistics)
(push) ; 5123
; [then-branch 10393] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10394] 4 == 2
(push) ; 5124
; [else-branch 10394] 4 != 2
(pop) ; 5124
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5124
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5124
; 0,00s
; (get-info :all-statistics)
(push) ; 5124
; [then-branch 10395] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10396] 4 == 2
(push) ; 5125
; [else-branch 10396] 4 != 2
(pop) ; 5125
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5125
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5125
; 0,00s
; (get-info :all-statistics)
(push) ; 5125
; [then-branch 10397] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10398] 4 == 2
(push) ; 5126
; [else-branch 10398] 4 != 2
(pop) ; 5126
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5126
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5126
; 0,00s
; (get-info :all-statistics)
(push) ; 5126
; [then-branch 10399] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10400] 4 == 2
(push) ; 5127
; [else-branch 10400] 4 != 2
(pop) ; 5127
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5127
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5127
; 0,00s
; (get-info :all-statistics)
(push) ; 5127
; [then-branch 10401] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10402] 4 == 2
(push) ; 5128
; [else-branch 10402] 4 != 2
(pop) ; 5128
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5128
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5128
; 0,00s
; (get-info :all-statistics)
(push) ; 5128
; [then-branch 10403] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10404] 4 == 2
(push) ; 5129
; [else-branch 10404] 4 != 2
(pop) ; 5129
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5129
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5129
; 0,00s
; (get-info :all-statistics)
(push) ; 5129
; [then-branch 10405] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10406] 4 == 2
(push) ; 5130
; [else-branch 10406] 4 != 2
(pop) ; 5130
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5130
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5130
; 0,00s
; (get-info :all-statistics)
(push) ; 5130
; [then-branch 10407] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10408] 4 == 2
(push) ; 5131
; [else-branch 10408] 4 != 2
(pop) ; 5131
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5131
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5131
; 0,00s
; (get-info :all-statistics)
(push) ; 5131
; [then-branch 10409] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10410] 4 == 2
(push) ; 5132
; [else-branch 10410] 4 != 2
(pop) ; 5132
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5132
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5132
; 0,00s
; (get-info :all-statistics)
(push) ; 5132
; [then-branch 10411] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10412] 4 == 2
(push) ; 5133
; [else-branch 10412] 4 != 2
(pop) ; 5133
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5133
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5133
; 0,00s
; (get-info :all-statistics)
(push) ; 5133
; [then-branch 10413] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10414] 4 == 2
(push) ; 5134
; [else-branch 10414] 4 != 2
(pop) ; 5134
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5134
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5134
; 0,00s
; (get-info :all-statistics)
(push) ; 5134
; [then-branch 10415] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10416] 4 == 2
(push) ; 5135
; [else-branch 10416] 4 != 2
(pop) ; 5135
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5135
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5135
; 0,00s
; (get-info :all-statistics)
(push) ; 5135
; [then-branch 10417] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10418] 4 == 2
(push) ; 5136
; [else-branch 10418] 4 != 2
(pop) ; 5136
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5136
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5136
; 0,00s
; (get-info :all-statistics)
(push) ; 5136
; [then-branch 10419] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10420] 4 == 2
(push) ; 5137
; [else-branch 10420] 4 != 2
(pop) ; 5137
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5137
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5137
; 0,00s
; (get-info :all-statistics)
(push) ; 5137
; [then-branch 10421] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10422] 4 == 2
(push) ; 5138
; [else-branch 10422] 4 != 2
(pop) ; 5138
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5138
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5138
; 0,00s
; (get-info :all-statistics)
(push) ; 5138
; [then-branch 10423] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10424] 4 == 2
(push) ; 5139
; [else-branch 10424] 4 != 2
(pop) ; 5139
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5139
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5139
; 0,00s
; (get-info :all-statistics)
(push) ; 5139
; [then-branch 10425] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10426] 4 == 2
(push) ; 5140
; [else-branch 10426] 4 != 2
(pop) ; 5140
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5140
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5140
; 0,00s
; (get-info :all-statistics)
(push) ; 5140
; [then-branch 10427] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10428] 4 == 2
(push) ; 5141
; [else-branch 10428] 4 != 2
(pop) ; 5141
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5141
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5141
; 0,00s
; (get-info :all-statistics)
(push) ; 5141
; [then-branch 10429] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10430] 4 == 2
(push) ; 5142
; [else-branch 10430] 4 != 2
(pop) ; 5142
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5142
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5142
; 0,00s
; (get-info :all-statistics)
(push) ; 5142
; [then-branch 10431] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10432] 4 == 2
(push) ; 5143
; [else-branch 10432] 4 != 2
(pop) ; 5143
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5143
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5143
; 0,00s
; (get-info :all-statistics)
(push) ; 5143
; [then-branch 10433] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10434] 4 == 2
(push) ; 5144
; [else-branch 10434] 4 != 2
(pop) ; 5144
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5144
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5144
; 0,00s
; (get-info :all-statistics)
(push) ; 5144
; [then-branch 10435] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10436] 4 == 2
(push) ; 5145
; [else-branch 10436] 4 != 2
(pop) ; 5145
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5145
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5145
; 0,00s
; (get-info :all-statistics)
(push) ; 5145
; [then-branch 10437] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10438] 4 == 2
(push) ; 5146
; [else-branch 10438] 4 != 2
(pop) ; 5146
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5146
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5146
; 0,00s
; (get-info :all-statistics)
(push) ; 5146
; [then-branch 10439] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10440] 4 == 2
(push) ; 5147
; [else-branch 10440] 4 != 2
(pop) ; 5147
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5147
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5147
; 0,00s
; (get-info :all-statistics)
(push) ; 5147
; [then-branch 10441] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10442] 4 == 2
(push) ; 5148
; [else-branch 10442] 4 != 2
(pop) ; 5148
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5148
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5148
; 0,00s
; (get-info :all-statistics)
(push) ; 5148
; [then-branch 10443] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10444] 4 == 2
(push) ; 5149
; [else-branch 10444] 4 != 2
(pop) ; 5149
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5149
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5149
; 0,00s
; (get-info :all-statistics)
(push) ; 5149
; [then-branch 10445] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10446] 4 == 2
(push) ; 5150
; [else-branch 10446] 4 != 2
(pop) ; 5150
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5150
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5150
; 0,00s
; (get-info :all-statistics)
(push) ; 5150
; [then-branch 10447] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10448] 4 == 2
(push) ; 5151
; [else-branch 10448] 4 != 2
(pop) ; 5151
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5151
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5151
; 0,00s
; (get-info :all-statistics)
(push) ; 5151
; [then-branch 10449] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10450] 4 == 2
(push) ; 5152
; [else-branch 10450] 4 != 2
(pop) ; 5152
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5152
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5152
; 0,00s
; (get-info :all-statistics)
(push) ; 5152
; [then-branch 10451] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10452] 4 == 2
(push) ; 5153
; [else-branch 10452] 4 != 2
(pop) ; 5153
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5153
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5153
; 0,00s
; (get-info :all-statistics)
(push) ; 5153
; [then-branch 10453] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10454] 4 == 2
(push) ; 5154
; [else-branch 10454] 4 != 2
(pop) ; 5154
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5154
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5154
; 0,00s
; (get-info :all-statistics)
(push) ; 5154
; [then-branch 10455] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10456] 4 == 2
(push) ; 5155
; [else-branch 10456] 4 != 2
(pop) ; 5155
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5155
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5155
; 0,00s
; (get-info :all-statistics)
(push) ; 5155
; [then-branch 10457] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10458] 4 == 2
(push) ; 5156
; [else-branch 10458] 4 != 2
(pop) ; 5156
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5156
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5156
; 0,00s
; (get-info :all-statistics)
(push) ; 5156
; [then-branch 10459] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10460] 4 == 2
(push) ; 5157
; [else-branch 10460] 4 != 2
(pop) ; 5157
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5157
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5157
; 0,00s
; (get-info :all-statistics)
(push) ; 5157
; [then-branch 10461] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10462] 4 == 2
(push) ; 5158
; [else-branch 10462] 4 != 2
(pop) ; 5158
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5158
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5158
; 0,00s
; (get-info :all-statistics)
(push) ; 5158
; [then-branch 10463] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10464] 4 == 2
(push) ; 5159
; [else-branch 10464] 4 != 2
(pop) ; 5159
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5159
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5159
; 0,00s
; (get-info :all-statistics)
(push) ; 5159
; [then-branch 10465] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10466] 4 == 2
(push) ; 5160
; [else-branch 10466] 4 != 2
(pop) ; 5160
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5160
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5160
; 0,00s
; (get-info :all-statistics)
(push) ; 5160
; [then-branch 10467] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10468] 4 == 2
(push) ; 5161
; [else-branch 10468] 4 != 2
(pop) ; 5161
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5161
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5161
; 0,00s
; (get-info :all-statistics)
(push) ; 5161
; [then-branch 10469] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10470] 4 == 2
(push) ; 5162
; [else-branch 10470] 4 != 2
(pop) ; 5162
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5162
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5162
; 0,00s
; (get-info :all-statistics)
(push) ; 5162
; [then-branch 10471] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10472] 4 == 2
(push) ; 5163
; [else-branch 10472] 4 != 2
(pop) ; 5163
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5163
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5163
; 0,00s
; (get-info :all-statistics)
(push) ; 5163
; [then-branch 10473] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10474] 4 == 2
(push) ; 5164
; [else-branch 10474] 4 != 2
(pop) ; 5164
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5164
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5164
; 0,00s
; (get-info :all-statistics)
(push) ; 5164
; [then-branch 10475] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10476] 4 == 2
(push) ; 5165
; [else-branch 10476] 4 != 2
(pop) ; 5165
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5165
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5165
; 0,00s
; (get-info :all-statistics)
(push) ; 5165
; [then-branch 10477] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10478] 4 == 2
(push) ; 5166
; [else-branch 10478] 4 != 2
(pop) ; 5166
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5166
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5166
; 0,00s
; (get-info :all-statistics)
(push) ; 5166
; [then-branch 10479] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10480] 4 == 2
(push) ; 5167
; [else-branch 10480] 4 != 2
(pop) ; 5167
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5167
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5167
; 0,00s
; (get-info :all-statistics)
(push) ; 5167
; [then-branch 10481] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10482] 4 == 2
(push) ; 5168
; [else-branch 10482] 4 != 2
(pop) ; 5168
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5168
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5168
; 0,00s
; (get-info :all-statistics)
(push) ; 5168
; [then-branch 10483] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10484] 4 == 2
(push) ; 5169
; [else-branch 10484] 4 != 2
(pop) ; 5169
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5169
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5169
; 0,00s
; (get-info :all-statistics)
(push) ; 5169
; [then-branch 10485] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10486] 4 == 2
(push) ; 5170
; [else-branch 10486] 4 != 2
(pop) ; 5170
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5170
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5170
; 0,00s
; (get-info :all-statistics)
(push) ; 5170
; [then-branch 10487] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10488] 4 == 2
(push) ; 5171
; [else-branch 10488] 4 != 2
(pop) ; 5171
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5171
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5171
; 0,00s
; (get-info :all-statistics)
(push) ; 5171
; [then-branch 10489] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10490] 4 == 2
(push) ; 5172
; [else-branch 10490] 4 != 2
(pop) ; 5172
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5172
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5172
; 0,00s
; (get-info :all-statistics)
(push) ; 5172
; [then-branch 10491] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10492] 4 == 2
(push) ; 5173
; [else-branch 10492] 4 != 2
(pop) ; 5173
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5173
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5173
; 0,00s
; (get-info :all-statistics)
(push) ; 5173
; [then-branch 10493] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10494] 4 == 2
(push) ; 5174
; [else-branch 10494] 4 != 2
(pop) ; 5174
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5174
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5174
; 0,00s
; (get-info :all-statistics)
(push) ; 5174
; [then-branch 10495] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10496] 4 == 2
(push) ; 5175
; [else-branch 10496] 4 != 2
(pop) ; 5175
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5175
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5175
; 0,00s
; (get-info :all-statistics)
(push) ; 5175
; [then-branch 10497] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10498] 4 == 2
(push) ; 5176
; [else-branch 10498] 4 != 2
(pop) ; 5176
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5176
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5176
; 0,00s
; (get-info :all-statistics)
(push) ; 5176
; [then-branch 10499] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10500] 4 == 2
(push) ; 5177
; [else-branch 10500] 4 != 2
(pop) ; 5177
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5177
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5177
; 0,00s
; (get-info :all-statistics)
(push) ; 5177
; [then-branch 10501] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10502] 4 == 2
(push) ; 5178
; [else-branch 10502] 4 != 2
(pop) ; 5178
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5178
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5178
; 0,00s
; (get-info :all-statistics)
(push) ; 5178
; [then-branch 10503] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10504] 4 == 2
(push) ; 5179
; [else-branch 10504] 4 != 2
(pop) ; 5179
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5179
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5179
; 0,00s
; (get-info :all-statistics)
(push) ; 5179
; [then-branch 10505] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10506] 4 == 2
(push) ; 5180
; [else-branch 10506] 4 != 2
(pop) ; 5180
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5180
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5180
; 0,00s
; (get-info :all-statistics)
(push) ; 5180
; [then-branch 10507] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10508] 4 == 2
(push) ; 5181
; [else-branch 10508] 4 != 2
(pop) ; 5181
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5181
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5181
; 0,00s
; (get-info :all-statistics)
(push) ; 5181
; [then-branch 10509] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10510] 4 == 2
(push) ; 5182
; [else-branch 10510] 4 != 2
(pop) ; 5182
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5182
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5182
; 0,00s
; (get-info :all-statistics)
(push) ; 5182
; [then-branch 10511] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10512] 4 == 2
(push) ; 5183
; [else-branch 10512] 4 != 2
(pop) ; 5183
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5183
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5183
; 0,00s
; (get-info :all-statistics)
(push) ; 5183
; [then-branch 10513] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10514] 4 == 2
(push) ; 5184
; [else-branch 10514] 4 != 2
(pop) ; 5184
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5184
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5184
; 0,00s
; (get-info :all-statistics)
(push) ; 5184
; [then-branch 10515] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10516] 4 == 2
(push) ; 5185
; [else-branch 10516] 4 != 2
(pop) ; 5185
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5185
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5185
; 0,00s
; (get-info :all-statistics)
(push) ; 5185
; [then-branch 10517] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10518] 4 == 2
(push) ; 5186
; [else-branch 10518] 4 != 2
(pop) ; 5186
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5186
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5186
; 0,00s
; (get-info :all-statistics)
(push) ; 5186
; [then-branch 10519] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10520] 4 == 2
(push) ; 5187
; [else-branch 10520] 4 != 2
(pop) ; 5187
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5187
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5187
; 0,00s
; (get-info :all-statistics)
(push) ; 5187
; [then-branch 10521] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10522] 4 == 2
(push) ; 5188
; [else-branch 10522] 4 != 2
(pop) ; 5188
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5188
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5188
; 0,00s
; (get-info :all-statistics)
(push) ; 5188
; [then-branch 10523] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10524] 4 == 2
(push) ; 5189
; [else-branch 10524] 4 != 2
(pop) ; 5189
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5189
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5189
; 0,00s
; (get-info :all-statistics)
(push) ; 5189
; [then-branch 10525] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10526] 4 == 2
(push) ; 5190
; [else-branch 10526] 4 != 2
(pop) ; 5190
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5190
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5190
; 0,00s
; (get-info :all-statistics)
(push) ; 5190
; [then-branch 10527] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10528] 4 == 2
(push) ; 5191
; [else-branch 10528] 4 != 2
(pop) ; 5191
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5191
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5191
; 0,00s
; (get-info :all-statistics)
(push) ; 5191
; [then-branch 10529] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10530] 4 == 2
(push) ; 5192
; [else-branch 10530] 4 != 2
(pop) ; 5192
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5192
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5192
; 0,00s
; (get-info :all-statistics)
(push) ; 5192
; [then-branch 10531] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10532] 4 == 2
(push) ; 5193
; [else-branch 10532] 4 != 2
(pop) ; 5193
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5193
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5193
; 0,00s
; (get-info :all-statistics)
(push) ; 5193
; [then-branch 10533] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10534] 4 == 2
(push) ; 5194
; [else-branch 10534] 4 != 2
(pop) ; 5194
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5194
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5194
; 0,00s
; (get-info :all-statistics)
(push) ; 5194
; [then-branch 10535] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10536] 4 == 2
(push) ; 5195
; [else-branch 10536] 4 != 2
(pop) ; 5195
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5195
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5195
; 0,00s
; (get-info :all-statistics)
(push) ; 5195
; [then-branch 10537] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10538] 4 == 2
(push) ; 5196
; [else-branch 10538] 4 != 2
(pop) ; 5196
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5196
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5196
; 0,00s
; (get-info :all-statistics)
(push) ; 5196
; [then-branch 10539] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10540] 4 == 2
(push) ; 5197
; [else-branch 10540] 4 != 2
(pop) ; 5197
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5197
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5197
; 0,00s
; (get-info :all-statistics)
(push) ; 5197
; [then-branch 10541] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10542] 4 == 2
(push) ; 5198
; [else-branch 10542] 4 != 2
(pop) ; 5198
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5198
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5198
; 0,00s
; (get-info :all-statistics)
(push) ; 5198
; [then-branch 10543] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10544] 4 == 2
(push) ; 5199
; [else-branch 10544] 4 != 2
(pop) ; 5199
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5199
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5199
; 0,00s
; (get-info :all-statistics)
(push) ; 5199
; [then-branch 10545] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10546] 4 == 2
(push) ; 5200
; [else-branch 10546] 4 != 2
(pop) ; 5200
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5200
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5200
; 0,00s
; (get-info :all-statistics)
(push) ; 5200
; [then-branch 10547] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10548] 4 == 2
(push) ; 5201
; [else-branch 10548] 4 != 2
(pop) ; 5201
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5201
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5201
; 0,00s
; (get-info :all-statistics)
(push) ; 5201
; [then-branch 10549] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10550] 4 == 2
(push) ; 5202
; [else-branch 10550] 4 != 2
(pop) ; 5202
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5202
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5202
; 0,00s
; (get-info :all-statistics)
(push) ; 5202
; [then-branch 10551] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10552] 4 == 2
(push) ; 5203
; [else-branch 10552] 4 != 2
(pop) ; 5203
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5203
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5203
; 0,00s
; (get-info :all-statistics)
(push) ; 5203
; [then-branch 10553] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10554] 4 == 2
(push) ; 5204
; [else-branch 10554] 4 != 2
(pop) ; 5204
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5204
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5204
; 0,00s
; (get-info :all-statistics)
(push) ; 5204
; [then-branch 10555] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10556] 4 == 2
(push) ; 5205
; [else-branch 10556] 4 != 2
(pop) ; 5205
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5205
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5205
; 0,00s
; (get-info :all-statistics)
(push) ; 5205
; [then-branch 10557] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10558] 4 == 2
(push) ; 5206
; [else-branch 10558] 4 != 2
(pop) ; 5206
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5206
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5206
; 0,00s
; (get-info :all-statistics)
(push) ; 5206
; [then-branch 10559] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10560] 4 == 2
(push) ; 5207
; [else-branch 10560] 4 != 2
(pop) ; 5207
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5207
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5207
; 0,00s
; (get-info :all-statistics)
(push) ; 5207
; [then-branch 10561] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10562] 4 == 2
(push) ; 5208
; [else-branch 10562] 4 != 2
(pop) ; 5208
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5208
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5208
; 0,00s
; (get-info :all-statistics)
(push) ; 5208
; [then-branch 10563] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10564] 4 == 2
(push) ; 5209
; [else-branch 10564] 4 != 2
(pop) ; 5209
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5209
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5209
; 0,00s
; (get-info :all-statistics)
(push) ; 5209
; [then-branch 10565] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10566] 4 == 2
(push) ; 5210
; [else-branch 10566] 4 != 2
(pop) ; 5210
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5210
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5210
; 0,00s
; (get-info :all-statistics)
(push) ; 5210
; [then-branch 10567] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10568] 4 == 2
(push) ; 5211
; [else-branch 10568] 4 != 2
(pop) ; 5211
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5211
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5211
; 0,00s
; (get-info :all-statistics)
(push) ; 5211
; [then-branch 10569] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10570] 4 == 2
(push) ; 5212
; [else-branch 10570] 4 != 2
(pop) ; 5212
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5212
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5212
; 0,00s
; (get-info :all-statistics)
(push) ; 5212
; [then-branch 10571] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10572] 4 == 2
(push) ; 5213
; [else-branch 10572] 4 != 2
(pop) ; 5213
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5213
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5213
; 0,00s
; (get-info :all-statistics)
(push) ; 5213
; [then-branch 10573] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
; [dead then-branch 10574] 4 == 2
(push) ; 5214
; [else-branch 10574] 4 != 2
(pop) ; 5214
; [eval] !(a3 == 2)
; [eval] a3 == 2
(push) ; 5214
(assert (not (= 4 2)))
(check-sat)
; unknown
(pop) ; 5214
; 0,00s
; (get-info :all-statistics)
(push) ; 5214
; [then-branch 10575] 4 != 2
; [exec]
; label hello
; [exec]
; a3 := 4
; [exec]
; assert a3 == 4
; [eval] a3 == 4
; [eval] a3 == 2
